Metadata-Version: 2.4
Name: agnosmodel2
Version: 0.0.1a0
Summary: Universal Generative AI provider interface ‚Äî switch providers without changing code.
Author-email: gauravkg32 <agnosweaver@gmail.com>
License-Expression: PolyForm-Noncommercial-1.0.0
Project-URL: Homepage, https://github.com/agnosweaver/agnosmodel2
Project-URL: Repository, https://github.com/agnosweaver/agnosmodel2
Project-URL: License, https://polyformproject.org/licenses/noncommercial/1.0.0
Keywords: generative-ai,provider,agnostic,ai,agnosweaver
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: plus
Requires-Dist: requests>=2.0; extra == "plus"
Requires-Dist: aiohttp>=3.8; extra == "plus"
Requires-Dist: websockets>=10.0; extra == "plus"
Provides-Extra: http
Requires-Dist: requests>=2.0; extra == "http"
Requires-Dist: aiohttp>=3.8; extra == "http"
Provides-Extra: ws
Requires-Dist: websockets>=10.0; extra == "ws"
Dynamic: license-file

# agnosmodel2 - Universal GenAI Provider Abstraction

[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)
[![License: PolyForm NC](https://img.shields.io/badge/license-PolyForm%20NC-brightgreen)](https://polyformproject.org/licenses/noncommercial/1.0.0)

> **‚ö†Ô∏è Alpha Release** - This is the debut release of agnosmodel2. While functional, the API may change in future versions.

**Universal Generative AI Provider Interface** - Switch between any GenAI provider (OpenAI, Anthropic, local models) without changing your code. Define providers once, switch seamlessly at runtime.

Part of the Agnosweaver‚Ñ¢ project suite.

## üî• Why agnosmodel2?

Tired of AI vendor lock-in? Frustrated with rewriting code every time you want to try a different model? **agnosmodel2** solves this by providing a unified interface across all GenAI providers.

```python
# Define once, switch anytime
manager = GenManager()
manager.add_provider('gpt', 'openai', {'model': 'gpt-4', 'api_key': '...'})
manager.add_provider('claude', 'anthropic', {'model': 'claude-3', 'api_key': '...'})

response = manager.generate("Hello world")  # Uses current provider
manager.switch_provider('claude')
response = manager.generate("Hello world")  # Now uses Claude - same code!
```

## ‚ú® Features

- **üîÑ Provider Agnostic**: Switch between OpenAI, Anthropic, local models, or any GenAI provider
- **üìä Datatype Agnostic**: Handle JSON, XML, binary, protobuf, or any data format seamlessly
- **üèóÔ∏è Extensible Architecture**: Bring-your-own provider implementations
- **‚ö° Sync & Async**: Full support for both synchronous and asynchronous operations
- **üåä Streaming Support**: Real-time streaming responses when supported by providers
- **üì¶ Minimal Core**: Lightweight interface without bloat
- **üéØ Standardized Responses**: Consistent response format across all providers
- **üîå Plugin System**: Registry-based provider discovery and registration

## üì¶ Installation

```bash
# PyPI
pip install agnosmodel2

# GitHub
pip install git+https://github.com/agnosweaver/agnosmodel2.git
```

**Requirements**: Python 3.11 or higher

## üöÄ Quick Start

### 1. Basic Setup

```python
from agnosmodel2 import GenManager, ProviderRegistry, BaseGenProvider

# Create manager
manager = GenManager()
```

### 2. Implement a Provider

Since agnosmodel2 provides the core interface, you need to implement providers for your specific needs:

```python
class OpenAIProvider(BaseGenProvider):
    def generate(self, prompt: str, **kwargs):
        # Your OpenAI implementation
        response = self.call_openai_api(prompt)
        return GenResponse(
            content=response.text,
            provider=self.name,
            model=self.model,
            timestamp=datetime.now().isoformat(),
            content_type="text/plain"
        )
    
    async def agenerate(self, prompt: str, **kwargs):
        # Your async OpenAI implementation
        pass
    
    def validate(self):
        return 'api_key' in self.config

# Register your provider
ProviderRegistry.register('openai', OpenAIProvider)
```

### 3. Use It!

```python
# Add providers
manager.add_provider('gpt4', 'openai', {
    'model': 'gpt-4',
    'api_key': 'your-key'
})

manager.add_provider('claude', 'anthropic', {
    'model': 'claude-3-sonnet',
    'api_key': 'your-key'
})

# Generate responses
response = manager.generate("Explain quantum computing")
print(f"Response from {response.provider}: {response.content}")

# Switch providers seamlessly
manager.switch_provider('claude')
response = manager.generate("Explain quantum computing")  # Same call, different provider!
```

## üéØ Common Use Cases

### Model A/B Testing
```python
# Test different models with the same prompt
results = {}
for provider in ['gpt4', 'claude', 'local-llama']:
    manager.switch_provider(provider)
    response = manager.generate("Write a haiku about AI")
    results[provider] = response.content
```

### Fallback Strategy
```python
def generate_with_fallback(prompt):
    providers = ['premium-model', 'standard-model', 'local-backup']
    
    for provider in providers:
        try:
            manager.switch_provider(provider)
            return manager.generate(prompt)
        except Exception as e:
            print(f"{provider} failed: {e}")
            continue
    
    raise Exception("All providers failed")
```

### Cost Optimization
```python
# Route simple queries to cheaper models
def smart_generate(prompt):
    if len(prompt) < 100:
        manager.switch_provider('gpt-3.5')
    else:
        manager.switch_provider('gpt-4')
    
    return manager.generate(prompt)
```

### Streaming Responses
```python
# Stream from any provider that supports it
for chunk in manager.generate_stream("Tell me a long story"):
    print(chunk.content, end='', flush=True)
    if chunk.is_final:
        break
```

### Multi-Modal Generation
```python
# Stream from any provider that supports it
for chunk in manager.generate_stream("Tell me a long story"):
    print(chunk.content, end='', flush=True)
    if chunk.is_final:
        break

# Handle different data types seamlessly
audio_response = manager.generate("Say hello", output_type="audio")
video_response = manager.generate("Create a short clip", output_type="video")

# Content can be any type: str, bytes, custom objects
if isinstance(audio_response.content, bytes):
    with open("output.wav", "wb") as f:
        f.write(audio_response.content)
```

## üìö API Reference

### Core Classes

#### `GenManager`
Main interface for managing and switching between providers.

**Methods:**
- `add_provider(name, provider_type, config)` - Add a new provider
- `switch_provider(name)` - Switch to a different provider
- `generate(prompt, **kwargs)` - Generate content synchronously
- `agenerate(prompt, **kwargs)` - Generate content asynchronously
- `generate_stream(prompt, **kwargs)` - Stream content synchronously
- `agenerate_stream(prompt, **kwargs)` - Stream content asynchronously

#### `BaseGenProvider`
Abstract base class for all providers.

**Must Implement:**
- `generate(prompt, **kwargs)` - Sync generation
- `agenerate(prompt, **kwargs)` - Async generation
- `validate()` - Configuration validation

**Optional Override:**
- `generate_stream(prompt, **kwargs)` - Sync streaming
- `agenerate_stream(prompt, **kwargs)` - Async streaming

#### `ProviderRegistry`
Registry for provider discovery and instantiation.

**Methods:**
- `register(provider_type, provider_class)` - Register a provider class
- `create(provider_type, name, config)` - Create provider instance
- `list_types()` - List registered provider types

### Data Structures

#### `GenResponse`
```python
@dataclass
class GenResponse:
    content: Union[str, bytes, Any]
    provider: str
    model: str
    timestamp: str
    content_type: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None
```

#### `GenStreamChunk`
```python
@dataclass
class GenStreamChunk:
    content: Union[str, bytes, Any]
    provider: str
    model: str
    timestamp: str
    content_type: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None
    is_final: bool = False
```

## üèóÔ∏è Architecture

agnosmodel2 follows a clean, extensible architecture:

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   GenManager    ‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÇ ProviderRegistry ‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÇ BaseGenProvider ‚îÇ
‚îÇ   (Router)      ‚îÇ    ‚îÇ   (Discovery)    ‚îÇ    ‚îÇ (Implementation)‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
         ‚îÇ                       ‚îÇ                      ‚îÇ
         ‚îÇ              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê             ‚îÇ
         ‚îÇ              ‚îÇ                 ‚îÇ             ‚îÇ
         ‚ñº              ‚ñº                 ‚ñº             ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Your App Code  ‚îÇ ‚îÇ OpenAI   ‚îÇ ‚îÇ  Anthropic   ‚îÇ ‚îÇ Local Model  ‚îÇ
‚îÇ                 ‚îÇ ‚îÇ Provider ‚îÇ ‚îÇ   Provider   ‚îÇ ‚îÇ   Provider   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

**Key Principles:**
- **Separation of Concerns**: Core routing logic separate from provider implementations
- **Plugin Architecture**: Providers register themselves via the registry
- **Consistent Interface**: All providers expose the same methods
- **Transport Agnostic**: Supports HTTP, gRPC, local calls, anything

## ‚ö° Advanced Features

### Custom Transport Layer
```python
class HTTPTransport(BaseModelTransport):
    def send(self, request_data, **kwargs):
        # Custom HTTP implementation
        pass

class gRPCTransport(BaseModelTransport):
    def send(self, request_data, **kwargs):
        # Custom gRPC implementation
        pass
```

### Response Parsing
```python
class JSONResponseParser(BaseResponseParser):
    def parse_response(self, raw_response):
        return json.loads(raw_response)['content']
    
    def get_content_type(self, raw_response):
        return "application/json"
```

## ü§ù Contributing

**Coming Soon**: A dedicated repository for community contributions and ideas is being set up. Stay tuned!

For now, if you have suggestions or find issues, please reach out via email.

## üìÑ License

Licensed under the [PolyForm Noncommercial License 1.0.0](LICENSE).

**‚ö†Ô∏è Important**: This license **prohibits commercial use**. If you need to use agnosmodel2 in a commercial project, please contact [agnosweaver@gmail.com](mailto:agnosweaver@gmail.com) for a commercial license.

## üìû Contact

- **Email**: [agnosweaver@gmail.com](mailto:agnosweaver@gmail.com)
- **Project**: Part of the Agnosweaver‚Ñ¢ project suite
- **Repository**: [https://github.com/agnosweaver/agnosmodel2](https://github.com/agnosweaver/agnosmodel2)

---

**Built for developers who hate being boxed in.**

*Pick, switch, and combine GenAI providers freely.*
