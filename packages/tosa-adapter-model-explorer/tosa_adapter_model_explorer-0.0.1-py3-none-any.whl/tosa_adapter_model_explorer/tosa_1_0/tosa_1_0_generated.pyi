from __future__ import annotations

import flatbuffers
import numpy as np

import flatbuffers
import typing
from flatbuffers import table

uoffset: typing.TypeAlias = flatbuffers.number_types.UOffsetTFlags.py_type

class DType(object):
  UNKNOWN: int
  BOOL: int
  INT4: int
  INT8: int
  INT16: int
  INT32: int
  INT48: int
  FP32: int
  FP16: int
  BF16: int
  SHAPE: int
  FP8E4M3: int
  FP8E5M2: int
class ResizeMode(object):
  UNKNOWN: int
  NEAREST: int
  BILINEAR: int
class NanPropagationMode(object):
  UNKNOWN: int
  PROPAGATE: int
  IGNORE: int
class RoundingMode(object):
  UNKNOWN: int
  SINGLE_ROUND: int
  INEXACT_ROUND: int
  DOUBLE_ROUND: int
class Op(object):
  UNKNOWN: int
  ARGMAX: int
  AVG_POOL2D: int
  CONV2D: int
  CONV3D: int
  DEPTHWISE_CONV2D: int
  FFT2D: int
  MATMUL: int
  MAX_POOL2D: int
  RFFT2D: int
  TRANSPOSE_CONV2D: int
  CLAMP: int
  ERF: int
  SIGMOID: int
  TANH: int
  ADD: int
  ARITHMETIC_RIGHT_SHIFT: int
  BITWISE_AND: int
  BITWISE_OR: int
  BITWISE_XOR: int
  INTDIV: int
  LOGICAL_AND: int
  LOGICAL_LEFT_SHIFT: int
  LOGICAL_RIGHT_SHIFT: int
  LOGICAL_OR: int
  LOGICAL_XOR: int
  MAXIMUM: int
  MINIMUM: int
  MUL: int
  POW: int
  SUB: int
  TABLE: int
  ABS: int
  BITWISE_NOT: int
  CEIL: int
  CLZ: int
  COS: int
  EXP: int
  FLOOR: int
  LOG: int
  LOGICAL_NOT: int
  NEGATE: int
  RECIPROCAL: int
  RSQRT: int
  SIN: int
  SELECT: int
  EQUAL: int
  GREATER: int
  GREATER_EQUAL: int
  REDUCE_ALL: int
  REDUCE_ANY: int
  REDUCE_MAX: int
  REDUCE_MIN: int
  REDUCE_PRODUCT: int
  REDUCE_SUM: int
  CONCAT: int
  PAD: int
  RESHAPE: int
  REVERSE: int
  SLICE: int
  TILE: int
  TRANSPOSE: int
  GATHER: int
  SCATTER: int
  RESIZE: int
  CAST: int
  RESCALE: int
  CONST: int
  IDENTITY: int
  CUSTOM: int
  COND_IF: int
  WHILE_LOOP: int
  VARIABLE: int
  VARIABLE_WRITE: int
  VARIABLE_READ: int
  CONST_SHAPE: int
class Attribute(object):
  NONE: int
  ArgMaxAttribute: int
  AvgPool2dAttribute: int
  Conv2dAttribute: int
  Conv3dAttribute: int
  DepthwiseConv2dAttribute: int
  FFT2dAttribute: int
  MatMulAttribute: int
  MaxPool2dAttribute: int
  RFFT2dAttribute: int
  TransposeConv2dAttribute: int
  ClampAttribute: int
  ErfAttribute: int
  SigmoidAttribute: int
  TanhAttribute: int
  AddAttribute: int
  ArithmeticRightShiftAttribute: int
  BitwiseAndAttribute: int
  BitwiseOrAttribute: int
  BitwiseXorAttribute: int
  IntDivAttribute: int
  LogicalAndAttribute: int
  LogicalLeftShiftAttribute: int
  LogicalRightShiftAttribute: int
  LogicalOrAttribute: int
  LogicalXorAttribute: int
  MaximumAttribute: int
  MinimumAttribute: int
  MulAttribute: int
  PowAttribute: int
  SubAttribute: int
  TableAttribute: int
  AbsAttribute: int
  BitwiseNotAttribute: int
  CeilAttribute: int
  ClzAttribute: int
  CosAttribute: int
  ExpAttribute: int
  FloorAttribute: int
  LogAttribute: int
  LogicalNotAttribute: int
  NegateAttribute: int
  ReciprocalAttribute: int
  RsqrtAttribute: int
  SinAttribute: int
  SelectAttribute: int
  EqualAttribute: int
  GreaterAttribute: int
  GreaterEqualAttribute: int
  ReduceAllAttribute: int
  ReduceAnyAttribute: int
  ReduceMaxAttribute: int
  ReduceMinAttribute: int
  ReduceProductAttribute: int
  ReduceSumAttribute: int
  ConcatAttribute: int
  PadAttribute: int
  ReshapeAttribute: int
  ReverseAttribute: int
  SliceAttribute: int
  TileAttribute: int
  TransposeAttribute: int
  GatherAttribute: int
  ScatterAttribute: int
  ResizeAttribute: int
  CastAttribute: int
  RescaleAttribute: int
  ConstAttribute: int
  IdentityAttribute: int
  CustomAttribute: int
  CondIfAttribute: int
  WhileLoopAttribute: int
  VariableAttribute: int
  VariableWriteAttribute: int
  VariableReadAttribute: int
  ConstShapeAttribute: int
def AttributeCreator(union_type: typing.Literal[Attribute.NONE, Attribute.ArgMaxAttribute, Attribute.AvgPool2dAttribute, Attribute.Conv2dAttribute, Attribute.Conv3dAttribute, Attribute.DepthwiseConv2dAttribute, Attribute.FFT2dAttribute, Attribute.MatMulAttribute, Attribute.MaxPool2dAttribute, Attribute.RFFT2dAttribute, Attribute.TransposeConv2dAttribute, Attribute.ClampAttribute, Attribute.ErfAttribute, Attribute.SigmoidAttribute, Attribute.TanhAttribute, Attribute.AddAttribute, Attribute.ArithmeticRightShiftAttribute, Attribute.BitwiseAndAttribute, Attribute.BitwiseOrAttribute, Attribute.BitwiseXorAttribute, Attribute.IntDivAttribute, Attribute.LogicalAndAttribute, Attribute.LogicalLeftShiftAttribute, Attribute.LogicalRightShiftAttribute, Attribute.LogicalOrAttribute, Attribute.LogicalXorAttribute, Attribute.MaximumAttribute, Attribute.MinimumAttribute, Attribute.MulAttribute, Attribute.PowAttribute, Attribute.SubAttribute, Attribute.TableAttribute, Attribute.AbsAttribute, Attribute.BitwiseNotAttribute, Attribute.CeilAttribute, Attribute.ClzAttribute, Attribute.CosAttribute, Attribute.ExpAttribute, Attribute.FloorAttribute, Attribute.LogAttribute, Attribute.LogicalNotAttribute, Attribute.NegateAttribute, Attribute.ReciprocalAttribute, Attribute.RsqrtAttribute, Attribute.SinAttribute, Attribute.SelectAttribute, Attribute.EqualAttribute, Attribute.GreaterAttribute, Attribute.GreaterEqualAttribute, Attribute.ReduceAllAttribute, Attribute.ReduceAnyAttribute, Attribute.ReduceMaxAttribute, Attribute.ReduceMinAttribute, Attribute.ReduceProductAttribute, Attribute.ReduceSumAttribute, Attribute.ConcatAttribute, Attribute.PadAttribute, Attribute.ReshapeAttribute, Attribute.ReverseAttribute, Attribute.SliceAttribute, Attribute.TileAttribute, Attribute.TransposeAttribute, Attribute.GatherAttribute, Attribute.ScatterAttribute, Attribute.ResizeAttribute, Attribute.CastAttribute, Attribute.RescaleAttribute, Attribute.ConstAttribute, Attribute.IdentityAttribute, Attribute.CustomAttribute, Attribute.CondIfAttribute, Attribute.WhileLoopAttribute, Attribute.VariableAttribute, Attribute.VariableWriteAttribute, Attribute.VariableReadAttribute, Attribute.ConstShapeAttribute], table: table.Table) -> typing.Union[None, ArgMaxAttribute, AvgPool2dAttribute, Conv2dAttribute, Conv3dAttribute, DepthwiseConv2dAttribute, FFT2dAttribute, MatMulAttribute, MaxPool2dAttribute, RFFT2dAttribute, TransposeConv2dAttribute, ClampAttribute, ErfAttribute, SigmoidAttribute, TanhAttribute, AddAttribute, ArithmeticRightShiftAttribute, BitwiseAndAttribute, BitwiseOrAttribute, BitwiseXorAttribute, IntDivAttribute, LogicalAndAttribute, LogicalLeftShiftAttribute, LogicalRightShiftAttribute, LogicalOrAttribute, LogicalXorAttribute, MaximumAttribute, MinimumAttribute, MulAttribute, PowAttribute, SubAttribute, TableAttribute, AbsAttribute, BitwiseNotAttribute, CeilAttribute, ClzAttribute, CosAttribute, ExpAttribute, FloorAttribute, LogAttribute, LogicalNotAttribute, NegateAttribute, ReciprocalAttribute, RsqrtAttribute, SinAttribute, SelectAttribute, EqualAttribute, GreaterAttribute, GreaterEqualAttribute, ReduceAllAttribute, ReduceAnyAttribute, ReduceMaxAttribute, ReduceMinAttribute, ReduceProductAttribute, ReduceSumAttribute, ConcatAttribute, PadAttribute, ReshapeAttribute, ReverseAttribute, SliceAttribute, TileAttribute, TransposeAttribute, GatherAttribute, ScatterAttribute, ResizeAttribute, CastAttribute, RescaleAttribute, ConstAttribute, IdentityAttribute, CustomAttribute, CondIfAttribute, WhileLoopAttribute, VariableAttribute, VariableWriteAttribute, VariableReadAttribute, ConstShapeAttribute]: ...
class ArgMaxAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ArgMaxAttribute: ...
  @classmethod
  def GetRootAsArgMaxAttribute(cls, buf: bytes, offset: int) -> ArgMaxAttribute: ...
  @classmethod
  def ArgMaxAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Axis(self) -> int: ...
  def NanMode(self) -> typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]: ...
class ArgMaxAttributeT(object):
  axis: int
  nanMode: typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ArgMaxAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ArgMaxAttributeT: ...
  @classmethod
  def InitFromObj(cls, argMaxAttribute: ArgMaxAttribute) -> ArgMaxAttributeT: ...
  def _UnPack(self, argMaxAttribute: ArgMaxAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ArgMaxAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ArgMaxAttributeAddAxis(builder: flatbuffers.Builder, axis: int) -> None: ...
def ArgMaxAttributeAddNanMode(builder: flatbuffers.Builder, nanMode: typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]) -> None: ...
def ArgMaxAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class AvgPool2dAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> AvgPool2dAttribute: ...
  @classmethod
  def GetRootAsAvgPool2dAttribute(cls, buf: bytes, offset: int) -> AvgPool2dAttribute: ...
  @classmethod
  def AvgPool2dAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Kernel(self, i: int) -> typing.List[int]: ...
  def KernelAsNumpy(self) -> np.ndarray: ...
  def KernelLength(self) -> int: ...
  def KernelIsNone(self) -> bool: ...
  def Stride(self, i: int) -> typing.List[int]: ...
  def StrideAsNumpy(self) -> np.ndarray: ...
  def StrideLength(self) -> int: ...
  def StrideIsNone(self) -> bool: ...
  def Pad(self, i: int) -> typing.List[int]: ...
  def PadAsNumpy(self) -> np.ndarray: ...
  def PadLength(self) -> int: ...
  def PadIsNone(self) -> bool: ...
  def AccType(self) -> typing.Literal[DType.UNKNOWN, DType.BOOL, DType.INT4, DType.INT8, DType.INT16, DType.INT32, DType.INT48, DType.FP32, DType.FP16, DType.BF16, DType.SHAPE, DType.FP8E4M3, DType.FP8E5M2]: ...
class AvgPool2dAttributeT(object):
  kernel: typing.List[int]
  stride: typing.List[int]
  pad: typing.List[int]
  accType: typing.Literal[DType.UNKNOWN, DType.BOOL, DType.INT4, DType.INT8, DType.INT16, DType.INT32, DType.INT48, DType.FP32, DType.FP16, DType.BF16, DType.SHAPE, DType.FP8E4M3, DType.FP8E5M2]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> AvgPool2dAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> AvgPool2dAttributeT: ...
  @classmethod
  def InitFromObj(cls, avgPool2dAttribute: AvgPool2dAttribute) -> AvgPool2dAttributeT: ...
  def _UnPack(self, avgPool2dAttribute: AvgPool2dAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def AvgPool2dAttributeStart(builder: flatbuffers.Builder) -> None: ...
def AvgPool2dAttributeAddKernel(builder: flatbuffers.Builder, kernel: uoffset) -> None: ...
def AvgPool2dAttributeStartKernelVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def AvgPool2dAttributeAddStride(builder: flatbuffers.Builder, stride: uoffset) -> None: ...
def AvgPool2dAttributeStartStrideVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def AvgPool2dAttributeAddPad(builder: flatbuffers.Builder, pad: uoffset) -> None: ...
def AvgPool2dAttributeStartPadVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def AvgPool2dAttributeAddAccType(builder: flatbuffers.Builder, accType: typing.Literal[DType.UNKNOWN, DType.BOOL, DType.INT4, DType.INT8, DType.INT16, DType.INT32, DType.INT48, DType.FP32, DType.FP16, DType.BF16, DType.SHAPE, DType.FP8E4M3, DType.FP8E5M2]) -> None: ...
def AvgPool2dAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class Conv2dAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Conv2dAttribute: ...
  @classmethod
  def GetRootAsConv2dAttribute(cls, buf: bytes, offset: int) -> Conv2dAttribute: ...
  @classmethod
  def Conv2dAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Pad(self, i: int) -> typing.List[int]: ...
  def PadAsNumpy(self) -> np.ndarray: ...
  def PadLength(self) -> int: ...
  def PadIsNone(self) -> bool: ...
  def Stride(self, i: int) -> typing.List[int]: ...
  def StrideAsNumpy(self) -> np.ndarray: ...
  def StrideLength(self) -> int: ...
  def StrideIsNone(self) -> bool: ...
  def Dilation(self, i: int) -> typing.List[int]: ...
  def DilationAsNumpy(self) -> np.ndarray: ...
  def DilationLength(self) -> int: ...
  def DilationIsNone(self) -> bool: ...
  def LocalBound(self) -> bool: ...
  def AccType(self) -> typing.Literal[DType.UNKNOWN, DType.BOOL, DType.INT4, DType.INT8, DType.INT16, DType.INT32, DType.INT48, DType.FP32, DType.FP16, DType.BF16, DType.SHAPE, DType.FP8E4M3, DType.FP8E5M2]: ...
class Conv2dAttributeT(object):
  pad: typing.List[int]
  stride: typing.List[int]
  dilation: typing.List[int]
  localBound: bool
  accType: typing.Literal[DType.UNKNOWN, DType.BOOL, DType.INT4, DType.INT8, DType.INT16, DType.INT32, DType.INT48, DType.FP32, DType.FP16, DType.BF16, DType.SHAPE, DType.FP8E4M3, DType.FP8E5M2]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> Conv2dAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> Conv2dAttributeT: ...
  @classmethod
  def InitFromObj(cls, conv2dAttribute: Conv2dAttribute) -> Conv2dAttributeT: ...
  def _UnPack(self, conv2dAttribute: Conv2dAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def Conv2dAttributeStart(builder: flatbuffers.Builder) -> None: ...
def Conv2dAttributeAddPad(builder: flatbuffers.Builder, pad: uoffset) -> None: ...
def Conv2dAttributeStartPadVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def Conv2dAttributeAddStride(builder: flatbuffers.Builder, stride: uoffset) -> None: ...
def Conv2dAttributeStartStrideVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def Conv2dAttributeAddDilation(builder: flatbuffers.Builder, dilation: uoffset) -> None: ...
def Conv2dAttributeStartDilationVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def Conv2dAttributeAddLocalBound(builder: flatbuffers.Builder, localBound: bool) -> None: ...
def Conv2dAttributeAddAccType(builder: flatbuffers.Builder, accType: typing.Literal[DType.UNKNOWN, DType.BOOL, DType.INT4, DType.INT8, DType.INT16, DType.INT32, DType.INT48, DType.FP32, DType.FP16, DType.BF16, DType.SHAPE, DType.FP8E4M3, DType.FP8E5M2]) -> None: ...
def Conv2dAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class Conv3dAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Conv3dAttribute: ...
  @classmethod
  def GetRootAsConv3dAttribute(cls, buf: bytes, offset: int) -> Conv3dAttribute: ...
  @classmethod
  def Conv3dAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Pad(self, i: int) -> typing.List[int]: ...
  def PadAsNumpy(self) -> np.ndarray: ...
  def PadLength(self) -> int: ...
  def PadIsNone(self) -> bool: ...
  def Stride(self, i: int) -> typing.List[int]: ...
  def StrideAsNumpy(self) -> np.ndarray: ...
  def StrideLength(self) -> int: ...
  def StrideIsNone(self) -> bool: ...
  def Dilation(self, i: int) -> typing.List[int]: ...
  def DilationAsNumpy(self) -> np.ndarray: ...
  def DilationLength(self) -> int: ...
  def DilationIsNone(self) -> bool: ...
  def LocalBound(self) -> bool: ...
  def AccType(self) -> typing.Literal[DType.UNKNOWN, DType.BOOL, DType.INT4, DType.INT8, DType.INT16, DType.INT32, DType.INT48, DType.FP32, DType.FP16, DType.BF16, DType.SHAPE, DType.FP8E4M3, DType.FP8E5M2]: ...
class Conv3dAttributeT(object):
  pad: typing.List[int]
  stride: typing.List[int]
  dilation: typing.List[int]
  localBound: bool
  accType: typing.Literal[DType.UNKNOWN, DType.BOOL, DType.INT4, DType.INT8, DType.INT16, DType.INT32, DType.INT48, DType.FP32, DType.FP16, DType.BF16, DType.SHAPE, DType.FP8E4M3, DType.FP8E5M2]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> Conv3dAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> Conv3dAttributeT: ...
  @classmethod
  def InitFromObj(cls, conv3dAttribute: Conv3dAttribute) -> Conv3dAttributeT: ...
  def _UnPack(self, conv3dAttribute: Conv3dAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def Conv3dAttributeStart(builder: flatbuffers.Builder) -> None: ...
def Conv3dAttributeAddPad(builder: flatbuffers.Builder, pad: uoffset) -> None: ...
def Conv3dAttributeStartPadVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def Conv3dAttributeAddStride(builder: flatbuffers.Builder, stride: uoffset) -> None: ...
def Conv3dAttributeStartStrideVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def Conv3dAttributeAddDilation(builder: flatbuffers.Builder, dilation: uoffset) -> None: ...
def Conv3dAttributeStartDilationVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def Conv3dAttributeAddLocalBound(builder: flatbuffers.Builder, localBound: bool) -> None: ...
def Conv3dAttributeAddAccType(builder: flatbuffers.Builder, accType: typing.Literal[DType.UNKNOWN, DType.BOOL, DType.INT4, DType.INT8, DType.INT16, DType.INT32, DType.INT48, DType.FP32, DType.FP16, DType.BF16, DType.SHAPE, DType.FP8E4M3, DType.FP8E5M2]) -> None: ...
def Conv3dAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class DepthwiseConv2dAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> DepthwiseConv2dAttribute: ...
  @classmethod
  def GetRootAsDepthwiseConv2dAttribute(cls, buf: bytes, offset: int) -> DepthwiseConv2dAttribute: ...
  @classmethod
  def DepthwiseConv2dAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Pad(self, i: int) -> typing.List[int]: ...
  def PadAsNumpy(self) -> np.ndarray: ...
  def PadLength(self) -> int: ...
  def PadIsNone(self) -> bool: ...
  def Stride(self, i: int) -> typing.List[int]: ...
  def StrideAsNumpy(self) -> np.ndarray: ...
  def StrideLength(self) -> int: ...
  def StrideIsNone(self) -> bool: ...
  def Dilation(self, i: int) -> typing.List[int]: ...
  def DilationAsNumpy(self) -> np.ndarray: ...
  def DilationLength(self) -> int: ...
  def DilationIsNone(self) -> bool: ...
  def LocalBound(self) -> bool: ...
  def AccType(self) -> typing.Literal[DType.UNKNOWN, DType.BOOL, DType.INT4, DType.INT8, DType.INT16, DType.INT32, DType.INT48, DType.FP32, DType.FP16, DType.BF16, DType.SHAPE, DType.FP8E4M3, DType.FP8E5M2]: ...
class DepthwiseConv2dAttributeT(object):
  pad: typing.List[int]
  stride: typing.List[int]
  dilation: typing.List[int]
  localBound: bool
  accType: typing.Literal[DType.UNKNOWN, DType.BOOL, DType.INT4, DType.INT8, DType.INT16, DType.INT32, DType.INT48, DType.FP32, DType.FP16, DType.BF16, DType.SHAPE, DType.FP8E4M3, DType.FP8E5M2]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> DepthwiseConv2dAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> DepthwiseConv2dAttributeT: ...
  @classmethod
  def InitFromObj(cls, depthwiseConv2dAttribute: DepthwiseConv2dAttribute) -> DepthwiseConv2dAttributeT: ...
  def _UnPack(self, depthwiseConv2dAttribute: DepthwiseConv2dAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def DepthwiseConv2dAttributeStart(builder: flatbuffers.Builder) -> None: ...
def DepthwiseConv2dAttributeAddPad(builder: flatbuffers.Builder, pad: uoffset) -> None: ...
def DepthwiseConv2dAttributeStartPadVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def DepthwiseConv2dAttributeAddStride(builder: flatbuffers.Builder, stride: uoffset) -> None: ...
def DepthwiseConv2dAttributeStartStrideVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def DepthwiseConv2dAttributeAddDilation(builder: flatbuffers.Builder, dilation: uoffset) -> None: ...
def DepthwiseConv2dAttributeStartDilationVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def DepthwiseConv2dAttributeAddLocalBound(builder: flatbuffers.Builder, localBound: bool) -> None: ...
def DepthwiseConv2dAttributeAddAccType(builder: flatbuffers.Builder, accType: typing.Literal[DType.UNKNOWN, DType.BOOL, DType.INT4, DType.INT8, DType.INT16, DType.INT32, DType.INT48, DType.FP32, DType.FP16, DType.BF16, DType.SHAPE, DType.FP8E4M3, DType.FP8E5M2]) -> None: ...
def DepthwiseConv2dAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class FFT2dAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> FFT2dAttribute: ...
  @classmethod
  def GetRootAsFFT2dAttribute(cls, buf: bytes, offset: int) -> FFT2dAttribute: ...
  @classmethod
  def FFT2dAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Inverse(self) -> bool: ...
  def LocalBound(self) -> bool: ...
class FFT2dAttributeT(object):
  inverse: bool
  localBound: bool
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> FFT2dAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> FFT2dAttributeT: ...
  @classmethod
  def InitFromObj(cls, fft2dAttribute: FFT2dAttribute) -> FFT2dAttributeT: ...
  def _UnPack(self, fft2dAttribute: FFT2dAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def FFT2dAttributeStart(builder: flatbuffers.Builder) -> None: ...
def FFT2dAttributeAddInverse(builder: flatbuffers.Builder, inverse: bool) -> None: ...
def FFT2dAttributeAddLocalBound(builder: flatbuffers.Builder, localBound: bool) -> None: ...
def FFT2dAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class MatMulAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> MatMulAttribute: ...
  @classmethod
  def GetRootAsMatMulAttribute(cls, buf: bytes, offset: int) -> MatMulAttribute: ...
  @classmethod
  def MatMulAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class MatMulAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> MatMulAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> MatMulAttributeT: ...
  @classmethod
  def InitFromObj(cls, matMulAttribute: MatMulAttribute) -> MatMulAttributeT: ...
  def _UnPack(self, matMulAttribute: MatMulAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def MatMulAttributeStart(builder: flatbuffers.Builder) -> None: ...
def MatMulAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class MaxPool2dAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> MaxPool2dAttribute: ...
  @classmethod
  def GetRootAsMaxPool2dAttribute(cls, buf: bytes, offset: int) -> MaxPool2dAttribute: ...
  @classmethod
  def MaxPool2dAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Kernel(self, i: int) -> typing.List[int]: ...
  def KernelAsNumpy(self) -> np.ndarray: ...
  def KernelLength(self) -> int: ...
  def KernelIsNone(self) -> bool: ...
  def Stride(self, i: int) -> typing.List[int]: ...
  def StrideAsNumpy(self) -> np.ndarray: ...
  def StrideLength(self) -> int: ...
  def StrideIsNone(self) -> bool: ...
  def Pad(self, i: int) -> typing.List[int]: ...
  def PadAsNumpy(self) -> np.ndarray: ...
  def PadLength(self) -> int: ...
  def PadIsNone(self) -> bool: ...
  def NanMode(self) -> typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]: ...
class MaxPool2dAttributeT(object):
  kernel: typing.List[int]
  stride: typing.List[int]
  pad: typing.List[int]
  nanMode: typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> MaxPool2dAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> MaxPool2dAttributeT: ...
  @classmethod
  def InitFromObj(cls, maxPool2dAttribute: MaxPool2dAttribute) -> MaxPool2dAttributeT: ...
  def _UnPack(self, maxPool2dAttribute: MaxPool2dAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def MaxPool2dAttributeStart(builder: flatbuffers.Builder) -> None: ...
def MaxPool2dAttributeAddKernel(builder: flatbuffers.Builder, kernel: uoffset) -> None: ...
def MaxPool2dAttributeStartKernelVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def MaxPool2dAttributeAddStride(builder: flatbuffers.Builder, stride: uoffset) -> None: ...
def MaxPool2dAttributeStartStrideVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def MaxPool2dAttributeAddPad(builder: flatbuffers.Builder, pad: uoffset) -> None: ...
def MaxPool2dAttributeStartPadVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def MaxPool2dAttributeAddNanMode(builder: flatbuffers.Builder, nanMode: typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]) -> None: ...
def MaxPool2dAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class RFFT2dAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> RFFT2dAttribute: ...
  @classmethod
  def GetRootAsRFFT2dAttribute(cls, buf: bytes, offset: int) -> RFFT2dAttribute: ...
  @classmethod
  def RFFT2dAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def LocalBound(self) -> bool: ...
class RFFT2dAttributeT(object):
  localBound: bool
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> RFFT2dAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> RFFT2dAttributeT: ...
  @classmethod
  def InitFromObj(cls, rfft2dAttribute: RFFT2dAttribute) -> RFFT2dAttributeT: ...
  def _UnPack(self, rfft2dAttribute: RFFT2dAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def RFFT2dAttributeStart(builder: flatbuffers.Builder) -> None: ...
def RFFT2dAttributeAddLocalBound(builder: flatbuffers.Builder, localBound: bool) -> None: ...
def RFFT2dAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class TransposeConv2dAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> TransposeConv2dAttribute: ...
  @classmethod
  def GetRootAsTransposeConv2dAttribute(cls, buf: bytes, offset: int) -> TransposeConv2dAttribute: ...
  @classmethod
  def TransposeConv2dAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def OutPad(self, i: int) -> typing.List[int]: ...
  def OutPadAsNumpy(self) -> np.ndarray: ...
  def OutPadLength(self) -> int: ...
  def OutPadIsNone(self) -> bool: ...
  def Stride(self, i: int) -> typing.List[int]: ...
  def StrideAsNumpy(self) -> np.ndarray: ...
  def StrideLength(self) -> int: ...
  def StrideIsNone(self) -> bool: ...
  def LocalBound(self) -> bool: ...
  def AccType(self) -> typing.Literal[DType.UNKNOWN, DType.BOOL, DType.INT4, DType.INT8, DType.INT16, DType.INT32, DType.INT48, DType.FP32, DType.FP16, DType.BF16, DType.SHAPE, DType.FP8E4M3, DType.FP8E5M2]: ...
class TransposeConv2dAttributeT(object):
  outPad: typing.List[int]
  stride: typing.List[int]
  localBound: bool
  accType: typing.Literal[DType.UNKNOWN, DType.BOOL, DType.INT4, DType.INT8, DType.INT16, DType.INT32, DType.INT48, DType.FP32, DType.FP16, DType.BF16, DType.SHAPE, DType.FP8E4M3, DType.FP8E5M2]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> TransposeConv2dAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> TransposeConv2dAttributeT: ...
  @classmethod
  def InitFromObj(cls, transposeConv2dAttribute: TransposeConv2dAttribute) -> TransposeConv2dAttributeT: ...
  def _UnPack(self, transposeConv2dAttribute: TransposeConv2dAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def TransposeConv2dAttributeStart(builder: flatbuffers.Builder) -> None: ...
def TransposeConv2dAttributeAddOutPad(builder: flatbuffers.Builder, outPad: uoffset) -> None: ...
def TransposeConv2dAttributeStartOutPadVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TransposeConv2dAttributeAddStride(builder: flatbuffers.Builder, stride: uoffset) -> None: ...
def TransposeConv2dAttributeStartStrideVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TransposeConv2dAttributeAddLocalBound(builder: flatbuffers.Builder, localBound: bool) -> None: ...
def TransposeConv2dAttributeAddAccType(builder: flatbuffers.Builder, accType: typing.Literal[DType.UNKNOWN, DType.BOOL, DType.INT4, DType.INT8, DType.INT16, DType.INT32, DType.INT48, DType.FP32, DType.FP16, DType.BF16, DType.SHAPE, DType.FP8E4M3, DType.FP8E5M2]) -> None: ...
def TransposeConv2dAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ClampAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ClampAttribute: ...
  @classmethod
  def GetRootAsClampAttribute(cls, buf: bytes, offset: int) -> ClampAttribute: ...
  @classmethod
  def ClampAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def MinVal(self, i: int) -> typing.List[int]: ...
  def MinValAsNumpy(self) -> np.ndarray: ...
  def MinValLength(self) -> int: ...
  def MinValIsNone(self) -> bool: ...
  def MaxVal(self, i: int) -> typing.List[int]: ...
  def MaxValAsNumpy(self) -> np.ndarray: ...
  def MaxValLength(self) -> int: ...
  def MaxValIsNone(self) -> bool: ...
  def NanMode(self) -> typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]: ...
class ClampAttributeT(object):
  minVal: typing.List[int]
  maxVal: typing.List[int]
  nanMode: typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ClampAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ClampAttributeT: ...
  @classmethod
  def InitFromObj(cls, clampAttribute: ClampAttribute) -> ClampAttributeT: ...
  def _UnPack(self, clampAttribute: ClampAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ClampAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ClampAttributeAddMinVal(builder: flatbuffers.Builder, minVal: uoffset) -> None: ...
def ClampAttributeStartMinValVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def ClampAttributeAddMaxVal(builder: flatbuffers.Builder, maxVal: uoffset) -> None: ...
def ClampAttributeStartMaxValVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def ClampAttributeAddNanMode(builder: flatbuffers.Builder, nanMode: typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]) -> None: ...
def ClampAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ErfAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ErfAttribute: ...
  @classmethod
  def GetRootAsErfAttribute(cls, buf: bytes, offset: int) -> ErfAttribute: ...
  @classmethod
  def ErfAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class ErfAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ErfAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ErfAttributeT: ...
  @classmethod
  def InitFromObj(cls, erfAttribute: ErfAttribute) -> ErfAttributeT: ...
  def _UnPack(self, erfAttribute: ErfAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ErfAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ErfAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class SigmoidAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> SigmoidAttribute: ...
  @classmethod
  def GetRootAsSigmoidAttribute(cls, buf: bytes, offset: int) -> SigmoidAttribute: ...
  @classmethod
  def SigmoidAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class SigmoidAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> SigmoidAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> SigmoidAttributeT: ...
  @classmethod
  def InitFromObj(cls, sigmoidAttribute: SigmoidAttribute) -> SigmoidAttributeT: ...
  def _UnPack(self, sigmoidAttribute: SigmoidAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def SigmoidAttributeStart(builder: flatbuffers.Builder) -> None: ...
def SigmoidAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class TanhAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> TanhAttribute: ...
  @classmethod
  def GetRootAsTanhAttribute(cls, buf: bytes, offset: int) -> TanhAttribute: ...
  @classmethod
  def TanhAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class TanhAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> TanhAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> TanhAttributeT: ...
  @classmethod
  def InitFromObj(cls, tanhAttribute: TanhAttribute) -> TanhAttributeT: ...
  def _UnPack(self, tanhAttribute: TanhAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def TanhAttributeStart(builder: flatbuffers.Builder) -> None: ...
def TanhAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class AddAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> AddAttribute: ...
  @classmethod
  def GetRootAsAddAttribute(cls, buf: bytes, offset: int) -> AddAttribute: ...
  @classmethod
  def AddAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class AddAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> AddAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> AddAttributeT: ...
  @classmethod
  def InitFromObj(cls, addAttribute: AddAttribute) -> AddAttributeT: ...
  def _UnPack(self, addAttribute: AddAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def AddAttributeStart(builder: flatbuffers.Builder) -> None: ...
def AddAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ArithmeticRightShiftAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ArithmeticRightShiftAttribute: ...
  @classmethod
  def GetRootAsArithmeticRightShiftAttribute(cls, buf: bytes, offset: int) -> ArithmeticRightShiftAttribute: ...
  @classmethod
  def ArithmeticRightShiftAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Round(self) -> bool: ...
class ArithmeticRightShiftAttributeT(object):
  round: bool
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ArithmeticRightShiftAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ArithmeticRightShiftAttributeT: ...
  @classmethod
  def InitFromObj(cls, arithmeticRightShiftAttribute: ArithmeticRightShiftAttribute) -> ArithmeticRightShiftAttributeT: ...
  def _UnPack(self, arithmeticRightShiftAttribute: ArithmeticRightShiftAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ArithmeticRightShiftAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ArithmeticRightShiftAttributeAddRound(builder: flatbuffers.Builder, round: bool) -> None: ...
def ArithmeticRightShiftAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class BitwiseAndAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> BitwiseAndAttribute: ...
  @classmethod
  def GetRootAsBitwiseAndAttribute(cls, buf: bytes, offset: int) -> BitwiseAndAttribute: ...
  @classmethod
  def BitwiseAndAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class BitwiseAndAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> BitwiseAndAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> BitwiseAndAttributeT: ...
  @classmethod
  def InitFromObj(cls, bitwiseAndAttribute: BitwiseAndAttribute) -> BitwiseAndAttributeT: ...
  def _UnPack(self, bitwiseAndAttribute: BitwiseAndAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def BitwiseAndAttributeStart(builder: flatbuffers.Builder) -> None: ...
def BitwiseAndAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class BitwiseOrAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> BitwiseOrAttribute: ...
  @classmethod
  def GetRootAsBitwiseOrAttribute(cls, buf: bytes, offset: int) -> BitwiseOrAttribute: ...
  @classmethod
  def BitwiseOrAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class BitwiseOrAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> BitwiseOrAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> BitwiseOrAttributeT: ...
  @classmethod
  def InitFromObj(cls, bitwiseOrAttribute: BitwiseOrAttribute) -> BitwiseOrAttributeT: ...
  def _UnPack(self, bitwiseOrAttribute: BitwiseOrAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def BitwiseOrAttributeStart(builder: flatbuffers.Builder) -> None: ...
def BitwiseOrAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class BitwiseXorAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> BitwiseXorAttribute: ...
  @classmethod
  def GetRootAsBitwiseXorAttribute(cls, buf: bytes, offset: int) -> BitwiseXorAttribute: ...
  @classmethod
  def BitwiseXorAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class BitwiseXorAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> BitwiseXorAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> BitwiseXorAttributeT: ...
  @classmethod
  def InitFromObj(cls, bitwiseXorAttribute: BitwiseXorAttribute) -> BitwiseXorAttributeT: ...
  def _UnPack(self, bitwiseXorAttribute: BitwiseXorAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def BitwiseXorAttributeStart(builder: flatbuffers.Builder) -> None: ...
def BitwiseXorAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class IntDivAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> IntDivAttribute: ...
  @classmethod
  def GetRootAsIntDivAttribute(cls, buf: bytes, offset: int) -> IntDivAttribute: ...
  @classmethod
  def IntDivAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class IntDivAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> IntDivAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> IntDivAttributeT: ...
  @classmethod
  def InitFromObj(cls, intDivAttribute: IntDivAttribute) -> IntDivAttributeT: ...
  def _UnPack(self, intDivAttribute: IntDivAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def IntDivAttributeStart(builder: flatbuffers.Builder) -> None: ...
def IntDivAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class LogicalAndAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> LogicalAndAttribute: ...
  @classmethod
  def GetRootAsLogicalAndAttribute(cls, buf: bytes, offset: int) -> LogicalAndAttribute: ...
  @classmethod
  def LogicalAndAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class LogicalAndAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> LogicalAndAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> LogicalAndAttributeT: ...
  @classmethod
  def InitFromObj(cls, logicalAndAttribute: LogicalAndAttribute) -> LogicalAndAttributeT: ...
  def _UnPack(self, logicalAndAttribute: LogicalAndAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def LogicalAndAttributeStart(builder: flatbuffers.Builder) -> None: ...
def LogicalAndAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class LogicalLeftShiftAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> LogicalLeftShiftAttribute: ...
  @classmethod
  def GetRootAsLogicalLeftShiftAttribute(cls, buf: bytes, offset: int) -> LogicalLeftShiftAttribute: ...
  @classmethod
  def LogicalLeftShiftAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class LogicalLeftShiftAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> LogicalLeftShiftAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> LogicalLeftShiftAttributeT: ...
  @classmethod
  def InitFromObj(cls, logicalLeftShiftAttribute: LogicalLeftShiftAttribute) -> LogicalLeftShiftAttributeT: ...
  def _UnPack(self, logicalLeftShiftAttribute: LogicalLeftShiftAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def LogicalLeftShiftAttributeStart(builder: flatbuffers.Builder) -> None: ...
def LogicalLeftShiftAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class LogicalRightShiftAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> LogicalRightShiftAttribute: ...
  @classmethod
  def GetRootAsLogicalRightShiftAttribute(cls, buf: bytes, offset: int) -> LogicalRightShiftAttribute: ...
  @classmethod
  def LogicalRightShiftAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class LogicalRightShiftAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> LogicalRightShiftAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> LogicalRightShiftAttributeT: ...
  @classmethod
  def InitFromObj(cls, logicalRightShiftAttribute: LogicalRightShiftAttribute) -> LogicalRightShiftAttributeT: ...
  def _UnPack(self, logicalRightShiftAttribute: LogicalRightShiftAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def LogicalRightShiftAttributeStart(builder: flatbuffers.Builder) -> None: ...
def LogicalRightShiftAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class LogicalOrAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> LogicalOrAttribute: ...
  @classmethod
  def GetRootAsLogicalOrAttribute(cls, buf: bytes, offset: int) -> LogicalOrAttribute: ...
  @classmethod
  def LogicalOrAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class LogicalOrAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> LogicalOrAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> LogicalOrAttributeT: ...
  @classmethod
  def InitFromObj(cls, logicalOrAttribute: LogicalOrAttribute) -> LogicalOrAttributeT: ...
  def _UnPack(self, logicalOrAttribute: LogicalOrAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def LogicalOrAttributeStart(builder: flatbuffers.Builder) -> None: ...
def LogicalOrAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class LogicalXorAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> LogicalXorAttribute: ...
  @classmethod
  def GetRootAsLogicalXorAttribute(cls, buf: bytes, offset: int) -> LogicalXorAttribute: ...
  @classmethod
  def LogicalXorAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class LogicalXorAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> LogicalXorAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> LogicalXorAttributeT: ...
  @classmethod
  def InitFromObj(cls, logicalXorAttribute: LogicalXorAttribute) -> LogicalXorAttributeT: ...
  def _UnPack(self, logicalXorAttribute: LogicalXorAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def LogicalXorAttributeStart(builder: flatbuffers.Builder) -> None: ...
def LogicalXorAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class MaximumAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> MaximumAttribute: ...
  @classmethod
  def GetRootAsMaximumAttribute(cls, buf: bytes, offset: int) -> MaximumAttribute: ...
  @classmethod
  def MaximumAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def NanMode(self) -> typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]: ...
class MaximumAttributeT(object):
  nanMode: typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> MaximumAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> MaximumAttributeT: ...
  @classmethod
  def InitFromObj(cls, maximumAttribute: MaximumAttribute) -> MaximumAttributeT: ...
  def _UnPack(self, maximumAttribute: MaximumAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def MaximumAttributeStart(builder: flatbuffers.Builder) -> None: ...
def MaximumAttributeAddNanMode(builder: flatbuffers.Builder, nanMode: typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]) -> None: ...
def MaximumAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class MinimumAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> MinimumAttribute: ...
  @classmethod
  def GetRootAsMinimumAttribute(cls, buf: bytes, offset: int) -> MinimumAttribute: ...
  @classmethod
  def MinimumAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def NanMode(self) -> typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]: ...
class MinimumAttributeT(object):
  nanMode: typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> MinimumAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> MinimumAttributeT: ...
  @classmethod
  def InitFromObj(cls, minimumAttribute: MinimumAttribute) -> MinimumAttributeT: ...
  def _UnPack(self, minimumAttribute: MinimumAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def MinimumAttributeStart(builder: flatbuffers.Builder) -> None: ...
def MinimumAttributeAddNanMode(builder: flatbuffers.Builder, nanMode: typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]) -> None: ...
def MinimumAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class MulAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> MulAttribute: ...
  @classmethod
  def GetRootAsMulAttribute(cls, buf: bytes, offset: int) -> MulAttribute: ...
  @classmethod
  def MulAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class MulAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> MulAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> MulAttributeT: ...
  @classmethod
  def InitFromObj(cls, mulAttribute: MulAttribute) -> MulAttributeT: ...
  def _UnPack(self, mulAttribute: MulAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def MulAttributeStart(builder: flatbuffers.Builder) -> None: ...
def MulAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class PowAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> PowAttribute: ...
  @classmethod
  def GetRootAsPowAttribute(cls, buf: bytes, offset: int) -> PowAttribute: ...
  @classmethod
  def PowAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class PowAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> PowAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> PowAttributeT: ...
  @classmethod
  def InitFromObj(cls, powAttribute: PowAttribute) -> PowAttributeT: ...
  def _UnPack(self, powAttribute: PowAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def PowAttributeStart(builder: flatbuffers.Builder) -> None: ...
def PowAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class SubAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> SubAttribute: ...
  @classmethod
  def GetRootAsSubAttribute(cls, buf: bytes, offset: int) -> SubAttribute: ...
  @classmethod
  def SubAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class SubAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> SubAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> SubAttributeT: ...
  @classmethod
  def InitFromObj(cls, subAttribute: SubAttribute) -> SubAttributeT: ...
  def _UnPack(self, subAttribute: SubAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def SubAttributeStart(builder: flatbuffers.Builder) -> None: ...
def SubAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class TableAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> TableAttribute: ...
  @classmethod
  def GetRootAsTableAttribute(cls, buf: bytes, offset: int) -> TableAttribute: ...
  @classmethod
  def TableAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class TableAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> TableAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> TableAttributeT: ...
  @classmethod
  def InitFromObj(cls, tableAttribute: TableAttribute) -> TableAttributeT: ...
  def _UnPack(self, tableAttribute: TableAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def TableAttributeStart(builder: flatbuffers.Builder) -> None: ...
def TableAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class AbsAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> AbsAttribute: ...
  @classmethod
  def GetRootAsAbsAttribute(cls, buf: bytes, offset: int) -> AbsAttribute: ...
  @classmethod
  def AbsAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class AbsAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> AbsAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> AbsAttributeT: ...
  @classmethod
  def InitFromObj(cls, absAttribute: AbsAttribute) -> AbsAttributeT: ...
  def _UnPack(self, absAttribute: AbsAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def AbsAttributeStart(builder: flatbuffers.Builder) -> None: ...
def AbsAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class BitwiseNotAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> BitwiseNotAttribute: ...
  @classmethod
  def GetRootAsBitwiseNotAttribute(cls, buf: bytes, offset: int) -> BitwiseNotAttribute: ...
  @classmethod
  def BitwiseNotAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class BitwiseNotAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> BitwiseNotAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> BitwiseNotAttributeT: ...
  @classmethod
  def InitFromObj(cls, bitwiseNotAttribute: BitwiseNotAttribute) -> BitwiseNotAttributeT: ...
  def _UnPack(self, bitwiseNotAttribute: BitwiseNotAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def BitwiseNotAttributeStart(builder: flatbuffers.Builder) -> None: ...
def BitwiseNotAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class CeilAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> CeilAttribute: ...
  @classmethod
  def GetRootAsCeilAttribute(cls, buf: bytes, offset: int) -> CeilAttribute: ...
  @classmethod
  def CeilAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class CeilAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> CeilAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> CeilAttributeT: ...
  @classmethod
  def InitFromObj(cls, ceilAttribute: CeilAttribute) -> CeilAttributeT: ...
  def _UnPack(self, ceilAttribute: CeilAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def CeilAttributeStart(builder: flatbuffers.Builder) -> None: ...
def CeilAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ClzAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ClzAttribute: ...
  @classmethod
  def GetRootAsClzAttribute(cls, buf: bytes, offset: int) -> ClzAttribute: ...
  @classmethod
  def ClzAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class ClzAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ClzAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ClzAttributeT: ...
  @classmethod
  def InitFromObj(cls, clzAttribute: ClzAttribute) -> ClzAttributeT: ...
  def _UnPack(self, clzAttribute: ClzAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ClzAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ClzAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class CosAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> CosAttribute: ...
  @classmethod
  def GetRootAsCosAttribute(cls, buf: bytes, offset: int) -> CosAttribute: ...
  @classmethod
  def CosAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class CosAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> CosAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> CosAttributeT: ...
  @classmethod
  def InitFromObj(cls, cosAttribute: CosAttribute) -> CosAttributeT: ...
  def _UnPack(self, cosAttribute: CosAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def CosAttributeStart(builder: flatbuffers.Builder) -> None: ...
def CosAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ExpAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ExpAttribute: ...
  @classmethod
  def GetRootAsExpAttribute(cls, buf: bytes, offset: int) -> ExpAttribute: ...
  @classmethod
  def ExpAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class ExpAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ExpAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ExpAttributeT: ...
  @classmethod
  def InitFromObj(cls, expAttribute: ExpAttribute) -> ExpAttributeT: ...
  def _UnPack(self, expAttribute: ExpAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ExpAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ExpAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class FloorAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> FloorAttribute: ...
  @classmethod
  def GetRootAsFloorAttribute(cls, buf: bytes, offset: int) -> FloorAttribute: ...
  @classmethod
  def FloorAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class FloorAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> FloorAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> FloorAttributeT: ...
  @classmethod
  def InitFromObj(cls, floorAttribute: FloorAttribute) -> FloorAttributeT: ...
  def _UnPack(self, floorAttribute: FloorAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def FloorAttributeStart(builder: flatbuffers.Builder) -> None: ...
def FloorAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class LogAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> LogAttribute: ...
  @classmethod
  def GetRootAsLogAttribute(cls, buf: bytes, offset: int) -> LogAttribute: ...
  @classmethod
  def LogAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class LogAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> LogAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> LogAttributeT: ...
  @classmethod
  def InitFromObj(cls, logAttribute: LogAttribute) -> LogAttributeT: ...
  def _UnPack(self, logAttribute: LogAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def LogAttributeStart(builder: flatbuffers.Builder) -> None: ...
def LogAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class LogicalNotAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> LogicalNotAttribute: ...
  @classmethod
  def GetRootAsLogicalNotAttribute(cls, buf: bytes, offset: int) -> LogicalNotAttribute: ...
  @classmethod
  def LogicalNotAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class LogicalNotAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> LogicalNotAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> LogicalNotAttributeT: ...
  @classmethod
  def InitFromObj(cls, logicalNotAttribute: LogicalNotAttribute) -> LogicalNotAttributeT: ...
  def _UnPack(self, logicalNotAttribute: LogicalNotAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def LogicalNotAttributeStart(builder: flatbuffers.Builder) -> None: ...
def LogicalNotAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class NegateAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> NegateAttribute: ...
  @classmethod
  def GetRootAsNegateAttribute(cls, buf: bytes, offset: int) -> NegateAttribute: ...
  @classmethod
  def NegateAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class NegateAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> NegateAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> NegateAttributeT: ...
  @classmethod
  def InitFromObj(cls, negateAttribute: NegateAttribute) -> NegateAttributeT: ...
  def _UnPack(self, negateAttribute: NegateAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def NegateAttributeStart(builder: flatbuffers.Builder) -> None: ...
def NegateAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ReciprocalAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ReciprocalAttribute: ...
  @classmethod
  def GetRootAsReciprocalAttribute(cls, buf: bytes, offset: int) -> ReciprocalAttribute: ...
  @classmethod
  def ReciprocalAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class ReciprocalAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ReciprocalAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ReciprocalAttributeT: ...
  @classmethod
  def InitFromObj(cls, reciprocalAttribute: ReciprocalAttribute) -> ReciprocalAttributeT: ...
  def _UnPack(self, reciprocalAttribute: ReciprocalAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ReciprocalAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ReciprocalAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class RsqrtAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> RsqrtAttribute: ...
  @classmethod
  def GetRootAsRsqrtAttribute(cls, buf: bytes, offset: int) -> RsqrtAttribute: ...
  @classmethod
  def RsqrtAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class RsqrtAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> RsqrtAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> RsqrtAttributeT: ...
  @classmethod
  def InitFromObj(cls, rsqrtAttribute: RsqrtAttribute) -> RsqrtAttributeT: ...
  def _UnPack(self, rsqrtAttribute: RsqrtAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def RsqrtAttributeStart(builder: flatbuffers.Builder) -> None: ...
def RsqrtAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class SinAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> SinAttribute: ...
  @classmethod
  def GetRootAsSinAttribute(cls, buf: bytes, offset: int) -> SinAttribute: ...
  @classmethod
  def SinAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class SinAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> SinAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> SinAttributeT: ...
  @classmethod
  def InitFromObj(cls, sinAttribute: SinAttribute) -> SinAttributeT: ...
  def _UnPack(self, sinAttribute: SinAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def SinAttributeStart(builder: flatbuffers.Builder) -> None: ...
def SinAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class SelectAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> SelectAttribute: ...
  @classmethod
  def GetRootAsSelectAttribute(cls, buf: bytes, offset: int) -> SelectAttribute: ...
  @classmethod
  def SelectAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class SelectAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> SelectAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> SelectAttributeT: ...
  @classmethod
  def InitFromObj(cls, selectAttribute: SelectAttribute) -> SelectAttributeT: ...
  def _UnPack(self, selectAttribute: SelectAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def SelectAttributeStart(builder: flatbuffers.Builder) -> None: ...
def SelectAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class EqualAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> EqualAttribute: ...
  @classmethod
  def GetRootAsEqualAttribute(cls, buf: bytes, offset: int) -> EqualAttribute: ...
  @classmethod
  def EqualAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class EqualAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> EqualAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> EqualAttributeT: ...
  @classmethod
  def InitFromObj(cls, equalAttribute: EqualAttribute) -> EqualAttributeT: ...
  def _UnPack(self, equalAttribute: EqualAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def EqualAttributeStart(builder: flatbuffers.Builder) -> None: ...
def EqualAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class GreaterAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> GreaterAttribute: ...
  @classmethod
  def GetRootAsGreaterAttribute(cls, buf: bytes, offset: int) -> GreaterAttribute: ...
  @classmethod
  def GreaterAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class GreaterAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> GreaterAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> GreaterAttributeT: ...
  @classmethod
  def InitFromObj(cls, greaterAttribute: GreaterAttribute) -> GreaterAttributeT: ...
  def _UnPack(self, greaterAttribute: GreaterAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def GreaterAttributeStart(builder: flatbuffers.Builder) -> None: ...
def GreaterAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class GreaterEqualAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> GreaterEqualAttribute: ...
  @classmethod
  def GetRootAsGreaterEqualAttribute(cls, buf: bytes, offset: int) -> GreaterEqualAttribute: ...
  @classmethod
  def GreaterEqualAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class GreaterEqualAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> GreaterEqualAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> GreaterEqualAttributeT: ...
  @classmethod
  def InitFromObj(cls, greaterEqualAttribute: GreaterEqualAttribute) -> GreaterEqualAttributeT: ...
  def _UnPack(self, greaterEqualAttribute: GreaterEqualAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def GreaterEqualAttributeStart(builder: flatbuffers.Builder) -> None: ...
def GreaterEqualAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ReduceAllAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ReduceAllAttribute: ...
  @classmethod
  def GetRootAsReduceAllAttribute(cls, buf: bytes, offset: int) -> ReduceAllAttribute: ...
  @classmethod
  def ReduceAllAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Axis(self) -> int: ...
class ReduceAllAttributeT(object):
  axis: int
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ReduceAllAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ReduceAllAttributeT: ...
  @classmethod
  def InitFromObj(cls, reduceAllAttribute: ReduceAllAttribute) -> ReduceAllAttributeT: ...
  def _UnPack(self, reduceAllAttribute: ReduceAllAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ReduceAllAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ReduceAllAttributeAddAxis(builder: flatbuffers.Builder, axis: int) -> None: ...
def ReduceAllAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ReduceAnyAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ReduceAnyAttribute: ...
  @classmethod
  def GetRootAsReduceAnyAttribute(cls, buf: bytes, offset: int) -> ReduceAnyAttribute: ...
  @classmethod
  def ReduceAnyAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Axis(self) -> int: ...
class ReduceAnyAttributeT(object):
  axis: int
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ReduceAnyAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ReduceAnyAttributeT: ...
  @classmethod
  def InitFromObj(cls, reduceAnyAttribute: ReduceAnyAttribute) -> ReduceAnyAttributeT: ...
  def _UnPack(self, reduceAnyAttribute: ReduceAnyAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ReduceAnyAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ReduceAnyAttributeAddAxis(builder: flatbuffers.Builder, axis: int) -> None: ...
def ReduceAnyAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ReduceMaxAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ReduceMaxAttribute: ...
  @classmethod
  def GetRootAsReduceMaxAttribute(cls, buf: bytes, offset: int) -> ReduceMaxAttribute: ...
  @classmethod
  def ReduceMaxAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Axis(self) -> int: ...
  def NanMode(self) -> typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]: ...
class ReduceMaxAttributeT(object):
  axis: int
  nanMode: typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ReduceMaxAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ReduceMaxAttributeT: ...
  @classmethod
  def InitFromObj(cls, reduceMaxAttribute: ReduceMaxAttribute) -> ReduceMaxAttributeT: ...
  def _UnPack(self, reduceMaxAttribute: ReduceMaxAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ReduceMaxAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ReduceMaxAttributeAddAxis(builder: flatbuffers.Builder, axis: int) -> None: ...
def ReduceMaxAttributeAddNanMode(builder: flatbuffers.Builder, nanMode: typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]) -> None: ...
def ReduceMaxAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ReduceMinAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ReduceMinAttribute: ...
  @classmethod
  def GetRootAsReduceMinAttribute(cls, buf: bytes, offset: int) -> ReduceMinAttribute: ...
  @classmethod
  def ReduceMinAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Axis(self) -> int: ...
  def NanMode(self) -> typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]: ...
class ReduceMinAttributeT(object):
  axis: int
  nanMode: typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ReduceMinAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ReduceMinAttributeT: ...
  @classmethod
  def InitFromObj(cls, reduceMinAttribute: ReduceMinAttribute) -> ReduceMinAttributeT: ...
  def _UnPack(self, reduceMinAttribute: ReduceMinAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ReduceMinAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ReduceMinAttributeAddAxis(builder: flatbuffers.Builder, axis: int) -> None: ...
def ReduceMinAttributeAddNanMode(builder: flatbuffers.Builder, nanMode: typing.Literal[NanPropagationMode.UNKNOWN, NanPropagationMode.PROPAGATE, NanPropagationMode.IGNORE]) -> None: ...
def ReduceMinAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ReduceProductAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ReduceProductAttribute: ...
  @classmethod
  def GetRootAsReduceProductAttribute(cls, buf: bytes, offset: int) -> ReduceProductAttribute: ...
  @classmethod
  def ReduceProductAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Axis(self) -> int: ...
class ReduceProductAttributeT(object):
  axis: int
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ReduceProductAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ReduceProductAttributeT: ...
  @classmethod
  def InitFromObj(cls, reduceProductAttribute: ReduceProductAttribute) -> ReduceProductAttributeT: ...
  def _UnPack(self, reduceProductAttribute: ReduceProductAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ReduceProductAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ReduceProductAttributeAddAxis(builder: flatbuffers.Builder, axis: int) -> None: ...
def ReduceProductAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ReduceSumAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ReduceSumAttribute: ...
  @classmethod
  def GetRootAsReduceSumAttribute(cls, buf: bytes, offset: int) -> ReduceSumAttribute: ...
  @classmethod
  def ReduceSumAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Axis(self) -> int: ...
class ReduceSumAttributeT(object):
  axis: int
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ReduceSumAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ReduceSumAttributeT: ...
  @classmethod
  def InitFromObj(cls, reduceSumAttribute: ReduceSumAttribute) -> ReduceSumAttributeT: ...
  def _UnPack(self, reduceSumAttribute: ReduceSumAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ReduceSumAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ReduceSumAttributeAddAxis(builder: flatbuffers.Builder, axis: int) -> None: ...
def ReduceSumAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ConcatAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ConcatAttribute: ...
  @classmethod
  def GetRootAsConcatAttribute(cls, buf: bytes, offset: int) -> ConcatAttribute: ...
  @classmethod
  def ConcatAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Axis(self) -> int: ...
class ConcatAttributeT(object):
  axis: int
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ConcatAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ConcatAttributeT: ...
  @classmethod
  def InitFromObj(cls, concatAttribute: ConcatAttribute) -> ConcatAttributeT: ...
  def _UnPack(self, concatAttribute: ConcatAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ConcatAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ConcatAttributeAddAxis(builder: flatbuffers.Builder, axis: int) -> None: ...
def ConcatAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class PadAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> PadAttribute: ...
  @classmethod
  def GetRootAsPadAttribute(cls, buf: bytes, offset: int) -> PadAttribute: ...
  @classmethod
  def PadAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class PadAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> PadAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> PadAttributeT: ...
  @classmethod
  def InitFromObj(cls, padAttribute: PadAttribute) -> PadAttributeT: ...
  def _UnPack(self, padAttribute: PadAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def PadAttributeStart(builder: flatbuffers.Builder) -> None: ...
def PadAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ReshapeAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ReshapeAttribute: ...
  @classmethod
  def GetRootAsReshapeAttribute(cls, buf: bytes, offset: int) -> ReshapeAttribute: ...
  @classmethod
  def ReshapeAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class ReshapeAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ReshapeAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ReshapeAttributeT: ...
  @classmethod
  def InitFromObj(cls, reshapeAttribute: ReshapeAttribute) -> ReshapeAttributeT: ...
  def _UnPack(self, reshapeAttribute: ReshapeAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ReshapeAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ReshapeAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ReverseAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ReverseAttribute: ...
  @classmethod
  def GetRootAsReverseAttribute(cls, buf: bytes, offset: int) -> ReverseAttribute: ...
  @classmethod
  def ReverseAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Axis(self) -> int: ...
class ReverseAttributeT(object):
  axis: int
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ReverseAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ReverseAttributeT: ...
  @classmethod
  def InitFromObj(cls, reverseAttribute: ReverseAttribute) -> ReverseAttributeT: ...
  def _UnPack(self, reverseAttribute: ReverseAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ReverseAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ReverseAttributeAddAxis(builder: flatbuffers.Builder, axis: int) -> None: ...
def ReverseAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class SliceAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> SliceAttribute: ...
  @classmethod
  def GetRootAsSliceAttribute(cls, buf: bytes, offset: int) -> SliceAttribute: ...
  @classmethod
  def SliceAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class SliceAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> SliceAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> SliceAttributeT: ...
  @classmethod
  def InitFromObj(cls, sliceAttribute: SliceAttribute) -> SliceAttributeT: ...
  def _UnPack(self, sliceAttribute: SliceAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def SliceAttributeStart(builder: flatbuffers.Builder) -> None: ...
def SliceAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class TileAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> TileAttribute: ...
  @classmethod
  def GetRootAsTileAttribute(cls, buf: bytes, offset: int) -> TileAttribute: ...
  @classmethod
  def TileAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class TileAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> TileAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> TileAttributeT: ...
  @classmethod
  def InitFromObj(cls, tileAttribute: TileAttribute) -> TileAttributeT: ...
  def _UnPack(self, tileAttribute: TileAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def TileAttributeStart(builder: flatbuffers.Builder) -> None: ...
def TileAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class TransposeAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> TransposeAttribute: ...
  @classmethod
  def GetRootAsTransposeAttribute(cls, buf: bytes, offset: int) -> TransposeAttribute: ...
  @classmethod
  def TransposeAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Perms(self, i: int) -> typing.List[int]: ...
  def PermsAsNumpy(self) -> np.ndarray: ...
  def PermsLength(self) -> int: ...
  def PermsIsNone(self) -> bool: ...
class TransposeAttributeT(object):
  perms: typing.List[int]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> TransposeAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> TransposeAttributeT: ...
  @classmethod
  def InitFromObj(cls, transposeAttribute: TransposeAttribute) -> TransposeAttributeT: ...
  def _UnPack(self, transposeAttribute: TransposeAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def TransposeAttributeStart(builder: flatbuffers.Builder) -> None: ...
def TransposeAttributeAddPerms(builder: flatbuffers.Builder, perms: uoffset) -> None: ...
def TransposeAttributeStartPermsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TransposeAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class GatherAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> GatherAttribute: ...
  @classmethod
  def GetRootAsGatherAttribute(cls, buf: bytes, offset: int) -> GatherAttribute: ...
  @classmethod
  def GatherAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class GatherAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> GatherAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> GatherAttributeT: ...
  @classmethod
  def InitFromObj(cls, gatherAttribute: GatherAttribute) -> GatherAttributeT: ...
  def _UnPack(self, gatherAttribute: GatherAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def GatherAttributeStart(builder: flatbuffers.Builder) -> None: ...
def GatherAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ScatterAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ScatterAttribute: ...
  @classmethod
  def GetRootAsScatterAttribute(cls, buf: bytes, offset: int) -> ScatterAttribute: ...
  @classmethod
  def ScatterAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class ScatterAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ScatterAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ScatterAttributeT: ...
  @classmethod
  def InitFromObj(cls, scatterAttribute: ScatterAttribute) -> ScatterAttributeT: ...
  def _UnPack(self, scatterAttribute: ScatterAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ScatterAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ScatterAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ResizeAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ResizeAttribute: ...
  @classmethod
  def GetRootAsResizeAttribute(cls, buf: bytes, offset: int) -> ResizeAttribute: ...
  @classmethod
  def ResizeAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Mode(self) -> typing.Literal[ResizeMode.UNKNOWN, ResizeMode.NEAREST, ResizeMode.BILINEAR]: ...
class ResizeAttributeT(object):
  mode: typing.Literal[ResizeMode.UNKNOWN, ResizeMode.NEAREST, ResizeMode.BILINEAR]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ResizeAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ResizeAttributeT: ...
  @classmethod
  def InitFromObj(cls, resizeAttribute: ResizeAttribute) -> ResizeAttributeT: ...
  def _UnPack(self, resizeAttribute: ResizeAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ResizeAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ResizeAttributeAddMode(builder: flatbuffers.Builder, mode: typing.Literal[ResizeMode.UNKNOWN, ResizeMode.NEAREST, ResizeMode.BILINEAR]) -> None: ...
def ResizeAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class CastAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> CastAttribute: ...
  @classmethod
  def GetRootAsCastAttribute(cls, buf: bytes, offset: int) -> CastAttribute: ...
  @classmethod
  def CastAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class CastAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> CastAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> CastAttributeT: ...
  @classmethod
  def InitFromObj(cls, castAttribute: CastAttribute) -> CastAttributeT: ...
  def _UnPack(self, castAttribute: CastAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def CastAttributeStart(builder: flatbuffers.Builder) -> None: ...
def CastAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class RescaleAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> RescaleAttribute: ...
  @classmethod
  def GetRootAsRescaleAttribute(cls, buf: bytes, offset: int) -> RescaleAttribute: ...
  @classmethod
  def RescaleAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Scale32(self) -> bool: ...
  def RoundingMode(self) -> typing.Literal[RoundingMode.UNKNOWN, RoundingMode.SINGLE_ROUND, RoundingMode.INEXACT_ROUND, RoundingMode.DOUBLE_ROUND]: ...
  def PerChannel(self) -> bool: ...
  def InputUnsigned(self) -> bool: ...
  def OutputUnsigned(self) -> bool: ...
class RescaleAttributeT(object):
  scale32: bool
  roundingMode: typing.Literal[RoundingMode.UNKNOWN, RoundingMode.SINGLE_ROUND, RoundingMode.INEXACT_ROUND, RoundingMode.DOUBLE_ROUND]
  perChannel: bool
  inputUnsigned: bool
  outputUnsigned: bool
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> RescaleAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> RescaleAttributeT: ...
  @classmethod
  def InitFromObj(cls, rescaleAttribute: RescaleAttribute) -> RescaleAttributeT: ...
  def _UnPack(self, rescaleAttribute: RescaleAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def RescaleAttributeStart(builder: flatbuffers.Builder) -> None: ...
def RescaleAttributeAddScale32(builder: flatbuffers.Builder, scale32: bool) -> None: ...
def RescaleAttributeAddRoundingMode(builder: flatbuffers.Builder, roundingMode: typing.Literal[RoundingMode.UNKNOWN, RoundingMode.SINGLE_ROUND, RoundingMode.INEXACT_ROUND, RoundingMode.DOUBLE_ROUND]) -> None: ...
def RescaleAttributeAddPerChannel(builder: flatbuffers.Builder, perChannel: bool) -> None: ...
def RescaleAttributeAddInputUnsigned(builder: flatbuffers.Builder, inputUnsigned: bool) -> None: ...
def RescaleAttributeAddOutputUnsigned(builder: flatbuffers.Builder, outputUnsigned: bool) -> None: ...
def RescaleAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ConstAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ConstAttribute: ...
  @classmethod
  def GetRootAsConstAttribute(cls, buf: bytes, offset: int) -> ConstAttribute: ...
  @classmethod
  def ConstAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class ConstAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ConstAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ConstAttributeT: ...
  @classmethod
  def InitFromObj(cls, constAttribute: ConstAttribute) -> ConstAttributeT: ...
  def _UnPack(self, constAttribute: ConstAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ConstAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ConstAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class IdentityAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> IdentityAttribute: ...
  @classmethod
  def GetRootAsIdentityAttribute(cls, buf: bytes, offset: int) -> IdentityAttribute: ...
  @classmethod
  def IdentityAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class IdentityAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> IdentityAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> IdentityAttributeT: ...
  @classmethod
  def InitFromObj(cls, identityAttribute: IdentityAttribute) -> IdentityAttributeT: ...
  def _UnPack(self, identityAttribute: IdentityAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def IdentityAttributeStart(builder: flatbuffers.Builder) -> None: ...
def IdentityAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class CustomAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> CustomAttribute: ...
  @classmethod
  def GetRootAsCustomAttribute(cls, buf: bytes, offset: int) -> CustomAttribute: ...
  @classmethod
  def CustomAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def OperatorName(self) -> str | None: ...
  def DomainName(self) -> str | None: ...
  def ImplementationAttrs(self, i: int) -> typing.List[int]: ...
  def ImplementationAttrsAsNumpy(self) -> np.ndarray: ...
  def ImplementationAttrsLength(self) -> int: ...
  def ImplementationAttrsIsNone(self) -> bool: ...
class CustomAttributeT(object):
  operatorName: str | None
  domainName: str | None
  implementationAttrs: typing.List[int]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> CustomAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> CustomAttributeT: ...
  @classmethod
  def InitFromObj(cls, customAttribute: CustomAttribute) -> CustomAttributeT: ...
  def _UnPack(self, customAttribute: CustomAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def CustomAttributeStart(builder: flatbuffers.Builder) -> None: ...
def CustomAttributeAddOperatorName(builder: flatbuffers.Builder, operatorName: uoffset) -> None: ...
def CustomAttributeAddDomainName(builder: flatbuffers.Builder, domainName: uoffset) -> None: ...
def CustomAttributeAddImplementationAttrs(builder: flatbuffers.Builder, implementationAttrs: uoffset) -> None: ...
def CustomAttributeStartImplementationAttrsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def CustomAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class CondIfAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> CondIfAttribute: ...
  @classmethod
  def GetRootAsCondIfAttribute(cls, buf: bytes, offset: int) -> CondIfAttribute: ...
  @classmethod
  def CondIfAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def ThenGraph(self) -> str | None: ...
  def ElseGraph(self) -> str | None: ...
class CondIfAttributeT(object):
  thenGraph: str | None
  elseGraph: str | None
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> CondIfAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> CondIfAttributeT: ...
  @classmethod
  def InitFromObj(cls, condIfAttribute: CondIfAttribute) -> CondIfAttributeT: ...
  def _UnPack(self, condIfAttribute: CondIfAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def CondIfAttributeStart(builder: flatbuffers.Builder) -> None: ...
def CondIfAttributeAddThenGraph(builder: flatbuffers.Builder, thenGraph: uoffset) -> None: ...
def CondIfAttributeAddElseGraph(builder: flatbuffers.Builder, elseGraph: uoffset) -> None: ...
def CondIfAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class WhileLoopAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> WhileLoopAttribute: ...
  @classmethod
  def GetRootAsWhileLoopAttribute(cls, buf: bytes, offset: int) -> WhileLoopAttribute: ...
  @classmethod
  def WhileLoopAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def CondGraph(self) -> str | None: ...
  def BodyGraph(self) -> str | None: ...
class WhileLoopAttributeT(object):
  condGraph: str | None
  bodyGraph: str | None
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> WhileLoopAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> WhileLoopAttributeT: ...
  @classmethod
  def InitFromObj(cls, whileLoopAttribute: WhileLoopAttribute) -> WhileLoopAttributeT: ...
  def _UnPack(self, whileLoopAttribute: WhileLoopAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def WhileLoopAttributeStart(builder: flatbuffers.Builder) -> None: ...
def WhileLoopAttributeAddCondGraph(builder: flatbuffers.Builder, condGraph: uoffset) -> None: ...
def WhileLoopAttributeAddBodyGraph(builder: flatbuffers.Builder, bodyGraph: uoffset) -> None: ...
def WhileLoopAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class VariableAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> VariableAttribute: ...
  @classmethod
  def GetRootAsVariableAttribute(cls, buf: bytes, offset: int) -> VariableAttribute: ...
  @classmethod
  def VariableAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class VariableAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> VariableAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> VariableAttributeT: ...
  @classmethod
  def InitFromObj(cls, variableAttribute: VariableAttribute) -> VariableAttributeT: ...
  def _UnPack(self, variableAttribute: VariableAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def VariableAttributeStart(builder: flatbuffers.Builder) -> None: ...
def VariableAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class VariableWriteAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> VariableWriteAttribute: ...
  @classmethod
  def GetRootAsVariableWriteAttribute(cls, buf: bytes, offset: int) -> VariableWriteAttribute: ...
  @classmethod
  def VariableWriteAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class VariableWriteAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> VariableWriteAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> VariableWriteAttributeT: ...
  @classmethod
  def InitFromObj(cls, variableWriteAttribute: VariableWriteAttribute) -> VariableWriteAttributeT: ...
  def _UnPack(self, variableWriteAttribute: VariableWriteAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def VariableWriteAttributeStart(builder: flatbuffers.Builder) -> None: ...
def VariableWriteAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class VariableReadAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> VariableReadAttribute: ...
  @classmethod
  def GetRootAsVariableReadAttribute(cls, buf: bytes, offset: int) -> VariableReadAttribute: ...
  @classmethod
  def VariableReadAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class VariableReadAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> VariableReadAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> VariableReadAttributeT: ...
  @classmethod
  def InitFromObj(cls, variableReadAttribute: VariableReadAttribute) -> VariableReadAttributeT: ...
  def _UnPack(self, variableReadAttribute: VariableReadAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def VariableReadAttributeStart(builder: flatbuffers.Builder) -> None: ...
def VariableReadAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ConstShapeAttribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ConstShapeAttribute: ...
  @classmethod
  def GetRootAsConstShapeAttribute(cls, buf: bytes, offset: int) -> ConstShapeAttribute: ...
  @classmethod
  def ConstShapeAttributeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
class ConstShapeAttributeT(object):
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> ConstShapeAttributeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> ConstShapeAttributeT: ...
  @classmethod
  def InitFromObj(cls, constShapeAttribute: ConstShapeAttribute) -> ConstShapeAttributeT: ...
  def _UnPack(self, constShapeAttribute: ConstShapeAttribute) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def ConstShapeAttributeStart(builder: flatbuffers.Builder) -> None: ...
def ConstShapeAttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class Version(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Version: ...
  @classmethod
  def GetRootAsVersion(cls, buf: bytes, offset: int) -> Version: ...
  @classmethod
  def VersionBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def _Major(self) -> int: ...
  def _Minor(self) -> int: ...
  def _Patch(self) -> int: ...
  def _Draft(self) -> bool: ...
class VersionT(object):
  _Major: int
  _Minor: int
  _Patch: int
  _Draft: bool
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> VersionT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> VersionT: ...
  @classmethod
  def InitFromObj(cls, version: Version) -> VersionT: ...
  def _UnPack(self, version: Version) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def VersionStart(builder: flatbuffers.Builder) -> None: ...
def VersionAdd_Major(builder: flatbuffers.Builder, _Major: int) -> None: ...
def VersionAdd_Minor(builder: flatbuffers.Builder, _Minor: int) -> None: ...
def VersionAdd_Patch(builder: flatbuffers.Builder, _Patch: int) -> None: ...
def VersionAdd_Draft(builder: flatbuffers.Builder, _Draft: bool) -> None: ...
def VersionEnd(builder: flatbuffers.Builder) -> uoffset: ...
class TosaTensor(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> TosaTensor: ...
  @classmethod
  def GetRootAsTosaTensor(cls, buf: bytes, offset: int) -> TosaTensor: ...
  @classmethod
  def TosaTensorBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Name(self) -> str | None: ...
  def Shape(self, i: int) -> typing.List[int]: ...
  def ShapeAsNumpy(self) -> np.ndarray: ...
  def ShapeLength(self) -> int: ...
  def ShapeIsNone(self) -> bool: ...
  def Type(self) -> typing.Literal[DType.UNKNOWN, DType.BOOL, DType.INT4, DType.INT8, DType.INT16, DType.INT32, DType.INT48, DType.FP32, DType.FP16, DType.BF16, DType.SHAPE, DType.FP8E4M3, DType.FP8E5M2]: ...
  def Data(self, i: int) -> typing.List[int]: ...
  def DataAsNumpy(self) -> np.ndarray: ...
  def DataLength(self) -> int: ...
  def DataIsNone(self) -> bool: ...
  def Variable(self) -> bool: ...
  def IsUnranked(self) -> bool: ...
  def VariableName(self) -> str | None: ...
class TosaTensorT(object):
  name: str | None
  shape: typing.List[int]
  type: typing.Literal[DType.UNKNOWN, DType.BOOL, DType.INT4, DType.INT8, DType.INT16, DType.INT32, DType.INT48, DType.FP32, DType.FP16, DType.BF16, DType.SHAPE, DType.FP8E4M3, DType.FP8E5M2]
  data: typing.List[int]
  variable: bool
  isUnranked: bool
  variableName: str | None
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> TosaTensorT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> TosaTensorT: ...
  @classmethod
  def InitFromObj(cls, tosaTensor: TosaTensor) -> TosaTensorT: ...
  def _UnPack(self, tosaTensor: TosaTensor) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def TosaTensorStart(builder: flatbuffers.Builder) -> None: ...
def TosaTensorAddName(builder: flatbuffers.Builder, name: uoffset) -> None: ...
def TosaTensorAddShape(builder: flatbuffers.Builder, shape: uoffset) -> None: ...
def TosaTensorStartShapeVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TosaTensorAddType(builder: flatbuffers.Builder, type: typing.Literal[DType.UNKNOWN, DType.BOOL, DType.INT4, DType.INT8, DType.INT16, DType.INT32, DType.INT48, DType.FP32, DType.FP16, DType.BF16, DType.SHAPE, DType.FP8E4M3, DType.FP8E5M2]) -> None: ...
def TosaTensorAddData(builder: flatbuffers.Builder, data: uoffset) -> None: ...
def TosaTensorStartDataVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TosaTensorAddVariable(builder: flatbuffers.Builder, variable: bool) -> None: ...
def TosaTensorAddIsUnranked(builder: flatbuffers.Builder, isUnranked: bool) -> None: ...
def TosaTensorAddVariableName(builder: flatbuffers.Builder, variableName: uoffset) -> None: ...
def TosaTensorEnd(builder: flatbuffers.Builder) -> uoffset: ...
class TosaShape(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> TosaShape: ...
  @classmethod
  def GetRootAsTosaShape(cls, buf: bytes, offset: int) -> TosaShape: ...
  @classmethod
  def TosaShapeBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Name(self) -> str | None: ...
  def Rank(self) -> int: ...
  def Data(self, i: int) -> typing.List[int]: ...
  def DataAsNumpy(self) -> np.ndarray: ...
  def DataLength(self) -> int: ...
  def DataIsNone(self) -> bool: ...
class TosaShapeT(object):
  name: str | None
  rank: int
  data: typing.List[int]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> TosaShapeT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> TosaShapeT: ...
  @classmethod
  def InitFromObj(cls, tosaShape: TosaShape) -> TosaShapeT: ...
  def _UnPack(self, tosaShape: TosaShape) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def TosaShapeStart(builder: flatbuffers.Builder) -> None: ...
def TosaShapeAddName(builder: flatbuffers.Builder, name: uoffset) -> None: ...
def TosaShapeAddRank(builder: flatbuffers.Builder, rank: int) -> None: ...
def TosaShapeAddData(builder: flatbuffers.Builder, data: uoffset) -> None: ...
def TosaShapeStartDataVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TosaShapeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class OpLocation(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> OpLocation: ...
  @classmethod
  def GetRootAsOpLocation(cls, buf: bytes, offset: int) -> OpLocation: ...
  @classmethod
  def OpLocationBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Text(self) -> str | None: ...
class OpLocationT(object):
  text: str | None
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> OpLocationT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> OpLocationT: ...
  @classmethod
  def InitFromObj(cls, opLocation: OpLocation) -> OpLocationT: ...
  def _UnPack(self, opLocation: OpLocation) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def OpLocationStart(builder: flatbuffers.Builder) -> None: ...
def OpLocationAddText(builder: flatbuffers.Builder, text: uoffset) -> None: ...
def OpLocationEnd(builder: flatbuffers.Builder) -> uoffset: ...
class TosaOperator(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> TosaOperator: ...
  @classmethod
  def GetRootAsTosaOperator(cls, buf: bytes, offset: int) -> TosaOperator: ...
  @classmethod
  def TosaOperatorBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Op(self) -> typing.Literal[Op.UNKNOWN, Op.ARGMAX, Op.AVG_POOL2D, Op.CONV2D, Op.CONV3D, Op.DEPTHWISE_CONV2D, Op.FFT2D, Op.MATMUL, Op.MAX_POOL2D, Op.RFFT2D, Op.TRANSPOSE_CONV2D, Op.CLAMP, Op.ERF, Op.SIGMOID, Op.TANH, Op.ADD, Op.ARITHMETIC_RIGHT_SHIFT, Op.BITWISE_AND, Op.BITWISE_OR, Op.BITWISE_XOR, Op.INTDIV, Op.LOGICAL_AND, Op.LOGICAL_LEFT_SHIFT, Op.LOGICAL_RIGHT_SHIFT, Op.LOGICAL_OR, Op.LOGICAL_XOR, Op.MAXIMUM, Op.MINIMUM, Op.MUL, Op.POW, Op.SUB, Op.TABLE, Op.ABS, Op.BITWISE_NOT, Op.CEIL, Op.CLZ, Op.COS, Op.EXP, Op.FLOOR, Op.LOG, Op.LOGICAL_NOT, Op.NEGATE, Op.RECIPROCAL, Op.RSQRT, Op.SIN, Op.SELECT, Op.EQUAL, Op.GREATER, Op.GREATER_EQUAL, Op.REDUCE_ALL, Op.REDUCE_ANY, Op.REDUCE_MAX, Op.REDUCE_MIN, Op.REDUCE_PRODUCT, Op.REDUCE_SUM, Op.CONCAT, Op.PAD, Op.RESHAPE, Op.REVERSE, Op.SLICE, Op.TILE, Op.TRANSPOSE, Op.GATHER, Op.SCATTER, Op.RESIZE, Op.CAST, Op.RESCALE, Op.CONST, Op.IDENTITY, Op.CUSTOM, Op.COND_IF, Op.WHILE_LOOP, Op.VARIABLE, Op.VARIABLE_WRITE, Op.VARIABLE_READ, Op.CONST_SHAPE]: ...
  def AttributeType(self) -> typing.Literal[Attribute.NONE, Attribute.ArgMaxAttribute, Attribute.AvgPool2dAttribute, Attribute.Conv2dAttribute, Attribute.Conv3dAttribute, Attribute.DepthwiseConv2dAttribute, Attribute.FFT2dAttribute, Attribute.MatMulAttribute, Attribute.MaxPool2dAttribute, Attribute.RFFT2dAttribute, Attribute.TransposeConv2dAttribute, Attribute.ClampAttribute, Attribute.ErfAttribute, Attribute.SigmoidAttribute, Attribute.TanhAttribute, Attribute.AddAttribute, Attribute.ArithmeticRightShiftAttribute, Attribute.BitwiseAndAttribute, Attribute.BitwiseOrAttribute, Attribute.BitwiseXorAttribute, Attribute.IntDivAttribute, Attribute.LogicalAndAttribute, Attribute.LogicalLeftShiftAttribute, Attribute.LogicalRightShiftAttribute, Attribute.LogicalOrAttribute, Attribute.LogicalXorAttribute, Attribute.MaximumAttribute, Attribute.MinimumAttribute, Attribute.MulAttribute, Attribute.PowAttribute, Attribute.SubAttribute, Attribute.TableAttribute, Attribute.AbsAttribute, Attribute.BitwiseNotAttribute, Attribute.CeilAttribute, Attribute.ClzAttribute, Attribute.CosAttribute, Attribute.ExpAttribute, Attribute.FloorAttribute, Attribute.LogAttribute, Attribute.LogicalNotAttribute, Attribute.NegateAttribute, Attribute.ReciprocalAttribute, Attribute.RsqrtAttribute, Attribute.SinAttribute, Attribute.SelectAttribute, Attribute.EqualAttribute, Attribute.GreaterAttribute, Attribute.GreaterEqualAttribute, Attribute.ReduceAllAttribute, Attribute.ReduceAnyAttribute, Attribute.ReduceMaxAttribute, Attribute.ReduceMinAttribute, Attribute.ReduceProductAttribute, Attribute.ReduceSumAttribute, Attribute.ConcatAttribute, Attribute.PadAttribute, Attribute.ReshapeAttribute, Attribute.ReverseAttribute, Attribute.SliceAttribute, Attribute.TileAttribute, Attribute.TransposeAttribute, Attribute.GatherAttribute, Attribute.ScatterAttribute, Attribute.ResizeAttribute, Attribute.CastAttribute, Attribute.RescaleAttribute, Attribute.ConstAttribute, Attribute.IdentityAttribute, Attribute.CustomAttribute, Attribute.CondIfAttribute, Attribute.WhileLoopAttribute, Attribute.VariableAttribute, Attribute.VariableWriteAttribute, Attribute.VariableReadAttribute, Attribute.ConstShapeAttribute]: ...
  def Attribute(self) -> table.Table | None: ...
  def Inputs(self, i: int) -> str: ...
  def InputsLength(self) -> int: ...
  def InputsIsNone(self) -> bool: ...
  def Outputs(self, i: int) -> str: ...
  def OutputsLength(self) -> int: ...
  def OutputsIsNone(self) -> bool: ...
  def Location(self) -> OpLocation | None: ...
class TosaOperatorT(object):
  op: typing.Literal[Op.UNKNOWN, Op.ARGMAX, Op.AVG_POOL2D, Op.CONV2D, Op.CONV3D, Op.DEPTHWISE_CONV2D, Op.FFT2D, Op.MATMUL, Op.MAX_POOL2D, Op.RFFT2D, Op.TRANSPOSE_CONV2D, Op.CLAMP, Op.ERF, Op.SIGMOID, Op.TANH, Op.ADD, Op.ARITHMETIC_RIGHT_SHIFT, Op.BITWISE_AND, Op.BITWISE_OR, Op.BITWISE_XOR, Op.INTDIV, Op.LOGICAL_AND, Op.LOGICAL_LEFT_SHIFT, Op.LOGICAL_RIGHT_SHIFT, Op.LOGICAL_OR, Op.LOGICAL_XOR, Op.MAXIMUM, Op.MINIMUM, Op.MUL, Op.POW, Op.SUB, Op.TABLE, Op.ABS, Op.BITWISE_NOT, Op.CEIL, Op.CLZ, Op.COS, Op.EXP, Op.FLOOR, Op.LOG, Op.LOGICAL_NOT, Op.NEGATE, Op.RECIPROCAL, Op.RSQRT, Op.SIN, Op.SELECT, Op.EQUAL, Op.GREATER, Op.GREATER_EQUAL, Op.REDUCE_ALL, Op.REDUCE_ANY, Op.REDUCE_MAX, Op.REDUCE_MIN, Op.REDUCE_PRODUCT, Op.REDUCE_SUM, Op.CONCAT, Op.PAD, Op.RESHAPE, Op.REVERSE, Op.SLICE, Op.TILE, Op.TRANSPOSE, Op.GATHER, Op.SCATTER, Op.RESIZE, Op.CAST, Op.RESCALE, Op.CONST, Op.IDENTITY, Op.CUSTOM, Op.COND_IF, Op.WHILE_LOOP, Op.VARIABLE, Op.VARIABLE_WRITE, Op.VARIABLE_READ, Op.CONST_SHAPE]
  attributeType: typing.Literal[Attribute.NONE, Attribute.ArgMaxAttribute, Attribute.AvgPool2dAttribute, Attribute.Conv2dAttribute, Attribute.Conv3dAttribute, Attribute.DepthwiseConv2dAttribute, Attribute.FFT2dAttribute, Attribute.MatMulAttribute, Attribute.MaxPool2dAttribute, Attribute.RFFT2dAttribute, Attribute.TransposeConv2dAttribute, Attribute.ClampAttribute, Attribute.ErfAttribute, Attribute.SigmoidAttribute, Attribute.TanhAttribute, Attribute.AddAttribute, Attribute.ArithmeticRightShiftAttribute, Attribute.BitwiseAndAttribute, Attribute.BitwiseOrAttribute, Attribute.BitwiseXorAttribute, Attribute.IntDivAttribute, Attribute.LogicalAndAttribute, Attribute.LogicalLeftShiftAttribute, Attribute.LogicalRightShiftAttribute, Attribute.LogicalOrAttribute, Attribute.LogicalXorAttribute, Attribute.MaximumAttribute, Attribute.MinimumAttribute, Attribute.MulAttribute, Attribute.PowAttribute, Attribute.SubAttribute, Attribute.TableAttribute, Attribute.AbsAttribute, Attribute.BitwiseNotAttribute, Attribute.CeilAttribute, Attribute.ClzAttribute, Attribute.CosAttribute, Attribute.ExpAttribute, Attribute.FloorAttribute, Attribute.LogAttribute, Attribute.LogicalNotAttribute, Attribute.NegateAttribute, Attribute.ReciprocalAttribute, Attribute.RsqrtAttribute, Attribute.SinAttribute, Attribute.SelectAttribute, Attribute.EqualAttribute, Attribute.GreaterAttribute, Attribute.GreaterEqualAttribute, Attribute.ReduceAllAttribute, Attribute.ReduceAnyAttribute, Attribute.ReduceMaxAttribute, Attribute.ReduceMinAttribute, Attribute.ReduceProductAttribute, Attribute.ReduceSumAttribute, Attribute.ConcatAttribute, Attribute.PadAttribute, Attribute.ReshapeAttribute, Attribute.ReverseAttribute, Attribute.SliceAttribute, Attribute.TileAttribute, Attribute.TransposeAttribute, Attribute.GatherAttribute, Attribute.ScatterAttribute, Attribute.ResizeAttribute, Attribute.CastAttribute, Attribute.RescaleAttribute, Attribute.ConstAttribute, Attribute.IdentityAttribute, Attribute.CustomAttribute, Attribute.CondIfAttribute, Attribute.WhileLoopAttribute, Attribute.VariableAttribute, Attribute.VariableWriteAttribute, Attribute.VariableReadAttribute, Attribute.ConstShapeAttribute]
  attribute: typing.Union[None, ArgMaxAttributeT, AvgPool2dAttributeT, Conv2dAttributeT, Conv3dAttributeT, DepthwiseConv2dAttributeT, FFT2dAttributeT, MatMulAttributeT, MaxPool2dAttributeT, RFFT2dAttributeT, TransposeConv2dAttributeT, ClampAttributeT, ErfAttributeT, SigmoidAttributeT, TanhAttributeT, AddAttributeT, ArithmeticRightShiftAttributeT, BitwiseAndAttributeT, BitwiseOrAttributeT, BitwiseXorAttributeT, IntDivAttributeT, LogicalAndAttributeT, LogicalLeftShiftAttributeT, LogicalRightShiftAttributeT, LogicalOrAttributeT, LogicalXorAttributeT, MaximumAttributeT, MinimumAttributeT, MulAttributeT, PowAttributeT, SubAttributeT, TableAttributeT, AbsAttributeT, BitwiseNotAttributeT, CeilAttributeT, ClzAttributeT, CosAttributeT, ExpAttributeT, FloorAttributeT, LogAttributeT, LogicalNotAttributeT, NegateAttributeT, ReciprocalAttributeT, RsqrtAttributeT, SinAttributeT, SelectAttributeT, EqualAttributeT, GreaterAttributeT, GreaterEqualAttributeT, ReduceAllAttributeT, ReduceAnyAttributeT, ReduceMaxAttributeT, ReduceMinAttributeT, ReduceProductAttributeT, ReduceSumAttributeT, ConcatAttributeT, PadAttributeT, ReshapeAttributeT, ReverseAttributeT, SliceAttributeT, TileAttributeT, TransposeAttributeT, GatherAttributeT, ScatterAttributeT, ResizeAttributeT, CastAttributeT, RescaleAttributeT, ConstAttributeT, IdentityAttributeT, CustomAttributeT, CondIfAttributeT, WhileLoopAttributeT, VariableAttributeT, VariableWriteAttributeT, VariableReadAttributeT, ConstShapeAttributeT]
  inputs: typing.List[str]
  outputs: typing.List[str]
  location: OpLocationT | None
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> TosaOperatorT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> TosaOperatorT: ...
  @classmethod
  def InitFromObj(cls, tosaOperator: TosaOperator) -> TosaOperatorT: ...
  def _UnPack(self, tosaOperator: TosaOperator) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def TosaOperatorStart(builder: flatbuffers.Builder) -> None: ...
def TosaOperatorAddOp(builder: flatbuffers.Builder, op: typing.Literal[Op.UNKNOWN, Op.ARGMAX, Op.AVG_POOL2D, Op.CONV2D, Op.CONV3D, Op.DEPTHWISE_CONV2D, Op.FFT2D, Op.MATMUL, Op.MAX_POOL2D, Op.RFFT2D, Op.TRANSPOSE_CONV2D, Op.CLAMP, Op.ERF, Op.SIGMOID, Op.TANH, Op.ADD, Op.ARITHMETIC_RIGHT_SHIFT, Op.BITWISE_AND, Op.BITWISE_OR, Op.BITWISE_XOR, Op.INTDIV, Op.LOGICAL_AND, Op.LOGICAL_LEFT_SHIFT, Op.LOGICAL_RIGHT_SHIFT, Op.LOGICAL_OR, Op.LOGICAL_XOR, Op.MAXIMUM, Op.MINIMUM, Op.MUL, Op.POW, Op.SUB, Op.TABLE, Op.ABS, Op.BITWISE_NOT, Op.CEIL, Op.CLZ, Op.COS, Op.EXP, Op.FLOOR, Op.LOG, Op.LOGICAL_NOT, Op.NEGATE, Op.RECIPROCAL, Op.RSQRT, Op.SIN, Op.SELECT, Op.EQUAL, Op.GREATER, Op.GREATER_EQUAL, Op.REDUCE_ALL, Op.REDUCE_ANY, Op.REDUCE_MAX, Op.REDUCE_MIN, Op.REDUCE_PRODUCT, Op.REDUCE_SUM, Op.CONCAT, Op.PAD, Op.RESHAPE, Op.REVERSE, Op.SLICE, Op.TILE, Op.TRANSPOSE, Op.GATHER, Op.SCATTER, Op.RESIZE, Op.CAST, Op.RESCALE, Op.CONST, Op.IDENTITY, Op.CUSTOM, Op.COND_IF, Op.WHILE_LOOP, Op.VARIABLE, Op.VARIABLE_WRITE, Op.VARIABLE_READ, Op.CONST_SHAPE]) -> None: ...
def TosaOperatorAddAttributeType(builder: flatbuffers.Builder, attributeType: typing.Literal[Attribute.NONE, Attribute.ArgMaxAttribute, Attribute.AvgPool2dAttribute, Attribute.Conv2dAttribute, Attribute.Conv3dAttribute, Attribute.DepthwiseConv2dAttribute, Attribute.FFT2dAttribute, Attribute.MatMulAttribute, Attribute.MaxPool2dAttribute, Attribute.RFFT2dAttribute, Attribute.TransposeConv2dAttribute, Attribute.ClampAttribute, Attribute.ErfAttribute, Attribute.SigmoidAttribute, Attribute.TanhAttribute, Attribute.AddAttribute, Attribute.ArithmeticRightShiftAttribute, Attribute.BitwiseAndAttribute, Attribute.BitwiseOrAttribute, Attribute.BitwiseXorAttribute, Attribute.IntDivAttribute, Attribute.LogicalAndAttribute, Attribute.LogicalLeftShiftAttribute, Attribute.LogicalRightShiftAttribute, Attribute.LogicalOrAttribute, Attribute.LogicalXorAttribute, Attribute.MaximumAttribute, Attribute.MinimumAttribute, Attribute.MulAttribute, Attribute.PowAttribute, Attribute.SubAttribute, Attribute.TableAttribute, Attribute.AbsAttribute, Attribute.BitwiseNotAttribute, Attribute.CeilAttribute, Attribute.ClzAttribute, Attribute.CosAttribute, Attribute.ExpAttribute, Attribute.FloorAttribute, Attribute.LogAttribute, Attribute.LogicalNotAttribute, Attribute.NegateAttribute, Attribute.ReciprocalAttribute, Attribute.RsqrtAttribute, Attribute.SinAttribute, Attribute.SelectAttribute, Attribute.EqualAttribute, Attribute.GreaterAttribute, Attribute.GreaterEqualAttribute, Attribute.ReduceAllAttribute, Attribute.ReduceAnyAttribute, Attribute.ReduceMaxAttribute, Attribute.ReduceMinAttribute, Attribute.ReduceProductAttribute, Attribute.ReduceSumAttribute, Attribute.ConcatAttribute, Attribute.PadAttribute, Attribute.ReshapeAttribute, Attribute.ReverseAttribute, Attribute.SliceAttribute, Attribute.TileAttribute, Attribute.TransposeAttribute, Attribute.GatherAttribute, Attribute.ScatterAttribute, Attribute.ResizeAttribute, Attribute.CastAttribute, Attribute.RescaleAttribute, Attribute.ConstAttribute, Attribute.IdentityAttribute, Attribute.CustomAttribute, Attribute.CondIfAttribute, Attribute.WhileLoopAttribute, Attribute.VariableAttribute, Attribute.VariableWriteAttribute, Attribute.VariableReadAttribute, Attribute.ConstShapeAttribute]) -> None: ...
def TosaOperatorAddAttribute(builder: flatbuffers.Builder, attribute: uoffset) -> None: ...
def TosaOperatorAddInputs(builder: flatbuffers.Builder, inputs: uoffset) -> None: ...
def TosaOperatorStartInputsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TosaOperatorAddOutputs(builder: flatbuffers.Builder, outputs: uoffset) -> None: ...
def TosaOperatorStartOutputsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TosaOperatorAddLocation(builder: flatbuffers.Builder, location: uoffset) -> None: ...
def TosaOperatorEnd(builder: flatbuffers.Builder) -> uoffset: ...
class TosaBasicBlock(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> TosaBasicBlock: ...
  @classmethod
  def GetRootAsTosaBasicBlock(cls, buf: bytes, offset: int) -> TosaBasicBlock: ...
  @classmethod
  def TosaBasicBlockBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Name(self) -> str | None: ...
  def Operators(self, i: int) -> TosaOperator | None: ...
  def OperatorsLength(self) -> int: ...
  def OperatorsIsNone(self) -> bool: ...
  def Tensors(self, i: int) -> TosaTensor | None: ...
  def TensorsLength(self) -> int: ...
  def TensorsIsNone(self) -> bool: ...
  def Inputs(self, i: int) -> str: ...
  def InputsLength(self) -> int: ...
  def InputsIsNone(self) -> bool: ...
  def Outputs(self, i: int) -> str: ...
  def OutputsLength(self) -> int: ...
  def OutputsIsNone(self) -> bool: ...
  def Shapes(self, i: int) -> TosaShape | None: ...
  def ShapesLength(self) -> int: ...
  def ShapesIsNone(self) -> bool: ...
class TosaBasicBlockT(object):
  name: str | None
  operators: typing.List[TosaOperatorT]
  tensors: typing.List[TosaTensorT]
  inputs: typing.List[str]
  outputs: typing.List[str]
  shapes: typing.List[TosaShapeT]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> TosaBasicBlockT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> TosaBasicBlockT: ...
  @classmethod
  def InitFromObj(cls, tosaBasicBlock: TosaBasicBlock) -> TosaBasicBlockT: ...
  def _UnPack(self, tosaBasicBlock: TosaBasicBlock) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def TosaBasicBlockStart(builder: flatbuffers.Builder) -> None: ...
def TosaBasicBlockAddName(builder: flatbuffers.Builder, name: uoffset) -> None: ...
def TosaBasicBlockAddOperators(builder: flatbuffers.Builder, operators: uoffset) -> None: ...
def TosaBasicBlockStartOperatorsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TosaBasicBlockAddTensors(builder: flatbuffers.Builder, tensors: uoffset) -> None: ...
def TosaBasicBlockStartTensorsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TosaBasicBlockAddInputs(builder: flatbuffers.Builder, inputs: uoffset) -> None: ...
def TosaBasicBlockStartInputsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TosaBasicBlockAddOutputs(builder: flatbuffers.Builder, outputs: uoffset) -> None: ...
def TosaBasicBlockStartOutputsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TosaBasicBlockAddShapes(builder: flatbuffers.Builder, shapes: uoffset) -> None: ...
def TosaBasicBlockStartShapesVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TosaBasicBlockEnd(builder: flatbuffers.Builder) -> uoffset: ...
class TosaRegion(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> TosaRegion: ...
  @classmethod
  def GetRootAsTosaRegion(cls, buf: bytes, offset: int) -> TosaRegion: ...
  @classmethod
  def TosaRegionBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Name(self) -> str | None: ...
  def Blocks(self, i: int) -> TosaBasicBlock | None: ...
  def BlocksLength(self) -> int: ...
  def BlocksIsNone(self) -> bool: ...
class TosaRegionT(object):
  name: str | None
  blocks: typing.List[TosaBasicBlockT]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> TosaRegionT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> TosaRegionT: ...
  @classmethod
  def InitFromObj(cls, tosaRegion: TosaRegion) -> TosaRegionT: ...
  def _UnPack(self, tosaRegion: TosaRegion) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def TosaRegionStart(builder: flatbuffers.Builder) -> None: ...
def TosaRegionAddName(builder: flatbuffers.Builder, name: uoffset) -> None: ...
def TosaRegionAddBlocks(builder: flatbuffers.Builder, blocks: uoffset) -> None: ...
def TosaRegionStartBlocksVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TosaRegionEnd(builder: flatbuffers.Builder) -> uoffset: ...
class TosaGraph(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> TosaGraph: ...
  @classmethod
  def GetRootAsTosaGraph(cls, buf: bytes, offset: int) -> TosaGraph: ...
  @classmethod
  def TosaGraphBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Version(self) -> Version | None: ...
  def Regions(self, i: int) -> TosaRegion | None: ...
  def RegionsLength(self) -> int: ...
  def RegionsIsNone(self) -> bool: ...
class TosaGraphT(object):
  version: VersionT | None
  regions: typing.List[TosaRegionT]
  @classmethod
  def InitFromBuf(cls, buf: bytes, pos: int) -> TosaGraphT: ...
  @classmethod
  def InitFromPackedBuf(cls, buf: bytes, pos: int = 0) -> TosaGraphT: ...
  @classmethod
  def InitFromObj(cls, tosaGraph: TosaGraph) -> TosaGraphT: ...
  def _UnPack(self, tosaGraph: TosaGraph) -> None: ...
  def Pack(self, builder: flatbuffers.Builder) -> None: ...
def TosaGraphStart(builder: flatbuffers.Builder) -> None: ...
def TosaGraphAddVersion(builder: flatbuffers.Builder, version: uoffset) -> None: ...
def TosaGraphAddRegions(builder: flatbuffers.Builder, regions: uoffset) -> None: ...
def TosaGraphStartRegionsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TosaGraphEnd(builder: flatbuffers.Builder) -> uoffset: ...

