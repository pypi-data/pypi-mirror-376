{
  "permissions": {
    "allow": [
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(cat:*)",
      "Bash(source:*)",
      "Bash(pip show:*)",
      "Bash(python:*)",
      "Bash(pip install:*)",
      "Bash(tunacode:*)",
      "Bash(rg:*)",
      "Bash(rm:*)",
      "Bash(git fetch:*)",
      "Bash(pipx list:*)",
      "Bash(pipx uninstall:*)",
      "Bash(ls:*)",
      "Bash(make:*)",
      "Bash(gh issue close:*)",
      "Bash(true)",
      "Bash(gh issue create:*)",
      "Bash(venv/bin/python:*)",
      "Bash(gh pr view:*)",
      "Bash(git merge:*)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:ai.pydantic.dev)",
      "WebFetch(domain:til.simonwillison.net)",
      "Bash(./scripts/publish_to_pip.sh:*)",
      "Bash(pytest:*)",
      "Bash(git push:*)",
      "Bash(git checkout:*)",
      "Bash(git tag:*)",
      "Bash(git pull:*)",
      "Bash(git rebase:*)",
      "Bash(bash:*)",
      "Bash(chmod:*)",
      "Bash(gh pr list:*)",
      "Bash(gh api:*)",
      "Bash(gh issue:*)",
      "Bash(/dev/null)",
      "Bash(PYTHONPATH=/root/tunacode/src python -c \"import sys; print(sys.path)\")",
      "Bash(PYTHONPATH=/root/tunacode/src python -m pytest tests/test_list_dir.py::test_list_empty_directory -v)",
      "Bash(PYTHONPATH=/root/tunacode/src python -m pytest tests/characterization/repl/test_command_parsing.py -v)",
      "Bash(./agent-tools/scratchpad.sh:*)",
      "Bash(./agent-tools/wakeup.sh:*)",
      "Bash(awk:*)",
      "Bash(sed:*)",
      "Bash(./agent-tools/check_workflow.sh:*)",
      "Bash(venv/bin/pytest tests/test_parallel_tool_execution.py -xvs)",
      "Bash(venv/bin/pytest tests/test_parallel_read_only_tools.py -xvs)",
      "Bash(venv/bin/pytest tests/test_parallel_read_only_tools.py::test_read_only_tools_execute_in_parallel -xvs)",
      "Bash(black:*)",
      "Bash(./wakeup.sh:*)",
      "Bash(./scratchpad.sh:*)",
      "Bash(mkdir:*)",
      "Bash(./llm-agent-tools/context.sh:*)",
      "Bash(./llm-agent-tools/scratchpad-multi.sh:*)",
      "Bash(repolinter lint:*)",
      "Bash(./llm-agent-tools/knowledge.sh:*)",
      "Bash(./llm-agent-tools/codemap.sh:*)",
      "Bash(./llm-agent-tools/researcher.sh:*)",
      "Bash(flake8:*)",
      "Bash(isort:*)",
      "Bash(gh pr checkout:*)",
      "Bash(gh pr diff:*)",
      "Bash(gh pr merge:*)",
      "Bash(git branch:*)",
      "Bash(gh pr close:*)",
      "Bash(git remote:*)",
      "Bash(venv/bin/black:*)",
      "Bash(venv/bin/isort:*)",
      "Bash(git restore:*)",
      "Bash(ruff check:*)",
      "Bash(./scratchpad-multi.sh:*)",
      "Bash(ruff format:*)",
      "Bash(venv/bin/ruff check:*)",
      "Bash(./scripts/fix_simple_errors.sh:*)",
      "Bash(venv/bin/ruff:*)",
      "Bash(venv/bin/pytest --version)",
      "Bash(git reset:*)",
      "Bash(git gc:*)",
      "Bash(git clean:*)",
      "Bash(./codemap.sh)",
      "Bash(./codemap.sh:*)",
      "Bash(../llm-agent-tools/codemap.sh:*)",
      "Bash(gh pr create:*)",
      "Bash(cp:*)",
      "Bash(gh pr comment:*)",
      "Bash(pip3 list:*)",
      "Bash(gh pr checks:*)",
      "Bash(git cherry-pick:*)",
      "Bash(gh pr push:*)",
      "Bash(mv:*)",
      "Bash(./run_recursive_branch.sh:*)",
      "mcp__task-master__add_task",
      "mcp__task-master__set_task_status",
      "mcp__task-master__update_task",
      "mcp__task-master__get_task",
      "Bash(pre-commit:*)",
      "Bash(pre-commit run:*)",
      "Bash(vulture:*)",
      "Bash(git stash:*)",
      "Bash(venv/bin/unimport:*)",
      "Bash(time venv/bin/unimport:*)",
      "Bash(timeout:*)",
      "Bash(/root/tunacode/llm-agent-tools/scratchpad-multi.sh:*)",
      "Bash(PYTHONPATH=/root/tunacode/src venv/bin/python test_spinner_demo.py)",
      "Bash(hatch run test:*)",
      "Bash(/tmp/test_detection.sh:*)",
      "Bash(/root/tunacode/scripts/uninstall.sh:*)",
      "Bash(~/.local/bin/tunacode:*)",
      "Bash(pip uninstall:*)",
      "Bash(/root/.tunacode-venv/bin/pip list)",
      "Bash(uv pip list:*)",
      "Bash(uv pip install:*)",
      "Bash(uv venv:*)",
      "Bash(test-env/bin/tunacode:*)",
      "Bash(hatch env remove:*)",
      "Bash(hatch env:*)",
      "Bash(hatch run pip:*)",
      "Bash(./scripts/install_linux.sh:*)",
      "Bash(hatch run pre-commit run:*)",
      "Bash(./scripts/setup_dev_env.sh:*)",
      "Bash(hatch run tunacode:*)"
    ]
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "task-master-ai"
  ]
}