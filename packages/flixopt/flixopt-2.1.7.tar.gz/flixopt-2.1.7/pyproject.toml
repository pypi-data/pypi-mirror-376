[build-system]
requires = ["setuptools>=61.0.0", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "flixopt"
dynamic = ["version"]
description = "Vector based energy and material flow optimization framework in Python."
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT License" }
authors = [
    { name = "Chair of Building Energy Systems and Heat Supply, TU Dresden", email = "peter.stange@tu-dresden.de" },
    { name = "Felix Bumann", email = "felixbumann387@gmail.com" },
    { name = "Felix Panitz", email = "baumbude@googlemail.com" },
    { name = "Peter Stange", email = "peter.stange@tu-dresden.de" }
]
maintainers = [
    { name = "Felix Bumann", email = "felixbumann387@gmail.com" },
    { name = "Peter Stange", email = "peter.stange@tu-dresden.de" }
]
keywords = ["optimization", "energy systems", "numerical analysis"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "License :: OSI Approved :: MIT License",
]
dependencies = [
    # Core scientific computing
    "numpy >= 1.21.5, < 3",
    "pandas >= 2.0.0, < 3",
    # Optimization and data handling
    "linopy >=0.5.7, <0.5.8",  # Update and test regularly
    "netcdf4 >= 1.6.1, < 2",
    # Utilities
    "PyYAML >= 6.0.0, < 7",
    "rich >= 13.0.0",
    "tomli >= 2.0.1; python_version < '3.11'", # Only needed with python 3.10 or earlier
    # Default solver
    "highspy >= 1.5.3",

    # Visualization
    "matplotlib >= 3.5.2, < 4.0.0",
    "plotly >= 5.15.0, < 6.0.0",
]

[project.optional-dependencies]
# Interactive network visualization with enhanced color picker
network-viz = [
    "dash >= 3.0.0",
    "dash-cytoscape >= 1.0.0",
    "dash-daq >= 0.6.0",
    "networkx >= 3.0.0",
    "werkzeug >= 3.0.0",
]

# Full feature set (everything except dev tools)
full = [
    "pyvis ==0.3.2",  # Visualizing FlowSystem Network
    "tsam >= 2.3.1, < 3.0.0",   # Time series aggregation
    "scipy >= 1.15.1, < 2.0.0", # Used by tsam. Prior versions have conflict with highspy. See https://github.com/scipy/scipy/issues/22257
    "gurobipy >= 10.0.0",
    "dash >= 3.0.0",  # Visualizing FlowSystem Network as app
    "dash-cytoscape >= 1.0.0",  # Visualizing FlowSystem Network as app
    "dash-daq >= 0.6.0",  # Visualizing FlowSystem Network as app
    "networkx >= 3.0.0",  # Visualizing FlowSystem Network as app
    "werkzeug >= 3.0.0",  # Visualizing FlowSystem Network as app
]

# Development tools and testing
dev = [
    "pytest >= 7.0.0",
    "ruff >= 0.9.0",
    "pre-commit >= 4.0.0",
    "pyvis ==0.3.2",  # Visualizing FlowSystem
    "tsam >= 2.3.1, < 3.0.0",   # Time series aggregation
    "scipy >= 1.15.1, < 2.0.0", # Used by tsam. Prior versions have conflict with highspy. See https://github.com/scipy/scipy/issues/22257
    "gurobipy >= 10.0.0",
    "dash >= 3.0.0",
    "dash-cytoscape >= 1.0.0",
    "dash-daq >= 0.6.0",
    "networkx >= 3.0.0",
    "werkzeug >= 3.0.0",
]

# Documentation building
docs = [
    "mkdocs-material >= 9.0.0, < 10",
    "mkdocstrings-python >= 1.0.0",
    "mkdocs-table-reader-plugin >= 2.0.0",
    "mkdocs-gen-files >= 0.4.0",
    "mkdocs-include-markdown-plugin >= 6.0.0",
    "mkdocs-literate-nav >= 0.6.0",
    "markdown-include >= 0.8.0",
    "pymdown-extensions >= 10.0.0",
    "pygments >= 2.14.0",
    "mike >= 2.0.0",
]

[project.urls]
homepage = "https://tu-dresden.de/ing/maschinenwesen/iet/gewv/forschung/forschungsprojekte/flixopt"
repository = "https://github.com/flixOpt/flixopt"
documentation = "https://flixopt.github.io/flixopt/"

[tool.setuptools.packages.find]
where = ["."]
exclude = ["tests", "docs", "examples", "examples.*", "Tutorials", ".git", ".vscode", "build", ".venv", "venv/"]

[tool.setuptools.package-data]
"flixopt" = ["config.yaml"]

[tool.setuptools_scm]
version_scheme = "post-release"

[tool.ruff]
# Files or directories to exclude (e.g., virtual environments, cache, build artifacts)
exclude = [
    "venv",  # Virtual environments
    "build",  # Build artifacts
    "dist",  # Distribution files
    "__pycache__",  # Bytecode cache
    ".git",  # Git folder
    ".mypy_cache",  # MyPy cache
]

line-length = 120

[tool.ruff.lint]
select = ["E", "F", "W", "I", "B", "N"]  # Enable linting rules by category (e.g., error, warnings, unused imports)
ignore = [  # Ignore specific rules
    "E501",  # Ignore line-length checks (use Black for formatting)
    "F401",  # Allow unused imports in some cases (use __all__)
]
extend-fixable = ["B"]   # Enable fix for flake8-bugbear (`B`), on top of any rules specified by `fixable`.

# Apply rule exceptions to specific files or directories
[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["S101"]  # Ignore assertions in test files
"tests/test_integration.py" = ["N806"]  # Ignore NOT lowercase names in test files
"flixopt/linear_converters.py" = ["N803"]  # Parameters with NOT lowercase names

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
docstring-code-format = true

[tool.bandit]
skips = ["B101", "B506"]  # assert_used and yaml_load
exclude_dirs = ["tests/"]
