version: "3.9"

services:
  init_letsencrypt:
    image: alpine:3.20
    command: sh -c "mkdir -p /letsencrypt && touch /letsencrypt/acme.json && chmod 600 /letsencrypt/acme.json"
    volumes:
      - ./letsencrypt:/letsencrypt
    restart: "no"

  traefik:
    image: traefik:v3.0
    depends_on:
      init_letsencrypt:
        condition: service_completed_successfully
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https

      # Long-lived WS/streams (tune if you like)
      - --entryPoints.websecure.transport.respondingTimeouts.idleTimeout=0
      - --serversTransport.forwardingTimeouts.idleConnTimeout=0

      # Let's Encrypt (TLS-ALPN challenge; switch to httpchallenge if behind a LB/CDN)
      - --certificatesresolvers.letsencrypt.acme.email=${LE_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true

      # (optional) dashboard off
      - --api.dashboard=false
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks: [web]
    restart: unless-stopped

  web:
    image: nginx:alpine
    volumes:
      - ./web:/usr/share/nginx/html:ro
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      # Serve static site for everything except /api and /ws
      - "traefik.http.routers.web.rule=Host(`com-cloud.cloud`) && PathPrefix(`/`) && !PathPrefix(`/api`) && !PathPrefix(`/ws`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls=true"
      - "traefik.http.routers.web.tls.certresolver=letsencrypt"
      - "traefik.http.routers.web.priority=1"
      - "traefik.http.services.web.loadbalancer.server.port=80"
    networks: [web]
    restart: unless-stopped

  assistant:
    image: sithuyehtun/full_duplex_assistant:${IMAGE_TAG:-latest}
    command: >
      uvicorn src.assistant.app:app
      --host 0.0.0.0
      --port 8000
      --proxy-headers
      --forwarded-allow-ips=127.0.0.1,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
    env_file:
      - ./src/assistant/.env
    environment:
      - ENABLE_VOICE=0
      - ALLOWED_ORIGINS=https://com-cloud.cloud
      # If you ever switch to "assistant.app:app", uncomment the next line:
      # - PYTHONPATH=/app/src
    expose:
      - "8000"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"

      # Single Traefik service backing both routers
      - "traefik.http.services.assistant.loadbalancer.server.port=8000"

      # ===== REST router: https://com-cloud.cloud/api/* → (strip /api) → FastAPI =====
      - "traefik.http.routers.api.rule=Host(`com-cloud.cloud`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.api.priority=100"
      - "traefik.http.routers.api.service=assistant"
      - "traefik.http.middlewares.strip-api.stripprefix.prefixes=/api"
      - "traefik.http.middlewares.api-ratelimit.ratelimit.average=10"
      - "traefik.http.middlewares.api-ratelimit.ratelimit.burst=20"
      - "traefik.http.routers.api.middlewares=strip-api,api-ratelimit"

      # ===== WebSocket router (optional if you expose /ws) =====
      - "traefik.http.routers.ws.rule=Host(`com-cloud.cloud`) && PathPrefix(`/ws`)"
      - "traefik.http.routers.ws.entrypoints=websecure"
      - "traefik.http.routers.ws.tls=true"
      - "traefik.http.routers.ws.tls.certresolver=letsencrypt"
      - "traefik.http.routers.ws.priority=110"
      - "traefik.http.routers.ws.service=assistant"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8000/healthz >/dev/null || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks: [web]
    restart: unless-stopped

networks:
  web:
    driver: bridge
