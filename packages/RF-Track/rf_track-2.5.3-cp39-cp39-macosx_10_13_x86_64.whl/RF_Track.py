import os
os.environ['KMP_DUPLICATE_LIB_OK']='True'
# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.4.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if getattr(globals().get("__spec__"), "parent", None) or __package__ or "." in __name__:
    from . import _RF_Track
else:
    import _RF_Track

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _RF_Track.SWIG_PyInstanceMethod_New
_swig_new_static_method = _RF_Track.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _RF_Track.SHARED_PTR_DISOWN
RF_TRACK_VERSION = _RF_Track.RF_TRACK_VERSION
relativistic_velocity_addition = _RF_Track.relativistic_velocity_addition
lorentz_boost = _RF_Track.lorentz_boost
lorentz_boost_matrix = _RF_Track.lorentz_boost_matrix
rng_set = _RF_Track.rng_set
rng_set_seed = _RF_Track.rng_set_seed
rng_get = _RF_Track.rng_get
class Aperture(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NONE = _RF_Track.Aperture_NONE
    RECTANGULAR = _RF_Track.Aperture_RECTANGULAR
    CIRCULAR = _RF_Track.Aperture_CIRCULAR
    is_point_inside_aperture = _swig_new_instance_method(_RF_Track.Aperture_is_point_inside_aperture)
    is_particle_inside_aperture = _swig_new_instance_method(_RF_Track.Aperture_is_particle_inside_aperture)
    get_aperture_area = _swig_new_instance_method(_RF_Track.Aperture_get_aperture_area)
    get_aperture_x = _swig_new_instance_method(_RF_Track.Aperture_get_aperture_x)
    get_aperture_y = _swig_new_instance_method(_RF_Track.Aperture_get_aperture_y)
    get_aperture_shape = _swig_new_instance_method(_RF_Track.Aperture_get_aperture_shape)
    set_aperture_x = _swig_new_instance_method(_RF_Track.Aperture_set_aperture_x)
    set_aperture_y = _swig_new_instance_method(_RF_Track.Aperture_set_aperture_y)
    set_aperture = _swig_new_instance_method(_RF_Track.Aperture_set_aperture)
    set_aperture_shape = _swig_new_instance_method(_RF_Track.Aperture_set_aperture_shape)

    def __init__(self):
        _RF_Track.Aperture_swiginit(self, _RF_Track.new_Aperture())
    __swig_destroy__ = _RF_Track.delete_Aperture

# Register Aperture in _RF_Track:
_RF_Track.Aperture_swigregister(Aperture)
cvar = _RF_Track.cvar
version = cvar.version
max_number_of_threads = cvar.max_number_of_threads
clight = cvar.clight
muonmass = cvar.muonmass
protonmass = cvar.protonmass
electronmass = cvar.electronmass
muonlifetime = cvar.muonlifetime
s = cvar.s
ms = cvar.ms
us = cvar.us
ns = cvar.ns
ps = cvar.ps
fs = cvar.fs
C = cvar.C
mC = cvar.mC
uC = cvar.uC
nC = cvar.nC
pC = cvar.pC
electron_anomalous_magnetic_moment = cvar.electron_anomalous_magnetic_moment
proton_anomalous_magnetic_moment = cvar.proton_anomalous_magnetic_moment
muon_anomalous_magnetic_moment = cvar.muon_anomalous_magnetic_moment

class Parallel_ODE_Solver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RF_Track.Parallel_ODE_Solver_swiginit(self, _RF_Track.new_Parallel_ODE_Solver())
    __swig_destroy__ = _RF_Track.delete_Parallel_ODE_Solver
    set_odeint_epsabs = _swig_new_instance_method(_RF_Track.Parallel_ODE_Solver_set_odeint_epsabs)
    set_odeint_epsrel = _swig_new_instance_method(_RF_Track.Parallel_ODE_Solver_set_odeint_epsrel)
    get_odeint_epsabs = _swig_new_instance_method(_RF_Track.Parallel_ODE_Solver_get_odeint_epsabs)
    get_odeint_epsrel = _swig_new_instance_method(_RF_Track.Parallel_ODE_Solver_get_odeint_epsrel)
    get_odeint_algorithm = _swig_new_instance_method(_RF_Track.Parallel_ODE_Solver_get_odeint_algorithm)
    set_odeint_algorithm = _swig_new_instance_method(_RF_Track.Parallel_ODE_Solver_set_odeint_algorithm)

# Register Parallel_ODE_Solver in _RF_Track:
_RF_Track.Parallel_ODE_Solver_swigregister(Parallel_ODE_Solver)
class TrackingOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    odeint_algorithm = property(_RF_Track.TrackingOptions_odeint_algorithm_get, _RF_Track.TrackingOptions_odeint_algorithm_set)
    odeint_epsabs = property(_RF_Track.TrackingOptions_odeint_epsabs_get, _RF_Track.TrackingOptions_odeint_epsabs_set)
    odeint_epsrel = property(_RF_Track.TrackingOptions_odeint_epsrel_get, _RF_Track.TrackingOptions_odeint_epsrel_set)
    backtrack_at_entrance = property(_RF_Track.TrackingOptions_backtrack_at_entrance_get, _RF_Track.TrackingOptions_backtrack_at_entrance_set)
    verbosity = property(_RF_Track.TrackingOptions_verbosity_get, _RF_Track.TrackingOptions_verbosity_set)
    dt_mm = property(_RF_Track.TrackingOptions_dt_mm_get, _RF_Track.TrackingOptions_dt_mm_set)
    t_max_mm = property(_RF_Track.TrackingOptions_t_max_mm_get, _RF_Track.TrackingOptions_t_max_mm_set)
    t_min_mm = property(_RF_Track.TrackingOptions_t_min_mm_get, _RF_Track.TrackingOptions_t_min_mm_set)
    tt_dt_mm = property(_RF_Track.TrackingOptions_tt_dt_mm_get, _RF_Track.TrackingOptions_tt_dt_mm_set)
    tt_select = property(_RF_Track.TrackingOptions_tt_select_get, _RF_Track.TrackingOptions_tt_select_set)
    sc_dt_mm = property(_RF_Track.TrackingOptions_sc_dt_mm_get, _RF_Track.TrackingOptions_sc_dt_mm_set)
    cfx_dt_mm = property(_RF_Track.TrackingOptions_cfx_dt_mm_get, _RF_Track.TrackingOptions_cfx_dt_mm_set)
    emission_nsteps = property(_RF_Track.TrackingOptions_emission_nsteps_get, _RF_Track.TrackingOptions_emission_nsteps_set)
    emission_range = property(_RF_Track.TrackingOptions_emission_range_get, _RF_Track.TrackingOptions_emission_range_set)
    wp_dt_mm = property(_RF_Track.TrackingOptions_wp_dt_mm_get, _RF_Track.TrackingOptions_wp_dt_mm_set)
    wp_basename = property(_RF_Track.TrackingOptions_wp_basename_get, _RF_Track.TrackingOptions_wp_basename_set)
    wp_gzip = property(_RF_Track.TrackingOptions_wp_gzip_get, _RF_Track.TrackingOptions_wp_gzip_set)

    def __init__(self):
        _RF_Track.TrackingOptions_swiginit(self, _RF_Track.new_TrackingOptions())
    __swig_destroy__ = _RF_Track.delete_TrackingOptions

# Register TrackingOptions in _RF_Track:
_RF_Track.TrackingOptions_swigregister(TrackingOptions)
class Element(Aperture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RF_Track.delete_Element
    clone = _swig_new_instance_method(_RF_Track.Element_clone)
    __assign__ = _swig_new_instance_method(_RF_Track.Element___assign__)
    set_offsets = _swig_new_instance_method(_RF_Track.Element_set_offsets)
    scatter_element = _swig_new_instance_method(_RF_Track.Element_scatter_element)
    get_offsets = _swig_new_instance_method(_RF_Track.Element_get_offsets)
    get_name = _swig_new_instance_method(_RF_Track.Element_get_name)
    get_nsteps = _swig_new_instance_method(_RF_Track.Element_get_nsteps)
    get_tt_nsteps = _swig_new_instance_method(_RF_Track.Element_get_tt_nsteps)
    get_sc_nsteps = _swig_new_instance_method(_RF_Track.Element_get_sc_nsteps)
    get_cfx_nsteps = _swig_new_instance_method(_RF_Track.Element_get_cfx_nsteps)
    get_length = _swig_new_instance_method(_RF_Track.Element_get_length)
    set_name = _swig_new_instance_method(_RF_Track.Element_set_name)
    set_tt_nsteps = _swig_new_instance_method(_RF_Track.Element_set_tt_nsteps)
    set_sc_nsteps = _swig_new_instance_method(_RF_Track.Element_set_sc_nsteps)
    set_cfx_nsteps = _swig_new_instance_method(_RF_Track.Element_set_cfx_nsteps)
    set_nsteps = _swig_new_instance_method(_RF_Track.Element_set_nsteps)
    get_field = _swig_new_instance_method(_RF_Track.Element_get_field)
    add_collective_effect = _swig_new_instance_method(_RF_Track.Element_add_collective_effect)
    clear_collective_effects = _swig_new_instance_method(_RF_Track.Element_clear_collective_effects)
    get_S = _swig_new_instance_method(_RF_Track.Element_get_S)
    remove = _swig_new_instance_method(_RF_Track.Element_remove)
    replace_with = _swig_new_instance_method(_RF_Track.Element_replace_with)
    insert = _swig_new_instance_method(_RF_Track.Element_insert)
    insert_ref = _swig_new_instance_method(_RF_Track.Element_insert_ref)

# Register Element in _RF_Track:
_RF_Track.Element_swigregister(Element)
class Lattice(Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    verbosity = property(_RF_Track.Lattice_verbosity_get, _RF_Track.Lattice_verbosity_set)
    __swig_destroy__ = _RF_Track.delete_Lattice

    def __init__(self, *args):
        _RF_Track.Lattice_swiginit(self, _RF_Track.new_Lattice(*args))
    __assign__ = _swig_new_instance_method(_RF_Track.Lattice___assign__)
    append = _swig_new_instance_method(_RF_Track.Lattice_append)
    append_ref = _swig_new_instance_method(_RF_Track.Lattice_append_ref)
    insert = _swig_new_instance_method(_RF_Track.Lattice_insert)
    insert_ref = _swig_new_instance_method(_RF_Track.Lattice_insert_ref)
    accept = _swig_new_instance_method(_RF_Track.Lattice_accept)
    get_transport_table = _swig_new_instance_method(_RF_Track.Lattice_get_transport_table)
    get_lost_particles = _swig_new_instance_method(_RF_Track.Lattice_get_lost_particles)
    size = _swig_new_instance_method(_RF_Track.Lattice_size)
    track = _swig_new_instance_method(_RF_Track.Lattice_track)
    btrack = _swig_new_instance_method(_RF_Track.Lattice_btrack)
    set_t0 = _swig_new_instance_method(_RF_Track.Lattice_set_t0)
    unset_t0 = _swig_new_instance_method(_RF_Track.Lattice_unset_t0)
    autophase = _swig_new_instance_method(_RF_Track.Lattice_autophase)
    get_ncorrectors = _swig_new_instance_method(_RF_Track.Lattice_get_ncorrectors)
    get_nbpms = _swig_new_instance_method(_RF_Track.Lattice_get_nbpms)
    get_rf_elements = _swig_new_instance_method(_RF_Track.Lattice_get_rf_elements)
    get_quadrupoles = _swig_new_instance_method(_RF_Track.Lattice_get_quadrupoles)
    get_correctors = _swig_new_instance_method(_RF_Track.Lattice_get_correctors)
    get_multipoles = _swig_new_instance_method(_RF_Track.Lattice_get_multipoles)
    get_sextupoles = _swig_new_instance_method(_RF_Track.Lattice_get_sextupoles)
    get_solenoids = _swig_new_instance_method(_RF_Track.Lattice_get_solenoids)
    get_lattices = _swig_new_instance_method(_RF_Track.Lattice_get_lattices)
    get_volumes = _swig_new_instance_method(_RF_Track.Lattice_get_volumes)
    get_screens = _swig_new_instance_method(_RF_Track.Lattice_get_screens)
    get_sbends = _swig_new_instance_method(_RF_Track.Lattice_get_sbends)
    get_drifts = _swig_new_instance_method(_RF_Track.Lattice_get_drifts)
    get_coils = _swig_new_instance_method(_RF_Track.Lattice_get_coils)
    get_bpms = _swig_new_instance_method(_RF_Track.Lattice_get_bpms)
    get_elements_by_name = _swig_new_instance_method(_RF_Track.Lattice_get_elements_by_name)
    get_beam_at_screens = _swig_new_instance_method(_RF_Track.Lattice_get_beam_at_screens)
    get_bunch_at_screens = _swig_new_instance_method(_RF_Track.Lattice_get_bunch_at_screens)
    set_bpm_resolution = _swig_new_instance_method(_RF_Track.Lattice_set_bpm_resolution)
    get_bpm_resolution = _swig_new_instance_method(_RF_Track.Lattice_get_bpm_resolution)
    get_bpm_readings = _swig_new_instance_method(_RF_Track.Lattice_get_bpm_readings)
    get_correctors_strengths = _swig_new_instance_method(_RF_Track.Lattice_get_correctors_strengths)
    set_correctors_strengths = _swig_new_instance_method(_RF_Track.Lattice_set_correctors_strengths)
    vary_correctors_strengths = _swig_new_instance_method(_RF_Track.Lattice_vary_correctors_strengths)
    reset_correctors = _swig_new_instance_method(_RF_Track.Lattice_reset_correctors)
    get_response_matrix = _swig_new_instance_method(_RF_Track.Lattice_get_response_matrix)
    scatter_elements = _swig_new_instance_method(_RF_Track.Lattice_scatter_elements)
    align_elements = _swig_new_instance_method(_RF_Track.Lattice_align_elements)
    get_elements_offsets = _swig_new_instance_method(_RF_Track.Lattice_get_elements_offsets)
    set_elements_offsets = _swig_new_instance_method(_RF_Track.Lattice_set_elements_offsets)
    orbit_correction = _swig_new_instance_method(_RF_Track.Lattice_orbit_correction)
    __getitem__ = _swig_new_instance_method(_RF_Track.Lattice___getitem__)

# Register Lattice in _RF_Track:
_RF_Track.Lattice_swigregister(Lattice)
class Volume(Element, TrackingOptions):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RF_Track.delete_Volume

    def __init__(self, *args):
        _RF_Track.Volume_swiginit(self, _RF_Track.new_Volume(*args))
    __assign__ = _swig_new_instance_method(_RF_Track.Volume___assign__)
    add = _swig_new_instance_method(_RF_Track.Volume_add)
    add_ref = _swig_new_instance_method(_RF_Track.Volume_add_ref)
    size = _swig_new_instance_method(_RF_Track.Volume_size)
    clear = _swig_new_instance_method(_RF_Track.Volume_clear)
    accept = _swig_new_instance_method(_RF_Track.Volume_accept)
    btrack = _swig_new_instance_method(_RF_Track.Volume_btrack)
    track = _swig_new_instance_method(_RF_Track.Volume_track)
    get_transport_table = _swig_new_instance_method(_RF_Track.Volume_get_transport_table)
    get_transport_table_from_screens = _swig_new_instance_method(_RF_Track.Volume_get_transport_table_from_screens)
    get_lost_particles = _swig_new_instance_method(_RF_Track.Volume_get_lost_particles)
    get_bunch_at_s0 = _swig_new_instance_method(_RF_Track.Volume_get_bunch_at_s0)
    get_bunch_at_s1 = _swig_new_instance_method(_RF_Track.Volume_get_bunch_at_s1)
    get_beam_at_s0 = _swig_new_instance_method(_RF_Track.Volume_get_beam_at_s0)
    get_beam_at_s1 = _swig_new_instance_method(_RF_Track.Volume_get_beam_at_s1)
    get_beam_at_screens = _swig_new_instance_method(_RF_Track.Volume_get_beam_at_screens)
    get_bunch_at_screens = _swig_new_instance_method(_RF_Track.Volume_get_bunch_at_screens)
    get_s0 = _swig_new_instance_method(_RF_Track.Volume_get_s0)
    get_s1 = _swig_new_instance_method(_RF_Track.Volume_get_s1)
    get_path_length = _swig_new_instance_method(_RF_Track.Volume_get_path_length)
    get_rf_elements = _swig_new_instance_method(_RF_Track.Volume_get_rf_elements)
    get_quadrupoles = _swig_new_instance_method(_RF_Track.Volume_get_quadrupoles)
    get_multipoles = _swig_new_instance_method(_RF_Track.Volume_get_multipoles)
    get_sextupoles = _swig_new_instance_method(_RF_Track.Volume_get_sextupoles)
    get_correctors = _swig_new_instance_method(_RF_Track.Volume_get_correctors)
    get_solenoids = _swig_new_instance_method(_RF_Track.Volume_get_solenoids)
    get_screens = _swig_new_instance_method(_RF_Track.Volume_get_screens)
    get_coils = _swig_new_instance_method(_RF_Track.Volume_get_coils)
    get_bpms = _swig_new_instance_method(_RF_Track.Volume_get_bpms)
    get_ncorrectors = _swig_new_instance_method(_RF_Track.Volume_get_ncorrectors)
    get_nbpms = _swig_new_instance_method(_RF_Track.Volume_get_nbpms)
    get_elements_by_name = _swig_new_instance_method(_RF_Track.Volume_get_elements_by_name)
    scatter_elements = _swig_new_instance_method(_RF_Track.Volume_scatter_elements)
    align_elements = _swig_new_instance_method(_RF_Track.Volume_align_elements)
    set_s0 = _swig_new_instance_method(_RF_Track.Volume_set_s0)
    set_s1 = _swig_new_instance_method(_RF_Track.Volume_set_s1)
    set_s0_from_s1 = _swig_new_instance_method(_RF_Track.Volume_set_s0_from_s1)
    set_s1_from_s0 = _swig_new_instance_method(_RF_Track.Volume_set_s1_from_s0)
    set_length = _swig_new_instance_method(_RF_Track.Volume_set_length)
    get_static_Efield = _swig_new_instance_method(_RF_Track.Volume_get_static_Efield)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.Volume_get_static_Bfield)
    set_static_Efield = _swig_new_instance_method(_RF_Track.Volume_set_static_Efield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.Volume_set_static_Bfield)
    set_t0 = _swig_new_instance_method(_RF_Track.Volume_set_t0)
    unset_t0 = _swig_new_instance_method(_RF_Track.Volume_unset_t0)
    autophase = _swig_new_instance_method(_RF_Track.Volume_autophase)
    __getitem__ = _swig_new_instance_method(_RF_Track.Volume___getitem__)

# Register Volume in _RF_Track:
_RF_Track.Volume_swigregister(Volume)
class Plasma(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    null_cell = property(_RF_Track.Plasma_null_cell_get, _RF_Track.Plasma_null_cell_set)

    def __init__(self, length=0.0, rx=0.0, ry=0.0, ne=0.0, Vz=0.0, D_ele_r=0.0, D_ele_l=0.0):
        _RF_Track.Plasma_swiginit(self, _RF_Track.new_Plasma(length, rx, ry, ne, Vz, D_ele_r, D_ele_l))
    __swig_destroy__ = _RF_Track.delete_Plasma
    get_self_fields = _swig_new_instance_method(_RF_Track.Plasma_get_self_fields)
    get_rx = _swig_new_instance_method(_RF_Track.Plasma_get_rx)
    get_ry = _swig_new_instance_method(_RF_Track.Plasma_get_ry)
    get_area = _swig_new_instance_method(_RF_Track.Plasma_get_area)
    set_radii = _swig_new_instance_method(_RF_Track.Plasma_set_radii)
    is_point_inside_area = _swig_new_instance_method(_RF_Track.Plasma_is_point_inside_area)
    set_Q = _swig_new_instance_method(_RF_Track.Plasma_set_Q)
    set_mass = _swig_new_instance_method(_RF_Track.Plasma_set_mass)
    set_length = _swig_new_instance_method(_RF_Track.Plasma_set_length)
    set_temperature = _swig_new_instance_method(_RF_Track.Plasma_set_temperature)
    set_plasma_mesh = _swig_new_instance_method(_RF_Track.Plasma_set_plasma_mesh)
    set_nsteps = _swig_new_instance_method(_RF_Track.Plasma_set_nsteps)
    get_Q = _swig_new_instance_method(_RF_Track.Plasma_get_Q)
    get_mass = _swig_new_instance_method(_RF_Track.Plasma_get_mass)
    get_length = _swig_new_instance_method(_RF_Track.Plasma_get_length)
    get_density = _swig_new_instance_method(_RF_Track.Plasma_get_density)
    get_D_ele_r = _swig_new_instance_method(_RF_Track.Plasma_get_D_ele_r)
    get_D_ele_l = _swig_new_instance_method(_RF_Track.Plasma_get_D_ele_l)
    get_temperature = _swig_new_instance_method(_RF_Track.Plasma_get_temperature)
    get_debye_length = _swig_new_instance_method(_RF_Track.Plasma_get_debye_length)
    get_plasma_parameter = _swig_new_instance_method(_RF_Track.Plasma_get_plasma_parameter)
    get_velocity = _swig_new_instance_method(_RF_Track.Plasma_get_velocity)
    get_current_density = _swig_new_instance_method(_RF_Track.Plasma_get_current_density)
    get_density_mesh = _swig_new_instance_method(_RF_Track.Plasma_get_density_mesh)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.Plasma_get_static_Bfield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.Plasma_set_static_Bfield)
    project = _swig_new_instance_method(_RF_Track.Plasma_project)
    advect = _swig_new_instance_method(_RF_Track.Plasma_advect)
    apply_momentum_through_dt = _swig_new_instance_method(_RF_Track.Plasma_apply_momentum_through_dt)
    apply_momentum_through_dS = _swig_new_instance_method(_RF_Track.Plasma_apply_momentum_through_dS)

# Register Plasma in _RF_Track:
_RF_Track.Plasma_swigregister(Plasma)
class ElectronCooler(Element, Plasma):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, length=0.0, rx=0.0, ry=0.0, ne=0.0, Vz=0.0):
        _RF_Track.ElectronCooler_swiginit(self, _RF_Track.new_ElectronCooler(length, rx, ry, ne, Vz))
    get_current = _swig_new_instance_method(_RF_Track.ElectronCooler_get_current)
    set_electron_mesh = _swig_new_instance_method(_RF_Track.ElectronCooler_set_electron_mesh)
    compute_cooling_force = _swig_new_instance_method(_RF_Track.ElectronCooler_compute_cooling_force)
    __swig_destroy__ = _RF_Track.delete_ElectronCooler

# Register ElectronCooler in _RF_Track:
_RF_Track.ElectronCooler_swigregister(ElectronCooler)
class SBend(Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.SBend_swiginit(self, _RF_Track.new_SBend(*args))
    get_E1 = _swig_new_instance_method(_RF_Track.SBend_get_E1)
    get_E2 = _swig_new_instance_method(_RF_Track.SBend_get_E2)
    get_E1d = _swig_new_instance_method(_RF_Track.SBend_get_E1d)
    get_E2d = _swig_new_instance_method(_RF_Track.SBend_get_E2d)
    get_h = _swig_new_instance_method(_RF_Track.SBend_get_h)
    get_K0 = _swig_new_instance_method(_RF_Track.SBend_get_K0)
    get_K1 = _swig_new_instance_method(_RF_Track.SBend_get_K1)
    get_K1L = _swig_new_instance_method(_RF_Track.SBend_get_K1L)
    get_gradient = _swig_new_instance_method(_RF_Track.SBend_get_gradient)
    get_angle = _swig_new_instance_method(_RF_Track.SBend_get_angle)
    get_angled = _swig_new_instance_method(_RF_Track.SBend_get_angled)
    get_Brho = _swig_new_instance_method(_RF_Track.SBend_get_Brho)
    get_Bfield = _swig_new_instance_method(_RF_Track.SBend_get_Bfield)
    get_P_over_Q = _swig_new_instance_method(_RF_Track.SBend_get_P_over_Q)
    set_E1 = _swig_new_instance_method(_RF_Track.SBend_set_E1)
    set_E2 = _swig_new_instance_method(_RF_Track.SBend_set_E2)
    set_E1d = _swig_new_instance_method(_RF_Track.SBend_set_E1d)
    set_E2d = _swig_new_instance_method(_RF_Track.SBend_set_E2d)
    set_h = _swig_new_instance_method(_RF_Track.SBend_set_h)
    set_hgap = _swig_new_instance_method(_RF_Track.SBend_set_hgap)
    set_fint = _swig_new_instance_method(_RF_Track.SBend_set_fint)
    set_K0 = _swig_new_instance_method(_RF_Track.SBend_set_K0)
    set_K1 = _swig_new_instance_method(_RF_Track.SBend_set_K1)
    set_K1L = _swig_new_instance_method(_RF_Track.SBend_set_K1L)
    set_gradient = _swig_new_instance_method(_RF_Track.SBend_set_gradient)
    set_angle = _swig_new_instance_method(_RF_Track.SBend_set_angle)
    set_angled = _swig_new_instance_method(_RF_Track.SBend_set_angled)
    set_length = _swig_new_instance_method(_RF_Track.SBend_set_length)
    set_Brho = _swig_new_instance_method(_RF_Track.SBend_set_Brho)
    set_Bfield = _swig_new_instance_method(_RF_Track.SBend_set_Bfield)
    set_P_over_Q = _swig_new_instance_method(_RF_Track.SBend_set_P_over_Q)
    __swig_destroy__ = _RF_Track.delete_SBend

# Register SBend in _RF_Track:
_RF_Track.SBend_swigregister(SBend)
RBend = _RF_Track.RBend
class TransferLine(Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.TransferLine_swiginit(self, _RF_Track.new_TransferLine(*args))
    __swig_destroy__ = _RF_Track.delete_TransferLine
    __assign__ = _swig_new_instance_method(_RF_Track.TransferLine___assign__)

# Register TransferLine in _RF_Track:
_RF_Track.TransferLine_swigregister(TransferLine)
class Quadrupole(Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Quadrupole_swiginit(self, _RF_Track.new_Quadrupole(*args))
    get_K1 = _swig_new_instance_method(_RF_Track.Quadrupole_get_K1)
    get_K1L = _swig_new_instance_method(_RF_Track.Quadrupole_get_K1L)
    get_strength = _swig_new_instance_method(_RF_Track.Quadrupole_get_strength)
    get_gradient = _swig_new_instance_method(_RF_Track.Quadrupole_get_gradient)
    set_K1 = _swig_new_instance_method(_RF_Track.Quadrupole_set_K1)
    set_K1L = _swig_new_instance_method(_RF_Track.Quadrupole_set_K1L)
    set_length = _swig_new_instance_method(_RF_Track.Quadrupole_set_length)
    set_strength = _swig_new_instance_method(_RF_Track.Quadrupole_set_strength)
    set_gradient = _swig_new_instance_method(_RF_Track.Quadrupole_set_gradient)
    __swig_destroy__ = _RF_Track.delete_Quadrupole

# Register Quadrupole in _RF_Track:
_RF_Track.Quadrupole_swigregister(Quadrupole)
class GenericField(Element, Parallel_ODE_Solver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    set_length = _swig_new_instance_method(_RF_Track.GenericField_set_length)
    enable_end_fields = _swig_new_instance_method(_RF_Track.GenericField_enable_end_fields)
    disable_end_fields = _swig_new_instance_method(_RF_Track.GenericField_disable_end_fields)
    __swig_destroy__ = _RF_Track.delete_GenericField

# Register GenericField in _RF_Track:
_RF_Track.GenericField_swigregister(GenericField)
class Solenoid(Element, ):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Solenoid_swiginit(self, _RF_Track.new_Solenoid(*args))
    get_KS = _swig_new_instance_method(_RF_Track.Solenoid_get_KS)
    get_inner_R = _swig_new_instance_method(_RF_Track.Solenoid_get_inner_R)
    get_outer_R = _swig_new_instance_method(_RF_Track.Solenoid_get_outer_R)
    get_max_current = _swig_new_instance_method(_RF_Track.Solenoid_get_max_current)
    get_current_density = _swig_new_instance_method(_RF_Track.Solenoid_get_current_density)
    set_KS = _swig_new_instance_method(_RF_Track.Solenoid_set_KS)
    set_R = _swig_new_instance_method(_RF_Track.Solenoid_set_R)
    set_length = _swig_new_instance_method(_RF_Track.Solenoid_set_length)
    set_max_current = _swig_new_instance_method(_RF_Track.Solenoid_set_max_current)
    set_current_density = _swig_new_instance_method(_RF_Track.Solenoid_set_current_density)
    __swig_destroy__ = _RF_Track.delete_Solenoid

# Register Solenoid in _RF_Track:
_RF_Track.Solenoid_swigregister(Solenoid)
class Coil(GenericField, ):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Coil_swiginit(self, _RF_Track.new_Coil(*args))
    get_static_Efield = _swig_new_instance_method(_RF_Track.Coil_get_static_Efield)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.Coil_get_static_Bfield)
    get_R = _swig_new_instance_method(_RF_Track.Coil_get_R)
    get_B0 = _swig_new_instance_method(_RF_Track.Coil_get_B0)
    set_static_Efield = _swig_new_instance_method(_RF_Track.Coil_set_static_Efield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.Coil_set_static_Bfield)
    set_R = _swig_new_instance_method(_RF_Track.Coil_set_R)
    set_B0 = _swig_new_instance_method(_RF_Track.Coil_set_B0)
    set_R_and_current = _swig_new_instance_method(_RF_Track.Coil_set_R_and_current)
    __swig_destroy__ = _RF_Track.delete_Coil

# Register Coil in _RF_Track:
_RF_Track.Coil_swigregister(Coil)
class SpaceCharge_Field(GenericField, ):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.SpaceCharge_Field_swiginit(self, _RF_Track.new_SpaceCharge_Field(*args))
    __swig_destroy__ = _RF_Track.delete_SpaceCharge_Field
    get_Q = _swig_new_instance_method(_RF_Track.SpaceCharge_Field_get_Q)
    get_V = _swig_new_instance_method(_RF_Track.SpaceCharge_Field_get_V)

# Register SpaceCharge_Field in _RF_Track:
_RF_Track.SpaceCharge_Field_swigregister(SpaceCharge_Field)
class ToroidalHarmonics(GenericField, ):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    M00 = property(_RF_Track.ToroidalHarmonics_M00_get, _RF_Track.ToroidalHarmonics_M00_set)
    Mcc = property(_RF_Track.ToroidalHarmonics_Mcc_get, _RF_Track.ToroidalHarmonics_Mcc_set)
    Mcs = property(_RF_Track.ToroidalHarmonics_Mcs_get, _RF_Track.ToroidalHarmonics_Mcs_set)
    Msc = property(_RF_Track.ToroidalHarmonics_Msc_get, _RF_Track.ToroidalHarmonics_Msc_set)
    Mss = property(_RF_Track.ToroidalHarmonics_Mss_get, _RF_Track.ToroidalHarmonics_Mss_set)

    def __init__(self, Rmajor, Rminor):
        _RF_Track.ToroidalHarmonics_swiginit(self, _RF_Track.new_ToroidalHarmonics(Rmajor, Rminor))
    get_static_Efield = _swig_new_instance_method(_RF_Track.ToroidalHarmonics_get_static_Efield)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.ToroidalHarmonics_get_static_Bfield)
    get_a = _swig_new_instance_method(_RF_Track.ToroidalHarmonics_get_a)
    set_static_Efield = _swig_new_instance_method(_RF_Track.ToroidalHarmonics_set_static_Efield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.ToroidalHarmonics_set_static_Bfield)
    set_Mcc = _swig_new_instance_method(_RF_Track.ToroidalHarmonics_set_Mcc)
    set_Mcs = _swig_new_instance_method(_RF_Track.ToroidalHarmonics_set_Mcs)
    set_Msc = _swig_new_instance_method(_RF_Track.ToroidalHarmonics_set_Msc)
    set_Mss = _swig_new_instance_method(_RF_Track.ToroidalHarmonics_set_Mss)
    __swig_destroy__ = _RF_Track.delete_ToroidalHarmonics

# Register ToroidalHarmonics in _RF_Track:
_RF_Track.ToroidalHarmonics_swigregister(ToroidalHarmonics)
class ConstantField(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, length=0.0):
        _RF_Track.ConstantField_swiginit(self, _RF_Track.new_ConstantField(length))
    get_static_Efield = _swig_new_instance_method(_RF_Track.ConstantField_get_static_Efield)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.ConstantField_get_static_Bfield)
    set_static_Efield = _swig_new_instance_method(_RF_Track.ConstantField_set_static_Efield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.ConstantField_set_static_Bfield)
    __swig_destroy__ = _RF_Track.delete_ConstantField

# Register ConstantField in _RF_Track:
_RF_Track.ConstantField_swigregister(ConstantField)
class AdiabaticMatchingDevice(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, length_=0.0, Bmax_=0.0, fMu_=0.0):
        _RF_Track.AdiabaticMatchingDevice_swiginit(self, _RF_Track.new_AdiabaticMatchingDevice(length_, Bmax_, fMu_))
    get_static_Efield = _swig_new_instance_method(_RF_Track.AdiabaticMatchingDevice_get_static_Efield)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.AdiabaticMatchingDevice_get_static_Bfield)
    get_mu = _swig_new_instance_method(_RF_Track.AdiabaticMatchingDevice_get_mu)
    get_B0 = _swig_new_instance_method(_RF_Track.AdiabaticMatchingDevice_get_B0)
    set_static_Efield = _swig_new_instance_method(_RF_Track.AdiabaticMatchingDevice_set_static_Efield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.AdiabaticMatchingDevice_set_static_Bfield)
    set_mu = _swig_new_instance_method(_RF_Track.AdiabaticMatchingDevice_set_mu)
    set_B0 = _swig_new_instance_method(_RF_Track.AdiabaticMatchingDevice_set_B0)
    get_entrance_aperture = _swig_new_instance_method(_RF_Track.AdiabaticMatchingDevice_get_entrance_aperture)
    get_exit_aperture = _swig_new_instance_method(_RF_Track.AdiabaticMatchingDevice_get_exit_aperture)
    set_entrance_aperture = _swig_new_instance_method(_RF_Track.AdiabaticMatchingDevice_set_entrance_aperture)
    set_exit_aperture = _swig_new_instance_method(_RF_Track.AdiabaticMatchingDevice_set_exit_aperture)
    __swig_destroy__ = _RF_Track.delete_AdiabaticMatchingDevice

# Register AdiabaticMatchingDevice in _RF_Track:
_RF_Track.AdiabaticMatchingDevice_swigregister(AdiabaticMatchingDevice)
class BroadbandDielectricStructure(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0, y0, hx, hy, hz, length, t0, t1, N, P_map=1.0, P_actual=1.0):
        _RF_Track.BroadbandDielectricStructure_swiginit(self, _RF_Track.new_BroadbandDielectricStructure(x0, y0, hx, hy, hz, length, t0, t1, N, P_map, P_actual))
    get_static_Efield = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_get_static_Efield)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_get_static_Bfield)
    resize = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_resize)
    set_field_n = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_set_field_n)
    get_x0 = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_get_x0)
    get_y0 = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_get_y0)
    get_z0 = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_get_z0)
    get_z1 = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_get_z1)
    get_hx = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_get_hx)
    get_hy = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_get_hy)
    get_hz = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_get_hz)
    get_t0 = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_get_t0)
    get_t1 = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_get_t1)
    get_dt = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_get_dt)
    get_P_map = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_get_P_map)
    get_P_actual = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_get_P_actual)
    set_x0 = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_set_x0)
    set_y0 = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_set_y0)
    set_z0 = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_set_z0)
    set_z1 = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_set_z1)
    set_hx = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_set_hx)
    set_hy = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_set_hy)
    set_hz = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_set_hz)
    set_t0 = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_set_t0)
    set_dt = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_set_dt)
    set_P_map = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_set_P_map)
    set_P_actual = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_set_P_actual)
    set_static_Efield = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_set_static_Efield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.BroadbandDielectricStructure_set_static_Bfield)
    __swig_destroy__ = _RF_Track.delete_BroadbandDielectricStructure

# Register BroadbandDielectricStructure in _RF_Track:
_RF_Track.BroadbandDielectricStructure_swigregister(BroadbandDielectricStructure)
class Multipole(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Multipole_swiginit(self, _RF_Track.new_Multipole(*args))
    get_Bn = _swig_new_instance_method(_RF_Track.Multipole_get_Bn)
    get_KnL = _swig_new_instance_method(_RF_Track.Multipole_get_KnL)
    get_strengths = _swig_new_instance_method(_RF_Track.Multipole_get_strengths)
    set_Bn = _swig_new_instance_method(_RF_Track.Multipole_set_Bn)
    set_KnL = _swig_new_instance_method(_RF_Track.Multipole_set_KnL)
    set_strengths = _swig_new_instance_method(_RF_Track.Multipole_set_strengths)
    get_static_Efield = _swig_new_instance_method(_RF_Track.Multipole_get_static_Efield)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.Multipole_get_static_Bfield)
    set_static_Efield = _swig_new_instance_method(_RF_Track.Multipole_set_static_Efield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.Multipole_set_static_Bfield)
    __swig_destroy__ = _RF_Track.delete_Multipole

# Register Multipole in _RF_Track:
_RF_Track.Multipole_swigregister(Multipole)
class TimeDependent_Field(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, length=0.0):
        _RF_Track.TimeDependent_Field_swiginit(self, _RF_Track.new_TimeDependent_Field(length))
    get_t0 = _swig_new_instance_method(_RF_Track.TimeDependent_Field_get_t0)
    set_t0 = _swig_new_instance_method(_RF_Track.TimeDependent_Field_set_t0)
    unset_t0 = _swig_new_instance_method(_RF_Track.TimeDependent_Field_unset_t0)
    synchronize_with = _swig_new_instance_method(_RF_Track.TimeDependent_Field_synchronize_with)
    t0_is_synchronized = _swig_new_instance_method(_RF_Track.TimeDependent_Field_t0_is_synchronized)
    t0_is_set = _swig_new_instance_method(_RF_Track.TimeDependent_Field_t0_is_set)
    t0_is_unset = _swig_new_instance_method(_RF_Track.TimeDependent_Field_t0_is_unset)
    __swig_destroy__ = _RF_Track.delete_TimeDependent_Field

# Register TimeDependent_Field in _RF_Track:
_RF_Track.TimeDependent_Field_swigregister(TimeDependent_Field)
class Sextupole(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Sextupole_swiginit(self, _RF_Track.new_Sextupole(*args))
    get_K2 = _swig_new_instance_method(_RF_Track.Sextupole_get_K2)
    get_K2L = _swig_new_instance_method(_RF_Track.Sextupole_get_K2L)
    get_strength = _swig_new_instance_method(_RF_Track.Sextupole_get_strength)
    get_gradient = _swig_new_instance_method(_RF_Track.Sextupole_get_gradient)
    set_K2 = _swig_new_instance_method(_RF_Track.Sextupole_set_K2)
    set_K2L = _swig_new_instance_method(_RF_Track.Sextupole_set_K2L)
    set_strength = _swig_new_instance_method(_RF_Track.Sextupole_set_strength)
    set_gradient = _swig_new_instance_method(_RF_Track.Sextupole_set_gradient)
    set_static_Efield = _swig_new_instance_method(_RF_Track.Sextupole_set_static_Efield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.Sextupole_set_static_Bfield)
    __swig_destroy__ = _RF_Track.delete_Sextupole

# Register Sextupole in _RF_Track:
_RF_Track.Sextupole_swigregister(Sextupole)
class Static_Electric_FieldMap(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Static_Electric_FieldMap_swiginit(self, _RF_Track.new_Static_Electric_FieldMap(*args))
    __swig_destroy__ = _RF_Track.delete_Static_Electric_FieldMap
    get_hx = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_get_hx)
    get_hy = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_get_hy)
    get_hz = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_get_hz)
    get_nx = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_get_nx)
    get_ny = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_get_ny)
    get_nz = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_get_nz)
    get_x0 = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_get_x0)
    get_y0 = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_get_y0)
    get_z0 = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_get_z0)
    get_x1 = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_get_x1)
    get_y1 = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_get_y1)
    get_z1 = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_get_z1)
    set_hx = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_set_hx)
    set_hy = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_set_hy)
    set_hz = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_set_hz)
    set_x0 = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_set_x0)
    set_y0 = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_set_y0)
    set_z0 = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_set_z0)
    set_z1 = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_set_z1)
    set_Ex_Ey_Ez = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_set_Ex_Ey_Ez)
    get_Phi = _swig_new_instance_method(_RF_Track.Static_Electric_FieldMap_get_Phi)

# Register Static_Electric_FieldMap in _RF_Track:
_RF_Track.Static_Electric_FieldMap_swigregister(Static_Electric_FieldMap)
class Static_Magnetic_FieldMap(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Static_Magnetic_FieldMap_swiginit(self, _RF_Track.new_Static_Magnetic_FieldMap(*args))
    __swig_destroy__ = _RF_Track.delete_Static_Magnetic_FieldMap
    get_hx = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_get_hx)
    get_hy = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_get_hy)
    get_hz = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_get_hz)
    get_nx = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_get_nx)
    get_ny = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_get_ny)
    get_nz = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_get_nz)
    get_x0 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_get_x0)
    get_y0 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_get_y0)
    get_z0 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_get_z0)
    get_x1 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_get_x1)
    get_y1 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_get_y1)
    get_z1 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_get_z1)
    set_hx = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_set_hx)
    set_hy = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_set_hy)
    set_hz = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_set_hz)
    set_x0 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_set_x0)
    set_y0 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_set_y0)
    set_z0 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_set_z0)
    set_z1 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_set_z1)
    set_Bx_By_Bz = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_set_Bx_By_Bz)
    get_Ax = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_get_Ax)
    get_Ay = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_get_Ay)
    get_Az = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_get_Az)
    get_PhiM = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_get_PhiM)
    get_divB = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_get_divB)

# Register Static_Magnetic_FieldMap in _RF_Track:
_RF_Track.Static_Magnetic_FieldMap_swigregister(Static_Magnetic_FieldMap)
class Undulator(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lperiod, K, nperiods, kx2=0.0):
        _RF_Track.Undulator_swiginit(self, _RF_Track.new_Undulator(lperiod, K, nperiods, kx2))
    get_static_Efield = _swig_new_instance_method(_RF_Track.Undulator_get_static_Efield)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.Undulator_get_static_Bfield)
    set_static_Efield = _swig_new_instance_method(_RF_Track.Undulator_set_static_Efield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.Undulator_set_static_Bfield)
    __swig_destroy__ = _RF_Track.delete_Undulator

# Register Undulator in _RF_Track:
_RF_Track.Undulator_swigregister(Undulator)
class Absorber(ConstantField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Absorber_swiginit(self, _RF_Track.new_Absorber(*args))
    enable_log_term = _swig_new_instance_method(_RF_Track.Absorber_enable_log_term)
    disable_log_term = _swig_new_instance_method(_RF_Track.Absorber_disable_log_term)
    set_shape = _swig_new_instance_method(_RF_Track.Absorber_set_shape)
    get_shape = _swig_new_instance_method(_RF_Track.Absorber_get_shape)
    enable_multiple_coulomb_scattering = _swig_new_instance_method(_RF_Track.Absorber_enable_multiple_coulomb_scattering)
    enable_energy_straggling = _swig_new_instance_method(_RF_Track.Absorber_enable_energy_straggling)
    enable_stopping_power = _swig_new_instance_method(_RF_Track.Absorber_enable_stopping_power)
    enable_fruehwirth_model = _swig_new_instance_method(_RF_Track.Absorber_enable_fruehwirth_model)
    disable_fruehwirth_model = _swig_new_instance_method(_RF_Track.Absorber_disable_fruehwirth_model)
    enable_wentzel_model = _swig_new_instance_method(_RF_Track.Absorber_enable_wentzel_model)
    disable_wentzel_model = _swig_new_instance_method(_RF_Track.Absorber_disable_wentzel_model)
    disable_multiple_coulomb_scattering = _swig_new_instance_method(_RF_Track.Absorber_disable_multiple_coulomb_scattering)
    disable_energy_straggling = _swig_new_instance_method(_RF_Track.Absorber_disable_energy_straggling)
    disable_stopping_power = _swig_new_instance_method(_RF_Track.Absorber_disable_stopping_power)
    __swig_destroy__ = _RF_Track.delete_Absorber

# Register Absorber in _RF_Track:
_RF_Track.Absorber_swigregister(Absorber)
class Bpm(ConstantField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, length=0.0, bpm_resolution=0.0, bpm_resolution_t=0.0):
        _RF_Track.Bpm_swiginit(self, _RF_Track.new_Bpm(length, bpm_resolution, bpm_resolution_t))
    get_reading = _swig_new_instance_method(_RF_Track.Bpm_get_reading)
    get_reading_t = _swig_new_instance_method(_RF_Track.Bpm_get_reading_t)
    set_resolution = _swig_new_instance_method(_RF_Track.Bpm_set_resolution)
    set_resolution_t = _swig_new_instance_method(_RF_Track.Bpm_set_resolution_t)
    set_scaling_factor = _swig_new_instance_method(_RF_Track.Bpm_set_scaling_factor)
    get_resolution = _swig_new_instance_method(_RF_Track.Bpm_get_resolution)
    get_resolution_t = _swig_new_instance_method(_RF_Track.Bpm_get_resolution_t)
    get_total_charge = _swig_new_instance_method(_RF_Track.Bpm_get_total_charge)
    __swig_destroy__ = _RF_Track.delete_Bpm

# Register Bpm in _RF_Track:
_RF_Track.Bpm_swigregister(Bpm)
class Drift(ConstantField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, length=0.0):
        _RF_Track.Drift_swiginit(self, _RF_Track.new_Drift(length))
    __swig_destroy__ = _RF_Track.delete_Drift

# Register Drift in _RF_Track:
_RF_Track.Drift_swigregister(Drift)
class Corrector(Multipole):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Corrector_swiginit(self, _RF_Track.new_Corrector(*args))
    set_kick = _swig_new_instance_method(_RF_Track.Corrector_set_kick)
    set_strength = _swig_new_instance_method(_RF_Track.Corrector_set_strength)
    vary_strength = _swig_new_instance_method(_RF_Track.Corrector_vary_strength)
    get_kick = _swig_new_instance_method(_RF_Track.Corrector_get_kick)
    get_strength = _swig_new_instance_method(_RF_Track.Corrector_get_strength)
    __swig_destroy__ = _RF_Track.delete_Corrector

# Register Corrector in _RF_Track:
_RF_Track.Corrector_swigregister(Corrector)
class Screen(TimeDependent_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RF_Track.Screen_swiginit(self, _RF_Track.new_Screen())
    get_bunch = _swig_new_instance_method(_RF_Track.Screen_get_bunch)
    get_beam = _swig_new_instance_method(_RF_Track.Screen_get_beam)
    set_width = _swig_new_instance_method(_RF_Track.Screen_set_width)
    set_height = _swig_new_instance_method(_RF_Track.Screen_set_height)
    set_time_window = _swig_new_instance_method(_RF_Track.Screen_set_time_window)
    __swig_destroy__ = _RF_Track.delete_Screen

# Register Screen in _RF_Track:
_RF_Track.Screen_swigregister(Screen)
class RF_Field(TimeDependent_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    set_P_map = _swig_new_instance_method(_RF_Track.RF_Field_set_P_map)
    set_P_actual = _swig_new_instance_method(_RF_Track.RF_Field_set_P_actual)
    get_phi = _swig_new_instance_method(_RF_Track.RF_Field_get_phi)
    get_phid = _swig_new_instance_method(_RF_Track.RF_Field_get_phid)
    get_period = _swig_new_instance_method(_RF_Track.RF_Field_get_period)
    set_phi = _swig_new_instance_method(_RF_Track.RF_Field_set_phi)
    set_phid = _swig_new_instance_method(_RF_Track.RF_Field_set_phid)
    get_frequency = _swig_new_instance_method(_RF_Track.RF_Field_get_frequency)
    set_frequency = _swig_new_instance_method(_RF_Track.RF_Field_set_frequency)
    get_field_abs = _swig_new_instance_method(_RF_Track.RF_Field_get_field_abs)
    get_field_complex = _swig_new_instance_method(_RF_Track.RF_Field_get_field_complex)
    __swig_destroy__ = _RF_Track.delete_RF_Field

# Register RF_Field in _RF_Track:
_RF_Track.RF_Field_swigregister(RF_Field)
class LaserBeam(TimeDependent_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tLaser_IP = property(_RF_Track.LaserBeam_tLaser_IP_get, _RF_Track.LaserBeam_tLaser_IP_set)
    length = property(_RF_Track.LaserBeam_length_get, _RF_Track.LaserBeam_length_set)
    pulse_energy = property(_RF_Track.LaserBeam_pulse_energy_get, _RF_Track.LaserBeam_pulse_energy_set)
    pulse_length = property(_RF_Track.LaserBeam_pulse_length_get, _RF_Track.LaserBeam_pulse_length_set)
    wavelength = property(_RF_Track.LaserBeam_wavelength_get, _RF_Track.LaserBeam_wavelength_set)
    position = property(_RF_Track.LaserBeam_position_get, _RF_Track.LaserBeam_position_set)
    direction = property(_RF_Track.LaserBeam_direction_get, _RF_Track.LaserBeam_direction_set)
    Rx = property(_RF_Track.LaserBeam_Rx_get, _RF_Track.LaserBeam_Rx_set)
    Ry = property(_RF_Track.LaserBeam_Ry_get, _RF_Track.LaserBeam_Ry_set)
    R = property(_RF_Track.LaserBeam_R_get, _RF_Track.LaserBeam_R_set)
    M2x = property(_RF_Track.LaserBeam_M2x_get, _RF_Track.LaserBeam_M2x_set)
    M2y = property(_RF_Track.LaserBeam_M2y_get, _RF_Track.LaserBeam_M2y_set)
    M2 = property(_RF_Track.LaserBeam_M2_get, _RF_Track.LaserBeam_M2_set)
    P = property(_RF_Track.LaserBeam_P_get, _RF_Track.LaserBeam_P_set)
    lambda_e = property(_RF_Track.LaserBeam_lambda_e_get, _RF_Track.LaserBeam_lambda_e_set)
    rep_frequency = property(_RF_Track.LaserBeam_rep_frequency_get, _RF_Track.LaserBeam_rep_frequency_set)
    number_of_pulses = property(_RF_Track.LaserBeam_number_of_pulses_get, _RF_Track.LaserBeam_number_of_pulses_set)
    min_number_of_gammas_per_slice = property(_RF_Track.LaserBeam_min_number_of_gammas_per_slice_get, _RF_Track.LaserBeam_min_number_of_gammas_per_slice_set)
    Nmin = property(_RF_Track.LaserBeam_Nmin_get, _RF_Track.LaserBeam_Nmin_set)
    check_R = _swig_new_instance_method(_RF_Track.LaserBeam_check_R)
    check_M2 = _swig_new_instance_method(_RF_Track.LaserBeam_check_M2)

    def __init__(self, length=0.0):
        _RF_Track.LaserBeam_swiginit(self, _RF_Track.new_LaserBeam(length))
    get_M2 = _swig_new_instance_method(_RF_Track.LaserBeam_get_M2)
    get_M2x = _swig_new_instance_method(_RF_Track.LaserBeam_get_M2x)
    get_M2y = _swig_new_instance_method(_RF_Track.LaserBeam_get_M2y)
    get_zR = _swig_new_instance_method(_RF_Track.LaserBeam_get_zR)
    get_zRx = _swig_new_instance_method(_RF_Track.LaserBeam_get_zRx)
    get_zRy = _swig_new_instance_method(_RF_Track.LaserBeam_get_zRy)
    get_direction = _swig_new_instance_method(_RF_Track.LaserBeam_get_direction)
    get_position = _swig_new_instance_method(_RF_Track.LaserBeam_get_position)
    set_direction = _swig_new_instance_method(_RF_Track.LaserBeam_set_direction)
    set_position = _swig_new_instance_method(_RF_Track.LaserBeam_set_position)
    set_M2 = _swig_new_instance_method(_RF_Track.LaserBeam_set_M2)
    set_M2x = _swig_new_instance_method(_RF_Track.LaserBeam_set_M2x)
    set_M2y = _swig_new_instance_method(_RF_Track.LaserBeam_set_M2y)
    set_zR = _swig_new_instance_method(_RF_Track.LaserBeam_set_zR)
    set_zRx = _swig_new_instance_method(_RF_Track.LaserBeam_set_zRx)
    set_zRy = _swig_new_instance_method(_RF_Track.LaserBeam_set_zRy)
    __swig_destroy__ = _RF_Track.delete_LaserBeam

# Register LaserBeam in _RF_Track:
_RF_Track.LaserBeam_swigregister(LaserBeam)
class Pillbox_Cavity(RF_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Pillbox_Cavity_swiginit(self, _RF_Track.new_Pillbox_Cavity(*args))
    get_cell_length = _swig_new_instance_method(_RF_Track.Pillbox_Cavity_get_cell_length)
    get_z0 = _swig_new_instance_method(_RF_Track.Pillbox_Cavity_get_z0)
    get_z1 = _swig_new_instance_method(_RF_Track.Pillbox_Cavity_get_z1)
    get_coefficients = _swig_new_instance_method(_RF_Track.Pillbox_Cavity_get_coefficients)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.Pillbox_Cavity_get_static_Bfield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.Pillbox_Cavity_set_static_Bfield)
    set_coefficients = _swig_new_instance_method(_RF_Track.Pillbox_Cavity_set_coefficients)
    set_z0 = _swig_new_instance_method(_RF_Track.Pillbox_Cavity_set_z0)
    set_z1 = _swig_new_instance_method(_RF_Track.Pillbox_Cavity_set_z1)
    set_cell_length = _swig_new_instance_method(_RF_Track.Pillbox_Cavity_set_cell_length)
    __swig_destroy__ = _RF_Track.delete_Pillbox_Cavity

# Register Pillbox_Cavity in _RF_Track:
_RF_Track.Pillbox_Cavity_swigregister(Pillbox_Cavity)
class SW_Structure(RF_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.SW_Structure_swiginit(self, _RF_Track.new_SW_Structure(*args))
    get_cell_length = _swig_new_instance_method(_RF_Track.SW_Structure_get_cell_length)
    get_z0 = _swig_new_instance_method(_RF_Track.SW_Structure_get_z0)
    get_z1 = _swig_new_instance_method(_RF_Track.SW_Structure_get_z1)
    get_coefficients = _swig_new_instance_method(_RF_Track.SW_Structure_get_coefficients)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.SW_Structure_get_static_Bfield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.SW_Structure_set_static_Bfield)
    set_coefficients = _swig_new_instance_method(_RF_Track.SW_Structure_set_coefficients)
    set_z0 = _swig_new_instance_method(_RF_Track.SW_Structure_set_z0)
    set_z1 = _swig_new_instance_method(_RF_Track.SW_Structure_set_z1)
    set_cell_length = _swig_new_instance_method(_RF_Track.SW_Structure_set_cell_length)
    __swig_destroy__ = _RF_Track.delete_SW_Structure

# Register SW_Structure in _RF_Track:
_RF_Track.SW_Structure_swigregister(SW_Structure)
class TW_Structure(RF_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.TW_Structure_swiginit(self, _RF_Track.new_TW_Structure(*args))
    get_cell_length = _swig_new_instance_method(_RF_Track.TW_Structure_get_cell_length)
    get_z0 = _swig_new_instance_method(_RF_Track.TW_Structure_get_z0)
    get_z1 = _swig_new_instance_method(_RF_Track.TW_Structure_get_z1)
    get_coefficients = _swig_new_instance_method(_RF_Track.TW_Structure_get_coefficients)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.TW_Structure_get_static_Bfield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.TW_Structure_set_static_Bfield)
    set_coefficients = _swig_new_instance_method(_RF_Track.TW_Structure_set_coefficients)
    set_z0 = _swig_new_instance_method(_RF_Track.TW_Structure_set_z0)
    set_z1 = _swig_new_instance_method(_RF_Track.TW_Structure_set_z1)
    __swig_destroy__ = _RF_Track.delete_TW_Structure

# Register TW_Structure in _RF_Track:
_RF_Track.TW_Structure_swigregister(TW_Structure)
class TW_Field(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.TW_Field_swiginit(self, _RF_Track.new_TW_Field(*args))
    get_length = _swig_new_instance_method(_RF_Track.TW_Field_get_length)
    get_field_complex = _swig_new_instance_method(_RF_Track.TW_Field_get_field_complex)
    get_field = _swig_new_instance_method(_RF_Track.TW_Field_get_field)
    __swig_destroy__ = _RF_Track.delete_TW_Field

# Register TW_Field in _RF_Track:
_RF_Track.TW_Field_swigregister(TW_Field)
class Particle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mass = property(_RF_Track.Particle_mass_get, _RF_Track.Particle_mass_set)
    Q = property(_RF_Track.Particle_Q_get, _RF_Track.Particle_Q_set)
    N = property(_RF_Track.Particle_N_get, _RF_Track.Particle_N_set)
    x = property(_RF_Track.Particle_x_get, _RF_Track.Particle_x_set)
    xp = property(_RF_Track.Particle_xp_get, _RF_Track.Particle_xp_set)
    y = property(_RF_Track.Particle_y_get, _RF_Track.Particle_y_set)
    yp = property(_RF_Track.Particle_yp_get, _RF_Track.Particle_yp_set)
    t = property(_RF_Track.Particle_t_get, _RF_Track.Particle_t_set)
    Pc = property(_RF_Track.Particle_Pc_get, _RF_Track.Particle_Pc_set)
    S_lost = property(_RF_Track.Particle_S_lost_get, _RF_Track.Particle_S_lost_set)
    lifetime = property(_RF_Track.Particle_lifetime_get, _RF_Track.Particle_lifetime_set)
    Sx = property(_RF_Track.Particle_Sx_get, _RF_Track.Particle_Sx_set)
    Sy = property(_RF_Track.Particle_Sy_get, _RF_Track.Particle_Sy_set)
    Sz = property(_RF_Track.Particle_Sz_get, _RF_Track.Particle_Sz_set)
    anomalous_magnetic_moment = property(_RF_Track.Particle_anomalous_magnetic_moment_get, _RF_Track.Particle_anomalous_magnetic_moment_set)

    def __init__(self, *args):
        _RF_Track.Particle_swiginit(self, _RF_Track.new_Particle(*args))

    def __nonzero__(self):
        return _RF_Track.Particle_is_valid(self)
    __bool__ = __nonzero__


    lost_at = _swig_new_instance_method(_RF_Track.Particle_lost_at)
    get_Pc_sqr = _swig_new_instance_method(_RF_Track.Particle_get_Pc_sqr)
    get_Pc = _swig_new_instance_method(_RF_Track.Particle_get_Pc)
    get_total_energy_sqr = _swig_new_instance_method(_RF_Track.Particle_get_total_energy_sqr)
    get_total_energy = _swig_new_instance_method(_RF_Track.Particle_get_total_energy)
    get_kinetic_energy = _swig_new_instance_method(_RF_Track.Particle_get_kinetic_energy)
    get_delta_plus_1 = _swig_new_instance_method(_RF_Track.Particle_get_delta_plus_1)
    get_delta = _swig_new_instance_method(_RF_Track.Particle_get_delta)
    get_beta_sqr = _swig_new_instance_method(_RF_Track.Particle_get_beta_sqr)
    get_beta = _swig_new_instance_method(_RF_Track.Particle_get_beta)
    get_gamma_sqr = _swig_new_instance_method(_RF_Track.Particle_get_gamma_sqr)
    get_gamma = _swig_new_instance_method(_RF_Track.Particle_get_gamma)
    get_pt = _swig_new_instance_method(_RF_Track.Particle_get_pt)
    get_xp_yp_zp = _swig_new_instance_method(_RF_Track.Particle_get_xp_yp_zp)
    get_Vx_Vy_Vz = _swig_new_instance_method(_RF_Track.Particle_get_Vx_Vy_Vz)
    get_Px_Py_Pz = _swig_new_instance_method(_RF_Track.Particle_get_Px_Py_Pz)
    get_px_py_pz = _swig_new_instance_method(_RF_Track.Particle_get_px_py_pz)
    get_Sx_Sy_Sz = _swig_new_instance_method(_RF_Track.Particle_get_Sx_Sy_Sz)
    get_four_momentum = _swig_new_instance_method(_RF_Track.Particle_get_four_momentum)
    get_four_velocity = _swig_new_instance_method(_RF_Track.Particle_get_four_velocity)
    get_id = _swig_new_instance_method(_RF_Track.Particle_get_id)
    set_id = _swig_new_instance_method(_RF_Track.Particle_set_id)
    get_pdg_id = _swig_new_instance_method(_RF_Track.Particle_get_pdg_id)
    set_pdg_id = _swig_new_instance_method(_RF_Track.Particle_set_pdg_id)
    __swig_destroy__ = _RF_Track.delete_Particle

# Register Particle in _RF_Track:
_RF_Track.Particle_swigregister(Particle)
class ParticleT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mass = property(_RF_Track.ParticleT_mass_get, _RF_Track.ParticleT_mass_set)
    Q = property(_RF_Track.ParticleT_Q_get, _RF_Track.ParticleT_Q_set)
    N = property(_RF_Track.ParticleT_N_get, _RF_Track.ParticleT_N_set)
    X = property(_RF_Track.ParticleT_X_get, _RF_Track.ParticleT_X_set)
    Px = property(_RF_Track.ParticleT_Px_get, _RF_Track.ParticleT_Px_set)
    Y = property(_RF_Track.ParticleT_Y_get, _RF_Track.ParticleT_Y_set)
    Py = property(_RF_Track.ParticleT_Py_get, _RF_Track.ParticleT_Py_set)
    Z = property(_RF_Track.ParticleT_Z_get, _RF_Track.ParticleT_Z_set)
    Pz = property(_RF_Track.ParticleT_Pz_get, _RF_Track.ParticleT_Pz_set)
    t0 = property(_RF_Track.ParticleT_t0_get, _RF_Track.ParticleT_t0_set)
    t_lost = property(_RF_Track.ParticleT_t_lost_get, _RF_Track.ParticleT_t_lost_set)
    lifetime = property(_RF_Track.ParticleT_lifetime_get, _RF_Track.ParticleT_lifetime_set)
    Sx = property(_RF_Track.ParticleT_Sx_get, _RF_Track.ParticleT_Sx_set)
    Sy = property(_RF_Track.ParticleT_Sy_get, _RF_Track.ParticleT_Sy_set)
    Sz = property(_RF_Track.ParticleT_Sz_get, _RF_Track.ParticleT_Sz_set)
    anomalous_magnetic_moment = property(_RF_Track.ParticleT_anomalous_magnetic_moment_get, _RF_Track.ParticleT_anomalous_magnetic_moment_set)

    def __init__(self, *args):
        _RF_Track.ParticleT_swiginit(self, _RF_Track.new_ParticleT(*args))

    def __nonzero__(self):
        return _RF_Track.ParticleT_is_valid(self)
    __bool__ = __nonzero__


    lost_at = _swig_new_instance_method(_RF_Track.ParticleT_lost_at)
    get_Pc_sqr = _swig_new_instance_method(_RF_Track.ParticleT_get_Pc_sqr)
    get_Pc = _swig_new_instance_method(_RF_Track.ParticleT_get_Pc)
    get_total_energy_sqr = _swig_new_instance_method(_RF_Track.ParticleT_get_total_energy_sqr)
    get_total_energy = _swig_new_instance_method(_RF_Track.ParticleT_get_total_energy)
    get_kinetic_energy = _swig_new_instance_method(_RF_Track.ParticleT_get_kinetic_energy)
    get_delta_plus_1 = _swig_new_instance_method(_RF_Track.ParticleT_get_delta_plus_1)
    get_delta = _swig_new_instance_method(_RF_Track.ParticleT_get_delta)
    get_beta_sqr = _swig_new_instance_method(_RF_Track.ParticleT_get_beta_sqr)
    get_beta = _swig_new_instance_method(_RF_Track.ParticleT_get_beta)
    get_gamma_sqr = _swig_new_instance_method(_RF_Track.ParticleT_get_gamma_sqr)
    get_gamma = _swig_new_instance_method(_RF_Track.ParticleT_get_gamma)
    get_pt = _swig_new_instance_method(_RF_Track.ParticleT_get_pt)
    get_xp_yp_zp = _swig_new_instance_method(_RF_Track.ParticleT_get_xp_yp_zp)
    get_Vx_Vy_Vz = _swig_new_instance_method(_RF_Track.ParticleT_get_Vx_Vy_Vz)
    get_Px_Py_Pz = _swig_new_instance_method(_RF_Track.ParticleT_get_Px_Py_Pz)
    get_px_py_pz = _swig_new_instance_method(_RF_Track.ParticleT_get_px_py_pz)
    get_Sx_Sy_Sz = _swig_new_instance_method(_RF_Track.ParticleT_get_Sx_Sy_Sz)
    get_four_momentum = _swig_new_instance_method(_RF_Track.ParticleT_get_four_momentum)
    get_four_velocity = _swig_new_instance_method(_RF_Track.ParticleT_get_four_velocity)
    get_id = _swig_new_instance_method(_RF_Track.ParticleT_get_id)
    set_id = _swig_new_instance_method(_RF_Track.ParticleT_set_id)
    get_pdg_id = _swig_new_instance_method(_RF_Track.ParticleT_get_pdg_id)
    set_pdg_id = _swig_new_instance_method(_RF_Track.ParticleT_set_pdg_id)
    __swig_destroy__ = _RF_Track.delete_ParticleT

# Register ParticleT in _RF_Track:
_RF_Track.ParticleT_swigregister(ParticleT)
class Bunch6dT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    t = property(_RF_Track.Bunch6dT_t_get, _RF_Track.Bunch6dT_t_set)

    def __init__(self, *args):
        _RF_Track.Bunch6dT_swiginit(self, _RF_Track.new_Bunch6dT(*args))
    resize = _swig_new_instance_method(_RF_Track.Bunch6dT_resize)
    clear = _swig_new_instance_method(_RF_Track.Bunch6dT_clear)
    size = _swig_new_instance_method(_RF_Track.Bunch6dT_size)
    displaced = _swig_new_instance_method(_RF_Track.Bunch6dT_displaced)
    append = _swig_new_instance_method(_RF_Track.Bunch6dT_append)
    set_lifetime = _swig_new_instance_method(_RF_Track.Bunch6dT_set_lifetime)
    set_polarization = _swig_new_instance_method(_RF_Track.Bunch6dT_set_polarization)
    coasting = _swig_new_instance_method(_RF_Track.Bunch6dT_coasting)
    set_coasting = _swig_new_instance_method(_RF_Track.Bunch6dT_set_coasting)
    get_info = _swig_new_instance_method(_RF_Track.Bunch6dT_get_info)
    set_phase_space = _swig_new_instance_method(_RF_Track.Bunch6dT_set_phase_space)
    get_particle = _swig_new_instance_method(_RF_Track.Bunch6dT_get_particle)
    get_S_min = _swig_new_instance_method(_RF_Track.Bunch6dT_get_S_min)
    get_S_max = _swig_new_instance_method(_RF_Track.Bunch6dT_get_S_max)
    get_S_mean = _swig_new_instance_method(_RF_Track.Bunch6dT_get_S_mean)
    get_t = _swig_new_instance_method(_RF_Track.Bunch6dT_get_t)
    get_average_particle = _swig_new_instance_method(_RF_Track.Bunch6dT_get_average_particle)
    get_reference_particle = _swig_new_instance_method(_RF_Track.Bunch6dT_get_reference_particle)
    get_bunch_temperature = _swig_new_instance_method(_RF_Track.Bunch6dT_get_bunch_temperature)
    get_phase_space = _swig_new_instance_method(_RF_Track.Bunch6dT_get_phase_space)
    get_population = _swig_new_instance_method(_RF_Track.Bunch6dT_get_population)
    get_ngood = _swig_new_instance_method(_RF_Track.Bunch6dT_get_ngood)
    get_nlost = _swig_new_instance_method(_RF_Track.Bunch6dT_get_nlost)
    get_total_charge = _swig_new_instance_method(_RF_Track.Bunch6dT_get_total_charge)
    apply_force = _swig_new_instance_method(_RF_Track.Bunch6dT_apply_force)
    kick = _swig_new_instance_method(_RF_Track.Bunch6dT_kick)
    drift = _swig_new_instance_method(_RF_Track.Bunch6dT_drift)
    load = _swig_new_instance_method(_RF_Track.Bunch6dT_load)
    save = _swig_new_instance_method(_RF_Track.Bunch6dT_save)
    save_as_dst_file = _swig_new_instance_method(_RF_Track.Bunch6dT_save_as_dst_file)
    save_as_sdds_file = _swig_new_instance_method(_RF_Track.Bunch6dT_save_as_sdds_file)
    __getitem__ = _swig_new_instance_method(_RF_Track.Bunch6dT___getitem__)
    __len__ = _swig_new_instance_method(_RF_Track.Bunch6dT___len__)
    __iter__ = _swig_new_instance_method(_RF_Track.Bunch6dT___iter__)
    __swig_destroy__ = _RF_Track.delete_Bunch6dT

# Register Bunch6dT in _RF_Track:
_RF_Track.Bunch6dT_swigregister(Bunch6dT)
class Bunch6d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    S = property(_RF_Track.Bunch6d_S_get, _RF_Track.Bunch6d_S_set)

    def __init__(self, *args):
        _RF_Track.Bunch6d_swiginit(self, _RF_Track.new_Bunch6d(*args))
    resize = _swig_new_instance_method(_RF_Track.Bunch6d_resize)
    clear = _swig_new_instance_method(_RF_Track.Bunch6d_clear)
    size = _swig_new_instance_method(_RF_Track.Bunch6d_size)
    set_lifetime = _swig_new_instance_method(_RF_Track.Bunch6d_set_lifetime)
    set_polarization = _swig_new_instance_method(_RF_Track.Bunch6d_set_polarization)
    displaced = _swig_new_instance_method(_RF_Track.Bunch6d_displaced)
    append = _swig_new_instance_method(_RF_Track.Bunch6d_append)
    coasting = _swig_new_instance_method(_RF_Track.Bunch6d_coasting)
    set_coasting = _swig_new_instance_method(_RF_Track.Bunch6d_set_coasting)
    set_phase_space = _swig_new_instance_method(_RF_Track.Bunch6d_set_phase_space)
    set_S = _swig_new_instance_method(_RF_Track.Bunch6d_set_S)
    get_particle = _swig_new_instance_method(_RF_Track.Bunch6d_get_particle)
    get_t_mean = _swig_new_instance_method(_RF_Track.Bunch6d_get_t_mean)
    get_t_min = _swig_new_instance_method(_RF_Track.Bunch6d_get_t_min)
    get_t_max = _swig_new_instance_method(_RF_Track.Bunch6d_get_t_max)
    get_S = _swig_new_instance_method(_RF_Track.Bunch6d_get_S)
    get_average_particle = _swig_new_instance_method(_RF_Track.Bunch6d_get_average_particle)
    get_reference_particle = _swig_new_instance_method(_RF_Track.Bunch6d_get_reference_particle)
    get_bunch_temperature = _swig_new_instance_method(_RF_Track.Bunch6d_get_bunch_temperature)
    get_phase_space = _swig_new_instance_method(_RF_Track.Bunch6d_get_phase_space)
    get_population = _swig_new_instance_method(_RF_Track.Bunch6d_get_population)
    get_ngood = _swig_new_instance_method(_RF_Track.Bunch6d_get_ngood)
    get_nlost = _swig_new_instance_method(_RF_Track.Bunch6d_get_nlost)
    get_total_charge = _swig_new_instance_method(_RF_Track.Bunch6d_get_total_charge)
    get_info = _swig_new_instance_method(_RF_Track.Bunch6d_get_info)
    apply_force = _swig_new_instance_method(_RF_Track.Bunch6d_apply_force)
    kick = _swig_new_instance_method(_RF_Track.Bunch6d_kick)
    drift = _swig_new_instance_method(_RF_Track.Bunch6d_drift)
    load = _swig_new_instance_method(_RF_Track.Bunch6d_load)
    save = _swig_new_instance_method(_RF_Track.Bunch6d_save)
    save_as_dst_file = _swig_new_instance_method(_RF_Track.Bunch6d_save_as_dst_file)
    save_as_sdds_file = _swig_new_instance_method(_RF_Track.Bunch6d_save_as_sdds_file)
    __getitem__ = _swig_new_instance_method(_RF_Track.Bunch6d___getitem__)
    __len__ = _swig_new_instance_method(_RF_Track.Bunch6d___len__)
    __iter__ = _swig_new_instance_method(_RF_Track.Bunch6d___iter__)
    __swig_destroy__ = _RF_Track.delete_Bunch6d

# Register Bunch6d in _RF_Track:
_RF_Track.Bunch6d_swigregister(Bunch6d)
Bunch6d_QR = _RF_Track.Bunch6d_QR
class Bunch6d_info(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    S = property(_RF_Track.Bunch6d_info_S_get, _RF_Track.Bunch6d_info_S_set)
    mean_x = property(_RF_Track.Bunch6d_info_mean_x_get, _RF_Track.Bunch6d_info_mean_x_set)
    mean_y = property(_RF_Track.Bunch6d_info_mean_y_get, _RF_Track.Bunch6d_info_mean_y_set)
    mean_t = property(_RF_Track.Bunch6d_info_mean_t_get, _RF_Track.Bunch6d_info_mean_t_set)
    mean_xp = property(_RF_Track.Bunch6d_info_mean_xp_get, _RF_Track.Bunch6d_info_mean_xp_set)
    mean_yp = property(_RF_Track.Bunch6d_info_mean_yp_get, _RF_Track.Bunch6d_info_mean_yp_set)
    mean_Px = property(_RF_Track.Bunch6d_info_mean_Px_get, _RF_Track.Bunch6d_info_mean_Px_set)
    mean_Py = property(_RF_Track.Bunch6d_info_mean_Py_get, _RF_Track.Bunch6d_info_mean_Py_set)
    mean_Pz = property(_RF_Track.Bunch6d_info_mean_Pz_get, _RF_Track.Bunch6d_info_mean_Pz_set)
    mean_P = property(_RF_Track.Bunch6d_info_mean_P_get, _RF_Track.Bunch6d_info_mean_P_set)
    mean_K = property(_RF_Track.Bunch6d_info_mean_K_get, _RF_Track.Bunch6d_info_mean_K_set)
    mean_E = property(_RF_Track.Bunch6d_info_mean_E_get, _RF_Track.Bunch6d_info_mean_E_set)
    mean_Sx = property(_RF_Track.Bunch6d_info_mean_Sx_get, _RF_Track.Bunch6d_info_mean_Sx_set)
    mean_Sy = property(_RF_Track.Bunch6d_info_mean_Sy_get, _RF_Track.Bunch6d_info_mean_Sy_set)
    mean_Sz = property(_RF_Track.Bunch6d_info_mean_Sz_get, _RF_Track.Bunch6d_info_mean_Sz_set)
    sigma_x = property(_RF_Track.Bunch6d_info_sigma_x_get, _RF_Track.Bunch6d_info_sigma_x_set)
    sigma_y = property(_RF_Track.Bunch6d_info_sigma_y_get, _RF_Track.Bunch6d_info_sigma_y_set)
    sigma_t = property(_RF_Track.Bunch6d_info_sigma_t_get, _RF_Track.Bunch6d_info_sigma_t_set)
    sigma_px = property(_RF_Track.Bunch6d_info_sigma_px_get, _RF_Track.Bunch6d_info_sigma_px_set)
    sigma_py = property(_RF_Track.Bunch6d_info_sigma_py_get, _RF_Track.Bunch6d_info_sigma_py_set)
    sigma_pt = property(_RF_Track.Bunch6d_info_sigma_pt_get, _RF_Track.Bunch6d_info_sigma_pt_set)
    sigma_E = property(_RF_Track.Bunch6d_info_sigma_E_get, _RF_Track.Bunch6d_info_sigma_E_set)
    sigma_P = property(_RF_Track.Bunch6d_info_sigma_P_get, _RF_Track.Bunch6d_info_sigma_P_set)
    emitt_x = property(_RF_Track.Bunch6d_info_emitt_x_get, _RF_Track.Bunch6d_info_emitt_x_set)
    emitt_y = property(_RF_Track.Bunch6d_info_emitt_y_get, _RF_Track.Bunch6d_info_emitt_y_set)
    emitt_z = property(_RF_Track.Bunch6d_info_emitt_z_get, _RF_Track.Bunch6d_info_emitt_z_set)
    emitt_4d = property(_RF_Track.Bunch6d_info_emitt_4d_get, _RF_Track.Bunch6d_info_emitt_4d_set)
    emitt_6d = property(_RF_Track.Bunch6d_info_emitt_6d_get, _RF_Track.Bunch6d_info_emitt_6d_set)
    alpha_x = property(_RF_Track.Bunch6d_info_alpha_x_get, _RF_Track.Bunch6d_info_alpha_x_set)
    alpha_y = property(_RF_Track.Bunch6d_info_alpha_y_get, _RF_Track.Bunch6d_info_alpha_y_set)
    alpha_z = property(_RF_Track.Bunch6d_info_alpha_z_get, _RF_Track.Bunch6d_info_alpha_z_set)
    beta_x = property(_RF_Track.Bunch6d_info_beta_x_get, _RF_Track.Bunch6d_info_beta_x_set)
    beta_y = property(_RF_Track.Bunch6d_info_beta_y_get, _RF_Track.Bunch6d_info_beta_y_set)
    beta_z = property(_RF_Track.Bunch6d_info_beta_z_get, _RF_Track.Bunch6d_info_beta_z_set)
    disp_x = property(_RF_Track.Bunch6d_info_disp_x_get, _RF_Track.Bunch6d_info_disp_x_set)
    disp_y = property(_RF_Track.Bunch6d_info_disp_y_get, _RF_Track.Bunch6d_info_disp_y_set)
    disp_z = property(_RF_Track.Bunch6d_info_disp_z_get, _RF_Track.Bunch6d_info_disp_z_set)
    disp_px = property(_RF_Track.Bunch6d_info_disp_px_get, _RF_Track.Bunch6d_info_disp_px_set)
    disp_py = property(_RF_Track.Bunch6d_info_disp_py_get, _RF_Track.Bunch6d_info_disp_py_set)
    rmax = property(_RF_Track.Bunch6d_info_rmax_get, _RF_Track.Bunch6d_info_rmax_set)
    rmax90 = property(_RF_Track.Bunch6d_info_rmax90_get, _RF_Track.Bunch6d_info_rmax90_set)
    rmax99 = property(_RF_Track.Bunch6d_info_rmax99_get, _RF_Track.Bunch6d_info_rmax99_set)
    rmax99p9 = property(_RF_Track.Bunch6d_info_rmax99p9_get, _RF_Track.Bunch6d_info_rmax99p9_set)
    transmission = property(_RF_Track.Bunch6d_info_transmission_get, _RF_Track.Bunch6d_info_transmission_set)
    get_bunch_info = _swig_new_instance_method(_RF_Track.Bunch6d_info_get_bunch_info)

    def __init__(self):
        _RF_Track.Bunch6d_info_swiginit(self, _RF_Track.new_Bunch6d_info())
    __swig_destroy__ = _RF_Track.delete_Bunch6d_info

# Register Bunch6d_info in _RF_Track:
_RF_Track.Bunch6d_info_swigregister(Bunch6d_info)
class Bunch6dT_info(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    t = property(_RF_Track.Bunch6dT_info_t_get, _RF_Track.Bunch6dT_info_t_set)
    mean_X = property(_RF_Track.Bunch6dT_info_mean_X_get, _RF_Track.Bunch6dT_info_mean_X_set)
    mean_Y = property(_RF_Track.Bunch6dT_info_mean_Y_get, _RF_Track.Bunch6dT_info_mean_Y_set)
    mean_Z = property(_RF_Track.Bunch6dT_info_mean_Z_get, _RF_Track.Bunch6dT_info_mean_Z_set)
    mean_Px = property(_RF_Track.Bunch6dT_info_mean_Px_get, _RF_Track.Bunch6dT_info_mean_Px_set)
    mean_Py = property(_RF_Track.Bunch6dT_info_mean_Py_get, _RF_Track.Bunch6dT_info_mean_Py_set)
    mean_Pz = property(_RF_Track.Bunch6dT_info_mean_Pz_get, _RF_Track.Bunch6dT_info_mean_Pz_set)
    mean_K = property(_RF_Track.Bunch6dT_info_mean_K_get, _RF_Track.Bunch6dT_info_mean_K_set)
    mean_E = property(_RF_Track.Bunch6dT_info_mean_E_get, _RF_Track.Bunch6dT_info_mean_E_set)
    mean_Sx = property(_RF_Track.Bunch6dT_info_mean_Sx_get, _RF_Track.Bunch6dT_info_mean_Sx_set)
    mean_Sy = property(_RF_Track.Bunch6dT_info_mean_Sy_get, _RF_Track.Bunch6dT_info_mean_Sy_set)
    mean_Sz = property(_RF_Track.Bunch6dT_info_mean_Sz_get, _RF_Track.Bunch6dT_info_mean_Sz_set)
    sigma_X = property(_RF_Track.Bunch6dT_info_sigma_X_get, _RF_Track.Bunch6dT_info_sigma_X_set)
    sigma_Y = property(_RF_Track.Bunch6dT_info_sigma_Y_get, _RF_Track.Bunch6dT_info_sigma_Y_set)
    sigma_Z = property(_RF_Track.Bunch6dT_info_sigma_Z_get, _RF_Track.Bunch6dT_info_sigma_Z_set)
    sigma_Px = property(_RF_Track.Bunch6dT_info_sigma_Px_get, _RF_Track.Bunch6dT_info_sigma_Px_set)
    sigma_Py = property(_RF_Track.Bunch6dT_info_sigma_Py_get, _RF_Track.Bunch6dT_info_sigma_Py_set)
    sigma_Pz = property(_RF_Track.Bunch6dT_info_sigma_Pz_get, _RF_Track.Bunch6dT_info_sigma_Pz_set)
    sigma_E = property(_RF_Track.Bunch6dT_info_sigma_E_get, _RF_Track.Bunch6dT_info_sigma_E_set)
    emitt_x = property(_RF_Track.Bunch6dT_info_emitt_x_get, _RF_Track.Bunch6dT_info_emitt_x_set)
    emitt_y = property(_RF_Track.Bunch6dT_info_emitt_y_get, _RF_Track.Bunch6dT_info_emitt_y_set)
    emitt_z = property(_RF_Track.Bunch6dT_info_emitt_z_get, _RF_Track.Bunch6dT_info_emitt_z_set)
    emitt_4d = property(_RF_Track.Bunch6dT_info_emitt_4d_get, _RF_Track.Bunch6dT_info_emitt_4d_set)
    emitt_6d = property(_RF_Track.Bunch6dT_info_emitt_6d_get, _RF_Track.Bunch6dT_info_emitt_6d_set)
    alpha_x = property(_RF_Track.Bunch6dT_info_alpha_x_get, _RF_Track.Bunch6dT_info_alpha_x_set)
    alpha_y = property(_RF_Track.Bunch6dT_info_alpha_y_get, _RF_Track.Bunch6dT_info_alpha_y_set)
    alpha_z = property(_RF_Track.Bunch6dT_info_alpha_z_get, _RF_Track.Bunch6dT_info_alpha_z_set)
    beta_x = property(_RF_Track.Bunch6dT_info_beta_x_get, _RF_Track.Bunch6dT_info_beta_x_set)
    beta_y = property(_RF_Track.Bunch6dT_info_beta_y_get, _RF_Track.Bunch6dT_info_beta_y_set)
    beta_z = property(_RF_Track.Bunch6dT_info_beta_z_get, _RF_Track.Bunch6dT_info_beta_z_set)
    disp_x = property(_RF_Track.Bunch6dT_info_disp_x_get, _RF_Track.Bunch6dT_info_disp_x_set)
    disp_y = property(_RF_Track.Bunch6dT_info_disp_y_get, _RF_Track.Bunch6dT_info_disp_y_set)
    disp_z = property(_RF_Track.Bunch6dT_info_disp_z_get, _RF_Track.Bunch6dT_info_disp_z_set)
    disp_px = property(_RF_Track.Bunch6dT_info_disp_px_get, _RF_Track.Bunch6dT_info_disp_px_set)
    disp_py = property(_RF_Track.Bunch6dT_info_disp_py_get, _RF_Track.Bunch6dT_info_disp_py_set)
    rmax = property(_RF_Track.Bunch6dT_info_rmax_get, _RF_Track.Bunch6dT_info_rmax_set)
    rmax90 = property(_RF_Track.Bunch6dT_info_rmax90_get, _RF_Track.Bunch6dT_info_rmax90_set)
    rmax99 = property(_RF_Track.Bunch6dT_info_rmax99_get, _RF_Track.Bunch6dT_info_rmax99_set)
    rmax99p9 = property(_RF_Track.Bunch6dT_info_rmax99p9_get, _RF_Track.Bunch6dT_info_rmax99p9_set)
    transmission = property(_RF_Track.Bunch6dT_info_transmission_get, _RF_Track.Bunch6dT_info_transmission_set)
    get_bunch_info = _swig_new_instance_method(_RF_Track.Bunch6dT_info_get_bunch_info)

    def __init__(self):
        _RF_Track.Bunch6dT_info_swiginit(self, _RF_Track.new_Bunch6dT_info())
    __swig_destroy__ = _RF_Track.delete_Bunch6dT_info

# Register Bunch6dT_info in _RF_Track:
_RF_Track.Bunch6dT_info_swigregister(Bunch6dT_info)
class Bunch6d_twiss(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    emitt_x = property(_RF_Track.Bunch6d_twiss_emitt_x_get, _RF_Track.Bunch6d_twiss_emitt_x_set)
    emitt_y = property(_RF_Track.Bunch6d_twiss_emitt_y_get, _RF_Track.Bunch6d_twiss_emitt_y_set)
    emitt_z = property(_RF_Track.Bunch6d_twiss_emitt_z_get, _RF_Track.Bunch6d_twiss_emitt_z_set)
    alpha_x = property(_RF_Track.Bunch6d_twiss_alpha_x_get, _RF_Track.Bunch6d_twiss_alpha_x_set)
    alpha_y = property(_RF_Track.Bunch6d_twiss_alpha_y_get, _RF_Track.Bunch6d_twiss_alpha_y_set)
    alpha_z = property(_RF_Track.Bunch6d_twiss_alpha_z_get, _RF_Track.Bunch6d_twiss_alpha_z_set)
    beta_x = property(_RF_Track.Bunch6d_twiss_beta_x_get, _RF_Track.Bunch6d_twiss_beta_x_set)
    beta_y = property(_RF_Track.Bunch6d_twiss_beta_y_get, _RF_Track.Bunch6d_twiss_beta_y_set)
    beta_z = property(_RF_Track.Bunch6d_twiss_beta_z_get, _RF_Track.Bunch6d_twiss_beta_z_set)
    sigma_t = property(_RF_Track.Bunch6d_twiss_sigma_t_get, _RF_Track.Bunch6d_twiss_sigma_t_set)
    sigma_pt = property(_RF_Track.Bunch6d_twiss_sigma_pt_get, _RF_Track.Bunch6d_twiss_sigma_pt_set)
    disp_x = property(_RF_Track.Bunch6d_twiss_disp_x_get, _RF_Track.Bunch6d_twiss_disp_x_set)
    disp_px = property(_RF_Track.Bunch6d_twiss_disp_px_get, _RF_Track.Bunch6d_twiss_disp_px_set)
    disp_y = property(_RF_Track.Bunch6d_twiss_disp_y_get, _RF_Track.Bunch6d_twiss_disp_y_set)
    disp_py = property(_RF_Track.Bunch6d_twiss_disp_py_get, _RF_Track.Bunch6d_twiss_disp_py_set)
    disp_z = property(_RF_Track.Bunch6d_twiss_disp_z_get, _RF_Track.Bunch6d_twiss_disp_z_set)

    def __init__(self):
        _RF_Track.Bunch6d_twiss_swiginit(self, _RF_Track.new_Bunch6d_twiss())
    __swig_destroy__ = _RF_Track.delete_Bunch6d_twiss

# Register Bunch6d_twiss in _RF_Track:
_RF_Track.Bunch6d_twiss_swigregister(Bunch6d_twiss)
class Bunch6dT_twiss(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    emitt_x = property(_RF_Track.Bunch6dT_twiss_emitt_x_get, _RF_Track.Bunch6dT_twiss_emitt_x_set)
    emitt_y = property(_RF_Track.Bunch6dT_twiss_emitt_y_get, _RF_Track.Bunch6dT_twiss_emitt_y_set)
    emitt_z = property(_RF_Track.Bunch6dT_twiss_emitt_z_get, _RF_Track.Bunch6dT_twiss_emitt_z_set)
    alpha_x = property(_RF_Track.Bunch6dT_twiss_alpha_x_get, _RF_Track.Bunch6dT_twiss_alpha_x_set)
    alpha_y = property(_RF_Track.Bunch6dT_twiss_alpha_y_get, _RF_Track.Bunch6dT_twiss_alpha_y_set)
    alpha_z = property(_RF_Track.Bunch6dT_twiss_alpha_z_get, _RF_Track.Bunch6dT_twiss_alpha_z_set)
    beta_x = property(_RF_Track.Bunch6dT_twiss_beta_x_get, _RF_Track.Bunch6dT_twiss_beta_x_set)
    beta_y = property(_RF_Track.Bunch6dT_twiss_beta_y_get, _RF_Track.Bunch6dT_twiss_beta_y_set)
    beta_z = property(_RF_Track.Bunch6dT_twiss_beta_z_get, _RF_Track.Bunch6dT_twiss_beta_z_set)
    sigma_z = property(_RF_Track.Bunch6dT_twiss_sigma_z_get, _RF_Track.Bunch6dT_twiss_sigma_z_set)
    sigma_pz = property(_RF_Track.Bunch6dT_twiss_sigma_pz_get, _RF_Track.Bunch6dT_twiss_sigma_pz_set)
    disp_x = property(_RF_Track.Bunch6dT_twiss_disp_x_get, _RF_Track.Bunch6dT_twiss_disp_x_set)
    disp_px = property(_RF_Track.Bunch6dT_twiss_disp_px_get, _RF_Track.Bunch6dT_twiss_disp_px_set)
    disp_y = property(_RF_Track.Bunch6dT_twiss_disp_y_get, _RF_Track.Bunch6dT_twiss_disp_y_set)
    disp_py = property(_RF_Track.Bunch6dT_twiss_disp_py_get, _RF_Track.Bunch6dT_twiss_disp_py_set)
    disp_z = property(_RF_Track.Bunch6dT_twiss_disp_z_get, _RF_Track.Bunch6dT_twiss_disp_z_set)

    def __init__(self):
        _RF_Track.Bunch6dT_twiss_swiginit(self, _RF_Track.new_Bunch6dT_twiss())
    __swig_destroy__ = _RF_Track.delete_Bunch6dT_twiss

# Register Bunch6dT_twiss in _RF_Track:
_RF_Track.Bunch6dT_twiss_swigregister(Bunch6dT_twiss)
class Bunch6dT_Generator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    species = property(_RF_Track.Bunch6dT_Generator_species_get, _RF_Track.Bunch6dT_Generator_species_set)
    noise_reduc = property(_RF_Track.Bunch6dT_Generator_noise_reduc_get, _RF_Track.Bunch6dT_Generator_noise_reduc_set)
    rand_generator = property(_RF_Track.Bunch6dT_Generator_rand_generator_get, _RF_Track.Bunch6dT_Generator_rand_generator_set)
    cathode = property(_RF_Track.Bunch6dT_Generator_cathode_get, _RF_Track.Bunch6dT_Generator_cathode_set)
    q_total = property(_RF_Track.Bunch6dT_Generator_q_total_get, _RF_Track.Bunch6dT_Generator_q_total_set)
    ref_zpos = property(_RF_Track.Bunch6dT_Generator_ref_zpos_get, _RF_Track.Bunch6dT_Generator_ref_zpos_set)
    ref_clock = property(_RF_Track.Bunch6dT_Generator_ref_clock_get, _RF_Track.Bunch6dT_Generator_ref_clock_set)
    ref_ekin = property(_RF_Track.Bunch6dT_Generator_ref_ekin_get, _RF_Track.Bunch6dT_Generator_ref_ekin_set)
    dist_z = property(_RF_Track.Bunch6dT_Generator_dist_z_get, _RF_Track.Bunch6dT_Generator_dist_z_set)
    sig_z = property(_RF_Track.Bunch6dT_Generator_sig_z_get, _RF_Track.Bunch6dT_Generator_sig_z_set)
    shape_z = property(_RF_Track.Bunch6dT_Generator_shape_z_get, _RF_Track.Bunch6dT_Generator_shape_z_set)
    c_sig_z = property(_RF_Track.Bunch6dT_Generator_c_sig_z_get, _RF_Track.Bunch6dT_Generator_c_sig_z_set)
    lz = property(_RF_Track.Bunch6dT_Generator_lz_get, _RF_Track.Bunch6dT_Generator_lz_set)
    rz = property(_RF_Track.Bunch6dT_Generator_rz_get, _RF_Track.Bunch6dT_Generator_rz_set)
    sig_t = property(_RF_Track.Bunch6dT_Generator_sig_t_get, _RF_Track.Bunch6dT_Generator_sig_t_set)
    shape_t = property(_RF_Track.Bunch6dT_Generator_shape_t_get, _RF_Track.Bunch6dT_Generator_shape_t_set)
    c_sig_t = property(_RF_Track.Bunch6dT_Generator_c_sig_t_get, _RF_Track.Bunch6dT_Generator_c_sig_t_set)
    lt = property(_RF_Track.Bunch6dT_Generator_lt_get, _RF_Track.Bunch6dT_Generator_lt_set)
    rt = property(_RF_Track.Bunch6dT_Generator_rt_get, _RF_Track.Bunch6dT_Generator_rt_set)
    dist_pz = property(_RF_Track.Bunch6dT_Generator_dist_pz_get, _RF_Track.Bunch6dT_Generator_dist_pz_set)
    sig_ekin = property(_RF_Track.Bunch6dT_Generator_sig_ekin_get, _RF_Track.Bunch6dT_Generator_sig_ekin_set)
    c_sig_ekin = property(_RF_Track.Bunch6dT_Generator_c_sig_ekin_get, _RF_Track.Bunch6dT_Generator_c_sig_ekin_set)
    le = property(_RF_Track.Bunch6dT_Generator_le_get, _RF_Track.Bunch6dT_Generator_le_set)
    re = property(_RF_Track.Bunch6dT_Generator_re_get, _RF_Track.Bunch6dT_Generator_re_set)
    emit_z = property(_RF_Track.Bunch6dT_Generator_emit_z_get, _RF_Track.Bunch6dT_Generator_emit_z_set)
    emit_t = property(_RF_Track.Bunch6dT_Generator_emit_t_get, _RF_Track.Bunch6dT_Generator_emit_t_set)
    cor_ekin = property(_RF_Track.Bunch6dT_Generator_cor_ekin_get, _RF_Track.Bunch6dT_Generator_cor_ekin_set)
    e_photon = property(_RF_Track.Bunch6dT_Generator_e_photon_get, _RF_Track.Bunch6dT_Generator_e_photon_set)
    phi_eff = property(_RF_Track.Bunch6dT_Generator_phi_eff_get, _RF_Track.Bunch6dT_Generator_phi_eff_set)
    dist_x = property(_RF_Track.Bunch6dT_Generator_dist_x_get, _RF_Track.Bunch6dT_Generator_dist_x_set)
    sig_x = property(_RF_Track.Bunch6dT_Generator_sig_x_get, _RF_Track.Bunch6dT_Generator_sig_x_set)
    shape_x = property(_RF_Track.Bunch6dT_Generator_shape_x_get, _RF_Track.Bunch6dT_Generator_shape_x_set)
    c_sig_x = property(_RF_Track.Bunch6dT_Generator_c_sig_x_get, _RF_Track.Bunch6dT_Generator_c_sig_x_set)
    lx = property(_RF_Track.Bunch6dT_Generator_lx_get, _RF_Track.Bunch6dT_Generator_lx_set)
    rx = property(_RF_Track.Bunch6dT_Generator_rx_get, _RF_Track.Bunch6dT_Generator_rx_set)
    x_off = property(_RF_Track.Bunch6dT_Generator_x_off_get, _RF_Track.Bunch6dT_Generator_x_off_set)
    disp_x = property(_RF_Track.Bunch6dT_Generator_disp_x_get, _RF_Track.Bunch6dT_Generator_disp_x_set)
    dist_y = property(_RF_Track.Bunch6dT_Generator_dist_y_get, _RF_Track.Bunch6dT_Generator_dist_y_set)
    sig_y = property(_RF_Track.Bunch6dT_Generator_sig_y_get, _RF_Track.Bunch6dT_Generator_sig_y_set)
    shape_y = property(_RF_Track.Bunch6dT_Generator_shape_y_get, _RF_Track.Bunch6dT_Generator_shape_y_set)
    c_sig_y = property(_RF_Track.Bunch6dT_Generator_c_sig_y_get, _RF_Track.Bunch6dT_Generator_c_sig_y_set)
    ly = property(_RF_Track.Bunch6dT_Generator_ly_get, _RF_Track.Bunch6dT_Generator_ly_set)
    ry = property(_RF_Track.Bunch6dT_Generator_ry_get, _RF_Track.Bunch6dT_Generator_ry_set)
    y_off = property(_RF_Track.Bunch6dT_Generator_y_off_get, _RF_Track.Bunch6dT_Generator_y_off_set)
    disp_y = property(_RF_Track.Bunch6dT_Generator_disp_y_get, _RF_Track.Bunch6dT_Generator_disp_y_set)
    dist_px = property(_RF_Track.Bunch6dT_Generator_dist_px_get, _RF_Track.Bunch6dT_Generator_dist_px_set)
    nemit_x = property(_RF_Track.Bunch6dT_Generator_nemit_x_get, _RF_Track.Bunch6dT_Generator_nemit_x_set)
    sig_px = property(_RF_Track.Bunch6dT_Generator_sig_px_get, _RF_Track.Bunch6dT_Generator_sig_px_set)
    c_sig_px = property(_RF_Track.Bunch6dT_Generator_c_sig_px_get, _RF_Track.Bunch6dT_Generator_c_sig_px_set)
    lpx = property(_RF_Track.Bunch6dT_Generator_lpx_get, _RF_Track.Bunch6dT_Generator_lpx_set)
    rpx = property(_RF_Track.Bunch6dT_Generator_rpx_get, _RF_Track.Bunch6dT_Generator_rpx_set)
    cor_px = property(_RF_Track.Bunch6dT_Generator_cor_px_get, _RF_Track.Bunch6dT_Generator_cor_px_set)
    dist_py = property(_RF_Track.Bunch6dT_Generator_dist_py_get, _RF_Track.Bunch6dT_Generator_dist_py_set)
    nemit_y = property(_RF_Track.Bunch6dT_Generator_nemit_y_get, _RF_Track.Bunch6dT_Generator_nemit_y_set)
    sig_py = property(_RF_Track.Bunch6dT_Generator_sig_py_get, _RF_Track.Bunch6dT_Generator_sig_py_set)
    c_sig_py = property(_RF_Track.Bunch6dT_Generator_c_sig_py_get, _RF_Track.Bunch6dT_Generator_c_sig_py_set)
    lpy = property(_RF_Track.Bunch6dT_Generator_lpy_get, _RF_Track.Bunch6dT_Generator_lpy_set)
    rpy = property(_RF_Track.Bunch6dT_Generator_rpy_get, _RF_Track.Bunch6dT_Generator_rpy_set)
    cor_py = property(_RF_Track.Bunch6dT_Generator_cor_py_get, _RF_Track.Bunch6dT_Generator_cor_py_set)
    charge = property(_RF_Track.Bunch6dT_Generator_charge_get, _RF_Track.Bunch6dT_Generator_charge_set)
    mass = property(_RF_Track.Bunch6dT_Generator_mass_get, _RF_Track.Bunch6dT_Generator_mass_set)
    p_ref = property(_RF_Track.Bunch6dT_Generator_p_ref_get, _RF_Track.Bunch6dT_Generator_p_ref_set)
    nmacro = property(_RF_Track.Bunch6dT_Generator_nmacro_get, _RF_Track.Bunch6dT_Generator_nmacro_set)

    def __init__(self):
        _RF_Track.Bunch6dT_Generator_swiginit(self, _RF_Track.new_Bunch6dT_Generator())
    __swig_destroy__ = _RF_Track.delete_Bunch6dT_Generator

# Register Bunch6dT_Generator in _RF_Track:
_RF_Track.Bunch6dT_Generator_swigregister(Bunch6dT_Generator)
randu = _RF_Track.randu
qrand = _RF_Track.qrand
qrandn = _RF_Track.qrandn
class BeamT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.BeamT_swiginit(self, _RF_Track.new_BeamT(*args))
    __swig_destroy__ = _RF_Track.delete_BeamT
    append = _swig_new_instance_method(_RF_Track.BeamT_append)
    size = _swig_new_instance_method(_RF_Track.BeamT_size)
    load = _swig_new_instance_method(_RF_Track.BeamT_load)
    save = _swig_new_instance_method(_RF_Track.BeamT_save)
    __getitem__ = _swig_new_instance_method(_RF_Track.BeamT___getitem__)
    __len__ = _swig_new_instance_method(_RF_Track.BeamT___len__)
    __iter__ = _swig_new_instance_method(_RF_Track.BeamT___iter__)

# Register BeamT in _RF_Track:
_RF_Track.BeamT_swigregister(BeamT)
class Beam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Beam_swiginit(self, _RF_Track.new_Beam(*args))
    __swig_destroy__ = _RF_Track.delete_Beam
    __assign__ = _swig_new_instance_method(_RF_Track.Beam___assign__)
    append = _swig_new_instance_method(_RF_Track.Beam_append)
    size = _swig_new_instance_method(_RF_Track.Beam_size)
    load = _swig_new_instance_method(_RF_Track.Beam_load)
    save = _swig_new_instance_method(_RF_Track.Beam_save)
    __getitem__ = _swig_new_instance_method(_RF_Track.Beam___getitem__)
    __len__ = _swig_new_instance_method(_RF_Track.Beam___len__)
    __iter__ = _swig_new_instance_method(_RF_Track.Beam___iter__)

# Register Beam in _RF_Track:
_RF_Track.Beam_swigregister(Beam)
class TransportTable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.TransportTable_swiginit(self, _RF_Track.new_TransportTable(*args))
    clear = _swig_new_instance_method(_RF_Track.TransportTable_clear)
    append = _swig_new_instance_method(_RF_Track.TransportTable_append)
    get_transport_table = _swig_new_instance_method(_RF_Track.TransportTable_get_transport_table)
    __swig_destroy__ = _RF_Track.delete_TransportTable

# Register TransportTable in _RF_Track:
_RF_Track.TransportTable_swigregister(TransportTable)
class CollectiveEffect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RF_Track.delete_CollectiveEffect
    compute_force = _swig_new_instance_method(_RF_Track.CollectiveEffect_compute_force)

# Register CollectiveEffect in _RF_Track:
_RF_Track.CollectiveEffect_swigregister(CollectiveEffect)
class SpaceCharge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RF_Track.delete_SpaceCharge
    compute_force = _swig_new_instance_method(_RF_Track.SpaceCharge_compute_force)

# Register SpaceCharge in _RF_Track:
_RF_Track.SpaceCharge_swigregister(SpaceCharge)
class SpaceCharge_P2P(SpaceCharge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    set_Dmin = _swig_new_instance_method(_RF_Track.SpaceCharge_P2P_set_Dmin)
    get_Dmin = _swig_new_instance_method(_RF_Track.SpaceCharge_P2P_get_Dmin)

    def __init__(self):
        _RF_Track.SpaceCharge_P2P_swiginit(self, _RF_Track.new_SpaceCharge_P2P())
    __swig_destroy__ = _RF_Track.delete_SpaceCharge_P2P

# Register SpaceCharge_P2P in _RF_Track:
_RF_Track.SpaceCharge_P2P_swigregister(SpaceCharge_P2P)
class MultipoleKick(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.MultipoleKick_swiginit(self, _RF_Track.new_MultipoleKick(*args))
    set_Bn = _swig_new_instance_method(_RF_Track.MultipoleKick_set_Bn)
    get_Bn = _swig_new_instance_method(_RF_Track.MultipoleKick_get_Bn)
    compute_force = _swig_new_instance_method(_RF_Track.MultipoleKick_compute_force)
    __swig_destroy__ = _RF_Track.delete_MultipoleKick

# Register MultipoleKick in _RF_Track:
_RF_Track.MultipoleKick_swigregister(MultipoleKick)
class BeamLoading(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.BeamLoading_swiginit(self, _RF_Track.new_BeamLoading(*args))
    compute_force = _swig_new_instance_method(_RF_Track.BeamLoading_compute_force)
    solve_pde_steady = _swig_new_instance_method(_RF_Track.BeamLoading_solve_pde_steady)
    solve_pde_transient = _swig_new_instance_method(_RF_Track.BeamLoading_solve_pde_transient)
    get_vg = _swig_new_instance_method(_RF_Track.BeamLoading_get_vg)
    get_Q = _swig_new_instance_method(_RF_Track.BeamLoading_get_Q)
    get_r_Q = _swig_new_instance_method(_RF_Track.BeamLoading_get_r_Q)
    get_dr_Q = _swig_new_instance_method(_RF_Track.BeamLoading_get_dr_Q)
    get_G = _swig_new_instance_method(_RF_Track.BeamLoading_get_G)
    get_G_unloaded = _swig_new_instance_method(_RF_Track.BeamLoading_get_G_unloaded)
    get_G_steady = _swig_new_instance_method(_RF_Track.BeamLoading_get_G_steady)
    get_wake_function = _swig_new_instance_method(_RF_Track.BeamLoading_get_wake_function)
    get_Lcell = _swig_new_instance_method(_RF_Track.BeamLoading_get_Lcell)
    get_dt = _swig_new_instance_method(_RF_Track.BeamLoading_get_dt)
    get_z0 = _swig_new_instance_method(_RF_Track.BeamLoading_get_z0)
    get_z1 = _swig_new_instance_method(_RF_Track.BeamLoading_get_z1)
    get_tfill = _swig_new_instance_method(_RF_Track.BeamLoading_get_tfill)
    set_z0 = _swig_new_instance_method(_RF_Track.BeamLoading_set_z0)
    set_unloaded_gradient = _swig_new_instance_method(_RF_Track.BeamLoading_set_unloaded_gradient)
    set_early_injection = _swig_new_instance_method(_RF_Track.BeamLoading_set_early_injection)
    disable_short_range = _swig_new_instance_method(_RF_Track.BeamLoading_disable_short_range)
    enable_short_range = _swig_new_instance_method(_RF_Track.BeamLoading_enable_short_range)
    __swig_destroy__ = _RF_Track.delete_BeamLoading

# Register BeamLoading in _RF_Track:
_RF_Track.BeamLoading_swigregister(BeamLoading)
class BeamLoadingSW(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Ez, QQ, RHO, Ncells, mass, q, tinj_frac):
        _RF_Track.BeamLoadingSW_swiginit(self, _RF_Track.new_BeamLoadingSW(Ez, QQ, RHO, Ncells, mass, q, tinj_frac))
    compute_force = _swig_new_instance_method(_RF_Track.BeamLoadingSW_compute_force)
    get_TT1 = _swig_new_instance_method(_RF_Track.BeamLoadingSW_get_TT1)
    get_TT2 = _swig_new_instance_method(_RF_Track.BeamLoadingSW_get_TT2)
    get_Lcell = _swig_new_instance_method(_RF_Track.BeamLoadingSW_get_Lcell)
    get_tfill = _swig_new_instance_method(_RF_Track.BeamLoadingSW_get_tfill)
    get_tinj = _swig_new_instance_method(_RF_Track.BeamLoadingSW_get_tinj)
    __swig_destroy__ = _RF_Track.delete_BeamLoadingSW

# Register BeamLoadingSW in _RF_Track:
_RF_Track.BeamLoadingSW_swigregister(BeamLoadingSW)
class LongRangeWakefield(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.LongRangeWakefield_swiginit(self, _RF_Track.new_LongRangeWakefield(*args))
    set_nbins = _swig_new_instance_method(_RF_Track.LongRangeWakefield_set_nbins)
    compute_force = _swig_new_instance_method(_RF_Track.LongRangeWakefield_compute_force)
    w_long = _swig_new_instance_method(_RF_Track.LongRangeWakefield_w_long)
    w_x = _swig_new_instance_method(_RF_Track.LongRangeWakefield_w_x)
    w_y = _swig_new_instance_method(_RF_Track.LongRangeWakefield_w_y)
    __swig_destroy__ = _RF_Track.delete_LongRangeWakefield

# Register LongRangeWakefield in _RF_Track:
_RF_Track.LongRangeWakefield_swigregister(LongRangeWakefield)
class ShortRangeWakefield(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.ShortRangeWakefield_swiginit(self, _RF_Track.new_ShortRangeWakefield(*args))
    set_nbins = _swig_new_instance_method(_RF_Track.ShortRangeWakefield_set_nbins)
    scatter_cells = _swig_new_instance_method(_RF_Track.ShortRangeWakefield_scatter_cells)
    compute_force = _swig_new_instance_method(_RF_Track.ShortRangeWakefield_compute_force)
    w_long = _swig_new_instance_method(_RF_Track.ShortRangeWakefield_w_long)
    w_transv = _swig_new_instance_method(_RF_Track.ShortRangeWakefield_w_transv)
    __swig_destroy__ = _RF_Track.delete_ShortRangeWakefield

# Register ShortRangeWakefield in _RF_Track:
_RF_Track.ShortRangeWakefield_swigregister(ShortRangeWakefield)
class MultipleCoulombScattering(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.MultipleCoulombScattering_swiginit(self, _RF_Track.new_MultipleCoulombScattering(*args))
    enable_log_term = _swig_new_instance_method(_RF_Track.MultipleCoulombScattering_enable_log_term)
    disable_log_term = _swig_new_instance_method(_RF_Track.MultipleCoulombScattering_disable_log_term)
    enable_fruehwirth_model = _swig_new_instance_method(_RF_Track.MultipleCoulombScattering_enable_fruehwirth_model)
    disable_fruehwirth_model = _swig_new_instance_method(_RF_Track.MultipleCoulombScattering_disable_fruehwirth_model)
    enable_wentzel_model = _swig_new_instance_method(_RF_Track.MultipleCoulombScattering_enable_wentzel_model)
    disable_wentzel_model = _swig_new_instance_method(_RF_Track.MultipleCoulombScattering_disable_wentzel_model)
    compute_force = _swig_new_instance_method(_RF_Track.MultipleCoulombScattering_compute_force)
    __swig_destroy__ = _RF_Track.delete_MultipleCoulombScattering

# Register MultipleCoulombScattering in _RF_Track:
_RF_Track.MultipleCoulombScattering_swigregister(MultipleCoulombScattering)
class IntraBeamScattering(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nx=16, ny=16, nz=16, ncol=-1):
        _RF_Track.IntraBeamScattering_swiginit(self, _RF_Track.new_IntraBeamScattering(nx, ny, nz, ncol))
    compute_force = _swig_new_instance_method(_RF_Track.IntraBeamScattering_compute_force)
    __swig_destroy__ = _RF_Track.delete_IntraBeamScattering

# Register IntraBeamScattering in _RF_Track:
_RF_Track.IntraBeamScattering_swigregister(IntraBeamScattering)
class EnergyStraggling(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.EnergyStraggling_swiginit(self, _RF_Track.new_EnergyStraggling(*args))
    compute_force = _swig_new_instance_method(_RF_Track.EnergyStraggling_compute_force)
    __swig_destroy__ = _RF_Track.delete_EnergyStraggling

# Register EnergyStraggling in _RF_Track:
_RF_Track.EnergyStraggling_swigregister(EnergyStraggling)
class StoppingPower(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.StoppingPower_swiginit(self, _RF_Track.new_StoppingPower(*args))
    __swig_destroy__ = _RF_Track.delete_StoppingPower
    __assign__ = _swig_new_instance_method(_RF_Track.StoppingPower___assign__)
    compute_force = _swig_new_instance_method(_RF_Track.StoppingPower_compute_force)

# Register StoppingPower in _RF_Track:
_RF_Track.StoppingPower_swigregister(StoppingPower)
class IncoherentSynchrotronRadiation(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, quantum=False, create_photons=False):
        _RF_Track.IncoherentSynchrotronRadiation_swiginit(self, _RF_Track.new_IncoherentSynchrotronRadiation(quantum, create_photons))
    compute_force = _swig_new_instance_method(_RF_Track.IncoherentSynchrotronRadiation_compute_force)
    __swig_destroy__ = _RF_Track.delete_IncoherentSynchrotronRadiation

# Register IncoherentSynchrotronRadiation in _RF_Track:
_RF_Track.IncoherentSynchrotronRadiation_swigregister(IncoherentSynchrotronRadiation)
class SpaceCharge_PIC_LongCylinder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Nx_=1, Ny_=1, Nz_=1, a=1.0):
        _RF_Track.SpaceCharge_PIC_LongCylinder_swiginit(self, _RF_Track.new_SpaceCharge_PIC_LongCylinder(Nx_, Ny_, Nz_, a))
    set_aperture = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_LongCylinder_set_aperture)
    get_aperture = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_LongCylinder_get_aperture)
    __swig_destroy__ = _RF_Track.delete_SpaceCharge_PIC_LongCylinder

# Register SpaceCharge_PIC_LongCylinder in _RF_Track:
_RF_Track.SpaceCharge_PIC_LongCylinder_swigregister(SpaceCharge_PIC_LongCylinder)
class SpaceCharge_PIC_HorizontalPlates(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Nx_=1, Ny_=1, Nz_=1, h=1.0):
        _RF_Track.SpaceCharge_PIC_HorizontalPlates_swiginit(self, _RF_Track.new_SpaceCharge_PIC_HorizontalPlates(Nx_, Ny_, Nz_, h))
    set_half_gap = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_HorizontalPlates_set_half_gap)
    get_half_gap = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_HorizontalPlates_get_half_gap)
    __swig_destroy__ = _RF_Track.delete_SpaceCharge_PIC_HorizontalPlates

# Register SpaceCharge_PIC_HorizontalPlates in _RF_Track:
_RF_Track.SpaceCharge_PIC_HorizontalPlates_swigregister(SpaceCharge_PIC_HorizontalPlates)
class Visitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RF_Track.delete_Visitor
    visit = _swig_new_instance_method(_RF_Track.Visitor_visit)
    should_stop = _swig_new_instance_method(_RF_Track.Visitor_should_stop)

# Register Visitor in _RF_Track:
_RF_Track.Visitor_swigregister(Visitor)
class ConstVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RF_Track.delete_ConstVisitor
    visit = _swig_new_instance_method(_RF_Track.ConstVisitor_visit)
    should_stop = _swig_new_instance_method(_RF_Track.ConstVisitor_should_stop)

# Register ConstVisitor in _RF_Track:
_RF_Track.ConstVisitor_swigregister(ConstVisitor)
class UserEffect(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == UserEffect:
            _self = None
        else:
            _self = self
        _RF_Track.UserEffect_swiginit(self, _RF_Track.new_UserEffect(_self, ))
    __swig_destroy__ = _RF_Track.delete_UserEffect
    compute_force = _swig_new_instance_method(_RF_Track.UserEffect_compute_force)
    def __disown__(self):
        self.this.disown()
        _RF_Track.disown_UserEffect(self)
        return weakref.proxy(self)

# Register UserEffect in _RF_Track:
_RF_Track.UserEffect_swigregister(UserEffect)
class UserElement(Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, L=0.0):
        if self.__class__ == UserElement:
            _self = None
        else:
            _self = self
        _RF_Track.UserElement_swiginit(self, _RF_Track.new_UserElement(_self, L))
    __swig_destroy__ = _RF_Track.delete_UserElement
    get_length = _swig_new_instance_method(_RF_Track.UserElement_get_length)
    track = _swig_new_instance_method(_RF_Track.UserElement_track)
    btrack = _swig_new_instance_method(_RF_Track.UserElement_btrack)
    def __disown__(self):
        self.this.disown()
        _RF_Track.disown_UserElement(self)
        return weakref.proxy(self)

# Register UserElement in _RF_Track:
_RF_Track.UserElement_swigregister(UserElement)
class UserField(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, L=0):
        if self.__class__ == UserField:
            _self = None
        else:
            _self = self
        _RF_Track.UserField_swiginit(self, _RF_Track.new_UserField(_self, L))
    __swig_destroy__ = _RF_Track.delete_UserField
    get_length = _swig_new_instance_method(_RF_Track.UserField_get_length)
    get_field = _swig_new_instance_method(_RF_Track.UserField_get_field)
    def __disown__(self):
        self.this.disown()
        _RF_Track.disown_UserField(self)
        return weakref.proxy(self)

# Register UserField in _RF_Track:
_RF_Track.UserField_swigregister(UserField)
class UserVisitor(Visitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == UserVisitor:
            _self = None
        else:
            _self = self
        _RF_Track.UserVisitor_swiginit(self, _RF_Track.new_UserVisitor(_self, ))
    __swig_destroy__ = _RF_Track.delete_UserVisitor
    stop_at = _swig_new_instance_method(_RF_Track.UserVisitor_stop_at)
    should_stop = _swig_new_instance_method(_RF_Track.UserVisitor_should_stop)
    visit = _swig_new_instance_method(_RF_Track.UserVisitor_visit)
    process = _swig_new_instance_method(_RF_Track.UserVisitor_process)
    def __disown__(self):
        self.this.disown()
        _RF_Track.disown_UserVisitor(self)
        return weakref.proxy(self)

# Register UserVisitor in _RF_Track:
_RF_Track.UserVisitor_swigregister(UserVisitor)
class Wakefield_1d_CINT(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Wakefield_1d_CINT_swiginit(self, _RF_Track.new_Wakefield_1d_CINT(*args))
    w_transv = _swig_new_instance_method(_RF_Track.Wakefield_1d_CINT_w_transv)
    w_long = _swig_new_instance_method(_RF_Track.Wakefield_1d_CINT_w_long)
    set_nbins = _swig_new_instance_method(_RF_Track.Wakefield_1d_CINT_set_nbins)
    set_hz = _swig_new_instance_method(_RF_Track.Wakefield_1d_CINT_set_hz)
    get_hz = _swig_new_instance_method(_RF_Track.Wakefield_1d_CINT_get_hz)
    compute_force = _swig_new_instance_method(_RF_Track.Wakefield_1d_CINT_compute_force)
    __swig_destroy__ = _RF_Track.delete_Wakefield_1d_CINT

# Register Wakefield_1d_CINT in _RF_Track:
_RF_Track.Wakefield_1d_CINT_swigregister(Wakefield_1d_CINT)
class Wakefield_1d(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Wakefield_1d_swiginit(self, _RF_Track.new_Wakefield_1d(*args))
    w_transv = _swig_new_instance_method(_RF_Track.Wakefield_1d_w_transv)
    w_long = _swig_new_instance_method(_RF_Track.Wakefield_1d_w_long)
    set_nbins = _swig_new_instance_method(_RF_Track.Wakefield_1d_set_nbins)
    set_hz = _swig_new_instance_method(_RF_Track.Wakefield_1d_set_hz)
    get_hz = _swig_new_instance_method(_RF_Track.Wakefield_1d_get_hz)
    compute_force = _swig_new_instance_method(_RF_Track.Wakefield_1d_compute_force)
    __swig_destroy__ = _RF_Track.delete_Wakefield_1d

# Register Wakefield_1d in _RF_Track:
_RF_Track.Wakefield_1d_swigregister(Wakefield_1d)
class RF_FieldMap_CINT(RF_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.RF_FieldMap_CINT_swiginit(self, _RF_Track.new_RF_FieldMap_CINT(*args))
    get_hx = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_get_hx)
    get_hy = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_get_hy)
    get_hz = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_get_hz)
    get_nx = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_get_nx)
    get_ny = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_get_ny)
    get_nz = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_get_nz)
    get_xa = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_get_xa)
    get_ya = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_get_ya)
    get_x0 = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_get_x0)
    get_y0 = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_get_y0)
    get_z0 = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_get_z0)
    get_x1 = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_get_x1)
    get_y1 = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_get_y1)
    get_z1 = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_get_z1)
    is_cylindrical = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_is_cylindrical)
    set_cylindrical = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_set_cylindrical)
    get_P_map = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_get_P_map)
    get_P_actual = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_get_P_actual)
    get_direction = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_get_direction)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_get_static_Bfield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_set_static_Bfield)
    set_hx = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_set_hx)
    set_hy = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_set_hy)
    set_hz = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_set_hz)
    set_xa = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_set_xa)
    set_ya = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_set_ya)
    set_z0 = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_set_z0)
    set_z1 = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_set_z1)
    set_smooth = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_set_smooth)
    set_direction = _swig_new_instance_method(_RF_Track.RF_FieldMap_CINT_set_direction)
    __swig_destroy__ = _RF_Track.delete_RF_FieldMap_CINT

# Register RF_FieldMap_CINT in _RF_Track:
_RF_Track.RF_FieldMap_CINT_swigregister(RF_FieldMap_CINT)
class RF_FieldMap(RF_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.RF_FieldMap_swiginit(self, _RF_Track.new_RF_FieldMap(*args))
    get_hx = _swig_new_instance_method(_RF_Track.RF_FieldMap_get_hx)
    get_hy = _swig_new_instance_method(_RF_Track.RF_FieldMap_get_hy)
    get_hz = _swig_new_instance_method(_RF_Track.RF_FieldMap_get_hz)
    get_nx = _swig_new_instance_method(_RF_Track.RF_FieldMap_get_nx)
    get_ny = _swig_new_instance_method(_RF_Track.RF_FieldMap_get_ny)
    get_nz = _swig_new_instance_method(_RF_Track.RF_FieldMap_get_nz)
    get_xa = _swig_new_instance_method(_RF_Track.RF_FieldMap_get_xa)
    get_ya = _swig_new_instance_method(_RF_Track.RF_FieldMap_get_ya)
    get_x0 = _swig_new_instance_method(_RF_Track.RF_FieldMap_get_x0)
    get_y0 = _swig_new_instance_method(_RF_Track.RF_FieldMap_get_y0)
    get_z0 = _swig_new_instance_method(_RF_Track.RF_FieldMap_get_z0)
    get_x1 = _swig_new_instance_method(_RF_Track.RF_FieldMap_get_x1)
    get_y1 = _swig_new_instance_method(_RF_Track.RF_FieldMap_get_y1)
    get_z1 = _swig_new_instance_method(_RF_Track.RF_FieldMap_get_z1)
    is_cylindrical = _swig_new_instance_method(_RF_Track.RF_FieldMap_is_cylindrical)
    set_cylindrical = _swig_new_instance_method(_RF_Track.RF_FieldMap_set_cylindrical)
    get_P_map = _swig_new_instance_method(_RF_Track.RF_FieldMap_get_P_map)
    get_P_actual = _swig_new_instance_method(_RF_Track.RF_FieldMap_get_P_actual)
    get_direction = _swig_new_instance_method(_RF_Track.RF_FieldMap_get_direction)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.RF_FieldMap_get_static_Bfield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.RF_FieldMap_set_static_Bfield)
    set_hx = _swig_new_instance_method(_RF_Track.RF_FieldMap_set_hx)
    set_hy = _swig_new_instance_method(_RF_Track.RF_FieldMap_set_hy)
    set_hz = _swig_new_instance_method(_RF_Track.RF_FieldMap_set_hz)
    set_xa = _swig_new_instance_method(_RF_Track.RF_FieldMap_set_xa)
    set_ya = _swig_new_instance_method(_RF_Track.RF_FieldMap_set_ya)
    set_z0 = _swig_new_instance_method(_RF_Track.RF_FieldMap_set_z0)
    set_z1 = _swig_new_instance_method(_RF_Track.RF_FieldMap_set_z1)
    set_smooth = _swig_new_instance_method(_RF_Track.RF_FieldMap_set_smooth)
    set_direction = _swig_new_instance_method(_RF_Track.RF_FieldMap_set_direction)
    __swig_destroy__ = _RF_Track.delete_RF_FieldMap

# Register RF_FieldMap in _RF_Track:
_RF_Track.RF_FieldMap_swigregister(RF_FieldMap)
class RF_FieldMap_1d_CINT(RF_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.RF_FieldMap_1d_CINT_swiginit(self, _RF_Track.new_RF_FieldMap_1d_CINT(*args))
    get_hz = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_CINT_get_hz)
    get_nz = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_CINT_get_nz)
    get_z0 = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_CINT_get_z0)
    get_z1 = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_CINT_get_z1)
    get_P_map = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_CINT_get_P_map)
    get_P_actual = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_CINT_get_P_actual)
    get_direction = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_CINT_get_direction)
    get_Ez = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_CINT_get_Ez)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_CINT_get_static_Bfield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_CINT_set_static_Bfield)
    set_smooth = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_CINT_set_smooth)
    set_hz = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_CINT_set_hz)
    set_z0 = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_CINT_set_z0)
    set_z1 = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_CINT_set_z1)
    set_direction = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_CINT_set_direction)
    __swig_destroy__ = _RF_Track.delete_RF_FieldMap_1d_CINT

# Register RF_FieldMap_1d_CINT in _RF_Track:
_RF_Track.RF_FieldMap_1d_CINT_swigregister(RF_FieldMap_1d_CINT)
class RF_FieldMap_1d(RF_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.RF_FieldMap_1d_swiginit(self, _RF_Track.new_RF_FieldMap_1d(*args))
    get_hz = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_get_hz)
    get_nz = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_get_nz)
    get_z0 = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_get_z0)
    get_z1 = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_get_z1)
    get_P_map = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_get_P_map)
    get_P_actual = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_get_P_actual)
    get_direction = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_get_direction)
    get_Ez = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_get_Ez)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_get_static_Bfield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_set_static_Bfield)
    set_smooth = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_set_smooth)
    set_hz = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_set_hz)
    set_z0 = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_set_z0)
    set_z1 = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_set_z1)
    set_direction = _swig_new_instance_method(_RF_Track.RF_FieldMap_1d_set_direction)
    __swig_destroy__ = _RF_Track.delete_RF_FieldMap_1d

# Register RF_FieldMap_1d in _RF_Track:
_RF_Track.RF_FieldMap_1d_swigregister(RF_FieldMap_1d)
class RF_FieldMap_2d_CINT(RF_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.RF_FieldMap_2d_CINT_swiginit(self, _RF_Track.new_RF_FieldMap_2d_CINT(*args))
    get_hr = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_CINT_get_hr)
    get_hz = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_CINT_get_hz)
    get_nr = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_CINT_get_nr)
    get_nz = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_CINT_get_nz)
    get_P_map = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_CINT_get_P_map)
    get_P_actual = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_CINT_get_P_actual)
    get_direction = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_CINT_get_direction)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_CINT_get_static_Bfield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_CINT_set_static_Bfield)
    set_hr = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_CINT_set_hr)
    set_hz = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_CINT_set_hz)
    set_z0 = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_CINT_set_z0)
    set_z1 = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_CINT_set_z1)
    set_direction = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_CINT_set_direction)
    __swig_destroy__ = _RF_Track.delete_RF_FieldMap_2d_CINT

# Register RF_FieldMap_2d_CINT in _RF_Track:
_RF_Track.RF_FieldMap_2d_CINT_swigregister(RF_FieldMap_2d_CINT)
class RF_FieldMap_2d(RF_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.RF_FieldMap_2d_swiginit(self, _RF_Track.new_RF_FieldMap_2d(*args))
    get_hr = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_get_hr)
    get_hz = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_get_hz)
    get_nr = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_get_nr)
    get_nz = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_get_nz)
    get_P_map = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_get_P_map)
    get_P_actual = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_get_P_actual)
    get_direction = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_get_direction)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_get_static_Bfield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_set_static_Bfield)
    set_hr = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_set_hr)
    set_hz = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_set_hz)
    set_z0 = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_set_z0)
    set_z1 = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_set_z1)
    set_direction = _swig_new_instance_method(_RF_Track.RF_FieldMap_2d_set_direction)
    __swig_destroy__ = _RF_Track.delete_RF_FieldMap_2d

# Register RF_FieldMap_2d in _RF_Track:
_RF_Track.RF_FieldMap_2d_swigregister(RF_FieldMap_2d)
class Static_Magnetic_FieldMap_1d_CINT(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Static_Magnetic_FieldMap_1d_CINT_swiginit(self, _RF_Track.new_Static_Magnetic_FieldMap_1d_CINT(*args))
    get_hz = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_CINT_get_hz)
    get_nz = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_CINT_get_nz)
    get_z0 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_CINT_get_z0)
    get_z1 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_CINT_get_z1)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_CINT_get_static_Bfield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_CINT_set_static_Bfield)
    set_smooth = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_CINT_set_smooth)
    set_hz = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_CINT_set_hz)
    set_z0 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_CINT_set_z0)
    set_z1 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_CINT_set_z1)
    __swig_destroy__ = _RF_Track.delete_Static_Magnetic_FieldMap_1d_CINT

# Register Static_Magnetic_FieldMap_1d_CINT in _RF_Track:
_RF_Track.Static_Magnetic_FieldMap_1d_CINT_swigregister(Static_Magnetic_FieldMap_1d_CINT)
class Static_Magnetic_FieldMap_1d(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Static_Magnetic_FieldMap_1d_swiginit(self, _RF_Track.new_Static_Magnetic_FieldMap_1d(*args))
    get_hz = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_get_hz)
    get_nz = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_get_nz)
    get_z0 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_get_z0)
    get_z1 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_get_z1)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_get_static_Bfield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_set_static_Bfield)
    set_smooth = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_set_smooth)
    set_hz = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_set_hz)
    set_z0 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_set_z0)
    set_z1 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_1d_set_z1)
    __swig_destroy__ = _RF_Track.delete_Static_Magnetic_FieldMap_1d

# Register Static_Magnetic_FieldMap_1d in _RF_Track:
_RF_Track.Static_Magnetic_FieldMap_1d_swigregister(Static_Magnetic_FieldMap_1d)
class Static_Magnetic_FieldMap_2d_CINT(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Static_Magnetic_FieldMap_2d_CINT_swiginit(self, _RF_Track.new_Static_Magnetic_FieldMap_2d_CINT(*args))
    get_hr = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_CINT_get_hr)
    get_hz = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_CINT_get_hz)
    get_nr = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_CINT_get_nr)
    get_nz = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_CINT_get_nz)
    get_z0 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_CINT_get_z0)
    get_z1 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_CINT_get_z1)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_CINT_get_static_Bfield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_CINT_set_static_Bfield)
    set_hr = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_CINT_set_hr)
    set_hz = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_CINT_set_hz)
    set_z0 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_CINT_set_z0)
    set_z1 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_CINT_set_z1)
    __swig_destroy__ = _RF_Track.delete_Static_Magnetic_FieldMap_2d_CINT

# Register Static_Magnetic_FieldMap_2d_CINT in _RF_Track:
_RF_Track.Static_Magnetic_FieldMap_2d_CINT_swigregister(Static_Magnetic_FieldMap_2d_CINT)
class Static_Magnetic_FieldMap_2d(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Static_Magnetic_FieldMap_2d_swiginit(self, _RF_Track.new_Static_Magnetic_FieldMap_2d(*args))
    get_hr = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_get_hr)
    get_hz = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_get_hz)
    get_nr = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_get_nr)
    get_nz = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_get_nz)
    get_z0 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_get_z0)
    get_z1 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_get_z1)
    get_static_Bfield = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_get_static_Bfield)
    set_static_Bfield = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_set_static_Bfield)
    set_hr = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_set_hr)
    set_hz = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_set_hz)
    set_z0 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_set_z0)
    set_z1 = _swig_new_instance_method(_RF_Track.Static_Magnetic_FieldMap_2d_set_z1)
    __swig_destroy__ = _RF_Track.delete_Static_Magnetic_FieldMap_2d

# Register Static_Magnetic_FieldMap_2d in _RF_Track:
_RF_Track.Static_Magnetic_FieldMap_2d_swigregister(Static_Magnetic_FieldMap_2d)
class SpaceCharge_PIC_FreeSpace(SpaceCharge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.SpaceCharge_PIC_FreeSpace_swiginit(self, _RF_Track.new_SpaceCharge_PIC_FreeSpace(*args))
    __swig_destroy__ = _RF_Track.delete_SpaceCharge_PIC_FreeSpace
    __assign__ = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_FreeSpace___assign__)
    set_mirror = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_FreeSpace_set_mirror)
    set_smooth = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_FreeSpace_set_smooth)
    set_velocity_slices = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_FreeSpace_set_velocity_slices)
    get_mirror = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_FreeSpace_get_mirror)
    get_smooth = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_FreeSpace_get_smooth)
    get_velocity_slices = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_FreeSpace_get_velocity_slices)

# Register SpaceCharge_PIC_FreeSpace in _RF_Track:
_RF_Track.SpaceCharge_PIC_FreeSpace_swigregister(SpaceCharge_PIC_FreeSpace)
class SpaceCharge_PIC_LongCylinder_T(SpaceCharge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.SpaceCharge_PIC_LongCylinder_T_swiginit(self, _RF_Track.new_SpaceCharge_PIC_LongCylinder_T(*args))
    __swig_destroy__ = _RF_Track.delete_SpaceCharge_PIC_LongCylinder_T
    __assign__ = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_LongCylinder_T___assign__)
    set_mirror = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_LongCylinder_T_set_mirror)
    set_smooth = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_LongCylinder_T_set_smooth)
    set_velocity_slices = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_LongCylinder_T_set_velocity_slices)
    get_mirror = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_LongCylinder_T_get_mirror)
    get_smooth = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_LongCylinder_T_get_smooth)
    get_velocity_slices = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_LongCylinder_T_get_velocity_slices)

# Register SpaceCharge_PIC_LongCylinder_T in _RF_Track:
_RF_Track.SpaceCharge_PIC_LongCylinder_T_swigregister(SpaceCharge_PIC_LongCylinder_T)
class SpaceCharge_PIC_HorizontalPlates_T(SpaceCharge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.SpaceCharge_PIC_HorizontalPlates_T_swiginit(self, _RF_Track.new_SpaceCharge_PIC_HorizontalPlates_T(*args))
    __swig_destroy__ = _RF_Track.delete_SpaceCharge_PIC_HorizontalPlates_T
    __assign__ = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_HorizontalPlates_T___assign__)
    set_mirror = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_HorizontalPlates_T_set_mirror)
    set_smooth = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_HorizontalPlates_T_set_smooth)
    set_velocity_slices = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_HorizontalPlates_T_set_velocity_slices)
    get_mirror = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_HorizontalPlates_T_get_mirror)
    get_smooth = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_HorizontalPlates_T_get_smooth)
    get_velocity_slices = _swig_new_instance_method(_RF_Track.SpaceCharge_PIC_HorizontalPlates_T_get_velocity_slices)

# Register SpaceCharge_PIC_HorizontalPlates_T in _RF_Track:
_RF_Track.SpaceCharge_PIC_HorizontalPlates_T_swigregister(SpaceCharge_PIC_HorizontalPlates_T)

Particle.id  = property(Particle.get_id,  Particle.set_id)
ParticleT.id = property(ParticleT.get_id, ParticleT.set_id)
Particle.pdg_id  = property(Particle.get_pdg_id,  Particle.set_pdg_id)
ParticleT.pdg_id = property(ParticleT.get_pdg_id, ParticleT.set_pdg_id)


