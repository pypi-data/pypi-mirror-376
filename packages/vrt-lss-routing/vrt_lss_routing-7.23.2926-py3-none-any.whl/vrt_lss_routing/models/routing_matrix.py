# coding: utf-8

"""
    VRt.Routing [RT]

    # Description  **VRt.Routing** is designed to find a route between locations and build time-distance matrices.  ## Features  * Getting the distance and time between two locations, including traffic jams * Finding a route between specified locations * Creating a time-distance matrix  ## Entity relationship diagram  ![erd](../uml/routing.svg) 

    The version of the OpenAPI document: 7.23.2926
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from vrt_lss_routing.models.routing_matrix_waypoint import RoutingMatrixWaypoint
from typing import Optional, Set
from typing_extensions import Self

class RoutingMatrix(BaseModel):
    """
    Routing matrix. Contains durations and distances between points. 
    """ # noqa: E501
    waypoints: Annotated[List[RoutingMatrixWaypoint], Field(min_length=2, max_length=15001)] = Field(description="Array of geographical points with distances and times calculated between them.")
    distances: Annotated[List[Annotated[List[Annotated[int, Field(le=10000000, strict=True, ge=-1)]], Field(min_length=2, max_length=15001)]], Field(min_length=2, max_length=15001)] = Field(description="Routes length between two neighbors locations, in meters. The values in the array are ordered according to the elements order in the `waypoints` parameter. Each matrix row is an array of distances from the desired point to every other point. A negative value (-1) means that it is not possible to drive between the specified locations. ")
    durations: Annotated[List[Annotated[List[Annotated[int, Field(le=10000000, strict=True, ge=-1)]], Field(min_length=2, max_length=15001)]], Field(min_length=2, max_length=15001)] = Field(description="An array of route durations between points, in seconds. The values in the array are ordered according to the order of the elements in the `waypoints` parameter. Each row of the matrix is an array of travel times from the desired point to each other point. A negative value (-1) means that it is impossible to travel between the specified points. ")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["waypoints", "distances", "durations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoutingMatrix from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in waypoints (list)
        _items = []
        if self.waypoints:
            for _item_waypoints in self.waypoints:
                if _item_waypoints:
                    _items.append(_item_waypoints.to_dict())
            _dict['waypoints'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoutingMatrix from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "waypoints": [RoutingMatrixWaypoint.from_dict(_item) for _item in obj["waypoints"]] if obj.get("waypoints") is not None else None,
            "distances": obj.get("distances"),
            "durations": obj.get("durations")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


