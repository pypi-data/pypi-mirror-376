# coding: utf-8

"""
    VRt.Routing [RT]

    # Description  **VRt.Routing** is designed to find a route between locations and build time-distance matrices.  ## Features  * Getting the distance and time between two locations, including traffic jams * Finding a route between specified locations * Creating a time-distance matrix  ## Entity relationship diagram  ![erd](../uml/routing.svg) 

    The version of the OpenAPI document: 7.23.2924
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from uuid import UUID
from vrt_lss_routing.models.service import Service
from typing import Optional, Set
from typing_extensions import Self

class Tracedata(BaseModel):
    """
    Data for request tracing.
    """ # noqa: E501
    process_code: UUID = Field(description="Unique process identifier. One is created per process, the same for different requests for the same process. ")
    request_code: UUID = Field(description="Unique identifier of the request. A new one is created for each request. ")
    username: Annotated[str, Field(min_length=2, strict=True, max_length=256)] = Field(description="Unique username for login.")
    company: Annotated[str, Field(min_length=3, strict=True, max_length=256)] = Field(description="Unique company key.")
    service: Service
    operation: Annotated[str, Field(min_length=3, strict=True, max_length=256)] = Field(description="Operation (request) name.")
    env: Annotated[str, Field(min_length=2, strict=True, max_length=256)] = Field(description="Environment identifier.")
    pod: Annotated[str, Field(min_length=2, strict=True, max_length=256)] = Field(description="Pod identifier.")
    time: datetime = Field(description="Date and time service method run in the [ISO 8601](https://tools.ietf.org/html/rfc3339#section-5.6) format.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["process_code", "request_code", "username", "company", "service", "operation", "env", "pod", "time"]

    @field_validator('username')
    def username_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"\w+", value):
            raise ValueError(r"must validate the regular expression /\w+/")
        return value

    @field_validator('company')
    def company_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"\w+", value):
            raise ValueError(r"must validate the regular expression /\w+/")
        return value

    @field_validator('operation')
    def operation_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"\w+", value):
            raise ValueError(r"must validate the regular expression /\w+/")
        return value

    @field_validator('env')
    def env_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"\w+", value):
            raise ValueError(r"must validate the regular expression /\w+/")
        return value

    @field_validator('pod')
    def pod_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"\w+", value):
            raise ValueError(r"must validate the regular expression /\w+/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Tracedata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Tracedata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "process_code": obj.get("process_code"),
            "request_code": obj.get("request_code"),
            "username": obj.get("username"),
            "company": obj.get("company"),
            "service": obj.get("service"),
            "operation": obj.get("operation"),
            "env": obj.get("env"),
            "pod": obj.get("pod"),
            "time": obj.get("time")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


