# coding: utf-8

"""
    VRt.Routing [RT]

    # Description  **VRt.Routing** is designed to find a route between locations and build time-distance matrices.  ## Features  * Getting the distance and time between two locations, including traffic jams * Finding a route between specified locations * Creating a time-distance matrix  ## Entity relationship diagram  ![erd](../uml/routing.svg) 

    The version of the OpenAPI document: 7.23.2924
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from vrt_lss_routing.models.geo_settings import GeoSettings
from vrt_lss_routing.models.route_waypoint import RouteWaypoint
from vrt_lss_routing.models.transport_type import TransportType
from typing import Optional, Set
from typing_extensions import Self

class RouteTask(BaseModel):
    """
    Task for route planning. The departure time considers traffic jams. 
    """ # noqa: E501
    waypoints: Annotated[List[RouteWaypoint], Field(min_length=2, max_length=15001)] = Field(description="Array of geographical points to build path between them.")
    transport_type: Optional[TransportType] = TransportType.CAR
    geo_settings: Optional[GeoSettings] = None
    departure_time: Optional[datetime] = Field(default=None, description="Departure date and time according to the [ISO 8601](https://tools.ietf.org/html/rfc3339#section-5.6).")
    result_timezone: Optional[Annotated[int, Field(le=12, strict=True, ge=-12)]] = Field(default=0, description="Timezone.")
    detail: Optional[StrictBool] = Field(default=False, description="Building a detailed route - adds paths from points that are not on roads to nearby roads.")
    full_segments: Optional[StrictBool] = Field(default=True, description="Return a complete list of route segments. If the option is disabled, a short list is returned for simplified route display. ")
    polyline: Optional[StrictBool] = Field(default=True, description="Generate a polyline between points.")
    trackpoint_time: Optional[StrictBool] = Field(default=False, description="Generate times at intermediate points along the track.")
    dataset_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=512)]] = Field(default='', description="The name of the dataset. A technical field that does not affect calculation. ")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["waypoints", "transport_type", "geo_settings", "departure_time", "result_timezone", "detail", "full_segments", "polyline", "trackpoint_time", "dataset_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RouteTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in waypoints (list)
        _items = []
        if self.waypoints:
            for _item_waypoints in self.waypoints:
                if _item_waypoints:
                    _items.append(_item_waypoints.to_dict())
            _dict['waypoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of geo_settings
        if self.geo_settings:
            _dict['geo_settings'] = self.geo_settings.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if departure_time (nullable) is None
        # and model_fields_set contains the field
        if self.departure_time is None and "departure_time" in self.model_fields_set:
            _dict['departure_time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RouteTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "waypoints": [RouteWaypoint.from_dict(_item) for _item in obj["waypoints"]] if obj.get("waypoints") is not None else None,
            "transport_type": obj.get("transport_type") if obj.get("transport_type") is not None else TransportType.CAR,
            "geo_settings": GeoSettings.from_dict(obj["geo_settings"]) if obj.get("geo_settings") is not None else None,
            "departure_time": obj.get("departure_time"),
            "result_timezone": obj.get("result_timezone") if obj.get("result_timezone") is not None else 0,
            "detail": obj.get("detail") if obj.get("detail") is not None else False,
            "full_segments": obj.get("full_segments") if obj.get("full_segments") is not None else True,
            "polyline": obj.get("polyline") if obj.get("polyline") is not None else True,
            "trackpoint_time": obj.get("trackpoint_time") if obj.get("trackpoint_time") is not None else False,
            "dataset_name": obj.get("dataset_name") if obj.get("dataset_name") is not None else ''
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


