import asyncio
from typing import Callable, Optional, Union
from qtpy.QtCore import Qt, QSize, QPoint, QPointF, QRectF, QEasingCurve, QPropertyAnimation, QSequentialAnimationGroup, Slot, Property, QTimer
from qtpy.QtWidgets import QCheckBox
from qtpy.QtGui import QColor, QBrush, QPaintEvent, QPen, QPainter, QIcon
from qtmui.material.styles import useTheme
from qtmui.material.styles.create_theme.components.get_qss_styles import get_qss_style
from ..py_iconify import PyIconify
from qtmui.hooks.use_state import State
from ..._____assets import ASSETS
class Checkbox:
    def __init__(self, parent, disableRipple, defaultChecked, color: str, checked: bool, disabled: bool, indeterminate: bool, indeterminateIcon: Optional[Union[str, PyIconify]], state: State, disableGutters: bool, icon: str, checkedIcon: Optional[Union[str, PyIconify]], onChange: Callable, value: object, size: str, bar_color, checked_color, handle_color, pulse_unchecked_color, pulse_checked_color): ...
    def slot_set_stylesheet(self): ...
    def run_stylesheet(self): ...
    def _on_destroyed(self): ...
    def sizeHint(self): ...
    def hitButton(self, pos: QPoint): ...
    def setup_animation(self, value): ...
    def paintEvent(self, e: QPaintEvent): ...
    def handle_position(self): ...
    def handle_position(self, pos): ...
    def pulse_radius(self): ...
    def pulse_radius(self, pos): ...