import asyncio
from functools import lru_cache
import uuid
from typing import Optional, Callable, Union
from qtmui.hooks.use_runable import useRunnable
from qtpy.QtWidgets import QSizePolicy, QWidget, QVBoxLayout, QFrame, QHBoxLayout
from qtpy.QtCore import Qt, QPoint, Signal, Property, QTimer, QSize, QEvent, QThreadPool
from qtpy.QtGui import QIcon, QPalette
from qtmui.hooks.use_state import State
from ..py_iconify import PyIconify
from .button_base import ButtonBase
from ..menu.menu import Menu
from qtmui.material.styles import useTheme
from qtmui.i18n.use_translation import translate, i18n
from qtmui.material.styles.create_theme.components.get_qss_styles import get_qss_style
class Button:
    def __init__(self, autoFocus: Optional[bool], id: Optional[str], text: Optional[Union[str, Callable]], value: object, active: bool, key: Optional[str], children: Optional[object], classes: Optional[dict], color: str, component: Optional[object], disabled: bool, disableElevation: bool, disableFocusRipple: bool, disableRipple: bool, disablePointerEvents: bool, menu: Optional[Menu], endIcon: Optional[PyIconify], fullWidth: bool, href: Optional[str], size: str, startIcon: Optional[PyIconify], sx: Optional[object], type: str, variant: str, *args, **kwargs): ...
    def reTranslation(self): ...
    def init_ui(self): ...
    def retranslateUi(self): ...
    def _update_stylesheet(self): ...
    def _set_stylesheet(self, component_styled): ...
    def changeEvent(self, event: QEvent): ...
    def _show_menu(self, state): ...
    def _hide_popup(self): ...
    def _show_popup(self, state): ...
    def mouseReleaseEvent(self, event): ...
    def set_visible(self, state): ...
    def set_collapse_icon(self, icon): ...
    def get_selected(self): ...
    def set_selected(self, selected): ...