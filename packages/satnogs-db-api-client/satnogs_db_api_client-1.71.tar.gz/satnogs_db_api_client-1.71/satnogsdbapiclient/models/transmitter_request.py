# coding: utf-8

"""
    SatNOGS DB

    SatNOGS DB is a crowdsourced database of details about orbital                     satellites and data collected from them.

    The version of the OpenAPI document: 1.1
    Contact: dev@satnogs.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from satnogsdbapiclient.models.iaru_coordination_enum import IaruCoordinationEnum
from satnogsdbapiclient.models.service_enum import ServiceEnum
from satnogsdbapiclient.models.status_enum import StatusEnum
from satnogsdbapiclient.models.type_enum import TypeEnum
from typing import Optional, Set
from typing_extensions import Self

class TransmitterRequest(BaseModel):
    """
    SatNOGS DB Transmitter API Serializer
    """ # noqa: E501
    description: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Short description for this entry, like: UHF 9k6 AFSK Telemetry")
    type: Optional[TypeEnum] = None
    uplink_low: Optional[Annotated[int, Field(le=40000000000, strict=True, ge=0)]] = Field(default=None, description="Frequency (in Hz) for the uplink, or bottom of the uplink range for a             transponder")
    uplink_high: Optional[Annotated[int, Field(le=40000000000, strict=True, ge=0)]] = Field(default=None, description="Frequency (in Hz) for the top of the uplink range for a transponder")
    uplink_drift: Optional[Annotated[int, Field(le=99999, strict=True, ge=-99999)]] = Field(default=None, description="Receiver drift from the published uplink frequency, stored in parts             per billion (PPB)")
    downlink_low: Optional[Annotated[int, Field(le=40000000000, strict=True, ge=0)]] = Field(default=None, description="Frequency (in Hz) for the downlink, or bottom of the downlink range             for a transponder")
    downlink_high: Optional[Annotated[int, Field(le=40000000000, strict=True, ge=0)]] = Field(default=None, description="Frequency (in Hz) for the top of the downlink range for a transponder")
    downlink_drift: Optional[Annotated[int, Field(le=99999, strict=True, ge=-99999)]] = Field(default=None, description="Transmitter drift from the published downlink frequency, stored in             parts per billion (PPB)")
    invert: Optional[StrictBool] = Field(default=None, description="True if this is an inverted transponder")
    baud: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The number of modulated symbols that the transmitter sends every second")
    status: Optional[StatusEnum] = Field(default=None, description="Functional state of this transmitter  * `active` - active * `inactive` - inactive * `invalid` - invalid")
    updated: datetime
    citation: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=512)]] = Field(default=None, description="A reference (preferrably URL) for this entry or edit")
    service: Optional[ServiceEnum] = Field(default=None, description="The published usage category for this transmitter  * `Aeronautical` - Aeronautical * `Amateur` - Amateur * `Broadcasting` - Broadcasting * `Earth Exploration` - Earth Exploration * `Fixed` - Fixed * `Inter-satellite` - Inter-satellite * `Maritime` - Maritime * `Meteorological` - Meteorological * `Mobile` - Mobile * `Radiolocation` - Radiolocation * `Radionavigational` - Radionavigational * `Space Operation` - Space Operation * `Space Research` - Space Research * `Standard Frequency and Time Signal` - Standard Frequency and Time Signal * `Unknown` - Unknown")
    iaru_coordination: Optional[IaruCoordinationEnum] = Field(default=None, description="IARU frequency coordination status for this transmitter  * `IARU Coordinated` - IARU Coordinated * `IARU Declined` - IARU Declined * `IARU Uncoordinated` - IARU Uncoordinated * `N/A` - N/A")
    iaru_coordination_url: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(default=None, description="URL for more details on this frequency coordination")
    itu_notification: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["description", "type", "uplink_low", "uplink_high", "uplink_drift", "downlink_low", "downlink_high", "downlink_drift", "invert", "baud", "status", "updated", "citation", "service", "iaru_coordination", "iaru_coordination_url", "itu_notification"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransmitterRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if uplink_low (nullable) is None
        # and model_fields_set contains the field
        if self.uplink_low is None and "uplink_low" in self.model_fields_set:
            _dict['uplink_low'] = None

        # set to None if uplink_high (nullable) is None
        # and model_fields_set contains the field
        if self.uplink_high is None and "uplink_high" in self.model_fields_set:
            _dict['uplink_high'] = None

        # set to None if uplink_drift (nullable) is None
        # and model_fields_set contains the field
        if self.uplink_drift is None and "uplink_drift" in self.model_fields_set:
            _dict['uplink_drift'] = None

        # set to None if downlink_low (nullable) is None
        # and model_fields_set contains the field
        if self.downlink_low is None and "downlink_low" in self.model_fields_set:
            _dict['downlink_low'] = None

        # set to None if downlink_high (nullable) is None
        # and model_fields_set contains the field
        if self.downlink_high is None and "downlink_high" in self.model_fields_set:
            _dict['downlink_high'] = None

        # set to None if downlink_drift (nullable) is None
        # and model_fields_set contains the field
        if self.downlink_drift is None and "downlink_drift" in self.model_fields_set:
            _dict['downlink_drift'] = None

        # set to None if baud (nullable) is None
        # and model_fields_set contains the field
        if self.baud is None and "baud" in self.model_fields_set:
            _dict['baud'] = None

        # set to None if itu_notification (nullable) is None
        # and model_fields_set contains the field
        if self.itu_notification is None and "itu_notification" in self.model_fields_set:
            _dict['itu_notification'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransmitterRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "type": obj.get("type"),
            "uplink_low": obj.get("uplink_low"),
            "uplink_high": obj.get("uplink_high"),
            "uplink_drift": obj.get("uplink_drift"),
            "downlink_low": obj.get("downlink_low"),
            "downlink_high": obj.get("downlink_high"),
            "downlink_drift": obj.get("downlink_drift"),
            "invert": obj.get("invert"),
            "baud": obj.get("baud"),
            "status": obj.get("status"),
            "updated": obj.get("updated"),
            "citation": obj.get("citation"),
            "service": obj.get("service"),
            "iaru_coordination": obj.get("iaru_coordination"),
            "iaru_coordination_url": obj.get("iaru_coordination_url"),
            "itu_notification": obj.get("itu_notification")
        })
        return _obj


