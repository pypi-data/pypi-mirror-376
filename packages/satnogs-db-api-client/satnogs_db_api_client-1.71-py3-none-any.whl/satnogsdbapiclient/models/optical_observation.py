# coding: utf-8

"""
    SatNOGS DB

    SatNOGS DB is a crowdsourced database of details about orbital                     satellites and data collected from them.

    The version of the OpenAPI document: 1.1
    Contact: dev@satnogs.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from satnogsdbapiclient.models.optical_identification import OpticalIdentification
from typing import Optional, Set
from typing_extensions import Self

class OpticalObservation(BaseModel):
    """
    Serializer for Optical Observation
    """ # noqa: E501
    id: StrictInt
    start: datetime
    station_id: StrictInt
    diagnostic_plot_url: StrictStr = Field(description="Returns Satellite image URI")
    identifications: List[OpticalIdentification]
    uploader: Optional[StrictInt]
    data: Optional[Any]
    __properties: ClassVar[List[str]] = ["id", "start", "station_id", "diagnostic_plot_url", "identifications", "uploader", "data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpticalObservation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "start",
            "station_id",
            "diagnostic_plot_url",
            "uploader",
            "data",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in identifications (list)
        _items = []
        if self.identifications:
            for _item_identifications in self.identifications:
                if _item_identifications:
                    _items.append(_item_identifications.to_dict())
            _dict['identifications'] = _items
        # set to None if uploader (nullable) is None
        # and model_fields_set contains the field
        if self.uploader is None and "uploader" in self.model_fields_set:
            _dict['uploader'] = None

        # set to None if data (nullable) is None
        # and model_fields_set contains the field
        if self.data is None and "data" in self.model_fields_set:
            _dict['data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpticalObservation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "start": obj.get("start"),
            "station_id": obj.get("station_id"),
            "diagnostic_plot_url": obj.get("diagnostic_plot_url"),
            "identifications": [OpticalIdentification.from_dict(_item) for _item in obj["identifications"]] if obj.get("identifications") is not None else None,
            "uploader": obj.get("uploader"),
            "data": obj.get("data")
        })
        return _obj


