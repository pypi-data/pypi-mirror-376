# coding: utf-8

"""
    SatNOGS DB

    SatNOGS DB is a crowdsourced database of details about orbital                     satellites and data collected from them.

    The version of the OpenAPI document: 1.1
    Contact: dev@satnogs.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class Satellite(BaseModel):
    """
    SatNOGS DB Satellite API Serializer
    """ # noqa: E501
    sat_id: StrictStr = Field(description="Returns Satellite sat_id")
    norad_cat_id: StrictInt = Field(description="Returns Satellite norad_cat_id")
    norad_follow_id: StrictInt = Field(description="Returns Satellite norad_follow_id")
    name: StrictStr = Field(description="Returns Satellite name")
    names: StrictStr = Field(description="Returns Satellite alternative names")
    image: StrictStr = Field(description="Returns Satellite image URI")
    status: StrictStr = Field(description="Returns Satellite status text")
    decayed: datetime = Field(description="Returns Satellite decayed datetime")
    launched: datetime = Field(description="Returns Satellite launched datetime")
    deployed: datetime = Field(description="Returns Satellite deployed datetime")
    website: StrictStr = Field(description="Returns Satellite website")
    operator: StrictStr = Field(description="Returns operator text")
    countries: StrictStr = Field(description="Returns countires")
    telemetries: Dict[str, Any] = Field(description="Returns telemetries")
    updated: datetime = Field(description="Returns Satellite decayed datetime")
    citation: StrictStr = Field(description="Returns Satellite decayed datetime")
    is_frequency_violator: StrictBool = Field(description="Returns if there is a frequency violation")
    associated_satellites: Dict[str, Any] = Field(description="Returns Satellite IDs that are associated with the Satellite")
    __properties: ClassVar[List[str]] = ["sat_id", "norad_cat_id", "norad_follow_id", "name", "names", "image", "status", "decayed", "launched", "deployed", "website", "operator", "countries", "telemetries", "updated", "citation", "is_frequency_violator", "associated_satellites"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Satellite from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "sat_id",
            "norad_cat_id",
            "norad_follow_id",
            "name",
            "names",
            "image",
            "status",
            "decayed",
            "launched",
            "deployed",
            "website",
            "operator",
            "countries",
            "telemetries",
            "updated",
            "citation",
            "is_frequency_violator",
            "associated_satellites",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Satellite from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sat_id": obj.get("sat_id"),
            "norad_cat_id": obj.get("norad_cat_id"),
            "norad_follow_id": obj.get("norad_follow_id"),
            "name": obj.get("name"),
            "names": obj.get("names"),
            "image": obj.get("image"),
            "status": obj.get("status"),
            "decayed": obj.get("decayed"),
            "launched": obj.get("launched"),
            "deployed": obj.get("deployed"),
            "website": obj.get("website"),
            "operator": obj.get("operator"),
            "countries": obj.get("countries"),
            "telemetries": obj.get("telemetries"),
            "updated": obj.get("updated"),
            "citation": obj.get("citation"),
            "is_frequency_violator": obj.get("is_frequency_violator"),
            "associated_satellites": obj.get("associated_satellites")
        })
        return _obj


