# coding: utf-8

"""
    SatNOGS DB

    SatNOGS DB is a crowdsourced database of details about orbital                     satellites and data collected from them.

    The version of the OpenAPI document: 1.1
    Contact: dev@satnogs.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class LatestTleSet(BaseModel):
    """
    SatNOGS DB LatestTleSet API Serializer
    """ # noqa: E501
    tle0: StrictStr = Field(description="Returns TLE line 0")
    tle1: StrictStr = Field(description="Returns TLE line 1")
    tle2: StrictStr = Field(description="Returns TLE line 2")
    tle_source: StrictStr = Field(description="Returns TLE source")
    sat_id: StrictStr = Field(description="Returns Satellite Satellite Identifier")
    norad_cat_id: StrictInt = Field(description="Returns Satellite NORAD ID")
    updated: datetime = Field(description="Returns TLE updated datetime")
    __properties: ClassVar[List[str]] = ["tle0", "tle1", "tle2", "tle_source", "sat_id", "norad_cat_id", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LatestTleSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "tle0",
            "tle1",
            "tle2",
            "tle_source",
            "sat_id",
            "norad_cat_id",
            "updated",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LatestTleSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tle0": obj.get("tle0"),
            "tle1": obj.get("tle1"),
            "tle2": obj.get("tle2"),
            "tle_source": obj.get("tle_source"),
            "sat_id": obj.get("sat_id"),
            "norad_cat_id": obj.get("norad_cat_id"),
            "updated": obj.get("updated")
        })
        return _obj


