name: Workflow Monitoring & Health Check

on:
  schedule:
    # Run daily at 8 AM UTC to check workflow health
    - cron: '0 8 * * *'
  workflow_dispatch:
    inputs:
      check_period_days:
        description: 'Number of days to analyze'
        required: false
        default: '7'
        type: string

permissions:
  actions: read
  contents: read

concurrency:
  group: workflow-monitoring
  cancel-in-progress: true

jobs:
  workflow-health-check:
    name: Workflow Health Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install GitHub CLI and analysis tools
      run: |
        # GitHub CLI should already be available
        gh --version

        python -m pip install --upgrade pip
        pip install requests python-dateutil

    - name: Debug GitHub CLI Authentication
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üîç GitHub CLI Authentication Debug:"
        echo "=================================="
        echo ""

        echo "üìã Environment variables:"
        echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
        echo "GITHUB_ACTOR: $GITHUB_ACTOR"
        echo "GITHUB_TOKEN set: $(if [[ -n "$GITHUB_TOKEN" ]]; then echo "‚úÖ Yes"; else echo "‚ùå No"; fi)"
        echo ""

        echo "üîê Authentication status:"
        gh auth status || echo "‚ö†Ô∏è Authentication check failed"
        echo ""

        echo "üìÇ Repository context:"
        gh repo view --json nameWithOwner,visibility || echo "‚ö†Ô∏è Repository access failed"
        echo ""

        echo "üéØ Available permissions test:"
        echo "Testing basic API access..."
        gh api /user || echo "‚ö†Ô∏è Basic API access failed"
        echo ""

        echo "üèÉ‚Äç‚ôÇÔ∏è Testing workflow run access:"
        gh run list --limit 1 || echo "‚ö†Ô∏è Workflow run access failed (this is expected if permissions are insufficient)"

    - name: Run enhanced workflow analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ANALYSIS_DAYS: ${{ github.event.inputs.check_period_days || '7' }}
      run: |
        echo "üìä Running enhanced workflow analysis..."

        # Use enhanced reporting script if available
        if [[ -f ".github/scripts/workflow-reporter.py" ]]; then
          echo "üöÄ Using enhanced workflow reporter..."
          python .github/scripts/workflow-reporter.py
        else
          echo "üìä Using basic workflow analysis..."
          # Fallback to basic analysis (existing code)
          # ... (keeping the existing basic analysis as fallback)
        fi

    - name: Check workflow file health
      run: |
        echo ""
        echo "üîß Workflow Configuration Health:"
        echo "================================="

        workflow_files=$(find .github/workflows -name "*.yml" -o -name "*.yaml")

        for workflow_file in $workflow_files; do
          echo ""
          echo "üìÑ Checking: $workflow_file"

          # Check for common issues
          issues=0

          # Check for timeout settings
          if ! grep -q "timeout-minutes" "$workflow_file"; then
            echo "  ‚ö†Ô∏è No timeout specified - consider adding timeout-minutes"
            issues=$((issues + 1))
          fi

          # Check for retry mechanisms
          if ! grep -q "retry\|nick-fields/retry" "$workflow_file"; then
            echo "  ‚ö†Ô∏è No retry mechanisms found - consider adding for network operations"
            issues=$((issues + 1))
          fi

          # Check for continue-on-error usage
          if grep -q "continue-on-error: true" "$workflow_file"; then
            echo "  ‚ÑπÔ∏è Uses continue-on-error (acceptable for non-critical steps)"
          fi

          # Check for caching
          if grep -q "actions/cache" "$workflow_file"; then
            echo "  ‚úÖ Uses caching for better performance"
          else
            echo "  üí° Consider adding caching for dependencies"
          fi

          if [[ $issues -eq 0 ]]; then
            echo "  ‚úÖ No major issues found"
          fi
        done

    - name: Generate recommendations
      run: |
        echo ""
        echo "üí° Workflow Optimization Recommendations:"
        echo "========================================"
        echo ""
        echo "1. üîÑ For failing workflows:"
        echo "   - Add retry mechanisms for network operations"
        echo "   - Use continue-on-error for non-critical steps"
        echo "   - Implement proper error handling and logging"
        echo ""
        echo "2. ‚ö° For performance:"
        echo "   - Ensure all workflows use caching appropriately"
        echo "   - Set reasonable timeout limits"
        echo "   - Use fail-fast: false for matrix builds when appropriate"
        echo ""
        echo "3. üõ°Ô∏è For reliability:"
        echo "   - Pin action versions (e.g., @v4 instead of @main)"
        echo "   - Use specific tool versions in environment variables"
        echo "   - Add health checks and status validations"
        echo ""
        echo "4. üìä For monitoring:"
        echo "   - Review this report regularly"
        echo "   - Investigate patterns in failing workflows"
        echo "   - Consider consolidating similar workflows"

  dependency-health:
    name: Dependency Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Check Python dependencies
      run: |
        echo "üêç Python Dependency Health Check:"
        echo "=================================="

        # Install safety for security checking
        pip install safety pip-audit

        # Check for security vulnerabilities
        echo ""
        echo "üõ°Ô∏è Security scan with safety:"
        safety check --json --output safety-report.json || {
          echo "‚ö†Ô∏è Security vulnerabilities found:"
          cat safety-report.json | head -20
        }

        echo ""
        echo "üîç Security scan with pip-audit:"
        pip-audit --desc --format=json --output=audit-report.json || {
          echo "‚ö†Ô∏è Additional security issues found"
        }

        # Check for outdated packages
        echo ""
        echo "üì¶ Outdated packages check:"
        pip list --outdated || echo "All packages are up to date"

    - name: Check GitHub Actions versions
      run: |
        echo ""
        echo "üîß GitHub Actions Version Check:"
        echo "================================"

        # Find all action uses in workflow files
        workflow_files=$(find .github/workflows -name "*.yml" -o -name "*.yaml")

        echo "Action usage summary:"
        for workflow_file in $workflow_files; do
          echo ""
          echo "üìÑ $workflow_file:"

          # Extract action uses
          grep -E "uses:" "$workflow_file" | sed 's/.*uses: */  - /' | sort | uniq -c | sort -nr
        done

        echo ""
        echo "üí° Recommendations:"
        echo "- Pin actions to specific versions (e.g., @v4 instead of @main)"
        echo "- Update to latest stable versions regularly"
        echo "- Monitor security advisories for used actions"

    - name: Upload health reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: health-reports
        path: |
          safety-report.json
          audit-report.json
        retention-days: 30

    - name: Upload workflow analysis reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: workflow-analysis-reports
        path: |
          workflow_analysis_report.md
          workflow_analysis.json
          cache_health_report.json
        retention-days: 30
