name: Security & Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 3 AM UTC for security scans
    - cron: '0 3 * * *'

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: pyproject.toml

    - name: Cache security tools
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: security-deps-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          security-deps-${{ runner.os }}-

    - name: Install dependencies with retry
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 10
        max_attempts: 3
        retry_on: error
        command: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install bandit safety semgrep

    - name: Run Bandit security scanner
      run: |
        bandit -r xraylabtool/ -f json -o bandit-report.json --skip B101 || echo "Bandit found security issues - see report"
        bandit -r xraylabtool/ -ll -i --skip B101 || echo "Bandit scan completed with findings"
      continue-on-error: true

    - name: Run Safety vulnerability scanner
      run: |
        safety check --json --output safety-report.json || echo "Safety found vulnerabilities - see report"
        safety check || echo "Safety scan completed with findings"
      continue-on-error: true

    - name: Run Semgrep security scanner
      uses: semgrep/semgrep-action@v1
      with:
        config: auto
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      continue-on-error: true

    - name: Upload Semgrep results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('semgrep.sarif') != ''
      with:
        sarif_file: semgrep.sarif
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep.sarif

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Dependency Review with retry
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 8
        max_attempts: 3
        retry_on: error
        command: |
          gh api repos/${{ github.repository }}/dependency-graph/compare/${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-ghsas: GHSA-example-1234
        deny-licenses: GPL-2.0, GPL-3.0

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ python ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml
      continue-on-error: true

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: pyproject.toml

    - name: Cache license tools
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: license-deps-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          license-deps-${{ runner.os }}-

    - name: Install pip-licenses with retry
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 8
        max_attempts: 3
        retry_on: error
        command: |
          python -m pip install --upgrade pip
          pip install pip-licenses
          pip install -e .

    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --fail-on="GPL;AGPL;LGPL"

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.json

  code-quality:
    name: Advanced Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: pyproject.toml

    - name: Cache quality tools
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: quality-deps-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          quality-deps-${{ runner.os }}-

    - name: Install quality tools with retry
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 8
        max_attempts: 3
        retry_on: error
        command: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install radon xenon vulture dead

    - name: Run complexity analysis
      run: |
        radon cc xraylabtool/ --min B --json > complexity-report.json
        radon mi xraylabtool/ --json > maintainability-report.json
        xenon xraylabtool/ --max-absolute C --max-modules C || echo "High complexity functions detected - consider refactoring"
      continue-on-error: true

    - name: Check for dead code
      run: |
        vulture xraylabtool/ --json > dead-code-report.json
        dead xraylabtool/
      continue-on-error: true

    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports
        path: |
          complexity-report.json
          maintainability-report.json
          dead-code-report.json

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS with retry
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 12
        max_attempts: 2
        retry_on: error
        command: |
          docker run --rm -v "$PWD:/pwd" trufflesecurity/trufflehog:latest filesystem /pwd --only-verified --json
      continue-on-error: true

    - name: Run TruffleHog OSS (fallback)
      uses: trufflesecurity/trufflehog@main
      if: failure()
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
      continue-on-error: true
