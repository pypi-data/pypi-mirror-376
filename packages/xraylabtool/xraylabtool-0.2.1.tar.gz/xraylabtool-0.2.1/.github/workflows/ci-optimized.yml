name: Continuous Integration (Optimized)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays at 6 AM UTC
    - cron: '0 6 * * 0'
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_PYTHON_VERSION_WARNING: 1
  PIP_PREFER_BINARY: 1

  # Consistent tool versions
  RUFF_VERSION: "0.7.1"
  BLACK_VERSION: "24.1.1"
  ISORT_VERSION: "5.13.2"

jobs:
  lint-and-format:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: pyproject.toml

    - name: Cache tool dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/mypy
          ~/.cache/ruff
        key: lint-tools-v2-${{ runner.os }}-${{ env.RUFF_VERSION }}-${{ env.BLACK_VERSION }}-${{ env.ISORT_VERSION }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          lint-tools-v2-${{ runner.os }}-${{ env.RUFF_VERSION }}-${{ env.BLACK_VERSION }}-${{ env.ISORT_VERSION }}-
          lint-tools-v2-${{ runner.os }}-
          lint-tools-${{ runner.os }}-

    - name: Warm caches and install lint tools
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 8
        max_attempts: 3
        retry_on: error
        command: |
          python -m pip install --upgrade pip

          # Run cache warming script if available
          if [[ -f ".github/scripts/cache-warmup.py" ]]; then
            echo "üî• Running cache warmup..."
            python .github/scripts/cache-warmup.py || echo "Cache warming completed with warnings"
          fi

          pip install \
            ruff==${{ env.RUFF_VERSION }} \
            black==${{ env.BLACK_VERSION }} \
            isort==${{ env.ISORT_VERSION }} \
            mypy bandit safety

    - name: Install package for linting
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 8
        max_attempts: 3
        retry_on: error
        command: |
          pip install -e .[dev]

    - name: Check code formatting (non-blocking)
      id: format-check
      run: |
        echo "üé® Checking code formatting..."

        # Check ruff formatting
        echo "Checking ruff format..."
        ruff format --check xraylabtool/ tests/ || {
          echo "‚ö†Ô∏è Ruff formatting issues found - would be auto-fixed in pre-commit"
        }

        # Check isort
        echo "Checking import sorting..."
        isort --check-only xraylabtool/ tests/ || {
          echo "‚ö†Ô∏è Import sorting issues found - would be auto-fixed in pre-commit"
        }

        # Check black (as backup)
        echo "Checking black formatting..."
        black --check xraylabtool/ tests/ || {
          echo "‚ö†Ô∏è Black formatting issues found - would be auto-fixed in pre-commit"
        }

        echo "‚úÖ Format checking completed (non-blocking)"
      continue-on-error: true

    - name: Run ruff linting with ignore rules
      run: |
        echo "üîç Running ruff linting..."

        # Run ruff with relaxed rules for all files
        ruff check xraylabtool/ tests/ \
          --ignore=E501,PLR0912,PLR0915,PLR0911,SIM112,ARG001,F401,F841 \
          --exclude="**/completion_installer.py,**/interfaces/completion.py" || {
          echo "‚ö†Ô∏è Linting issues found but continuing..."
        }

        echo "‚úÖ Linting completed"
      continue-on-error: true

    - name: Type check with relaxed rules
      run: |
        mypy xraylabtool/ \
          --ignore-missing-imports \
          --no-strict-optional \
          --allow-untyped-defs \
          --allow-incomplete-defs || echo "Type check completed with warnings"

    - name: Security check
      run: |
        bandit -r xraylabtool/ \
          --skip B101,B603,B110,B404,B602 \
          --exclude "**/completion_installer.py,**/interfaces/completion.py" \
        || echo "Security scan completed"

    - name: Dependency security check
      run: |
        safety check --json --output safety-report.json || true
        echo "Dependency security scan completed"

  test-matrix:
    name: Test Suite
    needs: lint-and-format
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.12', '3.13']
        exclude:
          # Reduce matrix size for faster builds
          - os: windows-latest
            python-version: '3.13'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: pyproject.toml

    - name: Cache test dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.pytest_cache
          .coverage*
        key: test-deps-v2-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'tests/**/*.py') }}
        restore-keys: |
          test-deps-v2-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          test-deps-v2-${{ runner.os }}-py${{ matrix.python-version }}-
          test-deps-${{ runner.os }}-py${{ matrix.python-version }}-

    - name: Install dependencies with retry
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 10
        max_attempts: 3
        retry_on: error
        command: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e .[dev]

    - name: Run core test suite
      shell: bash
      run: |
        # Run tests with relaxed coverage requirement
        pytest tests/unit/ tests/integration/ \
          -v \
          --cov=xraylabtool \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=35 \
          --junit-xml=pytest-results.xml \
          --timeout=300 \
          --maxfail=5

    - name: Run performance validation (non-blocking)
      shell: bash
      run: |
        pytest tests/performance/ \
          -v \
          --tb=short \
          -m "not benchmark" \
          --timeout=180 \
        || echo "Performance tests completed with warnings"
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          pytest-results.xml
          coverage.xml
        retention-days: 7

    - name: Upload coverage (Ubuntu + Python 3.12 only)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      continue-on-error: true

  build-and-test:
    name: Build & Integration Test
    needs: lint-and-format
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Cache build dependencies and artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          build/
          dist/
          *.egg-info/
        key: build-deps-v2-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'xraylabtool/**/*.py') }}
        restore-keys: |
          build-deps-v2-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          build-deps-v2-${{ runner.os }}-
          build-deps-${{ runner.os }}-

    - name: Install build tools
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 5
        max_attempts: 3
        retry_on: error
        command: |
          python -m pip install --upgrade pip
          pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package integrity
      run: |
        python -m twine check dist/*

    - name: Test package installation
      run: |
        pip install dist/*.whl
        xraylabtool --version
        python -c "import xraylabtool; print('Import successful')"

    - name: Test CLI functionality
      run: |
        xraylabtool calc Si -e 10.0 -d 2.33
        xraylabtool list elements | head -5

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 30

  benchmark:
    name: Performance Benchmarks
    needs: lint-and-format
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name != 'schedule'  # Skip on scheduled runs

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: pyproject.toml

    - name: Install dependencies
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 8
        max_attempts: 3
        retry_on: error
        command: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

    - name: Run lightweight benchmarks
      run: |
        # Run quick benchmarks only
        pytest tests/performance/ \
          -v \
          --benchmark-only \
          --benchmark-json=benchmark-results.json \
          --benchmark-max-time=5 \
          --benchmark-min-rounds=1 \
        || echo "Benchmarks completed with warnings"
      continue-on-error: true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-results
        path: benchmark-results.json
        retention-days: 7

  status-check:
    name: CI Status Check
    if: always()
    needs: [lint-and-format, test-matrix, build-and-test]
    runs-on: ubuntu-latest

    steps:
    - name: Check required job statuses
      run: |
        echo "Lint: ${{ needs.lint-and-format.result }}"
        echo "Test Matrix: ${{ needs.test-matrix.result }}"
        echo "Build: ${{ needs.build-and-test.result }}"

        # Only fail on critical failures
        if [[ "${{ needs.lint-and-format.result }}" == "failure" || \
              "${{ needs.test-matrix.result }}" == "failure" || \
              "${{ needs.build-and-test.result }}" == "failure" ]]; then
          echo "‚ùå Critical checks failed"
          exit 1
        elif [[ "${{ needs.lint-and-format.result }}" == "success" && \
                "${{ needs.test-matrix.result }}" == "success" && \
                "${{ needs.build-and-test.result }}" == "success" ]]; then
          echo "‚úÖ All critical checks passed"
        else
          echo "‚ö†Ô∏è Some checks skipped or cancelled"
        fi

    - name: Summary
      run: |
        echo "üìã CI workflow completed successfully"
        echo "‚úÖ All critical checks have passed"

  quick-test:
    name: Quick Smoke Test
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install minimal dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Quick smoke test
      run: |
        python -c "
        import xraylabtool as xrt
        result = xrt.calculate_single_material_properties('Si', 10.0, 2.33)
        assert result.formula == 'Si'
        print('‚úÖ Smoke test passed')
        "

    - name: CLI smoke test
      run: |
        xraylabtool --version
        xraylabtool calc Si -e 10.0 -d 2.33 --fields formula,energy_kev
