[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "xraylabtool"
version = "0.2.3"
authors = [
    {name = "Wei Chen", email = "wchen@anl.gov"},
]
maintainers = [
    {name = "Wei Chen", email = "wchen@anl.gov"},
]
description = "Ultra-fast Python package for X-ray optical properties calculation with CXRO/NIST data, CLI tools, and synchrotron applications"
readme = "README.md"
license = "MIT"
requires-python = ">=3.12"
classifiers = [
    # Development Status
    "Development Status :: 5 - Production/Stable",

    # Intended Audience
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Manufacturing",
    "Intended Audience :: Healthcare Industry",

    # Operating System
    "Operating System :: OS Independent",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",

    # Programming Language
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",

    # Topics
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Shells",
    "Topic :: Utilities",

    # Environment
    "Environment :: Console",
    "Environment :: Web Environment",

    # Natural Language
    "Natural Language :: English",

    # Typing
    "Typing :: Typed",
]
keywords = [
    # Core X-ray terms
    "xray", "x-ray", "xrd", "xrr", "saxs", "crystallography", "diffraction", "scattering",
    "synchrotron", "beamline", "optics", "reflectometry", "absorption", "spectroscopy",

    # Scientific domains
    "materials-science", "condensed-matter", "physics", "chemistry", "nanotechnology",
    "thin-films", "multilayers", "nanostructures", "characterization",

    # Data sources and methods
    "cxro", "nist", "atomic-scattering-factors", "optical-constants", "refractive-index",
    "critical-angle", "attenuation-length", "form-factors", "dispersion", "absorption-coefficient",

    # Technical capabilities
    "high-performance", "vectorized", "batch-processing", "parallel-processing",
    "scientific-computing", "numerical-analysis", "laboratory", "analysis",

    # Interface and usability
    "cli", "command-line", "python-package", "api", "cross-platform",
    "shell-completion", "bash-completion", "zsh-completion", "fish-completion",
    "powershell-completion", "tab-completion", "windows-powershell", "pwsh",

    # Applications
    "materials-characterization", "structure-analysis", "quality-control",
    "medical-imaging", "industrial-radiography", "non-destructive-testing"
]

# Core runtime dependencies
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.5.0",
    "scipy>=1.9.0",
    "matplotlib>=3.5.0",
    "mendeleev>=0.15.0",
    "tqdm>=4.64.0",
    "psutil>=5.9.0",  # Memory monitoring for batch processing
]

[project.optional-dependencies]
# Development dependencies (includes testing, linting, formatting)
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.0.0",  # Parallel test execution
    "pytest-timeout>=2.1.0",  # Test timeout support

    # Code quality and linting
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",  # Fast linter and formatter
    "isort>=5.12.0",  # Import sorting

    # Security analysis
    "bandit[toml]>=1.7.0",  # Security linter
    "pbr>=3.1.0",  # Required by bandit for version detection
    "safety>=2.3.0",  # Dependency vulnerability scanner

    # Type stubs
    "pandas-stubs>=2.0.0",
    "types-tqdm>=4.64.0",
    "types-psutil>=5.9.0",

    # Pre-commit hooks
    "pre-commit>=3.0.0",
]

# Documentation dependencies
docs = [
    # Core Sphinx packages
    "sphinx>=7.0.0",
    "furo>=2023.9.10",  # Modern Sphinx theme

    # Sphinx extensions for enhanced functionality
    "sphinx-autodoc-typehints>=1.24.0",  # Better type hint rendering
    "sphinx-copybutton>=0.5.2",  # Copy code button
    "sphinx-design>=0.5.0",  # Modern design components
    "sphinx-tabs>=3.4.0",  # Multi-tab content support
    "sphinx-togglebutton>=0.3.2",  # Collapsible content

    # Content format support
    "myst-parser>=2.0.0",  # Markdown support in Sphinx
    # "nbsphinx>=0.9.1",  # Jupyter notebook support - temporarily disabled

    # Napoleon for docstring parsing
    "sphinxcontrib-napoleon>=0.7.0",

    # Documentation testing and validation
    "doc8>=1.1.0",  # Style checker for reStructuredText
    "rstcheck>=6.2.0",  # ReStructuredText linter

    # Additional utilities
    "Pygments>=2.16.0",  # Syntax highlighting
    "docutils>=0.19.0",  # Core documentation utilities
]

# Testing only (minimal test setup)
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.0.0",  # Parallel test execution
    "pytest-timeout>=2.1.0",  # Test timeout support
]

# Linting and formatting only
lint = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "isort>=5.12.0",
    "bandit[toml]>=1.7.0",
    "safety>=2.3.0",
    "pandas-stubs>=2.0.0",
    "types-tqdm>=4.64.0",
    "types-psutil>=5.9.0",
]

# Performance profiling and optimization
perf = [
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
    "py-spy>=0.3.0",
]

# Complete development environment
all = [
    # Include all optional dependency groups
    "xraylabtool[dev,docs,perf]",
]

[project.urls]
Homepage = "https://github.com/imewei/pyXRayLabTool"
Documentation = "https://pyxraylabtool.readthedocs.io"
Repository = "https://github.com/imewei/pyXRayLabTool"
"Source Code" = "https://github.com/imewei/pyXRayLabTool"
"Bug Tracker" = "https://github.com/imewei/pyXRayLabTool/issues"
"Changelog" = "https://github.com/imewei/pyXRayLabTool/blob/main/CHANGELOG.md"
"CLI Reference" = "https://pyxraylabtool.readthedocs.io/en/latest/cli_guide.html"
"Shell Completion" = "https://pyxraylabtool.readthedocs.io/en/latest/cli_guide.html#install-completion-shell-completion-setup"
"Discussions" = "https://github.com/imewei/pyXRayLabTool/discussions"
"Release Notes" = "https://github.com/imewei/pyXRayLabTool/releases"

[project.scripts]
xraylabtool = "xraylabtool.interfaces.cli:main"

[tool.setuptools]
zip-safe = false

[tool.setuptools.packages.find]
where = ["."]
include = ["xraylabtool*"]
exclude = ["tests*", "docs*", "*.tests*", "*.tests"]

# Include all sub-packages
[tool.setuptools.package-dir]
"" = "."

[tool.setuptools.package-data]
xraylabtool = [
    "data/AtomicScatteringFactor/*.nff",
    "py.typed",  # PEP 561 typing marker
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",  # Show all test outcomes except passed
    "--strict-markers",  # Treat unknown marks as errors
    "--strict-config",  # Treat unknown config options as errors
    "--cov=xraylabtool",  # Coverage for main package
    "--cov-branch",  # Branch coverage
    "--cov-report=term-missing",  # Show missing lines
    "--cov-report=html:htmlcov",  # HTML coverage report
    "--cov-report=xml",  # XML coverage report for CI
    "--tb=short",  # Shorter traceback format
    "--durations=10",  # Show 10 slowest tests
    "-v",  # Verbose output
]
testpaths = ["tests", "tests/unit", "tests/integration", "tests/performance"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    # Test categories by structure
    "unit: marks tests as unit tests (individual components)",
    "integration: marks tests as integration tests (end-to-end workflows)",
    "performance: marks tests as performance/benchmark tests (can be slow)",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",

    # Sub-package markers
    "calculators: marks tests for calculators module",
    "data_handling: marks tests for data handling module",
    "interfaces: marks tests for interfaces module (CLI, etc.)",
    "io: marks tests for I/O operations",
    "validation: marks tests for validation and error handling",

    # Performance and optimization markers
    "memory: marks tests that check memory usage and management",
    "stability: marks tests that check numerical stability",
    "regression: marks tests that check for performance regressions",
    "optimization: marks tests that validate specific optimizations",
    "benchmark: marks tests as benchmark tests",

    # Data size markers
    "small_data: marks tests that use small datasets (fast)",
    "medium_data: marks tests that use medium datasets",
    "large_data: marks tests that use large datasets (may require more memory)",

    # System resource markers
    "requires_memory: marks tests that require significant memory",
    "requires_cpu: marks tests that require multiple CPU cores",
    "requires_disk: marks tests that require disk I/O",

    # Quality markers
    "smoke: marks basic smoke tests",
    "edge_case: marks edge case tests",
    "error_handling: marks error handling tests",

    # CI/CD markers
    "ci: marks tests that should run in CI",
    "local_only: marks tests that should only run locally",
    "nightly: marks tests for nightly builds",
]
filterwarnings = [
    "error",  # Treat warnings as errors by default
    # Ignore specific warnings
    "ignore::ResourceWarning",
    "ignore:unclosed database in:ResourceWarning",
    "ignore::DeprecationWarning:tests.*",
    "ignore::DeprecationWarning:xraylabtool.*",
    "ignore::PendingDeprecationWarning",
    # NumPy warnings
    "ignore:.*numpy.ndarray size changed.*:RuntimeWarning",
    "ignore:.*numpy.ufunc size changed.*:RuntimeWarning",
    # Scientific computing warnings that are typically safe to ignore
    "ignore:.*divide by zero.*:RuntimeWarning",
    "ignore:.*invalid value.*:RuntimeWarning",
    # Matplotlib warnings
    "ignore:.*Agg backend.*:UserWarning",
    "ignore:.*tight_layout.*:UserWarning",
    # Performance optimization warnings
    "ignore:.*performance.*:UserWarning",
]
# Logging configuration
log_auto_indent = true
log_cli = false
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "tests/logs/pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
# Test collection settings
norecursedirs = [
    "build",
    "dist",
    ".tox",
    ".eggs",
    "venv",
    ".venv",
]
# Timeout and parallel execution settings
# These require additional packages:
# - pytest-timeout: pip install pytest-timeout
# - pytest-xdist: pip install pytest-xdist
# Uncomment and install packages to enable:
# timeout = 300  # 5 minutes default timeout (requires pytest-timeout)
# timeout_method = "thread"
# Parallel execution: add "-n auto" to addopts (requires pytest-xdist)
# Note: Performance baseline file is located at tests/data/performance_baselines.json

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | \.venv
  | venv
  | build
  | dist
  | htmlcov
  # Files
  | setup\.py
)/
'''
preview = true  # Enable latest formatting features

[tool.mypy]
python_version = "3.12"
files = ["xraylabtool", "tests"]
show_error_codes = true
pretty = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Strict mode settings
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
disallow_any_generics = true
disallow_subclassing_any = true

# Error output
show_column_numbers = true
show_error_context = true
color_output = true

[[tool.mypy.overrides]]
# Third-party libraries without stubs
module = [
    "matplotlib.*",
    "scipy.*",
    "mendeleev.*",
    "tqdm.*",
    "pytest_benchmark.*",
    "memory_profiler.*",
    "line_profiler.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# Test files can be less strict
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
# Pandas has stubs available
module = "pandas.*"
ignore_missing_imports = false

[[tool.mypy.overrides]]
# Psutil has stubs available
module = "psutil.*"
ignore_missing_imports = false

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "PLR", # pylint refactor
    "PLW", # pylint warnings
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "PLR0913",  # too many arguments
    "PLR2004",  # magic value used in comparison
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    ".eggs",
    ".tox",
    "docs",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "S101"]  # Allow unused args and asserts in tests
"__init__.py" = ["F401"]     # Allow unused imports in __init__.py
# Relax rules for generated/complex completion files to avoid CI failures
"**/completion_installer.py" = ["E501", "PLR0912", "PLR0915", "PLR0911", "SIM112"]
"**/interfaces/completion.py" = ["E501", "PLR0912", "PLR0915", "PLR0911", "SIM102"]

[tool.ruff.lint.isort]
known-first-party = ["xraylabtool"]
force-sort-within-sections = true

[tool.coverage.run]
source = ["xraylabtool"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/conftest.py",
    # Exclude modules with specialized functionality that have limited test coverage
    "*/interfaces/completion.py",  # Shell completion installer - complex to test
    "*/io/data_export.py",         # Data export utilities - basic functionality
    "*/io/file_operations.py",     # File I/O operations - basic functionality
    "*/validation/exceptions.py",   # Exception definitions - simple classes
    "*/validation/validators.py",   # Validation utilities - limited usage
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self\\.debug:",
    "if settings\\.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # Skip assert_used test

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["xraylabtool"]
known_third_party = [
    "numpy", "pandas", "scipy", "matplotlib", "mendeleev", "tqdm",
    "pytest", "mypy", "black", "flake8", "ruff"
]

# Safety configuration for dependency vulnerability scanning
[tool.safety]
# Configuration for safety vulnerability scanning
# Ignore specific vulnerabilities if they are false positives
ignore = []
