name: Build, Release & Publish

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.1.0, v1.0.0, etc.
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write  # Required to create releases and upload assets
  packages: write  # Required for GitHub packages
  id-token: write  # Required for PyPI trusted publishing (fallback)

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for release notes

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies and run tests
      run: |
        uv venv
        uv pip install -e .
        uv pip install pytest pytest-cov pytest-asyncio

    - name: Run tests
      run: |
        uv run pytest tests/ -v --cov=graph_elements --cov-report=term-missing

    - name: Run linting checks
      run: |
        uv pip install ruff black isort
        uv run ruff check .
        uv run black --check .
        uv run isort --check-only .

    - name: Run security scan
      run: |
        uv pip install bandit[toml]
        uv run bandit -r graph_elements/ -f json || echo "Security scan completed with warnings"

    - name: Build package
      run: |
        uv pip install build
        uv run python -m build

    - name: Check distribution
      run: |
        uv pip install twine
        uv run twine check dist/*

    - name: Extract tag name and version
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG_NAME="manual-$(date +%Y%m%d-%H%M%S)"
          VERSION="dev"
        else
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          VERSION="${GITHUB_REF#refs/tags/v}"
        fi
        echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Tag: $TAG_NAME, Version: $VERSION"

    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## ðŸŽ‰ Graph API Python ${{ steps.tag.outputs.tag }}

        A fluent graph query library for Python with ElementStore and graph operations.

        ### ðŸš€ Key Features
        - **Fluent Query API**: Chain methods like `.classId('person').gte('age', 30).r()`
        - **Type Safety**: Full typing support with TypeScript-equivalent interfaces  
        - **Rich Filtering**: 10+ operators (EQ, GT, LT, CONTAINS, REGEX, etc.)
        - **Aggregations**: count, sum, mean, median, min, max operations
        - **Async Support**: Async versions of node and edge creation
        - **297 Tests**: Comprehensive test coverage

        ### ðŸ“¦ Installation
        ```bash
        pip install graph-api-python
        ```

        ### ðŸ”— Quick Start
        ```python
        from graph_elements import GraphQuery, ElementStore
        
        store = ElementStore()
        # Add your data...
        
        # Query with fluent API
        results = (GraphQuery(store)
            .classId('person')
            .gte('age', 30)
            .order_by('name')
            .first(10)
            .r())
        ```

        **Full Changelog**: https://github.com/damylen/graph-api-python/commits/${{ steps.tag.outputs.tag }}
        EOF

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 90

    # GitHub Release
    - name: Create GitHub Release with Assets
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
      with:
        files: |
          dist/graph_api_python-${{ steps.tag.outputs.version }}-py3-none-any.whl
          dist/graph_api_python-${{ steps.tag.outputs.version }}.tar.gz
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.tag.outputs.tag, 'alpha') || contains(steps.tag.outputs.tag, 'beta') || contains(steps.tag.outputs.tag, 'rc') }}
        generate_release_notes: true

    # PyPI Publishing
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/') && !contains(steps.tag.outputs.tag, 'alpha') && !contains(steps.tag.outputs.tag, 'beta') && !contains(steps.tag.outputs.tag, 'rc')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true

    # Optional: Publish to Test PyPI for pre-releases
    - name: Publish to Test PyPI
      if: startsWith(github.ref, 'refs/tags/') && (contains(steps.tag.outputs.tag, 'alpha') || contains(steps.tag.outputs.tag, 'beta') || contains(steps.tag.outputs.tag, 'rc'))
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true