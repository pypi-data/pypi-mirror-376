# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from aos_prov.communication.unit.v4.generated import (
    iamanager_pb2 as iamanager_dot_v4_dot_iamanager__pb2,
)
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class IAMPublicServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAPIVersion = channel.unary_unary(
                '/iamanager.v4.IAMPublicService/GetAPIVersion',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=iamanager_dot_v4_dot_iamanager__pb2.APIVersion.FromString,
                )
        self.GetNodeID = channel.unary_unary(
                '/iamanager.v4.IAMPublicService/GetNodeID',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=iamanager_dot_v4_dot_iamanager__pb2.NodeID.FromString,
                )
        self.GetCert = channel.unary_unary(
                '/iamanager.v4.IAMPublicService/GetCert',
                request_serializer=iamanager_dot_v4_dot_iamanager__pb2.GetCertRequest.SerializeToString,
                response_deserializer=iamanager_dot_v4_dot_iamanager__pb2.GetCertResponse.FromString,
                )


class IAMPublicServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAPIVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNodeID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IAMPublicServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAPIVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAPIVersion,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=iamanager_dot_v4_dot_iamanager__pb2.APIVersion.SerializeToString,
            ),
            'GetNodeID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodeID,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=iamanager_dot_v4_dot_iamanager__pb2.NodeID.SerializeToString,
            ),
            'GetCert': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCert,
                    request_deserializer=iamanager_dot_v4_dot_iamanager__pb2.GetCertRequest.FromString,
                    response_serializer=iamanager_dot_v4_dot_iamanager__pb2.GetCertResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iamanager.v4.IAMPublicService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IAMPublicService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAPIVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v4.IAMPublicService/GetAPIVersion',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            iamanager_dot_v4_dot_iamanager__pb2.APIVersion.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNodeID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v4.IAMPublicService/GetNodeID',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            iamanager_dot_v4_dot_iamanager__pb2.NodeID.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v4.IAMPublicService/GetCert',
            iamanager_dot_v4_dot_iamanager__pb2.GetCertRequest.SerializeToString,
            iamanager_dot_v4_dot_iamanager__pb2.GetCertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class IAMPublicIdentityServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSystemInfo = channel.unary_unary(
                '/iamanager.v4.IAMPublicIdentityService/GetSystemInfo',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=iamanager_dot_v4_dot_iamanager__pb2.SystemInfo.FromString,
                )
        self.GetSubjects = channel.unary_unary(
                '/iamanager.v4.IAMPublicIdentityService/GetSubjects',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=iamanager_dot_v4_dot_iamanager__pb2.Subjects.FromString,
                )
        self.SubscribeSubjectsChanged = channel.unary_stream(
                '/iamanager.v4.IAMPublicIdentityService/SubscribeSubjectsChanged',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=iamanager_dot_v4_dot_iamanager__pb2.Subjects.FromString,
                )


class IAMPublicIdentityServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetSystemInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubjects(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeSubjectsChanged(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IAMPublicIdentityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSystemInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSystemInfo,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=iamanager_dot_v4_dot_iamanager__pb2.SystemInfo.SerializeToString,
            ),
            'GetSubjects': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubjects,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=iamanager_dot_v4_dot_iamanager__pb2.Subjects.SerializeToString,
            ),
            'SubscribeSubjectsChanged': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeSubjectsChanged,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=iamanager_dot_v4_dot_iamanager__pb2.Subjects.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iamanager.v4.IAMPublicIdentityService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IAMPublicIdentityService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetSystemInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v4.IAMPublicIdentityService/GetSystemInfo',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            iamanager_dot_v4_dot_iamanager__pb2.SystemInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSubjects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v4.IAMPublicIdentityService/GetSubjects',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            iamanager_dot_v4_dot_iamanager__pb2.Subjects.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeSubjectsChanged(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/iamanager.v4.IAMPublicIdentityService/SubscribeSubjectsChanged',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            iamanager_dot_v4_dot_iamanager__pb2.Subjects.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class IAMPublicPermissionsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPermissions = channel.unary_unary(
                '/iamanager.v4.IAMPublicPermissionsService/GetPermissions',
                request_serializer=iamanager_dot_v4_dot_iamanager__pb2.PermissionsRequest.SerializeToString,
                response_deserializer=iamanager_dot_v4_dot_iamanager__pb2.PermissionsResponse.FromString,
                )


class IAMPublicPermissionsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPermissions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IAMPublicPermissionsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPermissions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPermissions,
                    request_deserializer=iamanager_dot_v4_dot_iamanager__pb2.PermissionsRequest.FromString,
                    response_serializer=iamanager_dot_v4_dot_iamanager__pb2.PermissionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iamanager.v4.IAMPublicPermissionsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IAMPublicPermissionsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPermissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v4.IAMPublicPermissionsService/GetPermissions',
            iamanager_dot_v4_dot_iamanager__pb2.PermissionsRequest.SerializeToString,
            iamanager_dot_v4_dot_iamanager__pb2.PermissionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class IAMProvisioningServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAllNodeIDs = channel.unary_unary(
                '/iamanager.v4.IAMProvisioningService/GetAllNodeIDs',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=iamanager_dot_v4_dot_iamanager__pb2.NodesID.FromString,
                )
        self.GetCertTypes = channel.unary_unary(
                '/iamanager.v4.IAMProvisioningService/GetCertTypes',
                request_serializer=iamanager_dot_v4_dot_iamanager__pb2.GetCertTypesRequest.SerializeToString,
                response_deserializer=iamanager_dot_v4_dot_iamanager__pb2.CertTypes.FromString,
                )
        self.SetOwner = channel.unary_unary(
                '/iamanager.v4.IAMProvisioningService/SetOwner',
                request_serializer=iamanager_dot_v4_dot_iamanager__pb2.SetOwnerRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.Clear = channel.unary_unary(
                '/iamanager.v4.IAMProvisioningService/Clear',
                request_serializer=iamanager_dot_v4_dot_iamanager__pb2.ClearRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.EncryptDisk = channel.unary_unary(
                '/iamanager.v4.IAMProvisioningService/EncryptDisk',
                request_serializer=iamanager_dot_v4_dot_iamanager__pb2.EncryptDiskRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.FinishProvisioning = channel.unary_unary(
                '/iamanager.v4.IAMProvisioningService/FinishProvisioning',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class IAMProvisioningServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAllNodeIDs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCertTypes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetOwner(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Clear(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EncryptDisk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishProvisioning(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IAMProvisioningServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAllNodeIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllNodeIDs,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=iamanager_dot_v4_dot_iamanager__pb2.NodesID.SerializeToString,
            ),
            'GetCertTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCertTypes,
                    request_deserializer=iamanager_dot_v4_dot_iamanager__pb2.GetCertTypesRequest.FromString,
                    response_serializer=iamanager_dot_v4_dot_iamanager__pb2.CertTypes.SerializeToString,
            ),
            'SetOwner': grpc.unary_unary_rpc_method_handler(
                    servicer.SetOwner,
                    request_deserializer=iamanager_dot_v4_dot_iamanager__pb2.SetOwnerRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Clear': grpc.unary_unary_rpc_method_handler(
                    servicer.Clear,
                    request_deserializer=iamanager_dot_v4_dot_iamanager__pb2.ClearRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'EncryptDisk': grpc.unary_unary_rpc_method_handler(
                    servicer.EncryptDisk,
                    request_deserializer=iamanager_dot_v4_dot_iamanager__pb2.EncryptDiskRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'FinishProvisioning': grpc.unary_unary_rpc_method_handler(
                    servicer.FinishProvisioning,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iamanager.v4.IAMProvisioningService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IAMProvisioningService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAllNodeIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v4.IAMProvisioningService/GetAllNodeIDs',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            iamanager_dot_v4_dot_iamanager__pb2.NodesID.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCertTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v4.IAMProvisioningService/GetCertTypes',
            iamanager_dot_v4_dot_iamanager__pb2.GetCertTypesRequest.SerializeToString,
            iamanager_dot_v4_dot_iamanager__pb2.CertTypes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetOwner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v4.IAMProvisioningService/SetOwner',
            iamanager_dot_v4_dot_iamanager__pb2.SetOwnerRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Clear(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v4.IAMProvisioningService/Clear',
            iamanager_dot_v4_dot_iamanager__pb2.ClearRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EncryptDisk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v4.IAMProvisioningService/EncryptDisk',
            iamanager_dot_v4_dot_iamanager__pb2.EncryptDiskRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinishProvisioning(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v4.IAMProvisioningService/FinishProvisioning',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class IAMCertificateServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateKey = channel.unary_unary(
                '/iamanager.v4.IAMCertificateService/CreateKey',
                request_serializer=iamanager_dot_v4_dot_iamanager__pb2.CreateKeyRequest.SerializeToString,
                response_deserializer=iamanager_dot_v4_dot_iamanager__pb2.CreateKeyResponse.FromString,
                )
        self.ApplyCert = channel.unary_unary(
                '/iamanager.v4.IAMCertificateService/ApplyCert',
                request_serializer=iamanager_dot_v4_dot_iamanager__pb2.ApplyCertRequest.SerializeToString,
                response_deserializer=iamanager_dot_v4_dot_iamanager__pb2.ApplyCertResponse.FromString,
                )


class IAMCertificateServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyCert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IAMCertificateServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateKey': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateKey,
                    request_deserializer=iamanager_dot_v4_dot_iamanager__pb2.CreateKeyRequest.FromString,
                    response_serializer=iamanager_dot_v4_dot_iamanager__pb2.CreateKeyResponse.SerializeToString,
            ),
            'ApplyCert': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyCert,
                    request_deserializer=iamanager_dot_v4_dot_iamanager__pb2.ApplyCertRequest.FromString,
                    response_serializer=iamanager_dot_v4_dot_iamanager__pb2.ApplyCertResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iamanager.v4.IAMCertificateService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IAMCertificateService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v4.IAMCertificateService/CreateKey',
            iamanager_dot_v4_dot_iamanager__pb2.CreateKeyRequest.SerializeToString,
            iamanager_dot_v4_dot_iamanager__pb2.CreateKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ApplyCert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v4.IAMCertificateService/ApplyCert',
            iamanager_dot_v4_dot_iamanager__pb2.ApplyCertRequest.SerializeToString,
            iamanager_dot_v4_dot_iamanager__pb2.ApplyCertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class IAMPermissionsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterInstance = channel.unary_unary(
                '/iamanager.v4.IAMPermissionsService/RegisterInstance',
                request_serializer=iamanager_dot_v4_dot_iamanager__pb2.RegisterInstanceRequest.SerializeToString,
                response_deserializer=iamanager_dot_v4_dot_iamanager__pb2.RegisterInstanceResponse.FromString,
                )
        self.UnregisterInstance = channel.unary_unary(
                '/iamanager.v4.IAMPermissionsService/UnregisterInstance',
                request_serializer=iamanager_dot_v4_dot_iamanager__pb2.UnregisterInstanceRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class IAMPermissionsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnregisterInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IAMPermissionsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterInstance,
                    request_deserializer=iamanager_dot_v4_dot_iamanager__pb2.RegisterInstanceRequest.FromString,
                    response_serializer=iamanager_dot_v4_dot_iamanager__pb2.RegisterInstanceResponse.SerializeToString,
            ),
            'UnregisterInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.UnregisterInstance,
                    request_deserializer=iamanager_dot_v4_dot_iamanager__pb2.UnregisterInstanceRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iamanager.v4.IAMPermissionsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IAMPermissionsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v4.IAMPermissionsService/RegisterInstance',
            iamanager_dot_v4_dot_iamanager__pb2.RegisterInstanceRequest.SerializeToString,
            iamanager_dot_v4_dot_iamanager__pb2.RegisterInstanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnregisterInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v4.IAMPermissionsService/UnregisterInstance',
            iamanager_dot_v4_dot_iamanager__pb2.UnregisterInstanceRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
