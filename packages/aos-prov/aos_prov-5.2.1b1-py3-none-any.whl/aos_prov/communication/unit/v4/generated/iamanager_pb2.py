# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: iamanager/v4/iamanager.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database

# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x1ciamanager/v4/iamanager.proto\x12\x0ciamanager.v4\x1a\x1bgoogle/protobuf/empty.proto\"\x1d\n\nAPIVersion\x12\x0f\n\x07version\x18\x01 \x01(\x04\"\x19\n\x06NodeID\x12\x0f\n\x07node_id\x18\x01 \x01(\t\">\n\x0eGetCertRequest\x12\x0c\n\x04type\x18\x01 \x01(\t\x12\x0e\n\x06issuer\x18\x02 \x01(\x0c\x12\x0e\n\x06serial\x18\x03 \x01(\t\"B\n\x0fGetCertResponse\x12\x0c\n\x04type\x18\x01 \x01(\t\x12\x10\n\x08\x63\x65rt_url\x18\x02 \x01(\t\x12\x0f\n\x07key_url\x18\x03 \x01(\t\"4\n\nSystemInfo\x12\x11\n\tsystem_id\x18\x01 \x01(\t\x12\x13\n\x0b\x62oard_model\x18\x02 \x01(\t\"\x1c\n\x08Subjects\x12\x10\n\x08subjects\x18\x01 \x03(\t\"B\n\x12PermissionsRequest\x12\x0e\n\x06secret\x18\x01 \x01(\t\x12\x1c\n\x14\x66unctional_server_id\x18\x02 \x01(\t\"I\n\rInstanceIdent\x12\x12\n\nservice_id\x18\x01 \x01(\t\x12\x12\n\nsubject_id\x18\x02 \x01(\t\x12\x10\n\x08instance\x18\x03 \x01(\x04\"t\n\x13PermissionsResponse\x12-\n\x08instance\x18\x01 \x01(\x0b\x32\x1b.iamanager.v4.InstanceIdent\x12.\n\x0bpermissions\x18\x02 \x01(\x0b\x32\x19.iamanager.v4.Permissions\"\x16\n\x07NodesID\x12\x0b\n\x03ids\x18\x01 \x03(\t\"&\n\x13GetCertTypesRequest\x12\x0f\n\x07node_id\x18\x01 \x01(\t\"\x1a\n\tCertTypes\x12\r\n\x05types\x18\x01 \x03(\t\"B\n\x0fSetOwnerRequest\x12\x0f\n\x07node_id\x18\x01 \x01(\t\x12\x0c\n\x04type\x18\x02 \x01(\t\x12\x10\n\x08password\x18\x03 \x01(\t\"-\n\x0c\x43learRequest\x12\x0f\n\x07node_id\x18\x01 \x01(\t\x12\x0c\n\x04type\x18\x02 \x01(\t\"7\n\x12\x45ncryptDiskRequest\x12\x0f\n\x07node_id\x18\x01 \x01(\t\x12\x10\n\x08password\x18\x02 \x01(\t\"T\n\x10\x43reateKeyRequest\x12\x0f\n\x07node_id\x18\x01 \x01(\t\x12\x0f\n\x07subject\x18\x02 \x01(\t\x12\x0c\n\x04type\x18\x03 \x01(\t\x12\x10\n\x08password\x18\x04 \x01(\t\"?\n\x11\x43reateKeyResponse\x12\x0f\n\x07node_id\x18\x01 \x01(\t\x12\x0c\n\x04type\x18\x02 \x01(\t\x12\x0b\n\x03\x63sr\x18\x03 \x01(\t\"?\n\x10\x41pplyCertRequest\x12\x0f\n\x07node_id\x18\x01 \x01(\t\x12\x0c\n\x04type\x18\x02 \x01(\t\x12\x0c\n\x04\x63\x65rt\x18\x03 \x01(\t\"D\n\x11\x41pplyCertResponse\x12\x0f\n\x07node_id\x18\x01 \x01(\t\x12\x0c\n\x04type\x18\x02 \x01(\t\x12\x10\n\x08\x63\x65rt_url\x18\x03 \x01(\t\"\x82\x01\n\x0bPermissions\x12?\n\x0bpermissions\x18\x01 \x03(\x0b\x32*.iamanager.v4.Permissions.PermissionsEntry\x1a\x32\n\x10PermissionsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"\xe4\x01\n\x17RegisterInstanceRequest\x12-\n\x08instance\x18\x01 \x01(\x0b\x32\x1b.iamanager.v4.InstanceIdent\x12K\n\x0bpermissions\x18\x02 \x03(\x0b\x32\x36.iamanager.v4.RegisterInstanceRequest.PermissionsEntry\x1aM\n\x10PermissionsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12(\n\x05value\x18\x02 \x01(\x0b\x32\x19.iamanager.v4.Permissions:\x02\x38\x01\"*\n\x18RegisterInstanceResponse\x12\x0e\n\x06secret\x18\x01 \x01(\t\"J\n\x19UnregisterInstanceRequest\x12-\n\x08instance\x18\x01 \x01(\x0b\x32\x1b.iamanager.v4.InstanceIdent2\xde\x01\n\x10IAMPublicService\x12\x43\n\rGetAPIVersion\x12\x16.google.protobuf.Empty\x1a\x18.iamanager.v4.APIVersion\"\x00\x12;\n\tGetNodeID\x12\x16.google.protobuf.Empty\x1a\x14.iamanager.v4.NodeID\"\x00\x12H\n\x07GetCert\x12\x1c.iamanager.v4.GetCertRequest\x1a\x1d.iamanager.v4.GetCertResponse\"\x00\x32\xf0\x01\n\x18IAMPublicIdentityService\x12\x43\n\rGetSystemInfo\x12\x16.google.protobuf.Empty\x1a\x18.iamanager.v4.SystemInfo\"\x00\x12?\n\x0bGetSubjects\x12\x16.google.protobuf.Empty\x1a\x16.iamanager.v4.Subjects\"\x00\x12N\n\x18SubscribeSubjectsChanged\x12\x16.google.protobuf.Empty\x1a\x16.iamanager.v4.Subjects\"\x00\x30\x01\x32v\n\x1bIAMPublicPermissionsService\x12W\n\x0eGetPermissions\x12 .iamanager.v4.PermissionsRequest\x1a!.iamanager.v4.PermissionsResponse\"\x00\x32\xbf\x03\n\x16IAMProvisioningService\x12@\n\rGetAllNodeIDs\x12\x16.google.protobuf.Empty\x1a\x15.iamanager.v4.NodesID\"\x00\x12L\n\x0cGetCertTypes\x12!.iamanager.v4.GetCertTypesRequest\x1a\x17.iamanager.v4.CertTypes\"\x00\x12\x43\n\x08SetOwner\x12\x1d.iamanager.v4.SetOwnerRequest\x1a\x16.google.protobuf.Empty\"\x00\x12=\n\x05\x43lear\x12\x1a.iamanager.v4.ClearRequest\x1a\x16.google.protobuf.Empty\"\x00\x12I\n\x0b\x45ncryptDisk\x12 .iamanager.v4.EncryptDiskRequest\x1a\x16.google.protobuf.Empty\"\x00\x12\x46\n\x12\x46inishProvisioning\x12\x16.google.protobuf.Empty\x1a\x16.google.protobuf.Empty\"\x00\x32\xb7\x01\n\x15IAMCertificateService\x12N\n\tCreateKey\x12\x1e.iamanager.v4.CreateKeyRequest\x1a\x1f.iamanager.v4.CreateKeyResponse\"\x00\x12N\n\tApplyCert\x12\x1e.iamanager.v4.ApplyCertRequest\x1a\x1f.iamanager.v4.ApplyCertResponse\"\x00\x32\xd5\x01\n\x15IAMPermissionsService\x12\x63\n\x10RegisterInstance\x12%.iamanager.v4.RegisterInstanceRequest\x1a&.iamanager.v4.RegisterInstanceResponse\"\x00\x12W\n\x12UnregisterInstance\x12\'.iamanager.v4.UnregisterInstanceRequest\x1a\x16.google.protobuf.Empty\"\x00\x62\x06proto3')



_APIVERSION = DESCRIPTOR.message_types_by_name['APIVersion']
_NODEID = DESCRIPTOR.message_types_by_name['NodeID']
_GETCERTREQUEST = DESCRIPTOR.message_types_by_name['GetCertRequest']
_GETCERTRESPONSE = DESCRIPTOR.message_types_by_name['GetCertResponse']
_SYSTEMINFO = DESCRIPTOR.message_types_by_name['SystemInfo']
_SUBJECTS = DESCRIPTOR.message_types_by_name['Subjects']
_PERMISSIONSREQUEST = DESCRIPTOR.message_types_by_name['PermissionsRequest']
_INSTANCEIDENT = DESCRIPTOR.message_types_by_name['InstanceIdent']
_PERMISSIONSRESPONSE = DESCRIPTOR.message_types_by_name['PermissionsResponse']
_NODESID = DESCRIPTOR.message_types_by_name['NodesID']
_GETCERTTYPESREQUEST = DESCRIPTOR.message_types_by_name['GetCertTypesRequest']
_CERTTYPES = DESCRIPTOR.message_types_by_name['CertTypes']
_SETOWNERREQUEST = DESCRIPTOR.message_types_by_name['SetOwnerRequest']
_CLEARREQUEST = DESCRIPTOR.message_types_by_name['ClearRequest']
_ENCRYPTDISKREQUEST = DESCRIPTOR.message_types_by_name['EncryptDiskRequest']
_CREATEKEYREQUEST = DESCRIPTOR.message_types_by_name['CreateKeyRequest']
_CREATEKEYRESPONSE = DESCRIPTOR.message_types_by_name['CreateKeyResponse']
_APPLYCERTREQUEST = DESCRIPTOR.message_types_by_name['ApplyCertRequest']
_APPLYCERTRESPONSE = DESCRIPTOR.message_types_by_name['ApplyCertResponse']
_PERMISSIONS = DESCRIPTOR.message_types_by_name['Permissions']
_PERMISSIONS_PERMISSIONSENTRY = _PERMISSIONS.nested_types_by_name['PermissionsEntry']
_REGISTERINSTANCEREQUEST = DESCRIPTOR.message_types_by_name['RegisterInstanceRequest']
_REGISTERINSTANCEREQUEST_PERMISSIONSENTRY = _REGISTERINSTANCEREQUEST.nested_types_by_name['PermissionsEntry']
_REGISTERINSTANCERESPONSE = DESCRIPTOR.message_types_by_name['RegisterInstanceResponse']
_UNREGISTERINSTANCEREQUEST = DESCRIPTOR.message_types_by_name['UnregisterInstanceRequest']
APIVersion = _reflection.GeneratedProtocolMessageType('APIVersion', (_message.Message,), {
  'DESCRIPTOR' : _APIVERSION,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.APIVersion)
  })
_sym_db.RegisterMessage(APIVersion)

NodeID = _reflection.GeneratedProtocolMessageType('NodeID', (_message.Message,), {
  'DESCRIPTOR' : _NODEID,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.NodeID)
  })
_sym_db.RegisterMessage(NodeID)

GetCertRequest = _reflection.GeneratedProtocolMessageType('GetCertRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETCERTREQUEST,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.GetCertRequest)
  })
_sym_db.RegisterMessage(GetCertRequest)

GetCertResponse = _reflection.GeneratedProtocolMessageType('GetCertResponse', (_message.Message,), {
  'DESCRIPTOR' : _GETCERTRESPONSE,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.GetCertResponse)
  })
_sym_db.RegisterMessage(GetCertResponse)

SystemInfo = _reflection.GeneratedProtocolMessageType('SystemInfo', (_message.Message,), {
  'DESCRIPTOR' : _SYSTEMINFO,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.SystemInfo)
  })
_sym_db.RegisterMessage(SystemInfo)

Subjects = _reflection.GeneratedProtocolMessageType('Subjects', (_message.Message,), {
  'DESCRIPTOR' : _SUBJECTS,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.Subjects)
  })
_sym_db.RegisterMessage(Subjects)

PermissionsRequest = _reflection.GeneratedProtocolMessageType('PermissionsRequest', (_message.Message,), {
  'DESCRIPTOR' : _PERMISSIONSREQUEST,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.PermissionsRequest)
  })
_sym_db.RegisterMessage(PermissionsRequest)

InstanceIdent = _reflection.GeneratedProtocolMessageType('InstanceIdent', (_message.Message,), {
  'DESCRIPTOR' : _INSTANCEIDENT,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.InstanceIdent)
  })
_sym_db.RegisterMessage(InstanceIdent)

PermissionsResponse = _reflection.GeneratedProtocolMessageType('PermissionsResponse', (_message.Message,), {
  'DESCRIPTOR' : _PERMISSIONSRESPONSE,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.PermissionsResponse)
  })
_sym_db.RegisterMessage(PermissionsResponse)

NodesID = _reflection.GeneratedProtocolMessageType('NodesID', (_message.Message,), {
  'DESCRIPTOR' : _NODESID,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.NodesID)
  })
_sym_db.RegisterMessage(NodesID)

GetCertTypesRequest = _reflection.GeneratedProtocolMessageType('GetCertTypesRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETCERTTYPESREQUEST,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.GetCertTypesRequest)
  })
_sym_db.RegisterMessage(GetCertTypesRequest)

CertTypes = _reflection.GeneratedProtocolMessageType('CertTypes', (_message.Message,), {
  'DESCRIPTOR' : _CERTTYPES,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.CertTypes)
  })
_sym_db.RegisterMessage(CertTypes)

SetOwnerRequest = _reflection.GeneratedProtocolMessageType('SetOwnerRequest', (_message.Message,), {
  'DESCRIPTOR' : _SETOWNERREQUEST,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.SetOwnerRequest)
  })
_sym_db.RegisterMessage(SetOwnerRequest)

ClearRequest = _reflection.GeneratedProtocolMessageType('ClearRequest', (_message.Message,), {
  'DESCRIPTOR' : _CLEARREQUEST,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.ClearRequest)
  })
_sym_db.RegisterMessage(ClearRequest)

EncryptDiskRequest = _reflection.GeneratedProtocolMessageType('EncryptDiskRequest', (_message.Message,), {
  'DESCRIPTOR' : _ENCRYPTDISKREQUEST,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.EncryptDiskRequest)
  })
_sym_db.RegisterMessage(EncryptDiskRequest)

CreateKeyRequest = _reflection.GeneratedProtocolMessageType('CreateKeyRequest', (_message.Message,), {
  'DESCRIPTOR' : _CREATEKEYREQUEST,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.CreateKeyRequest)
  })
_sym_db.RegisterMessage(CreateKeyRequest)

CreateKeyResponse = _reflection.GeneratedProtocolMessageType('CreateKeyResponse', (_message.Message,), {
  'DESCRIPTOR' : _CREATEKEYRESPONSE,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.CreateKeyResponse)
  })
_sym_db.RegisterMessage(CreateKeyResponse)

ApplyCertRequest = _reflection.GeneratedProtocolMessageType('ApplyCertRequest', (_message.Message,), {
  'DESCRIPTOR' : _APPLYCERTREQUEST,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.ApplyCertRequest)
  })
_sym_db.RegisterMessage(ApplyCertRequest)

ApplyCertResponse = _reflection.GeneratedProtocolMessageType('ApplyCertResponse', (_message.Message,), {
  'DESCRIPTOR' : _APPLYCERTRESPONSE,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.ApplyCertResponse)
  })
_sym_db.RegisterMessage(ApplyCertResponse)

Permissions = _reflection.GeneratedProtocolMessageType('Permissions', (_message.Message,), {

  'PermissionsEntry' : _reflection.GeneratedProtocolMessageType('PermissionsEntry', (_message.Message,), {
    'DESCRIPTOR' : _PERMISSIONS_PERMISSIONSENTRY,
    '__module__' : 'iamanager.v4.iamanager_pb2'
    # @@protoc_insertion_point(class_scope:iamanager.v4.Permissions.PermissionsEntry)
    })
  ,
  'DESCRIPTOR' : _PERMISSIONS,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.Permissions)
  })
_sym_db.RegisterMessage(Permissions)
_sym_db.RegisterMessage(Permissions.PermissionsEntry)

RegisterInstanceRequest = _reflection.GeneratedProtocolMessageType('RegisterInstanceRequest', (_message.Message,), {

  'PermissionsEntry' : _reflection.GeneratedProtocolMessageType('PermissionsEntry', (_message.Message,), {
    'DESCRIPTOR' : _REGISTERINSTANCEREQUEST_PERMISSIONSENTRY,
    '__module__' : 'iamanager.v4.iamanager_pb2'
    # @@protoc_insertion_point(class_scope:iamanager.v4.RegisterInstanceRequest.PermissionsEntry)
    })
  ,
  'DESCRIPTOR' : _REGISTERINSTANCEREQUEST,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.RegisterInstanceRequest)
  })
_sym_db.RegisterMessage(RegisterInstanceRequest)
_sym_db.RegisterMessage(RegisterInstanceRequest.PermissionsEntry)

RegisterInstanceResponse = _reflection.GeneratedProtocolMessageType('RegisterInstanceResponse', (_message.Message,), {
  'DESCRIPTOR' : _REGISTERINSTANCERESPONSE,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.RegisterInstanceResponse)
  })
_sym_db.RegisterMessage(RegisterInstanceResponse)

UnregisterInstanceRequest = _reflection.GeneratedProtocolMessageType('UnregisterInstanceRequest', (_message.Message,), {
  'DESCRIPTOR' : _UNREGISTERINSTANCEREQUEST,
  '__module__' : 'iamanager.v4.iamanager_pb2'
  # @@protoc_insertion_point(class_scope:iamanager.v4.UnregisterInstanceRequest)
  })
_sym_db.RegisterMessage(UnregisterInstanceRequest)

_IAMPUBLICSERVICE = DESCRIPTOR.services_by_name['IAMPublicService']
_IAMPUBLICIDENTITYSERVICE = DESCRIPTOR.services_by_name['IAMPublicIdentityService']
_IAMPUBLICPERMISSIONSSERVICE = DESCRIPTOR.services_by_name['IAMPublicPermissionsService']
_IAMPROVISIONINGSERVICE = DESCRIPTOR.services_by_name['IAMProvisioningService']
_IAMCERTIFICATESERVICE = DESCRIPTOR.services_by_name['IAMCertificateService']
_IAMPERMISSIONSSERVICE = DESCRIPTOR.services_by_name['IAMPermissionsService']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _PERMISSIONS_PERMISSIONSENTRY._options = None
  _PERMISSIONS_PERMISSIONSENTRY._serialized_options = b'8\001'
  _REGISTERINSTANCEREQUEST_PERMISSIONSENTRY._options = None
  _REGISTERINSTANCEREQUEST_PERMISSIONSENTRY._serialized_options = b'8\001'
  _APIVERSION._serialized_start=75
  _APIVERSION._serialized_end=104
  _NODEID._serialized_start=106
  _NODEID._serialized_end=131
  _GETCERTREQUEST._serialized_start=133
  _GETCERTREQUEST._serialized_end=195
  _GETCERTRESPONSE._serialized_start=197
  _GETCERTRESPONSE._serialized_end=263
  _SYSTEMINFO._serialized_start=265
  _SYSTEMINFO._serialized_end=317
  _SUBJECTS._serialized_start=319
  _SUBJECTS._serialized_end=347
  _PERMISSIONSREQUEST._serialized_start=349
  _PERMISSIONSREQUEST._serialized_end=415
  _INSTANCEIDENT._serialized_start=417
  _INSTANCEIDENT._serialized_end=490
  _PERMISSIONSRESPONSE._serialized_start=492
  _PERMISSIONSRESPONSE._serialized_end=608
  _NODESID._serialized_start=610
  _NODESID._serialized_end=632
  _GETCERTTYPESREQUEST._serialized_start=634
  _GETCERTTYPESREQUEST._serialized_end=672
  _CERTTYPES._serialized_start=674
  _CERTTYPES._serialized_end=700
  _SETOWNERREQUEST._serialized_start=702
  _SETOWNERREQUEST._serialized_end=768
  _CLEARREQUEST._serialized_start=770
  _CLEARREQUEST._serialized_end=815
  _ENCRYPTDISKREQUEST._serialized_start=817
  _ENCRYPTDISKREQUEST._serialized_end=872
  _CREATEKEYREQUEST._serialized_start=874
  _CREATEKEYREQUEST._serialized_end=958
  _CREATEKEYRESPONSE._serialized_start=960
  _CREATEKEYRESPONSE._serialized_end=1023
  _APPLYCERTREQUEST._serialized_start=1025
  _APPLYCERTREQUEST._serialized_end=1088
  _APPLYCERTRESPONSE._serialized_start=1090
  _APPLYCERTRESPONSE._serialized_end=1158
  _PERMISSIONS._serialized_start=1161
  _PERMISSIONS._serialized_end=1291
  _PERMISSIONS_PERMISSIONSENTRY._serialized_start=1241
  _PERMISSIONS_PERMISSIONSENTRY._serialized_end=1291
  _REGISTERINSTANCEREQUEST._serialized_start=1294
  _REGISTERINSTANCEREQUEST._serialized_end=1522
  _REGISTERINSTANCEREQUEST_PERMISSIONSENTRY._serialized_start=1445
  _REGISTERINSTANCEREQUEST_PERMISSIONSENTRY._serialized_end=1522
  _REGISTERINSTANCERESPONSE._serialized_start=1524
  _REGISTERINSTANCERESPONSE._serialized_end=1566
  _UNREGISTERINSTANCEREQUEST._serialized_start=1568
  _UNREGISTERINSTANCEREQUEST._serialized_end=1642
  _IAMPUBLICSERVICE._serialized_start=1645
  _IAMPUBLICSERVICE._serialized_end=1867
  _IAMPUBLICIDENTITYSERVICE._serialized_start=1870
  _IAMPUBLICIDENTITYSERVICE._serialized_end=2110
  _IAMPUBLICPERMISSIONSSERVICE._serialized_start=2112
  _IAMPUBLICPERMISSIONSSERVICE._serialized_end=2230
  _IAMPROVISIONINGSERVICE._serialized_start=2233
  _IAMPROVISIONINGSERVICE._serialized_end=2680
  _IAMCERTIFICATESERVICE._serialized_start=2683
  _IAMCERTIFICATESERVICE._serialized_end=2866
  _IAMPERMISSIONSSERVICE._serialized_start=2869
  _IAMPERMISSIONSSERVICE._serialized_end=3082
# @@protoc_insertion_point(module_scope)
