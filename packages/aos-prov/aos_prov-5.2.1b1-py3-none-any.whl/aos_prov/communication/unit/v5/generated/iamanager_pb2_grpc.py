# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from aos_prov.communication.unit.v5.generated import (
    iamanager_pb2 as iamanager_dot_v5_dot_iamanager__pb2,
)
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class IAMPublicServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetNodeInfo = channel.unary_unary(
                '/iamanager.v5.IAMPublicService/GetNodeInfo',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.NodeInfo.FromString,
                )
        self.GetCert = channel.unary_unary(
                '/iamanager.v5.IAMPublicService/GetCert',
                request_serializer=iamanager_dot_v5_dot_iamanager__pb2.GetCertRequest.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.GetCertResponse.FromString,
                )


class IAMPublicServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetNodeInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IAMPublicServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetNodeInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodeInfo,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.NodeInfo.SerializeToString,
            ),
            'GetCert': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCert,
                    request_deserializer=iamanager_dot_v5_dot_iamanager__pb2.GetCertRequest.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.GetCertResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iamanager.v5.IAMPublicService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IAMPublicService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetNodeInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v5.IAMPublicService/GetNodeInfo',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.NodeInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v5.IAMPublicService/GetCert',
            iamanager_dot_v5_dot_iamanager__pb2.GetCertRequest.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.GetCertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class IAMPublicIdentityServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSystemInfo = channel.unary_unary(
                '/iamanager.v5.IAMPublicIdentityService/GetSystemInfo',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.SystemInfo.FromString,
                )
        self.GetSubjects = channel.unary_unary(
                '/iamanager.v5.IAMPublicIdentityService/GetSubjects',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.Subjects.FromString,
                )
        self.SubscribeSubjectsChanged = channel.unary_stream(
                '/iamanager.v5.IAMPublicIdentityService/SubscribeSubjectsChanged',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.Subjects.FromString,
                )


class IAMPublicIdentityServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetSystemInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubjects(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeSubjectsChanged(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IAMPublicIdentityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSystemInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSystemInfo,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.SystemInfo.SerializeToString,
            ),
            'GetSubjects': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubjects,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.Subjects.SerializeToString,
            ),
            'SubscribeSubjectsChanged': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeSubjectsChanged,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.Subjects.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iamanager.v5.IAMPublicIdentityService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IAMPublicIdentityService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetSystemInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v5.IAMPublicIdentityService/GetSystemInfo',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.SystemInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSubjects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v5.IAMPublicIdentityService/GetSubjects',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.Subjects.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeSubjectsChanged(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/iamanager.v5.IAMPublicIdentityService/SubscribeSubjectsChanged',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.Subjects.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class IAMPublicPermissionsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPermissions = channel.unary_unary(
                '/iamanager.v5.IAMPublicPermissionsService/GetPermissions',
                request_serializer=iamanager_dot_v5_dot_iamanager__pb2.PermissionsRequest.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.PermissionsResponse.FromString,
                )


class IAMPublicPermissionsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPermissions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IAMPublicPermissionsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPermissions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPermissions,
                    request_deserializer=iamanager_dot_v5_dot_iamanager__pb2.PermissionsRequest.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.PermissionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iamanager.v5.IAMPublicPermissionsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IAMPublicPermissionsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPermissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v5.IAMPublicPermissionsService/GetPermissions',
            iamanager_dot_v5_dot_iamanager__pb2.PermissionsRequest.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.PermissionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class IAMPublicNodesServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAllNodeIDs = channel.unary_unary(
                '/iamanager.v5.IAMPublicNodesService/GetAllNodeIDs',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.NodesID.FromString,
                )
        self.GetNodeInfo = channel.unary_unary(
                '/iamanager.v5.IAMPublicNodesService/GetNodeInfo',
                request_serializer=iamanager_dot_v5_dot_iamanager__pb2.GetNodeInfoRequest.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.NodeInfo.FromString,
                )
        self.SubscribeNodeChanged = channel.unary_stream(
                '/iamanager.v5.IAMPublicNodesService/SubscribeNodeChanged',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.NodeInfo.FromString,
                )
        self.RegisterNode = channel.stream_stream(
                '/iamanager.v5.IAMPublicNodesService/RegisterNode',
                request_serializer=iamanager_dot_v5_dot_iamanager__pb2.IAMOutgoingMessages.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.IAMIncomingMessages.FromString,
                )


class IAMPublicNodesServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAllNodeIDs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNodeInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeNodeChanged(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterNode(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IAMPublicNodesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAllNodeIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllNodeIDs,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.NodesID.SerializeToString,
            ),
            'GetNodeInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodeInfo,
                    request_deserializer=iamanager_dot_v5_dot_iamanager__pb2.GetNodeInfoRequest.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.NodeInfo.SerializeToString,
            ),
            'SubscribeNodeChanged': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeNodeChanged,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.NodeInfo.SerializeToString,
            ),
            'RegisterNode': grpc.stream_stream_rpc_method_handler(
                    servicer.RegisterNode,
                    request_deserializer=iamanager_dot_v5_dot_iamanager__pb2.IAMOutgoingMessages.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.IAMIncomingMessages.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iamanager.v5.IAMPublicNodesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IAMPublicNodesService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAllNodeIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v5.IAMPublicNodesService/GetAllNodeIDs',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.NodesID.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNodeInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v5.IAMPublicNodesService/GetNodeInfo',
            iamanager_dot_v5_dot_iamanager__pb2.GetNodeInfoRequest.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.NodeInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeNodeChanged(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/iamanager.v5.IAMPublicNodesService/SubscribeNodeChanged',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.NodeInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterNode(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/iamanager.v5.IAMPublicNodesService/RegisterNode',
            iamanager_dot_v5_dot_iamanager__pb2.IAMOutgoingMessages.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.IAMIncomingMessages.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class IAMNodesServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PauseNode = channel.unary_unary(
                '/iamanager.v5.IAMNodesService/PauseNode',
                request_serializer=iamanager_dot_v5_dot_iamanager__pb2.PauseNodeRequest.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.PauseNodeResponse.FromString,
                )
        self.ResumeNode = channel.unary_unary(
                '/iamanager.v5.IAMNodesService/ResumeNode',
                request_serializer=iamanager_dot_v5_dot_iamanager__pb2.ResumeNodeRequest.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.ResumeNodeResponse.FromString,
                )


class IAMNodesServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PauseNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResumeNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IAMNodesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PauseNode': grpc.unary_unary_rpc_method_handler(
                    servicer.PauseNode,
                    request_deserializer=iamanager_dot_v5_dot_iamanager__pb2.PauseNodeRequest.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.PauseNodeResponse.SerializeToString,
            ),
            'ResumeNode': grpc.unary_unary_rpc_method_handler(
                    servicer.ResumeNode,
                    request_deserializer=iamanager_dot_v5_dot_iamanager__pb2.ResumeNodeRequest.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.ResumeNodeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iamanager.v5.IAMNodesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IAMNodesService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PauseNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v5.IAMNodesService/PauseNode',
            iamanager_dot_v5_dot_iamanager__pb2.PauseNodeRequest.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.PauseNodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResumeNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v5.IAMNodesService/ResumeNode',
            iamanager_dot_v5_dot_iamanager__pb2.ResumeNodeRequest.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.ResumeNodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class IAMProvisioningServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCertTypes = channel.unary_unary(
                '/iamanager.v5.IAMProvisioningService/GetCertTypes',
                request_serializer=iamanager_dot_v5_dot_iamanager__pb2.GetCertTypesRequest.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.CertTypes.FromString,
                )
        self.StartProvisioning = channel.unary_unary(
                '/iamanager.v5.IAMProvisioningService/StartProvisioning',
                request_serializer=iamanager_dot_v5_dot_iamanager__pb2.StartProvisioningRequest.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.StartProvisioningResponse.FromString,
                )
        self.FinishProvisioning = channel.unary_unary(
                '/iamanager.v5.IAMProvisioningService/FinishProvisioning',
                request_serializer=iamanager_dot_v5_dot_iamanager__pb2.FinishProvisioningRequest.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.FinishProvisioningResponse.FromString,
                )
        self.Deprovision = channel.unary_unary(
                '/iamanager.v5.IAMProvisioningService/Deprovision',
                request_serializer=iamanager_dot_v5_dot_iamanager__pb2.DeprovisionRequest.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.DeprovisionResponse.FromString,
                )


class IAMProvisioningServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCertTypes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartProvisioning(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishProvisioning(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Deprovision(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IAMProvisioningServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCertTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCertTypes,
                    request_deserializer=iamanager_dot_v5_dot_iamanager__pb2.GetCertTypesRequest.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.CertTypes.SerializeToString,
            ),
            'StartProvisioning': grpc.unary_unary_rpc_method_handler(
                    servicer.StartProvisioning,
                    request_deserializer=iamanager_dot_v5_dot_iamanager__pb2.StartProvisioningRequest.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.StartProvisioningResponse.SerializeToString,
            ),
            'FinishProvisioning': grpc.unary_unary_rpc_method_handler(
                    servicer.FinishProvisioning,
                    request_deserializer=iamanager_dot_v5_dot_iamanager__pb2.FinishProvisioningRequest.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.FinishProvisioningResponse.SerializeToString,
            ),
            'Deprovision': grpc.unary_unary_rpc_method_handler(
                    servicer.Deprovision,
                    request_deserializer=iamanager_dot_v5_dot_iamanager__pb2.DeprovisionRequest.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.DeprovisionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iamanager.v5.IAMProvisioningService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IAMProvisioningService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCertTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v5.IAMProvisioningService/GetCertTypes',
            iamanager_dot_v5_dot_iamanager__pb2.GetCertTypesRequest.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.CertTypes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartProvisioning(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v5.IAMProvisioningService/StartProvisioning',
            iamanager_dot_v5_dot_iamanager__pb2.StartProvisioningRequest.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.StartProvisioningResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinishProvisioning(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v5.IAMProvisioningService/FinishProvisioning',
            iamanager_dot_v5_dot_iamanager__pb2.FinishProvisioningRequest.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.FinishProvisioningResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Deprovision(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v5.IAMProvisioningService/Deprovision',
            iamanager_dot_v5_dot_iamanager__pb2.DeprovisionRequest.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.DeprovisionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class IAMCertificateServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateKey = channel.unary_unary(
                '/iamanager.v5.IAMCertificateService/CreateKey',
                request_serializer=iamanager_dot_v5_dot_iamanager__pb2.CreateKeyRequest.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.CreateKeyResponse.FromString,
                )
        self.ApplyCert = channel.unary_unary(
                '/iamanager.v5.IAMCertificateService/ApplyCert',
                request_serializer=iamanager_dot_v5_dot_iamanager__pb2.ApplyCertRequest.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.ApplyCertResponse.FromString,
                )


class IAMCertificateServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyCert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IAMCertificateServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateKey': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateKey,
                    request_deserializer=iamanager_dot_v5_dot_iamanager__pb2.CreateKeyRequest.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.CreateKeyResponse.SerializeToString,
            ),
            'ApplyCert': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyCert,
                    request_deserializer=iamanager_dot_v5_dot_iamanager__pb2.ApplyCertRequest.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.ApplyCertResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iamanager.v5.IAMCertificateService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IAMCertificateService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v5.IAMCertificateService/CreateKey',
            iamanager_dot_v5_dot_iamanager__pb2.CreateKeyRequest.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.CreateKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ApplyCert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v5.IAMCertificateService/ApplyCert',
            iamanager_dot_v5_dot_iamanager__pb2.ApplyCertRequest.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.ApplyCertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class IAMPermissionsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterInstance = channel.unary_unary(
                '/iamanager.v5.IAMPermissionsService/RegisterInstance',
                request_serializer=iamanager_dot_v5_dot_iamanager__pb2.RegisterInstanceRequest.SerializeToString,
                response_deserializer=iamanager_dot_v5_dot_iamanager__pb2.RegisterInstanceResponse.FromString,
                )
        self.UnregisterInstance = channel.unary_unary(
                '/iamanager.v5.IAMPermissionsService/UnregisterInstance',
                request_serializer=iamanager_dot_v5_dot_iamanager__pb2.UnregisterInstanceRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class IAMPermissionsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnregisterInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IAMPermissionsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterInstance,
                    request_deserializer=iamanager_dot_v5_dot_iamanager__pb2.RegisterInstanceRequest.FromString,
                    response_serializer=iamanager_dot_v5_dot_iamanager__pb2.RegisterInstanceResponse.SerializeToString,
            ),
            'UnregisterInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.UnregisterInstance,
                    request_deserializer=iamanager_dot_v5_dot_iamanager__pb2.UnregisterInstanceRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iamanager.v5.IAMPermissionsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IAMPermissionsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v5.IAMPermissionsService/RegisterInstance',
            iamanager_dot_v5_dot_iamanager__pb2.RegisterInstanceRequest.SerializeToString,
            iamanager_dot_v5_dot_iamanager__pb2.RegisterInstanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnregisterInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iamanager.v5.IAMPermissionsService/UnregisterInstance',
            iamanager_dot_v5_dot_iamanager__pb2.UnregisterInstanceRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
