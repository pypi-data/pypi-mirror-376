# generated by datamodel-codegen:
#   filename:  runtime.json
#   timestamp: 2025-09-10T05:08:08+00:00

from __future__ import annotations

from typing import Annotated, Any, Literal, Optional, Union

from pydantic import BaseModel, Field


class MCPTransportSSE(BaseModel):
    type: Annotated[Literal['sse'], Field(title='Type')] = 'sse'
    url: Annotated[str, Field(title='Url')]


class MCPTransportSTDIO(BaseModel):
    type: Annotated[Literal['stdio'], Field(title='Type')] = 'stdio'
    command: Annotated[str, Field(title='Command')]
    args: Annotated[list[str], Field(title='Args')]


class PadValueAudioClip(BaseModel):
    type: Annotated[Literal['audio_clip'], Field(title='Type')] = 'audio_clip'
    transcript: Annotated[str, Field(title='Transcript')]
    duration: Annotated[float, Field(title='Duration')]


class PadValueBoolean(BaseModel):
    type: Annotated[Literal['boolean'], Field(title='Type')] = 'boolean'
    value: Annotated[bool, Field(title='Value')]


class PadValueFloat(BaseModel):
    type: Annotated[Literal['float'], Field(title='Type')] = 'float'
    value: Annotated[float, Field(title='Value')]


class PadValueInteger(BaseModel):
    type: Annotated[Literal['integer'], Field(title='Type')] = 'integer'
    value: Annotated[int, Field(title='Value')]


class PadValueString(BaseModel):
    type: Annotated[Literal['string'], Field(title='Type')] = 'string'
    value: Annotated[str, Field(title='Value')]


class PadValueTrigger(BaseModel):
    type: Annotated[Literal['trigger'], Field(title='Type')] = 'trigger'


class PadValueVideoClip(BaseModel):
    type: Annotated[Literal['video_clip'], Field(title='Type')] = 'video_clip'
    duration: Annotated[float, Field(title='Duration')]


class RuntimeEventPayloadValue(BaseModel):
    type: Annotated[Literal['value'], Field(title='Type')] = 'value'
    value: Annotated[
        Union[
            PadValueString,
            PadValueInteger,
            PadValueFloat,
            PadValueBoolean,
            PadValueTrigger,
            PadValueAudioClip,
            PadValueVideoClip,
        ],
        Field(
            description='Type of the pad triggered value',
            discriminator='type',
            title='Value',
        ),
    ]
    node_id: Annotated[str, Field(title='Node Id')]
    pad_id: Annotated[str, Field(title='Pad Id')]


class RuntimeRequestPayloadGetValue(BaseModel):
    type: Annotated[Literal['get_value'], Field(title='Type')] = 'get_value'
    node_id: Annotated[str, Field(title='Node Id')]
    pad_id: Annotated[str, Field(title='Pad Id')]


class RuntimeRequestPayloadListMCPServers(BaseModel):
    type: Annotated[Literal['list_mcp_servers'], Field(title='Type')] = (
        'list_mcp_servers'
    )


class RuntimeRequestPayloadLockPublisher(BaseModel):
    type: Annotated[Literal['lock_publisher'], Field(title='Type')] = 'lock_publisher'
    publish_node: Annotated[str, Field(title='Publish Node')]


class RuntimeRequestPayloadPushValue(BaseModel):
    type: Annotated[Literal['push_value'], Field(title='Type')] = 'push_value'
    value: Annotated[Optional[Any], Field(title='Value')] = None
    node_id: Annotated[str, Field(title='Node Id')]
    pad_id: Annotated[str, Field(title='Pad Id')]


class RuntimeResponsePayloadGetValue(BaseModel):
    type: Annotated[Literal['get_value'], Field(title='Type')] = 'get_value'
    value: Annotated[
        Union[
            PadValueString,
            PadValueInteger,
            PadValueFloat,
            PadValueBoolean,
            PadValueTrigger,
            PadValueAudioClip,
            PadValueVideoClip,
        ],
        Field(
            description='Type of the pad triggered value',
            discriminator='type',
            title='Value',
        ),
    ]


class RuntimeResponsePayloadLockPublisher(BaseModel):
    type: Annotated[Literal['lock_publisher'], Field(title='Type')] = 'lock_publisher'
    success: Annotated[bool, Field(title='Success')]


class RuntimeResponsePayloadPushValue(BaseModel):
    type: Annotated[Literal['push_value'], Field(title='Type')] = 'push_value'


class MCPTransportDatachannelProxy(BaseModel):
    type: Annotated[Literal['datachannel_proxy'], Field(title='Type')] = (
        'datachannel_proxy'
    )
    local_transport: Annotated[
        Union[MCPTransportSTDIO, MCPTransportSSE],
        Field(discriminator='type', title='Local Transport'),
    ]


class RuntimeEvent(BaseModel):
    type: Annotated[Literal['event'], Field(title='Type')] = 'event'
    payload: Annotated[
        RuntimeEventPayloadValue,
        Field(
            description='Payload for the runtime event',
            discriminator='type',
            title='Payload',
        ),
    ]


class RuntimeRequest(BaseModel):
    type: Annotated[Literal['request'], Field(title='Type')] = 'request'
    req_id: Annotated[str, Field(title='Req Id')]
    payload: Annotated[
        Union[
            RuntimeRequestPayloadPushValue,
            RuntimeRequestPayloadGetValue,
            RuntimeRequestPayloadLockPublisher,
            RuntimeRequestPayloadListMCPServers,
        ],
        Field(
            description='Request to push data to a pad',
            discriminator='type',
            title='Payload',
        ),
    ]


class MCPServer(BaseModel):
    name: Annotated[str, Field(title='Name')]
    transport: Annotated[
        Union[MCPTransportDatachannelProxy, MCPTransportSTDIO],
        Field(discriminator='type', title='Transport'),
    ]


class RuntimeResponsePayloadListMCPServers(BaseModel):
    type: Annotated[Literal['list_mcp_servers'], Field(title='Type')] = (
        'list_mcp_servers'
    )
    servers: Annotated[list[MCPServer], Field(title='Servers')]


class RuntimeResponse(BaseModel):
    type: Annotated[Literal['complete'], Field(title='Type')] = 'complete'
    req_id: Annotated[str, Field(title='Req Id')]
    error: Annotated[Optional[str], Field(title='Error')] = None
    payload: Annotated[
        Optional[
            Union[
                RuntimeResponsePayloadPushValue,
                RuntimeResponsePayloadGetValue,
                RuntimeResponsePayloadLockPublisher,
                RuntimeResponsePayloadListMCPServers,
            ]
        ],
        Field(title='Payload'),
    ] = None


class DummyType(BaseModel):
    req: RuntimeRequest
    runtime_request_payload: Annotated[
        Union[
            RuntimeRequestPayloadPushValue,
            RuntimeRequestPayloadGetValue,
            RuntimeRequestPayloadLockPublisher,
            RuntimeRequestPayloadListMCPServers,
        ],
        Field(
            description='Request to push data to a pad',
            discriminator='type',
            title='Runtime Request Payload',
        ),
    ]
    resp: RuntimeResponse
    runtime_response_payload: Annotated[
        Union[
            RuntimeResponsePayloadPushValue,
            RuntimeResponsePayloadGetValue,
            RuntimeResponsePayloadLockPublisher,
            RuntimeResponsePayloadListMCPServers,
        ],
        Field(
            description='Payload for the runtime request complete',
            discriminator='type',
            title='Runtime Response Payload',
        ),
    ]
    ev: RuntimeEvent
    runtime_event_payload: Annotated[
        RuntimeEventPayloadValue,
        Field(
            description='Payload for the runtime event',
            discriminator='type',
            title='Runtime Event Payload',
        ),
    ]
    pad_value: Annotated[
        Union[
            PadValueString,
            PadValueInteger,
            PadValueFloat,
            PadValueBoolean,
            PadValueTrigger,
            PadValueAudioClip,
            PadValueVideoClip,
        ],
        Field(
            description='Type of the pad triggered value',
            discriminator='type',
            title='Pad Value',
        ),
    ]
