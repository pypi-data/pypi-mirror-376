import ast
import re
from pathlib import Path


class MisconfigurationScanner(ast.NodeVisitor):
    def __init__(self, file_path: Path):
        self.file_path = file_path
        self.issues = []

    def add_issue(self, node_or_line, issue_type, message, severity="High",
                  explanation=None, remediation=None):
        line = getattr(node_or_line, "lineno", node_or_line if isinstance(node_or_line, int) else 0)
        self.issues.append({
            "type": issue_type,
            "message": message,
            "file": str(self.file_path),
            "line": line,
            "severity": severity,
            "owasp_category": "A05:2021 – Security Misconfiguration",
            "explanation": explanation or "This configuration increases the attack surface of the application.",
            "remediation": remediation or "Harden the configuration by following security best practices."
        })

    def visit_Assign(self, node):
        # --- DEBUG=True ---
        if isinstance(node.targets[0], ast.Name) and node.targets[0].id.upper() == "DEBUG":
            if isinstance(node.value, ast.Constant) and node.value.value is True:
                self.add_issue(
                    node,
                    "Security Misconfiguration: Debug Mode",
                    "DEBUG mode enabled.",
                    severity="Critical",
                    explanation="Running in DEBUG mode exposes detailed error messages and stack traces that attackers can use.",
                    remediation="Set DEBUG=False in production environments."
                )

        # --- Django ALLOWED_HOSTS = ["*"] ---
        if isinstance(node.targets[0], ast.Name) and node.targets[0].id == "ALLOWED_HOSTS":
            if isinstance(node.value, (ast.List, ast.Tuple)):
                if any(isinstance(el, ast.Constant) and el.value == "*" for el in node.value.elts):
                    self.add_issue(
                        node,
                        "Security Misconfiguration: Insecure Host Policy",
                        "ALLOWED_HOSTS set to '*' allows any host.",
                        severity="High",
                        explanation="Allowing all hosts makes your app vulnerable to Host Header attacks.",
                        remediation="Set ALLOWED_HOSTS to a specific list of trusted domains."
                    )

        # --- Insecure cookie settings ---
        insecure_cookies = {
            "SESSION_COOKIE_SECURE": (
                "Session cookie not marked Secure.",
                "Without Secure flag, cookies may be sent over unencrypted HTTP.",
                "Enable SESSION_COOKIE_SECURE=True to ensure cookies are only sent over HTTPS."
            ),
            "SESSION_COOKIE_HTTPONLY": (
                "Session cookie not marked HttpOnly.",
                "Without HttpOnly, client-side scripts (e.g., XSS payloads) can access session cookies.",
                "Enable SESSION_COOKIE_HTTPONLY=True to protect cookies from JavaScript access."
            ),
            "SESSION_COOKIE_SAMESITE": (
                "Session cookie SameSite not set.",
                "Without SameSite, cookies may be sent in cross-site requests, enabling CSRF attacks.",
                "Set SESSION_COOKIE_SAMESITE='Lax' or 'Strict' to mitigate CSRF."
            ),
        }

        if isinstance(node.targets[0], ast.Name) and node.targets[0].id in insecure_cookies:
            if isinstance(node.value, ast.Constant) and node.value.value in (False, None):
                message, explanation, remediation = insecure_cookies[node.targets[0].id]
                self.add_issue(
                    node,
                    "Security Misconfiguration: Insecure Cookie",
                    message,
                    severity="High",
                    explanation=explanation,
                    remediation=remediation
                )

        self.generic_visit(node)

    def visit_Call(self, node):
        # --- Flask app.run(debug=True) ---
        if isinstance(node.func, ast.Attribute) and node.func.attr == "run":
            for kw in node.keywords:
                if kw.arg == "debug" and isinstance(kw.value, ast.Constant) and kw.value.value is True:
                    self.add_issue(
                        node,
                        "Security Misconfiguration: Debug Mode",
                        "Flask app running in debug mode.",
                        severity="Critical",
                        explanation="Flask debug mode exposes an interactive console, which attackers can exploit remotely.",
                        remediation="Disable debug mode in production. Use proper logging and monitoring."
                    )

        self.generic_visit(node)


def regex_fallback(code: str, file_path: Path):
    """
    Regex fallback for configs / text files (settings.py, .env, nginx.conf, etc.)
    """
    issues = []
    patterns = [
        (r"SECRET_KEY\s*=\s*['\"].*['\"]",
         "Hardcoded Secret Key",
         "Hardcoded secret key found in configuration.",
         "Attackers who obtain the source code can immediately compromise cryptographic operations.",
         "Do not hardcode secret keys. Load them from environment variables or a secure secret manager."),
        (r"ALLOWED_HOSTS\s*=\s*\[.*['\"]\*['\"].*\]",
         "Insecure Host Policy",
         "ALLOWED_HOSTS allows all hosts.",
         "This makes the app vulnerable to host header attacks.",
         "Restrict ALLOWED_HOSTS to known domains."),
        (r"DEBUG\s*=\s*True",
         "Debug Mode",
         "Debug mode enabled.",
         "Exposes sensitive debug information to attackers.",
         "Disable debug mode in production."),
        (r"SESSION_COOKIE_SECURE\s*=\s*False",
         "Insecure Cookie",
         "SESSION_COOKIE_SECURE disabled.",
         "Cookies can be sent over insecure channels.",
         "Set SESSION_COOKIE_SECURE=True."),
        (r"SESSION_COOKIE_HTTPONLY\s*=\s*False",
         "Insecure Cookie",
         "SESSION_COOKIE_HTTPONLY disabled.",
         "Cookies are accessible via JavaScript, enabling theft through XSS.",
         "Set SESSION_COOKIE_HTTPONLY=True."),
        (r"SESSION_COOKIE_SAMESITE\s*=\s*None",
         "Insecure Cookie",
         "SESSION_COOKIE_SAMESITE not set.",
         "Cookies may be sent with cross-site requests, enabling CSRF.",
         "Set SESSION_COOKIE_SAMESITE='Lax' or 'Strict'."),
        (r"admin\s*[:=]\s*admin",
         "Default Credentials",
         "Default admin:admin credentials present.",
         "Attackers can easily guess these credentials to gain unauthorized access.",
         "Remove default credentials and enforce strong passwords."),
        (r"root\s*[:=]\s*toor",
         "Default Credentials",
         "Default root:toor credentials present.",
         "Attackers can compromise the system using default accounts.",
         "Disable/remove default credentials and enforce secure setup."),
    ]

    for pattern, issue_type, message, explanation, remediation in patterns:
        for match in re.finditer(pattern, code):
            line = code.count("\n", 0, match.start()) + 1
            issues.append({
                "type": f"Security Misconfiguration: {issue_type}",
                "message": message,
                "file": str(file_path),
                "line": line,
                "severity": "High",
                "owasp_category": "A05:2021 – Security Misconfiguration",
                "explanation": explanation,
                "remediation": remediation
            })

    return issues


def scan_file(file_path: Path):
    """Scans a file for security misconfigurations."""
    try:
        code = file_path.read_text(encoding="utf-8")
        issues = []

        # AST scan (for Python files)
        try:
            tree = ast.parse(code, filename=str(file_path))
            scanner = MisconfigurationScanner(file_path)
            scanner.visit(tree)
            issues.extend(scanner.issues)
        except SyntaxError:
            pass  # Non-Python file

        # Regex fallback (for configs / env files)
        issues.extend(regex_fallback(code, file_path))

        return issues

    except Exception as e:
        return [{
            "type": "Scanning Error",
            "message": str(e),
            "line": 0,
            "file": str(file_path),
            "severity": "Low",
            "owasp_category": "N/A",
            "explanation": "Unexpected error occurred during misconfiguration scanning.",
            "remediation": "Check file encoding or scanner compatibility."
        }]
