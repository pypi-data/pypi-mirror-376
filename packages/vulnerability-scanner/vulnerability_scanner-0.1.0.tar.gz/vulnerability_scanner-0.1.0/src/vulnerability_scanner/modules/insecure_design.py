import ast
from pathlib import Path


class InsecureDesignScanner(ast.NodeVisitor):
    def __init__(self, file_path: Path):
        self.file_path = file_path
        self.issues = []

    def add_issue(self, node, issue_type, message, severity="High",
                  explanation=None, remediation=None):
        self.issues.append({
            "type": issue_type,
            "message": message,
            "line": getattr(node, "lineno", 0),
            "file": str(self.file_path),
            "severity": severity,
            "owasp_category": "A04:2021 â€“ Insecure Design",
            "explanation": explanation or "This design pattern may lead to insecure behavior.",
            "remediation": remediation or "Refactor the design to follow secure coding practices and avoid insecure functions."
        })

    def visit_Call(self, node):
        # --- Dangerous builtins ---
        if isinstance(node.func, ast.Name) and node.func.id in {"eval", "exec"}:
            self.add_issue(
                node,
                "Insecure Design: Dangerous Function",
                f"Use of `{node.func.id}()` is insecure and allows arbitrary code execution.",
                severity="Critical",
                explanation=f"`{node.func.id}()` executes strings as code, which attackers can exploit to run arbitrary commands.",
                remediation="Avoid eval/exec. Use safer alternatives (e.g., ast.literal_eval for parsing or explicit function dispatch)."
            )

        if isinstance(node.func, ast.Name) and node.func.id == "compile":
            if node.args and isinstance(node.args[2], ast.Constant):
                mode = node.args[2].value
                if mode in {"exec", "eval"}:
                    self.add_issue(
                        node,
                        "Insecure Design: Dynamic Compilation",
                        f"Use of compile() in '{mode}' mode may allow insecure runtime code execution.",
                        severity="High",
                        explanation="Dynamic compilation of untrusted input can let attackers inject malicious code.",
                        remediation="Do not use compile() with untrusted input. Limit compilation to static, developer-controlled sources."
                    )

        if isinstance(node.func, ast.Name) and node.func.id in {"globals", "locals", "__import__"}:
            self.add_issue(
                node,
                "Insecure Design: Dynamic Environment Access",
                f"Use of `{node.func.id}()` allows dynamic runtime manipulation, which is insecure.",
                severity="Medium",
                explanation=f"`{node.func.id}()` exposes or manipulates runtime internals, which can be abused for privilege escalation.",
                remediation="Avoid these functions in production. Use explicit imports and controlled environments."
            )

        

        # --- Insecure crypto design ---
        if isinstance(node.func, ast.Attribute) and isinstance(node.func.value, ast.Name):
            if node.func.value.id == "hashlib" and node.func.attr in {"md5", "sha1"}:
                self.add_issue(
                    node,
                    "Insecure Design: Weak Hash Function",
                    f"Use of weak hash `{node.func.attr}` detected. Not secure for passwords or sensitive data.",
                    severity="High",
                    explanation=f"Hash functions like {node.func.attr} are vulnerable to collision and brute-force attacks.",
                    remediation="Use strong password hashing (bcrypt, Argon2, PBKDF2) or SHA-256+ for general integrity checks."
                )

        # --- Flask debug mode ---
        if isinstance(node.func, ast.Attribute) and node.func.attr == "run":
            for kw in node.keywords:
                if kw.arg == "debug" and isinstance(kw.value, ast.Constant) and kw.value.value is True:
                    self.add_issue(
                        node,
                        "Insecure Design: Debug Mode",
                        "Flask app started with debug=True, exposes sensitive internals.",
                        severity="Critical",
                        explanation="Flask debug mode enables an interactive debugger, which attackers can exploit to execute code remotely.",
                        remediation="Set debug=False in production. Use proper logging and error monitoring tools instead."
                    )

        # --- JWT verification disabled ---
        if isinstance(node.func, ast.Attribute) and node.func.attr == "decode":
            if isinstance(node.func.value, ast.Name) and node.func.value.id in {"jwt", "JWT"}:
                for kw in node.keywords:
                    if kw.arg in {"verify", "options"} and isinstance(kw.value, ast.Constant) and kw.value.value is False:
                        self.add_issue(
                            node,
                            "Insecure Design: JWT Verification Disabled",
                            "JWT decode called with verify=False or verification disabled.",
                            severity="Critical",
                            explanation="Disabling JWT verification allows attackers to forge tokens and bypass authentication.",
                            remediation="Always enable JWT signature verification. Use libraries with secure defaults and validate algorithms explicitly."
                        )

        self.generic_visit(node)


def scan_file(file_path: Path):
    try:
        code = file_path.read_text(encoding="utf-8")
        tree = ast.parse(code, filename=str(file_path))
        scanner = InsecureDesignScanner(file_path)
        scanner.visit(tree)
        return scanner.issues

    except SyntaxError as e:
        return [{
            "type": "Syntax Error",
            "message": str(e),
            "line": e.lineno,
            "file": str(file_path),
            "severity": "Low",
            "owasp_category": "N/A",
            "explanation": "This file contains invalid Python syntax and could not be parsed.",
            "remediation": "Fix syntax errors before re-running the insecure design scanner."
        }]
    except Exception as e:
        return [{
            "type": "Scanning Error",
            "message": str(e),
            "line": 0,
            "file": str(file_path),
            "severity": "Low",
            "owasp_category": "N/A",
            "explanation": "Unexpected error occurred during insecure design scanning.",
            "remediation": "Check file encoding or scanner compatibility."
        }]
