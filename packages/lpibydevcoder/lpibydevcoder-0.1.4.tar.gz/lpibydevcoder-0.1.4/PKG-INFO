Metadata-Version: 2.4
Name: lpibydevcoder
Version: 0.1.4
Summary: My simple and easy programming language
Home-page: https://github.com/ZeroMurder/My-Programming-Language
Author: DevCooder
Author-email: zerowanlord@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-python
Dynamic: summary

# LpibyDevCooder
#----Autor-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
The developer of this language (library, because it's still in this form), the developer is DevCooder, and I also have a github - https://github.com/ZeroMurder, where there are some interesting projects for those who are interested. I created this language for learning. I want to perfect this language and add not only built-in functions like print and input, but also some cool functions for speed and some functions for developers who want to write long code but with understanding and logic functions.
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
LpibyDevCooder
LpibyDevCooder is a simple interpreted Python programming language designed for learning and experimenting with language technologies. The project implements a basic lexical and syntactic analyzer (parser), an interpreter, and a small set of built-in functions.
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
Main Features
Arithmetic operations: addition and subtraction of numbers.
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
Structure and components
Lexer (tokenizer): splits the source code into lexemes (tokens).
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
Example of code and usage:
python
pr(3 + 5 - 2) # Output: 6
user_input = ind() # Input from the keyboard
pr(user_input) # Output of the entered value
st(1) # Displays a message about connecting the style
pr(sr(456 + 8)) # Displays '464' as a string
Project goals
lpi serves as a learning platform for understanding the fundamental concepts of programming languages, their parsing, interpretation, and extension of functionality. The project is designed for gradual development: adding variables, managing streams, supporting graphical interfaces, and more.

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
Instructions for working with the lpibydevcoder programming language 
#-----------------------------#

Introduction 
lpibydevcoder is a minimalistic programming language for working with basic calculations, input/output, and simple functions. It works as an interpreted language on top of Python, where the source code is parsed and executed through the lexer, parser, and interpreter modules. 
#-----------------------------#

Basic features of the language 
- Arithmetic operations: +, -, *, / 
- Input from the keyboard: ind() function 
- Output to the screen: pr() function 
- Conversion to a string: sr() 
- String literals in double quotes "text" 
- Error handling: ! (TRY_FUNC) operator 
- Connecting styles: st() 
- Defining functions (limited support) 
- Variables and assignment using the = operator 
- Parentheses for grouping expressions 
#-----------------------------#

How to write and execute code 
Example of assignment and working with variables 

x = 10
y = 20
pr(x + y) # Expected output: 30

#------------------------------#
