{"version":3,"file":"lib_index_js.8cb3f62179f6395d61a1.js","mappings":"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","sources":["webpack://jupyterlab-cell-lock/./src/index.ts","webpack://jupyterlab-cell-lock/./src/lockIcon.ts","webpack://jupyterlab-cell-lock/./src/metadata.ts","webpack://jupyterlab-cell-lock/./src/status.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ToolbarButton } from '@jupyterlab/apputils';\nimport { lockIcon, editIcon } from '@jupyterlab/ui-components';\n\nimport { CellLockStatus } from './status';\nimport { applyCellLockIcon, refreshLockIcons } from './lockIcon';\nimport { toggleCellMetadata } from './metadata';\n\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab-cell-lock:plugin',\n  autoStart: true,\n  requires: [INotebookTracker],\n  optional: [IStatusBar],\n  activate: (\n    app: JupyterFrontEnd,\n    tracker: INotebookTracker,\n    statusBar: IStatusBar | null\n  ) => {\n    console.log('jupyterlab-cell-lock extension activated!');\n\n    let statusWidget: CellLockStatus | null = null;\n    if (statusBar) {\n      statusWidget = new CellLockStatus();\n      statusBar.registerStatusItem('cellLockStatus', {\n        item: statusWidget,\n        align: 'middle'\n      });\n    }\n\n    // Define the lock command\n    const lockCommand = 'jupyterlab-cell-lock:lock-cells';\n    app.commands.addCommand(lockCommand, {\n      label: 'Make All Current Cells Read-Only & Undeletable',\n      execute: () => {\n        toggleCellMetadata(false, false, tracker, statusWidget);\n      }\n    });\n\n    // Define the unlock command\n    const unlockCommand = 'jupyterlab-cell-lock:unlock-cells';\n    app.commands.addCommand(unlockCommand, {\n      label: 'Make All Current Cells Editable & Deletable',\n      execute: () => {\n        toggleCellMetadata(true, true, tracker, statusWidget);\n      }\n    });\n\n    tracker.widgetAdded.connect((_, notebookPanel) => {\n      const { content: notebook, context } = notebookPanel;\n\n      const lockButton = new ToolbarButton({\n        label: 'Lock all cells',\n        icon: lockIcon,\n        onClick: () => {\n          app.commands.execute(lockCommand);\n        },\n        tooltip: 'Make all current cells read-only & undeletable'\n      });\n\n      const unlockButton = new ToolbarButton({\n        label: 'Unlock all cells',\n        icon: editIcon,\n        onClick: () => {\n          app.commands.execute(unlockCommand);\n        },\n        tooltip: 'Make all current cells editable & deletable'\n      });\n\n      notebookPanel.toolbar.insertItem(10, 'lockCells', lockButton);\n      notebookPanel.toolbar.insertItem(11, 'unlockCells', unlockButton);\n\n      // Apply icons once the notebook is fully loaded and revealed\n      Promise.all([context.ready, notebookPanel.revealed]).then(() => {\n        console.log('Notebook ready and revealed, refreshing icons');\n        refreshLockIcons(notebookPanel);\n      });\n\n      // Apply icons for new cells\n      notebook.model?.cells.changed.connect((_, change) => {\n        if (change.type === 'add') {\n          change.newValues.forEach((cellModel: any, idx) => {\n            const cellWidget = notebook.widgets[change.newIndex + idx];\n            if (cellWidget) {\n              // Delay slightly to ensure the cell DOM is rendered\n              setTimeout(() => {\n                applyCellLockIcon(cellModel, cellWidget);\n              }, 20);\n            }\n          });\n        }\n      });\n\n      // Refresh on metadata change\n      notebook.widgets.forEach(cellWidget => {\n        cellWidget.model.metadataChanged.connect(() => {\n          applyCellLockIcon(cellWidget.model, cellWidget);\n        });\n      });\n\n      // Refresh on save\n      context.saveState.connect((_, state) => {\n        if (state === 'completed') {\n          console.log('Notebook saved, refreshing icons...');\n          refreshLockIcons(notebookPanel);\n        }\n      });\n    });\n\n    // Refresh when the active cell changes\n    tracker.activeCellChanged.connect(() => {\n      const current = tracker.currentWidget;\n      if (current) {\n        refreshLockIcons(current);\n      }\n    });\n  }\n};\n\nexport default plugin;\n","import { lockIcon } from '@jupyterlab/ui-components';\n\nexport const asBool = (v: unknown) => (typeof v === 'boolean' ? v : true);\n\nexport const applyCellLockIcon = (\n  cellModel: any,\n  cellWidget: any,\n  retryCount = 0\n) => {\n  const editable = asBool(cellModel.getMetadata('editable'));\n  const deletable = asBool(cellModel.getMetadata('deletable'));\n\n  const promptNode = cellWidget.node.querySelector(\n    '.jp-InputPrompt.jp-InputArea-prompt'\n  );\n\n  if (!promptNode) {\n    if (retryCount < 10) {\n      setTimeout(() => {\n        applyCellLockIcon(cellModel, cellWidget, retryCount + 1);\n      }, 10);\n    }\n    return;\n  }\n\n  const existing = promptNode.querySelector('.jp-CellLockIcon');\n  if (existing) {\n    existing.remove();\n  }\n\n  if (!editable || !deletable) {\n    const iconNode = document.createElement('span');\n    iconNode.className = 'jp-CellLockIcon';\n\n    let tooltipMessage = 'This cell is ';\n    const isReadOnly = !editable;\n    const isUndeletable = !deletable;\n\n    if (isReadOnly && isUndeletable) {\n      tooltipMessage += 'read-only and undeletable.';\n    } else if (isReadOnly) {\n      tooltipMessage += 'read-only but can be deleted.';\n    } else if (isUndeletable) {\n      tooltipMessage += 'undeletable but can be edited.';\n    }\n    iconNode.title = tooltipMessage;\n\n    lockIcon.element({\n      container: iconNode,\n      elementPosition: 'left',\n      height: '14px',\n      width: '14px'\n    });\n    promptNode.appendChild(iconNode);\n  }\n};\n\nexport const refreshLockIcons = (notebookPanel: any) => {\n  if (!notebookPanel) {\n    return;\n  }\n  const { content: notebook } = notebookPanel;\n\n  if (notebook.model && notebook.widgets) {\n    console.log('Refreshing lock icons for', notebook.widgets.length, 'cells');\n    requestAnimationFrame(() => {\n      notebook.widgets.forEach((cellWidget: any, i: number) => {\n        const cellModel = notebook.model.cells.get(i);\n        if (cellModel) {\n          applyCellLockIcon(cellModel, cellWidget);\n        }\n      });\n    });\n  }\n};\n","import { INotebookTracker } from '@jupyterlab/notebook';\nimport { applyCellLockIcon, asBool } from './lockIcon';\nimport { CellLockStatus } from './status';\n\nexport const toggleCellMetadata = (\n  editable: boolean,\n  deletable: boolean,\n  tracker: INotebookTracker,\n  statusWidget: CellLockStatus | null\n) => {\n  const current = tracker.currentWidget;\n  if (!current) {\n    console.warn('No active notebook.');\n    return;\n  }\n\n  const notebook = current.content;\n  const cells = notebook.model?.cells;\n  if (!cells) {\n    return;\n  }\n\n  let editedCellCount = 0;\n  let nonEditedCellCount = 0;\n  for (let i = 0; i < cells.length; i++) {\n    const cellModel = cells.get(i);\n    const isEditable = asBool(cellModel.getMetadata('editable'));\n    const isDeletable = asBool(cellModel.getMetadata('deletable'));\n\n    if (isEditable !== editable || isDeletable !== deletable) {\n      cellModel.setMetadata('editable', editable);\n      cellModel.setMetadata('deletable', deletable);\n      const cellWidget = notebook.widgets[i];\n      applyCellLockIcon(cellModel, cellWidget);\n      editedCellCount++;\n    } else {\n      nonEditedCellCount++;\n    }\n  }\n\n  const action = editable ? 'unlocked' : 'locked';\n  let statusMessage = '';\n  if (editedCellCount === 0) {\n    statusMessage = `All cells were already ${action}.`;\n  } else {\n    statusMessage = `${editedCellCount} cell${editedCellCount > 1 ? 's' : ''} ${\n      editedCellCount > 1 ? 'were' : 'was'\n    } successfully ${action}.`;\n    if (nonEditedCellCount > 0) {\n      statusMessage += ` (${nonEditedCellCount} already ${action}).`;\n    }\n  }\n\n  if (statusWidget) {\n    statusWidget.setTemporaryStatus(statusMessage);\n  } else {\n    console.log('[CellLockStatus]', statusMessage);\n  }\n};\n","import { Widget } from '@lumino/widgets';\n\nexport class CellLockStatus extends Widget {\n  private _statusNode: HTMLElement;\n  private _timer: number | null = null;\n\n  constructor() {\n    super();\n    this.addClass('jp-CellLockStatus');\n    this._statusNode = document.createElement('span');\n    this.node.appendChild(this._statusNode);\n    this.node.style.display = 'inline-flex';\n    this.node.style.alignItems = 'center';\n  }\n\n  setTemporaryStatus(summary: string, timeoutMs = 4000) {\n    this._statusNode.innerText = summary;\n    if (this._timer) {\n      window.clearTimeout(this._timer);\n    }\n    this._timer = window.setTimeout(() => {\n      this._statusNode.innerText = '';\n      this._timer = null;\n    }, timeoutMs);\n  }\n}\n"],"names":[],"sourceRoot":""}