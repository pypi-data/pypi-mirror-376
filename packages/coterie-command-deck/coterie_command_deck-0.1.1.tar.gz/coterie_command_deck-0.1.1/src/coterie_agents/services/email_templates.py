"""Email templates for various notifications and summaries."""

from __future__ import annotations

import os
from datetime import datetime
from typing import Any


class EmailTemplate:
    """Base email template class."""

    def __init__(self, template_name: str):
        self.template_name = template_name
        self.timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    def render_subject(self, **kwargs: Any) -> str:
        """Render email subject with template variables."""
        raise NotImplementedError

    def render_body(self, **kwargs: Any) -> str:
        """Render email body with template variables."""
        raise NotImplementedError


class DailySummaryTemplate(EmailTemplate):
    """Template for daily operation summaries."""

    def __init__(self):
        super().__init__("daily_summary")

    def render_subject(self, date: str = "", **kwargs: Any) -> str:
        date = date or datetime.now().strftime("%Y-%m-%d")
        return f"Daily Summary - {date}"

    def render_body(
        self,
        total_jobs: int = 0,
        completed_jobs: int = 0,
        active_crew: int = 0,
        revenue: float = 0.0,
        notes: str = "",
        **kwargs: Any,
    ) -> str:
        completion_rate = (completed_jobs / total_jobs * 100) if total_jobs > 0 else 0

        return f"""
Daily Operations Summary
========================

Date: {datetime.now().strftime("%Y-%m-%d")}
Generated: {self.timestamp}

Performance Metrics:
- Total Jobs: {total_jobs}
- Completed Jobs: {completed_jobs}
- Completion Rate: {completion_rate:.1f}%
- Active Crew Members: {active_crew}
- Revenue: ${revenue:.2f}

{notes}

---
Generated by Coterie Command Deck
Environment: {"PRODUCTION" if os.getenv("COMMS_ENABLED") == "true" else "DRY-RUN"}
""".strip()


class JobNotificationTemplate(EmailTemplate):
    """Template for job status notifications."""

    def __init__(self):
        super().__init__("job_notification")

    def render_subject(self, job_id: str = "", status: str = "", **kwargs: Any) -> str:
        return f"Job {job_id} - {status.title()}"

    def render_body(
        self,
        job_id: str = "",
        status: str = "",
        assignee: str = "",
        location: str = "",
        notes: str = "",
        **kwargs: Any,
    ) -> str:
        return f"""
Job Status Update
=================

Job ID: {job_id}
Status: {status.title()}
Assignee: {assignee}
Location: {location}
Timestamp: {self.timestamp}

Notes:
{notes}

---
Generated by Coterie Command Deck
Environment: {"PRODUCTION" if os.getenv("COMMS_ENABLED") == "true" else "DRY-RUN"}
""".strip()


class CrewAlertTemplate(EmailTemplate):
    """Template for crew alerts and notifications."""

    def __init__(self):
        super().__init__("crew_alert")

    def render_subject(self, alert_type: str = "", **kwargs: Any) -> str:
        return f"Crew Alert - {alert_type.title()}"

    def render_body(
        self,
        alert_type: str = "",
        crew_member: str = "",
        message: str = "",
        priority: str = "normal",
        **kwargs: Any,
    ) -> str:
        priority_indicator = (
            "ðŸ”´" if priority.lower() == "high" else "ðŸŸ¡" if priority.lower() == "medium" else "ðŸŸ¢"
        )

        return f"""
{priority_indicator} Crew Alert - {alert_type.title()}
{"=" * 40}

Crew Member: {crew_member}
Priority: {priority.title()}
Timestamp: {self.timestamp}

Message:
{message}

---
Generated by Coterie Command Deck
Environment: {"PRODUCTION" if os.getenv("COMMS_ENABLED") == "true" else "DRY-RUN"}
""".strip()


# Template registry for easy access
TEMPLATES: dict[str, type[EmailTemplate]] = {
    "daily_summary": DailySummaryTemplate,
    "job_notification": JobNotificationTemplate,
    "crew_alert": CrewAlertTemplate,
}


def get_template(template_name: str) -> EmailTemplate:
    """Get template instance by name."""
    if template_name not in TEMPLATES:
        raise ValueError(f"Unknown template: {template_name}. Available: {list(TEMPLATES.keys())}")

    template_class = TEMPLATES[template_name]
    return template_class()


def render_template(template_name: str, **kwargs: Any) -> tuple[str, str]:
    """Render template and return (subject, body) tuple."""
    template = get_template(template_name)
    subject = template.render_subject(**kwargs)
    body = template.render_body(**kwargs)
    return subject, body
