"""Test email templates and SMTP integration."""

import os
from unittest.mock import patch

from src.coterie_agents.services.email_templates import (
    CrewAlertTemplate,
    DailySummaryTemplate,
    JobNotificationTemplate,
    get_template,
    render_template,
)


class TestEmailTemplates:
    """Test email template rendering and functionality."""

    def test_daily_summary_template(self):
        """Test daily summary template rendering."""
        template = DailySummaryTemplate()

        subject = template.render_subject(date="2025-09-13")
        assert subject == "Daily Summary - 2025-09-13"

        body = template.render_body(
            total_jobs=10,
            completed_jobs=8,
            active_crew=5,
            revenue=1250.50,
            notes="Great day overall!",
        )

        assert "Total Jobs: 10" in body
        assert "Completed Jobs: 8" in body
        assert "Completion Rate: 80.0%" in body
        assert "Active Crew Members: 5" in body
        assert "Revenue: $1250.50" in body
        assert "Great day overall!" in body
        assert "Generated by Coterie Command Deck" in body

    def test_job_notification_template(self):
        """Test job notification template rendering."""
        template = JobNotificationTemplate()

        subject = template.render_subject(job_id="J123", status="completed")
        assert subject == "Job J123 - Completed"

        body = template.render_body(
            job_id="J123",
            status="completed",
            assignee="Alice",
            location="123 Main St",
            notes="All tasks finished on time",
        )

        assert "Job ID: J123" in body
        assert "Status: Completed" in body
        assert "Assignee: Alice" in body
        assert "Location: 123 Main St" in body
        assert "All tasks finished on time" in body

    def test_crew_alert_template(self):
        """Test crew alert template rendering."""
        template = CrewAlertTemplate()

        subject = template.render_subject(alert_type="equipment_issue")
        assert subject == "Crew Alert - Equipment_Issue"

        # Test high priority alert
        body = template.render_body(
            alert_type="equipment_issue",
            crew_member="Bob",
            message="Vacuum cleaner malfunction",
            priority="high",
        )

        assert "ðŸ”´ Crew Alert" in body
        assert "Crew Member: Bob" in body
        assert "Priority: High" in body
        assert "Vacuum cleaner malfunction" in body

    def test_template_registry(self):
        """Test template registry functionality."""
        # Test getting valid templates
        daily_template = get_template("daily_summary")
        assert isinstance(daily_template, DailySummaryTemplate)

        job_template = get_template("job_notification")
        assert isinstance(job_template, JobNotificationTemplate)

        crew_template = get_template("crew_alert")
        assert isinstance(crew_template, CrewAlertTemplate)

        # Test invalid template
        try:
            get_template("nonexistent")
            assert False, "Should have raised ValueError"
        except ValueError as e:
            assert "Unknown template: nonexistent" in str(e)

    def test_render_template_function(self):
        """Test the convenience render_template function."""
        subject, body = render_template(
            "daily_summary",
            total_jobs=5,
            completed_jobs=4,
            active_crew=3,
            revenue=500.00,
        )

        assert "Daily Summary" in subject
        assert "Total Jobs: 5" in body
        assert "Completed Jobs: 4" in body
        assert "Revenue: $500.00" in body

    def test_environment_indicator_dry_run(self):
        """Test that templates show DRY-RUN when COMMS_ENABLED is false."""
        with patch.dict(os.environ, {"COMMS_ENABLED": "false"}, clear=False):
            template = DailySummaryTemplate()
            body = template.render_body()
            assert "Environment: DRY-RUN" in body

    def test_environment_indicator_production(self):
        """Test that templates show PRODUCTION when COMMS_ENABLED is true."""
        with patch.dict(os.environ, {"COMMS_ENABLED": "true"}, clear=False):
            template = DailySummaryTemplate()
            body = template.render_body()
            assert "Environment: PRODUCTION" in body

    def test_template_handles_missing_kwargs(self):
        """Test that templates handle missing optional parameters gracefully."""
        template = DailySummaryTemplate()

        # Should work with minimal parameters
        subject = template.render_subject()
        body = template.render_body()

        assert "Daily Summary" in subject
        assert "Total Jobs: 0" in body
        assert "Completion Rate: 0.0%" in body

    def test_priority_indicators(self):
        """Test priority indicators in crew alert template."""
        template = CrewAlertTemplate()

        # High priority
        body_high = template.render_body(priority="high")
        assert "ðŸ”´" in body_high

        # Medium priority
        body_medium = template.render_body(priority="medium")
        assert "ðŸŸ¡" in body_medium

        # Normal/low priority
        body_normal = template.render_body(priority="normal")
        assert "ðŸŸ¢" in body_normal
