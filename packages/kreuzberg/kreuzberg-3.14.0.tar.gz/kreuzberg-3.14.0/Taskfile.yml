version: "3"

env:
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain

vars:
  DOCKER_DIR: .docker
  DOCKERFILE: "{{.DOCKER_DIR}}/Dockerfile"
  TEST_DIR: tests/e2e
  LOG_DIR: "{{.TEST_DIR}}/logs"

tasks:
  docker:e2e:
    desc: "Build Docker images and run E2E tests"
    deps:
      - docker:build
    cmds:
      - uv run python {{.TEST_DIR}}/docker_e2e_test.py

  docker:build:
    desc: "Build all Docker images for testing"
    deps:
      - docker:build:core
      - docker:build:easyocr
      - docker:build:paddle
      - docker:build:gmft
    cmds:
      - docker images --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}" | grep kreuzberg || true

  docker:build:core:
    desc: "Build core Docker image"
    cmds:
      - docker build -f {{.DOCKERFILE}} --build-arg EXTRAS="" -t kreuzberg:core .
    sources:
      - "{{.DOCKERFILE}}"
      - kreuzberg/**/*.py
      - pyproject.toml

  docker:build:easyocr:
    desc: "Build EasyOCR Docker image"
    cmds:
      - docker build -f {{.DOCKERFILE}} --build-arg EXTRAS="easyocr" -t kreuzberg:easyocr .
    sources:
      - "{{.DOCKERFILE}}"
      - kreuzberg/**/*.py
      - pyproject.toml

  docker:build:paddle:
    desc: "Build PaddleOCR Docker image"
    cmds:
      - docker build -f {{.DOCKERFILE}} --build-arg EXTRAS="paddleocr" -t kreuzberg:paddle .
    sources:
      - "{{.DOCKERFILE}}"
      - kreuzberg/**/*.py
      - pyproject.toml

  docker:build:gmft:
    desc: "Build GMFT Docker image"
    cmds:
      - docker build -f {{.DOCKERFILE}} --build-arg EXTRAS="gmft" -t kreuzberg:gmft .
    sources:
      - "{{.DOCKERFILE}}"
      - kreuzberg/**/*.py
      - pyproject.toml

  docker:test:
    desc: "Run Docker E2E tests (images must be built)"
    cmds:
      - uv run python {{.TEST_DIR}}/docker_e2e_test.py

  docker:clean:
    desc: "Clean up Docker test images and containers"
    cmds:
      - docker ps -aq --filter "name=kreuzberg-test" | xargs -r docker rm -f 2>/dev/null || true
      - docker rmi kreuzberg:core kreuzberg:easyocr kreuzberg:paddle kreuzberg:gmft 2>/dev/null || true
      - docker system prune -f

  docker:logs:
    desc: "Show logs from test containers"
    cmds:
      - docker ps -a --filter "name=kreuzberg-test" --format "table {{.Names}}\t{{.Status}}"
      - for container in $(docker ps -a --filter "name=kreuzberg-test" --format "{{.Names}}"); do echo "=== $container ==="; docker logs --tail 50 "$container" 2>&1 || true; done

  setup:
    desc: "Install dependencies with uv"
    cmds:
      - uv sync --all-extras --all-packages

  update:
    desc: "Update the dependencies"
    cmds:
      - uv run uv-bump
      - cd benchmarks && uv run uv-bump && cd -
      - uv sync --all-extras --all-packages --upgrade
      - pre-commit autoupdate

  test:
    desc: "Run tests with pytest"
    cmds:
      - uv run pytest

  test:cov:
    desc: "Run tests with coverage"
    cmds:
      - uv run pytest --cov

  format:
    desc: "Format code with ruff"
    cmds:
      - uv run ruff format

  lint:
    desc: "Lint code with ruff and docs with markdownlint"
    cmds:
      - uv run ruff check
      - npx markdownlint-cli docs/**/*.md

  lint:fix:
    desc: "Fix linting issues with ruff"
    cmds:
      - uv run ruff check --fix

  typecheck:
    desc: "Type check with mypy"
    cmds:
      - uv run mypy

  docs:build:
    desc: "Build documentation"
    cmds:
      - uv run mkdocs build --clean --strict

  docs:serve:
    desc: "Serve documentation locally"
    cmds:
      - uv run mkdocs serve

  docs:lint:
    desc: "Lint documentation with markdownlint"
    cmds:
      - npx markdownlint-cli docs/**/*.md

  ci:
    desc: "Run full CI pipeline locally"
    deps:
      - format
      - lint
      - typecheck
      - test:cov

  ci:docker:
    desc: "Run Docker CI pipeline"
    deps:
      - docker:build
      - docker:test

  default:
    desc: "Show available tasks"
    cmds:
      - task --list
