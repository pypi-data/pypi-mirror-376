from _typeshed import Incomplete
from collections.abc import Callable as Callable
from typing import Any

class IO[A]:
    args: Incomplete
    kwargs: Incomplete
    def __init__(self, a: A, *args, **kwargs) -> None: ...
    def __call__(self, *args, **kwargs) -> IO[A]: ...
    def collect(self) -> A: ...
    def map(self, effect: Callable[[A], Any]) -> IO[Any]: ...
    def flatmap(self, effect: Callable[[A], IO[Any]]) -> IO[Any]: ...
