#!/usr/bin/env python3
"""
Script to check git status and version information.
This replaces the inline Python scripts used for git status checking.
"""

import subprocess
import sys
from typing import Dict, Any, List


def run_git_command(command: List[str]) -> str:
    """Run a git command and return the output."""
    try:
        result = subprocess.run(
            command, 
            capture_output=True, 
            text=True, 
            check=True
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Error running git command {' '.join(command)}: {e}")
        if e.stderr:
            print(f"Error output: {e.stderr}")
        sys.exit(1)


def get_git_status() -> Dict[str, Any]:
    """Get comprehensive git status information."""
    status = {}
    
    # Basic status
    status['branch'] = run_git_command(['git', 'branch', '--show-current'])
    status['commit'] = run_git_command(['git', 'rev-parse', 'HEAD'])
    status['short_commit'] = run_git_command(['git', 'rev-parse', '--short', 'HEAD'])
    
    # Working directory status
    status['clean'] = run_git_command(['git', 'status', '--porcelain']) == ""
    
    # Tag information
    try:
        status['describe'] = run_git_command(['git', 'describe', '--tags', '--long', '--dirty'])
    except subprocess.CalledProcessError:
        status['describe'] = "No tags found"
    
    # Recent commits
    status['recent_commits'] = run_git_command(['git', 'log', '--oneline', '-5']).split('\n')
    
    # Remote information
    try:
        status['remote_url'] = run_git_command(['git', 'remote', 'get-url', 'origin'])
    except subprocess.CalledProcessError:
        status['remote_url'] = "No remote origin"
    
    return status


def print_git_status(status: Dict[str, Any]) -> None:
    """Print git status information in a readable format."""
    print("🌿 Git Status Information")
    print("=" * 50)
    print(f"Branch: {status['branch']}")
    print(f"Commit: {status['commit']} ({status['short_commit']})")
    print(f"Describe: {status['describe']}")
    print(f"Working directory clean: {'✅ Yes' if status['clean'] else '❌ No'}")
    print(f"Remote URL: {status['remote_url']}")
    print()
    
    print("📝 Recent commits:")
    for commit in status['recent_commits']:
        print(f"  {commit}")
    print()


def check_version_file_status() -> None:
    """Check the status of the _version.py file."""
    print("📄 Version File Status")
    print("=" * 50)
    
    version_file = "src/skdr_eval/_version.py"
    
    # Check if file exists
    import os
    if os.path.exists(version_file):
        print(f"❌ {version_file} exists (should be generated by setuptools-scm)")
        print("   This file should not be committed to version control")
    else:
        print(f"✅ {version_file} does not exist (correct - will be generated)")
    
    # Check if file is ignored
    try:
        result = subprocess.run(
            ['git', 'check-ignore', version_file], 
            capture_output=True, 
            text=True
        )
        if result.returncode == 0:
            print(f"✅ {version_file} is properly ignored by git")
        else:
            print(f"❌ {version_file} is not ignored by git")
    except subprocess.CalledProcessError:
        print(f"❓ Could not check git ignore status for {version_file}")
    
    print()


def main():
    """Main function."""
    print("🔍 Git Status and Version Check")
    print("=" * 50)
    print()
    
    # Get git status
    status = get_git_status()
    print_git_status(status)
    
    # Check version file
    check_version_file_status()
    
    # Summary
    if status['clean']:
        print("🎉 Git working directory is clean!")
    else:
        print("⚠️  Git working directory has uncommitted changes")
        print("   Run 'git status' to see details")


if __name__ == "__main__":
    main()