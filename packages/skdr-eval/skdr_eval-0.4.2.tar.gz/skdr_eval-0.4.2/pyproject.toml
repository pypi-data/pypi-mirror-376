[build-system]
requires = ["setuptools>=64", "setuptools_scm>=8", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "skdr-eval"
dynamic = ["version"]
description = "Offline policy evaluation for service-time minimization using DR and Stabilized DR"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Diogo Santos", email = "diogofcul@gmail.com"}
]
keywords = ["offline evaluation", "doubly robust", "bandits", "causal"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.9"
dependencies = [
    "numpy",
    "pandas",
    "scikit-learn>=1.1",
]

[project.optional-dependencies]
choice = [
    "scipy>=1.9",
]
speed = [
    "pyarrow>=14",
    "polars>=0.20",
]
dev = [
    "pytest",
    "pytest-cov",
    "coverage",
    "mypy",
    "ruff",
    "black",
    "build",
    "twine",
    "pre-commit",
]
examples = [
    "jupyter",
    "matplotlib",
]

[project.urls]
Homepage = "https://github.com/dandrsantos/skdr-eval"
Repository = "https://github.com/dandrsantos/skdr-eval"
Issues = "https://github.com/dandrsantos/skdr-eval/issues"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]
write_to = "src/skdr_eval/_version.py"
tag_regex = "^v(?P<version>[^\\+]+)(?:\\+.*)?$"
fallback_version = "0.0.0"
# Use "dirty-tag" to append '.dirty' to the version when the working directory has uncommitted changes,
# making it clear when a build is not from a clean state.
local_scheme = "dirty-tag"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=skdr_eval",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ["py39"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
