# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: secret/emergencybutton/v1beta1/genesis.proto, secret/emergencybutton/v1beta1/params.proto, secret/emergencybutton/v1beta1/query.proto, secret/emergencybutton/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the ibc-rate-limit module."""

    switch_status: str = betterproto.string_field(1)
    pauser_address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MsgToggleIbcSwitch(betterproto.Message):
    """
    MsgToggleIbcSwitch represents a message to toggle the emergencybutton
    status by the defined pauser.
    """

    sender: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MsgToggleIbcSwitchResponse(betterproto.Message):
    """MsgToggleIbcSwitchResponse defines the response type for the toggle."""

    pass


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto.Message):
    authority: str = betterproto.string_field(1)
    """authority is the address of the governance account."""

    params: "Params" = betterproto.message_field(2)
    """
    params defines the x/emergencybutton parameters to update. NOTE: All
    parameters must be supplied.
    """


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ParamsRequest(betterproto.Message):
    """ParamsRequest is the request type for the Query/Params RPC method."""

    pass


@dataclass(eq=False, repr=False)
class ParamsResponse(betterproto.Message):
    """ParamsResponse is the response type for the Query/Params RPC method."""

    params: "Params" = betterproto.message_field(1)
    """params defines the parameters of the module."""


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState - genesis state of x/wasm"""

    params: "Params" = betterproto.message_field(1)


class MsgStub(betterproto.ServiceStub):
    async def toggle_ibc_switch(
        self,
        msg_toggle_ibc_switch: "MsgToggleIbcSwitch",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgToggleIbcSwitchResponse":
        return await self._unary_unary(
            "/secret.emergencybutton.v1beta1.Msg/ToggleIbcSwitch",
            msg_toggle_ibc_switch,
            MsgToggleIbcSwitchResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_params(
        self,
        msg_update_params: "MsgUpdateParams",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateParamsResponse":
        return await self._unary_unary(
            "/secret.emergencybutton.v1beta1.Msg/UpdateParams",
            msg_update_params,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        params_request: "ParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ParamsResponse":
        return await self._unary_unary(
            "/secret.emergencybutton.v1beta1.Query/Params",
            params_request,
            ParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):

    async def toggle_ibc_switch(
        self, msg_toggle_ibc_switch: "MsgToggleIbcSwitch"
    ) -> "MsgToggleIbcSwitchResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_params(
        self, msg_update_params: "MsgUpdateParams"
    ) -> "MsgUpdateParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_toggle_ibc_switch(
        self,
        stream: "grpclib.server.Stream[MsgToggleIbcSwitch, MsgToggleIbcSwitchResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.toggle_ibc_switch(request)
        await stream.send_message(response)

    async def __rpc_update_params(
        self, stream: "grpclib.server.Stream[MsgUpdateParams, MsgUpdateParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_params(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/secret.emergencybutton.v1beta1.Msg/ToggleIbcSwitch": grpclib.const.Handler(
                self.__rpc_toggle_ibc_switch,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgToggleIbcSwitch,
                MsgToggleIbcSwitchResponse,
            ),
            "/secret.emergencybutton.v1beta1.Msg/UpdateParams": grpclib.const.Handler(
                self.__rpc_update_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateParams,
                MsgUpdateParamsResponse,
            ),
        }


class QueryBase(ServiceBase):

    async def params(self, params_request: "ParamsRequest") -> "ParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[ParamsRequest, ParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/secret.emergencybutton.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                ParamsRequest,
                ParamsResponse,
            ),
        }
