"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import ni.measurements.metadata.v1.metadata_store_service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class MetadataStoreServiceStub:
    """This service is responsible for storing and retrieving metadata associated with test step measurements."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetUutInstance: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetUutInstanceRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetUutInstanceResponse,
    ]
    """Gets the UUT instance associated with the identifier given in the request."""

    QueryUutInstances: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryUutInstancesRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryUutInstancesResponse,
    ]
    """Perform an OData query"""

    CreateUutInstance: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateUutInstanceRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateUutInstanceResponse,
    ]
    """Creates a new UUT instance in the metadata store."""

    GetUut: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetUutRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetUutResponse,
    ]
    """Gets the UUT associated with the identifier given in the request."""

    QueryUuts: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryUutsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryUutsResponse,
    ]
    """Perform an OData query"""

    CreateUut: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateUutRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateUutResponse,
    ]
    """Creates a new UUT in the metadata store."""

    GetOperator: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetOperatorRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetOperatorResponse,
    ]
    """Gets the operator associated with the identifier given in the request."""

    QueryOperators: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryOperatorsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryOperatorsResponse,
    ]
    """Perform an OData query"""

    CreateOperator: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateOperatorRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateOperatorResponse,
    ]
    """Creates a new operator in the metadata store."""

    GetTestDescription: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestDescriptionRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestDescriptionResponse,
    ]
    """Gets the test description associated with the identifier given in the request."""

    QueryTestDescriptions: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestDescriptionsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestDescriptionsResponse,
    ]
    """Perform an OData query"""

    CreateTestDescription: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestDescriptionRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestDescriptionResponse,
    ]
    """Creates a new test description in the metadata store."""

    GetTest: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestResponse,
    ]
    """Gets the test associated with the identifier given in the request."""

    QueryTests: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestsResponse,
    ]
    """Perform an OData query"""

    CreateTest: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestResponse,
    ]
    """Creates a new test in the metadata store."""

    GetTestStation: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestStationRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestStationResponse,
    ]
    """Gets the test station associated with the identifier given in the request."""

    QueryTestStations: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestStationsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestStationsResponse,
    ]
    """Perform an OData query"""

    CreateTestStation: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestStationRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestStationResponse,
    ]
    """Creates a new test station in the metadata store."""

    GetHardwareItem: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetHardwareItemRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetHardwareItemResponse,
    ]
    """Gets the hardware item associated with the identifier given in the request."""

    QueryHardwareItems: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryHardwareItemsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryHardwareItemsResponse,
    ]
    """Perform an OData query"""

    CreateHardwareItem: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateHardwareItemRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateHardwareItemResponse,
    ]
    """Creates a new hardware item in the metadata store."""

    GetSoftwareItem: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetSoftwareItemRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetSoftwareItemResponse,
    ]
    """Gets the software item associated with the identifier given in the request."""

    QuerySoftwareItems: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QuerySoftwareItemsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QuerySoftwareItemsResponse,
    ]
    """Perform an OData query"""

    CreateSoftwareItem: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateSoftwareItemRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateSoftwareItemResponse,
    ]
    """Creates a new software item in the metadata store."""

    GetTestAdapter: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestAdapterRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestAdapterResponse,
    ]
    """Gets the test adapter associated with the identifier given in the request."""

    QueryTestAdapters: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestAdaptersRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestAdaptersResponse,
    ]
    """Perform an OData query"""

    CreateTestAdapter: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestAdapterRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestAdapterResponse,
    ]
    """Creates a new test adapter in the metadata store."""

    RegisterSchema: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterSchemaRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterSchemaResponse,
    ]
    """Registers a schema. Once a schema has been published, it cannot be modified or removed."""

    ListSchemas: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.ListSchemasRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.ListSchemasResponse,
    ]
    """Lists the schemas that have been previously registered"""

    GetAlias: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetAliasRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetAliasResponse,
    ]
    """Gets the alias and its target (i.e., the underlying metadata that it represents)"""

    QueryAliases: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryAliasesRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryAliasesResponse,
    ]
    """Perform an OData query on the registered aliases"""

    CreateAlias: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateAliasRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateAliasResponse,
    ]
    """Creates (registers) an alias of the specified metadata for use/reference when creating other metadata or publishing.
    Notes:
    - The specified metadata must have already been created prior to the alias registration.
    - This method may be called with an already registered alias name in order to update the target mapped for that existing alias.
    """

    DeleteAlias: grpc.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.DeleteAliasRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.DeleteAliasResponse,
    ]
    """Removes a registered alias"""

class MetadataStoreServiceAsyncStub:
    """This service is responsible for storing and retrieving metadata associated with test step measurements."""

    GetUutInstance: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetUutInstanceRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetUutInstanceResponse,
    ]
    """Gets the UUT instance associated with the identifier given in the request."""

    QueryUutInstances: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryUutInstancesRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryUutInstancesResponse,
    ]
    """Perform an OData query"""

    CreateUutInstance: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateUutInstanceRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateUutInstanceResponse,
    ]
    """Creates a new UUT instance in the metadata store."""

    GetUut: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetUutRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetUutResponse,
    ]
    """Gets the UUT associated with the identifier given in the request."""

    QueryUuts: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryUutsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryUutsResponse,
    ]
    """Perform an OData query"""

    CreateUut: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateUutRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateUutResponse,
    ]
    """Creates a new UUT in the metadata store."""

    GetOperator: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetOperatorRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetOperatorResponse,
    ]
    """Gets the operator associated with the identifier given in the request."""

    QueryOperators: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryOperatorsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryOperatorsResponse,
    ]
    """Perform an OData query"""

    CreateOperator: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateOperatorRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateOperatorResponse,
    ]
    """Creates a new operator in the metadata store."""

    GetTestDescription: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestDescriptionRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestDescriptionResponse,
    ]
    """Gets the test description associated with the identifier given in the request."""

    QueryTestDescriptions: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestDescriptionsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestDescriptionsResponse,
    ]
    """Perform an OData query"""

    CreateTestDescription: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestDescriptionRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestDescriptionResponse,
    ]
    """Creates a new test description in the metadata store."""

    GetTest: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestResponse,
    ]
    """Gets the test associated with the identifier given in the request."""

    QueryTests: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestsResponse,
    ]
    """Perform an OData query"""

    CreateTest: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestResponse,
    ]
    """Creates a new test in the metadata store."""

    GetTestStation: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestStationRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestStationResponse,
    ]
    """Gets the test station associated with the identifier given in the request."""

    QueryTestStations: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestStationsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestStationsResponse,
    ]
    """Perform an OData query"""

    CreateTestStation: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestStationRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestStationResponse,
    ]
    """Creates a new test station in the metadata store."""

    GetHardwareItem: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetHardwareItemRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetHardwareItemResponse,
    ]
    """Gets the hardware item associated with the identifier given in the request."""

    QueryHardwareItems: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryHardwareItemsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryHardwareItemsResponse,
    ]
    """Perform an OData query"""

    CreateHardwareItem: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateHardwareItemRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateHardwareItemResponse,
    ]
    """Creates a new hardware item in the metadata store."""

    GetSoftwareItem: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetSoftwareItemRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetSoftwareItemResponse,
    ]
    """Gets the software item associated with the identifier given in the request."""

    QuerySoftwareItems: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QuerySoftwareItemsRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QuerySoftwareItemsResponse,
    ]
    """Perform an OData query"""

    CreateSoftwareItem: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateSoftwareItemRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateSoftwareItemResponse,
    ]
    """Creates a new software item in the metadata store."""

    GetTestAdapter: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestAdapterRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestAdapterResponse,
    ]
    """Gets the test adapter associated with the identifier given in the request."""

    QueryTestAdapters: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestAdaptersRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestAdaptersResponse,
    ]
    """Perform an OData query"""

    CreateTestAdapter: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestAdapterRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestAdapterResponse,
    ]
    """Creates a new test adapter in the metadata store."""

    RegisterSchema: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterSchemaRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterSchemaResponse,
    ]
    """Registers a schema. Once a schema has been published, it cannot be modified or removed."""

    ListSchemas: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.ListSchemasRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.ListSchemasResponse,
    ]
    """Lists the schemas that have been previously registered"""

    GetAlias: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetAliasRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.GetAliasResponse,
    ]
    """Gets the alias and its target (i.e., the underlying metadata that it represents)"""

    QueryAliases: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryAliasesRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.QueryAliasesResponse,
    ]
    """Perform an OData query on the registered aliases"""

    CreateAlias: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateAliasRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.CreateAliasResponse,
    ]
    """Creates (registers) an alias of the specified metadata for use/reference when creating other metadata or publishing.
    Notes:
    - The specified metadata must have already been created prior to the alias registration.
    - This method may be called with an already registered alias name in order to update the target mapped for that existing alias.
    """

    DeleteAlias: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.metadata.v1.metadata_store_service_pb2.DeleteAliasRequest,
        ni.measurements.metadata.v1.metadata_store_service_pb2.DeleteAliasResponse,
    ]
    """Removes a registered alias"""

class MetadataStoreServiceServicer(metaclass=abc.ABCMeta):
    """This service is responsible for storing and retrieving metadata associated with test step measurements."""

    @abc.abstractmethod
    def GetUutInstance(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.GetUutInstanceRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.GetUutInstanceResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.GetUutInstanceResponse]]:
        """Gets the UUT instance associated with the identifier given in the request."""

    @abc.abstractmethod
    def QueryUutInstances(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QueryUutInstancesRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryUutInstancesResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryUutInstancesResponse]]:
        """Perform an OData query"""

    @abc.abstractmethod
    def CreateUutInstance(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.CreateUutInstanceRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateUutInstanceResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateUutInstanceResponse]]:
        """Creates a new UUT instance in the metadata store."""

    @abc.abstractmethod
    def GetUut(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.GetUutRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.GetUutResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.GetUutResponse]]:
        """Gets the UUT associated with the identifier given in the request."""

    @abc.abstractmethod
    def QueryUuts(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QueryUutsRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryUutsResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryUutsResponse]]:
        """Perform an OData query"""

    @abc.abstractmethod
    def CreateUut(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.CreateUutRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateUutResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateUutResponse]]:
        """Creates a new UUT in the metadata store."""

    @abc.abstractmethod
    def GetOperator(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.GetOperatorRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.GetOperatorResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.GetOperatorResponse]]:
        """Gets the operator associated with the identifier given in the request."""

    @abc.abstractmethod
    def QueryOperators(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QueryOperatorsRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryOperatorsResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryOperatorsResponse]]:
        """Perform an OData query"""

    @abc.abstractmethod
    def CreateOperator(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.CreateOperatorRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateOperatorResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateOperatorResponse]]:
        """Creates a new operator in the metadata store."""

    @abc.abstractmethod
    def GetTestDescription(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestDescriptionRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestDescriptionResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestDescriptionResponse]]:
        """Gets the test description associated with the identifier given in the request."""

    @abc.abstractmethod
    def QueryTestDescriptions(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestDescriptionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestDescriptionsResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestDescriptionsResponse]]:
        """Perform an OData query"""

    @abc.abstractmethod
    def CreateTestDescription(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestDescriptionRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestDescriptionResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestDescriptionResponse]]:
        """Creates a new test description in the metadata store."""

    @abc.abstractmethod
    def GetTest(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestResponse]]:
        """Gets the test associated with the identifier given in the request."""

    @abc.abstractmethod
    def QueryTests(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestsRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestsResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestsResponse]]:
        """Perform an OData query"""

    @abc.abstractmethod
    def CreateTest(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestResponse]]:
        """Creates a new test in the metadata store."""

    @abc.abstractmethod
    def GetTestStation(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestStationRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestStationResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestStationResponse]]:
        """Gets the test station associated with the identifier given in the request."""

    @abc.abstractmethod
    def QueryTestStations(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestStationsRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestStationsResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestStationsResponse]]:
        """Perform an OData query"""

    @abc.abstractmethod
    def CreateTestStation(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestStationRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestStationResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestStationResponse]]:
        """Creates a new test station in the metadata store."""

    @abc.abstractmethod
    def GetHardwareItem(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.GetHardwareItemRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.GetHardwareItemResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.GetHardwareItemResponse]]:
        """Gets the hardware item associated with the identifier given in the request."""

    @abc.abstractmethod
    def QueryHardwareItems(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QueryHardwareItemsRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryHardwareItemsResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryHardwareItemsResponse]]:
        """Perform an OData query"""

    @abc.abstractmethod
    def CreateHardwareItem(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.CreateHardwareItemRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateHardwareItemResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateHardwareItemResponse]]:
        """Creates a new hardware item in the metadata store."""

    @abc.abstractmethod
    def GetSoftwareItem(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.GetSoftwareItemRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.GetSoftwareItemResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.GetSoftwareItemResponse]]:
        """Gets the software item associated with the identifier given in the request."""

    @abc.abstractmethod
    def QuerySoftwareItems(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QuerySoftwareItemsRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QuerySoftwareItemsResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QuerySoftwareItemsResponse]]:
        """Perform an OData query"""

    @abc.abstractmethod
    def CreateSoftwareItem(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.CreateSoftwareItemRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateSoftwareItemResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateSoftwareItemResponse]]:
        """Creates a new software item in the metadata store."""

    @abc.abstractmethod
    def GetTestAdapter(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestAdapterRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestAdapterResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.GetTestAdapterResponse]]:
        """Gets the test adapter associated with the identifier given in the request."""

    @abc.abstractmethod
    def QueryTestAdapters(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestAdaptersRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestAdaptersResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryTestAdaptersResponse]]:
        """Perform an OData query"""

    @abc.abstractmethod
    def CreateTestAdapter(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestAdapterRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestAdapterResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateTestAdapterResponse]]:
        """Creates a new test adapter in the metadata store."""

    @abc.abstractmethod
    def RegisterSchema(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterSchemaRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterSchemaResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.RegisterSchemaResponse]]:
        """Registers a schema. Once a schema has been published, it cannot be modified or removed."""

    @abc.abstractmethod
    def ListSchemas(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.ListSchemasRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.ListSchemasResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.ListSchemasResponse]]:
        """Lists the schemas that have been previously registered"""

    @abc.abstractmethod
    def GetAlias(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.GetAliasRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.GetAliasResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.GetAliasResponse]]:
        """Gets the alias and its target (i.e., the underlying metadata that it represents)"""

    @abc.abstractmethod
    def QueryAliases(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.QueryAliasesRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryAliasesResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.QueryAliasesResponse]]:
        """Perform an OData query on the registered aliases"""

    @abc.abstractmethod
    def CreateAlias(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.CreateAliasRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateAliasResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.CreateAliasResponse]]:
        """Creates (registers) an alias of the specified metadata for use/reference when creating other metadata or publishing.
        Notes:
        - The specified metadata must have already been created prior to the alias registration.
        - This method may be called with an already registered alias name in order to update the target mapped for that existing alias.
        """

    @abc.abstractmethod
    def DeleteAlias(
        self,
        request: ni.measurements.metadata.v1.metadata_store_service_pb2.DeleteAliasRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.metadata.v1.metadata_store_service_pb2.DeleteAliasResponse, collections.abc.Awaitable[ni.measurements.metadata.v1.metadata_store_service_pb2.DeleteAliasResponse]]:
        """Removes a registered alias"""

def add_MetadataStoreServiceServicer_to_server(servicer: MetadataStoreServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
