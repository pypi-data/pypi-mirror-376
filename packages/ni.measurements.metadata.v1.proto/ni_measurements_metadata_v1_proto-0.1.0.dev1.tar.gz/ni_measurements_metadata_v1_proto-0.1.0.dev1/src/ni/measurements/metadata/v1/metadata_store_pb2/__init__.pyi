"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _AliasTargetType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _AliasTargetTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_AliasTargetType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ALIAS_TARGET_TYPE_UNSPECIFIED: _AliasTargetType.ValueType  # 0
    ALIAS_TARGET_TYPE_UUT_INSTANCE: _AliasTargetType.ValueType  # 1
    ALIAS_TARGET_TYPE_UUT: _AliasTargetType.ValueType  # 2
    ALIAS_TARGET_TYPE_HARDWARE_ITEM: _AliasTargetType.ValueType  # 3
    ALIAS_TARGET_TYPE_SOFTWARE_ITEM: _AliasTargetType.ValueType  # 4
    ALIAS_TARGET_TYPE_OPERATOR: _AliasTargetType.ValueType  # 5
    ALIAS_TARGET_TYPE_TEST_DESCRIPTION: _AliasTargetType.ValueType  # 6
    ALIAS_TARGET_TYPE_TEST: _AliasTargetType.ValueType  # 7
    ALIAS_TARGET_TYPE_TEST_STATION: _AliasTargetType.ValueType  # 8
    ALIAS_TARGET_TYPE_TEST_ADAPTER: _AliasTargetType.ValueType  # 9

class AliasTargetType(_AliasTargetType, metaclass=_AliasTargetTypeEnumTypeWrapper):
    """The type of the aliased metadata instance."""

ALIAS_TARGET_TYPE_UNSPECIFIED: AliasTargetType.ValueType  # 0
ALIAS_TARGET_TYPE_UUT_INSTANCE: AliasTargetType.ValueType  # 1
ALIAS_TARGET_TYPE_UUT: AliasTargetType.ValueType  # 2
ALIAS_TARGET_TYPE_HARDWARE_ITEM: AliasTargetType.ValueType  # 3
ALIAS_TARGET_TYPE_SOFTWARE_ITEM: AliasTargetType.ValueType  # 4
ALIAS_TARGET_TYPE_OPERATOR: AliasTargetType.ValueType  # 5
ALIAS_TARGET_TYPE_TEST_DESCRIPTION: AliasTargetType.ValueType  # 6
ALIAS_TARGET_TYPE_TEST: AliasTargetType.ValueType  # 7
ALIAS_TARGET_TYPE_TEST_STATION: AliasTargetType.ValueType  # 8
ALIAS_TARGET_TYPE_TEST_ADAPTER: AliasTargetType.ValueType  # 9
global___AliasTargetType = AliasTargetType

@typing.final
class UutInstance(google.protobuf.message.Message):
    """Represents the metadata of a UUT instance"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ExtensionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___ExtensionValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___ExtensionValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    UUT_ID_FIELD_NUMBER: builtins.int
    SERIAL_NUMBER_FIELD_NUMBER: builtins.int
    MANUFACTURE_DATE_FIELD_NUMBER: builtins.int
    FIRMWARE_VERSION_FIELD_NUMBER: builtins.int
    HARDWARE_VERSION_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    EXTENSIONS_FIELD_NUMBER: builtins.int
    SCHEMA_ID_FIELD_NUMBER: builtins.int
    uut_id: builtins.str
    """The id of the UUT associated with this UUT instance.
    This value is expected to be a parsable GUID or an alias. It will always
    be returned from the service as a GUID.
    See ni.measurements.metadata.MetadataStoreService for more information.
    """
    serial_number: builtins.str
    """The serial number of the UUT instance"""
    manufacture_date: builtins.str
    """The date the UUT instance was manufactured"""
    firmware_version: builtins.str
    """Version of the firmware on the UUT instance"""
    hardware_version: builtins.str
    """Hardware version of the UUT instance"""
    link: builtins.str
    """A link to a resource that describes the UUT instance.
    This value is expected to be a valid URI.
    """
    schema_id: builtins.str
    """The unique identifier of the schema that applies to this instance's extension.
    If any extension is associated with this instance, a schema_id must be provided, unless
    the UUT instance is created within the context of a test result, in which case
    the test result must have a schema_id.
    """
    @property
    def extensions(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___ExtensionValue]:
        """Any extensions to be associated with the UUT instance"""

    def __init__(
        self,
        *,
        uut_id: builtins.str = ...,
        serial_number: builtins.str = ...,
        manufacture_date: builtins.str = ...,
        firmware_version: builtins.str = ...,
        hardware_version: builtins.str = ...,
        link: builtins.str = ...,
        extensions: collections.abc.Mapping[builtins.str, global___ExtensionValue] | None = ...,
        schema_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["extensions", b"extensions", "firmware_version", b"firmware_version", "hardware_version", b"hardware_version", "link", b"link", "manufacture_date", b"manufacture_date", "schema_id", b"schema_id", "serial_number", b"serial_number", "uut_id", b"uut_id"]) -> None: ...

global___UutInstance = UutInstance

@typing.final
class Uut(google.protobuf.message.Message):
    """Represents the metadata of a UUT"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ExtensionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___ExtensionValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___ExtensionValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    MODEL_NAME_FIELD_NUMBER: builtins.int
    FAMILY_FIELD_NUMBER: builtins.int
    MANUFACTURERS_FIELD_NUMBER: builtins.int
    PART_NUMBER_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    EXTENSIONS_FIELD_NUMBER: builtins.int
    SCHEMA_ID_FIELD_NUMBER: builtins.int
    model_name: builtins.str
    """The name of the UUT model"""
    family: builtins.str
    """The UUT family"""
    part_number: builtins.str
    """The part number of the UUT"""
    link: builtins.str
    """A link to a resource that describes the UUT.
    This value is expected to be a valid URI.
    """
    schema_id: builtins.str
    """The unique identifier of the schema that applies to this instance's extension.
    If any extension is associated with this instance, a schema_id must be provided, unless
    the UUT is created within the context of a test result, in which case
    the test result must have a schema_id.
    """
    @property
    def manufacturers(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """List of manufacturers of the UUT"""

    @property
    def extensions(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___ExtensionValue]:
        """Any extensions to be associated with the UUT"""

    def __init__(
        self,
        *,
        model_name: builtins.str = ...,
        family: builtins.str = ...,
        manufacturers: collections.abc.Iterable[builtins.str] | None = ...,
        part_number: builtins.str = ...,
        link: builtins.str = ...,
        extensions: collections.abc.Mapping[builtins.str, global___ExtensionValue] | None = ...,
        schema_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["extensions", b"extensions", "family", b"family", "link", b"link", "manufacturers", b"manufacturers", "model_name", b"model_name", "part_number", b"part_number", "schema_id", b"schema_id"]) -> None: ...

global___Uut = Uut

@typing.final
class HardwareItem(google.protobuf.message.Message):
    """Represents the metadata of the hardware item used to take given measurements."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ExtensionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___ExtensionValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___ExtensionValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    MANUFACTURER_FIELD_NUMBER: builtins.int
    MODEL_FIELD_NUMBER: builtins.int
    SERIAL_NUMBER_FIELD_NUMBER: builtins.int
    PART_NUMBER_FIELD_NUMBER: builtins.int
    ASSET_IDENTIFIER_FIELD_NUMBER: builtins.int
    CALIBRATION_DUE_DATE_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    EXTENSIONS_FIELD_NUMBER: builtins.int
    SCHEMA_ID_FIELD_NUMBER: builtins.int
    manufacturer: builtins.str
    """The manufacturer or vendor of the hardware item"""
    model: builtins.str
    """The name of the hardware item"""
    serial_number: builtins.str
    """The serial number of the hardware item"""
    part_number: builtins.str
    """The part number of the hardware item"""
    asset_identifier: builtins.str
    """The asset identifier for tracking and inventory purposes"""
    calibration_due_date: builtins.str
    """The date when calibration is due for the hardware item"""
    link: builtins.str
    """A link to a resource that describes the hardware item.
    This value is expected to be a valid URI.
    """
    schema_id: builtins.str
    """The unique identifier of the schema that applies to this instance's extension.
    If any extension is associated with this instance, a schema_id must be provided, unless
    the hardware item is created within the context of a test result, in which case
    the test result must have a schema_id.
    """
    @property
    def extensions(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___ExtensionValue]:
        """Any extensions to be associated with the hardware item"""

    def __init__(
        self,
        *,
        manufacturer: builtins.str = ...,
        model: builtins.str = ...,
        serial_number: builtins.str = ...,
        part_number: builtins.str = ...,
        asset_identifier: builtins.str = ...,
        calibration_due_date: builtins.str = ...,
        link: builtins.str = ...,
        extensions: collections.abc.Mapping[builtins.str, global___ExtensionValue] | None = ...,
        schema_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["asset_identifier", b"asset_identifier", "calibration_due_date", b"calibration_due_date", "extensions", b"extensions", "link", b"link", "manufacturer", b"manufacturer", "model", b"model", "part_number", b"part_number", "schema_id", b"schema_id", "serial_number", b"serial_number"]) -> None: ...

global___HardwareItem = HardwareItem

@typing.final
class SoftwareItem(google.protobuf.message.Message):
    """Represents the metadata of the software item that was used to take measurements."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ExtensionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___ExtensionValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___ExtensionValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    PRODUCT_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    EXTENSIONS_FIELD_NUMBER: builtins.int
    SCHEMA_ID_FIELD_NUMBER: builtins.int
    product: builtins.str
    """This value should only contain letters, numbers, spaces, hyphens,
    underscores, parentheses, periods and spaces. It must begin and
    end with a letter or number.
    Expected format: ^[\\w\\(\\)-]([\\w.\\(\\) -]*[\\w\\(\\)-])?$
    An empty value is also permitted.
    """
    version: builtins.str
    """The version of the software item"""
    link: builtins.str
    """A link to a resource that describes the software item.
    This value is expected to be a valid URI.
    """
    schema_id: builtins.str
    """The unique identifier of the schema that applies to this instance's extension.
    If any extension is associated with this instance, a schema_id must be provided, unless
    the software item is created within the context of a test result, in which case
    the test result must have a schema_id.
    """
    @property
    def extensions(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___ExtensionValue]:
        """Any extensions to be associated with the software item"""

    def __init__(
        self,
        *,
        product: builtins.str = ...,
        version: builtins.str = ...,
        link: builtins.str = ...,
        extensions: collections.abc.Mapping[builtins.str, global___ExtensionValue] | None = ...,
        schema_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["extensions", b"extensions", "link", b"link", "product", b"product", "schema_id", b"schema_id", "version", b"version"]) -> None: ...

global___SoftwareItem = SoftwareItem

@typing.final
class Operator(google.protobuf.message.Message):
    """Represents the metadata of the operator that took the test step."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ExtensionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___ExtensionValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___ExtensionValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    OPERATOR_NAME_FIELD_NUMBER: builtins.int
    ROLE_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    EXTENSIONS_FIELD_NUMBER: builtins.int
    SCHEMA_ID_FIELD_NUMBER: builtins.int
    operator_name: builtins.str
    """The name of the operator"""
    role: builtins.str
    """The role of the operator"""
    link: builtins.str
    """A link to a resource that describes the operator.
    This value is expected to be a valid URI.
    """
    schema_id: builtins.str
    """The unique identifier of the schema that applies to this instance's extension.
    If any extension is associated with this instance, a schema_id must be provided, unless
    the operator is created within the context of a test result, in which case
    the test result must have a schema_id.
    """
    @property
    def extensions(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___ExtensionValue]:
        """Any extensions to be associated with the operator"""

    def __init__(
        self,
        *,
        operator_name: builtins.str = ...,
        role: builtins.str = ...,
        link: builtins.str = ...,
        extensions: collections.abc.Mapping[builtins.str, global___ExtensionValue] | None = ...,
        schema_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["extensions", b"extensions", "link", b"link", "operator_name", b"operator_name", "role", b"role", "schema_id", b"schema_id"]) -> None: ...

global___Operator = Operator

@typing.final
class TestDescription(google.protobuf.message.Message):
    """Represents the metadata of a test description"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ExtensionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___ExtensionValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___ExtensionValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    UUT_ID_FIELD_NUMBER: builtins.int
    TEST_DESCRIPTION_NAME_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    EXTENSIONS_FIELD_NUMBER: builtins.int
    SCHEMA_ID_FIELD_NUMBER: builtins.int
    uut_id: builtins.str
    """The id of the UUT this test is designed for"""
    test_description_name: builtins.str
    """The name of the test description"""
    link: builtins.str
    """A link to a resource that describes the test description.
    This value is expected to be a valid URI.
    """
    schema_id: builtins.str
    """The unique identifier of the schema that applies to this instance's extension.
    If any extension is associated with this instance, a schema_id must be provided, unless
    the test description is created within the context of a test result, in which case
    the test result must have a schema_id.
    """
    @property
    def extensions(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___ExtensionValue]:
        """Any extensions to be associated with the test description"""

    def __init__(
        self,
        *,
        uut_id: builtins.str = ...,
        test_description_name: builtins.str = ...,
        link: builtins.str = ...,
        extensions: collections.abc.Mapping[builtins.str, global___ExtensionValue] | None = ...,
        schema_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["extensions", b"extensions", "link", b"link", "schema_id", b"schema_id", "test_description_name", b"test_description_name", "uut_id", b"uut_id"]) -> None: ...

global___TestDescription = TestDescription

@typing.final
class Test(google.protobuf.message.Message):
    """Represents the metadata of a test"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ExtensionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___ExtensionValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___ExtensionValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    TEST_NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    EXTENSIONS_FIELD_NUMBER: builtins.int
    SCHEMA_ID_FIELD_NUMBER: builtins.int
    test_name: builtins.str
    """The name of the test"""
    description: builtins.str
    """Explanation of what the test does"""
    link: builtins.str
    """A link to a resource that describes the test.
    This value is expected to be a valid URI.
    """
    schema_id: builtins.str
    """The unique identifier of the schema that applies to this instance's extension.
    If any extension is associated with this instance, a schema_id must be provided, unless
    the test is created within the context of a test result, in which case
    the test result must have a schema_id.
    """
    @property
    def extensions(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___ExtensionValue]:
        """Any extensions to be associated with the test"""

    def __init__(
        self,
        *,
        test_name: builtins.str = ...,
        description: builtins.str = ...,
        link: builtins.str = ...,
        extensions: collections.abc.Mapping[builtins.str, global___ExtensionValue] | None = ...,
        schema_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["description", b"description", "extensions", b"extensions", "link", b"link", "schema_id", b"schema_id", "test_name", b"test_name"]) -> None: ...

global___Test = Test

@typing.final
class TestStation(google.protobuf.message.Message):
    """Represents the metadata of a test station"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ExtensionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___ExtensionValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___ExtensionValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    TEST_STATION_NAME_FIELD_NUMBER: builtins.int
    ASSET_IDENTIFIER_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    EXTENSIONS_FIELD_NUMBER: builtins.int
    SCHEMA_ID_FIELD_NUMBER: builtins.int
    test_station_name: builtins.str
    """The name of the test station"""
    asset_identifier: builtins.str
    """The asset identifier for tracking and inventory purposes"""
    link: builtins.str
    """A link to a resource that describes the test station.
    This value is expected to be a valid URI.
    """
    schema_id: builtins.str
    """The unique identifier of the schema that applies to this instance's extension.
    If any extension is associated with this instance, a schema_id must be provided, unless
    the test station is created within the context of a test result, in which case
    the test result must have a schema_id.
    """
    @property
    def extensions(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___ExtensionValue]:
        """Any extensions to be associated with the test station"""

    def __init__(
        self,
        *,
        test_station_name: builtins.str = ...,
        asset_identifier: builtins.str = ...,
        link: builtins.str = ...,
        extensions: collections.abc.Mapping[builtins.str, global___ExtensionValue] | None = ...,
        schema_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["asset_identifier", b"asset_identifier", "extensions", b"extensions", "link", b"link", "schema_id", b"schema_id", "test_station_name", b"test_station_name"]) -> None: ...

global___TestStation = TestStation

@typing.final
class TestAdapter(google.protobuf.message.Message):
    """Represents a test adapter or mechanical setup used to hold, connect, or interface the UUT with the test system."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ExtensionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___ExtensionValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___ExtensionValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    TEST_ADAPTER_NAME_FIELD_NUMBER: builtins.int
    MANUFACTURER_FIELD_NUMBER: builtins.int
    MODEL_FIELD_NUMBER: builtins.int
    SERIAL_NUMBER_FIELD_NUMBER: builtins.int
    PART_NUMBER_FIELD_NUMBER: builtins.int
    ASSET_IDENTIFIER_FIELD_NUMBER: builtins.int
    CALIBRATION_DUE_DATE_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    EXTENSIONS_FIELD_NUMBER: builtins.int
    SCHEMA_ID_FIELD_NUMBER: builtins.int
    test_adapter_name: builtins.str
    """The name or label for the adapter"""
    manufacturer: builtins.str
    """The manufacturer or vendor of the adapter"""
    model: builtins.str
    """The model number or name of the adapter"""
    serial_number: builtins.str
    """The serial number of the adapter"""
    part_number: builtins.str
    """The part number of the adapter"""
    asset_identifier: builtins.str
    """The asset identifier for tracking and inventory purposes"""
    calibration_due_date: builtins.str
    """The date when calibration is due for the adapter"""
    link: builtins.str
    """A link to a resource that describes the test adapter.
    This value is expected to be a valid URI.
    """
    schema_id: builtins.str
    """The unique identifier of the schema that applies to this instance's extension.
    If any extension is associated with this instance, a schema_id must be provided, unless
    the test adapter is created within the context of a test result, in which case
    the test result must have a schema_id.
    """
    @property
    def extensions(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___ExtensionValue]:
        """Any extensions to be associated with the test adapter"""

    def __init__(
        self,
        *,
        test_adapter_name: builtins.str = ...,
        manufacturer: builtins.str = ...,
        model: builtins.str = ...,
        serial_number: builtins.str = ...,
        part_number: builtins.str = ...,
        asset_identifier: builtins.str = ...,
        calibration_due_date: builtins.str = ...,
        link: builtins.str = ...,
        extensions: collections.abc.Mapping[builtins.str, global___ExtensionValue] | None = ...,
        schema_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["asset_identifier", b"asset_identifier", "calibration_due_date", b"calibration_due_date", "extensions", b"extensions", "link", b"link", "manufacturer", b"manufacturer", "model", b"model", "part_number", b"part_number", "schema_id", b"schema_id", "serial_number", b"serial_number", "test_adapter_name", b"test_adapter_name"]) -> None: ...

global___TestAdapter = TestAdapter

@typing.final
class ExtensionValue(google.protobuf.message.Message):
    """Represents the value of an extension field.
    Currently, only string values are supported.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STRING_VALUE_FIELD_NUMBER: builtins.int
    string_value: builtins.str
    """The string value of the extension field."""
    def __init__(
        self,
        *,
        string_value: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["metadata", b"metadata", "string_value", b"string_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["metadata", b"metadata", "string_value", b"string_value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["metadata", b"metadata"]) -> typing.Literal["string_value"] | None: ...

global___ExtensionValue = ExtensionValue

@typing.final
class ExtensionSchema(google.protobuf.message.Message):
    """A message that represents an extension schema stored on this system."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SCHEMA_ID_FIELD_NUMBER: builtins.int
    SCHEMA_FIELD_NUMBER: builtins.int
    schema_id: builtins.str
    """The id of the schema."""
    schema: builtins.str
    """The schema itself."""
    def __init__(
        self,
        *,
        schema_id: builtins.str = ...,
        schema: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["schema", b"schema", "schema_id", b"schema_id"]) -> None: ...

global___ExtensionSchema = ExtensionSchema

@typing.final
class Alias(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ALIAS_NAME_FIELD_NUMBER: builtins.int
    TARGET_TYPE_FIELD_NUMBER: builtins.int
    TARGET_ID_FIELD_NUMBER: builtins.int
    alias_name: builtins.str
    """The registered alias name for the aliased metadata instance."""
    target_type: global___AliasTargetType.ValueType
    """The type of the aliased metadata instance."""
    target_id: builtins.str
    """The unique identifier for the aliased metadata instance."""
    def __init__(
        self,
        *,
        alias_name: builtins.str = ...,
        target_type: global___AliasTargetType.ValueType = ...,
        target_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["alias_name", b"alias_name", "target_id", b"target_id", "target_type", b"target_type"]) -> None: ...

global___Alias = Alias
