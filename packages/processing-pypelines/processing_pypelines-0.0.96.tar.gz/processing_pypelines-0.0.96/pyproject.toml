[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"

[project]
name = "processing-pypelines"
dependencies = [
    "coloredlogs>=15.0.1",
    "dynaconf>=3.2.4",
    "natsort>=8.4.0",
    "networkx>=3.1",
    "numpy",
    "matplotlib",
    "pandas>=2.1.4",
]
authors = [
    { name = "Timothé Jost-Mousseau", email = "timothe.jost-mousseau@pasteur.fr" },
]
maintainers = [
    { name = "Timothé Jost-Mousseau", email = "timothe.jost-mousseau@pasteur.fr" },
]
description = "Framework to organize processing code outputs to/from disk, processing chaining and versionning with a common easy to use api"
readme = "README.md"
requires-python = ">=3.10"
dynamic = []
version = "0.0.96"

[project.license]
text = "MIT"

[project.urls]
homepage = "https://gitlab.pasteur.fr/haisslab/data-management/pypelines"
repository = "https://gitlab.pasteur.fr/haisslab/data-management/pypelines"
documentation = "https://gitlab.pasteur.fr/haisslab/data-management/pypelines"

[project.optional-dependencies]
celery = [
    "celery>=5.3.5",
    "alyx_connector>=2.1.5",
]
docs = [
    "mkdocs-material>=9.6.14",
    "mkdocs-plugin-inline-svg>=0.1.0",
]

[tool.pdm.dev-dependencies]
dev = [
    "pytest>=8.3.2",
    "pytest-cov>=5.0.0",
]

[tool.pdm.version]
source = "file"
path = "src/pypelines/__init__.py"

[tool.pytest.ini_options]
addopts = "--pdbcls=IPython.terminal.debugger:TerminalPdb --cov-report xml --cov=pypelines --junitxml=pytest_results.xml --cov-config=pyproject.toml"
testpaths = [
    "tests",
]

[tool.coverage.run]
omit = [
    ".vscode/*",
    ".tests/*",
]

[tool.black]
preview = true
line-length = 120

[tool.flake8]
max-line-length = 120
ignore = [
    "F401",
    "F403",
    "F841",
    "E401",
    "E265",
    "E704",
    "E266",
    "E203",
    "E712",
    "W503",
    "W605",
]

[tool.pyright]
reportGeneralTypeIssues = "information"
reportOptionalMemberAccess = "information"
reportMissingImports = "information"
reportMissingModuleSource = "information"
reportInvalidStringEscapeSequence = "information"
reportOptionalOperand = "none"
reportOptionalSubscript = "none"
reportOptionalIterable = "none"
reportAttributeAccessIssue = "information"
typeCheckingMode = "basic"
include = [
    "src",
    "tests",
]
exclude = [
    "**/__pycache__",
]
