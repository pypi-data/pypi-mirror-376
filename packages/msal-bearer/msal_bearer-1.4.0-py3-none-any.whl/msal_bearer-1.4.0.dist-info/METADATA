Metadata-Version: 2.3
Name: msal-bearer
Version: 1.4.0
Summary: Python package to get auth token interactively for a public client application using msal and msal-extension for caching.
License: MIT
Author: Åsmund Våge Fannemel
Author-email: asmf@equinor.com
Requires-Python: >=3.9.2,<4.0.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Dist: azure-identity (>=1.24.0,<2.0.0)
Requires-Dist: cryptography (>=43.0.3)
Requires-Dist: msal (>=1.33.0,<2.0.0)
Requires-Dist: msal-extensions (>=1.3.1,<2.0.0)
Project-URL: Repository, https://github.com/Equinor/msal-bearer
Description-Content-Type: text/markdown

# msal-bearer [![SNYK dependency check](https://github.com/equinor/msal-bearer/actions/workflows/snyk.yml/badge.svg)](https://github.com/equinor/msal-bearer/actions/workflows/snyk.yml)
Python package to get authorization token interactively for a msal public client application supporting local cache and refreshing the token.

## Usage


````
from msal_bearer import BearerAuth

tenantID = "YOUR_TENANT_ID"
client_id = "YOUR_CLIENT_ID"
scope = ["YOUR_SCOPE"]

auth = BearerAuth.get_auth(
    tenantID=tenantID,
    clientID=client_id,
    scopes=scope
)

# Supports requests
response = requests.get("https://www.example.com/", auth=auth)

# and httpx
client = httpx.Client()
response = client.get("https://www.example.com/", auth=auth)

````


## Installing
Clone and install using poetry or install from pypi using pip. 

````
pip install msal_bearer
````


## Alternatives
Other similar packages include https://pypi.org/project/msal-requests-auth/ (for confidential client applications) and https://pypi.org/project/msal-interactive-token-acquirer/ (no caching implemented).


