"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .langcacheerror import LangCacheError
from typing import TYPE_CHECKING
from importlib import import_module
import builtins
import sys

if TYPE_CHECKING:
    from .apierror import APIError
    from .authenticationerrorresponsecontent import (
        AuthenticationErrorResponseContent,
        AuthenticationErrorResponseContentData,
    )
    from .badrequesterrorresponsecontent import (
        BadRequestErrorResponseContent,
        BadRequestErrorResponseContentData,
    )
    from .forbiddenerrorresponsecontent import (
        ForbiddenErrorResponseContent,
        ForbiddenErrorResponseContentData,
    )
    from .no_response_error import NoResponseError
    from .notfounderrorresponsecontent import (
        NotFoundErrorResponseContent,
        NotFoundErrorResponseContentData,
    )
    from .payloadtoolargeerrorresponsecontent import (
        PayloadTooLargeErrorResponseContent,
        PayloadTooLargeErrorResponseContentData,
    )
    from .resourceunavailableerrorresponsecontent import (
        ResourceUnavailableErrorResponseContent,
        ResourceUnavailableErrorResponseContentData,
    )
    from .responsevalidationerror import ResponseValidationError
    from .toomanyrequestserrorresponsecontent import (
        TooManyRequestsErrorResponseContent,
        TooManyRequestsErrorResponseContentData,
    )
    from .unexpectederrorresponsecontent import (
        UnexpectedErrorResponseContent,
        UnexpectedErrorResponseContentData,
    )

__all__ = [
    "APIError",
    "AuthenticationErrorResponseContent",
    "AuthenticationErrorResponseContentData",
    "BadRequestErrorResponseContent",
    "BadRequestErrorResponseContentData",
    "ForbiddenErrorResponseContent",
    "ForbiddenErrorResponseContentData",
    "LangCacheError",
    "NoResponseError",
    "NotFoundErrorResponseContent",
    "NotFoundErrorResponseContentData",
    "PayloadTooLargeErrorResponseContent",
    "PayloadTooLargeErrorResponseContentData",
    "ResourceUnavailableErrorResponseContent",
    "ResourceUnavailableErrorResponseContentData",
    "ResponseValidationError",
    "TooManyRequestsErrorResponseContent",
    "TooManyRequestsErrorResponseContentData",
    "UnexpectedErrorResponseContent",
    "UnexpectedErrorResponseContentData",
]

_dynamic_imports: dict[str, str] = {
    "APIError": ".apierror",
    "AuthenticationErrorResponseContent": ".authenticationerrorresponsecontent",
    "AuthenticationErrorResponseContentData": ".authenticationerrorresponsecontent",
    "BadRequestErrorResponseContent": ".badrequesterrorresponsecontent",
    "BadRequestErrorResponseContentData": ".badrequesterrorresponsecontent",
    "ForbiddenErrorResponseContent": ".forbiddenerrorresponsecontent",
    "ForbiddenErrorResponseContentData": ".forbiddenerrorresponsecontent",
    "NoResponseError": ".no_response_error",
    "NotFoundErrorResponseContent": ".notfounderrorresponsecontent",
    "NotFoundErrorResponseContentData": ".notfounderrorresponsecontent",
    "PayloadTooLargeErrorResponseContent": ".payloadtoolargeerrorresponsecontent",
    "PayloadTooLargeErrorResponseContentData": ".payloadtoolargeerrorresponsecontent",
    "ResourceUnavailableErrorResponseContent": ".resourceunavailableerrorresponsecontent",
    "ResourceUnavailableErrorResponseContentData": ".resourceunavailableerrorresponsecontent",
    "ResponseValidationError": ".responsevalidationerror",
    "TooManyRequestsErrorResponseContent": ".toomanyrequestserrorresponsecontent",
    "TooManyRequestsErrorResponseContentData": ".toomanyrequestserrorresponsecontent",
    "UnexpectedErrorResponseContent": ".unexpectederrorresponsecontent",
    "UnexpectedErrorResponseContentData": ".unexpectederrorresponsecontent",
}


def dynamic_import(modname, retries=3):
    for attempt in range(retries):
        try:
            return import_module(modname, __package__)
        except KeyError:
            # Clear any half-initialized module and retry
            sys.modules.pop(modname, None)
            if attempt == retries - 1:
                break
    raise KeyError(f"Failed to import module '{modname}' after {retries} attempts")


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = dynamic_import(module_name)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = builtins.list(_dynamic_imports.keys())
    return builtins.sorted(lazy_attrs)
