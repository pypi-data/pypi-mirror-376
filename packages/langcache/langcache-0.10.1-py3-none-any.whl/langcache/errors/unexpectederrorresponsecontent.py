"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from dataclasses import dataclass, field
import httpx
from langcache.errors import LangCacheError
from langcache.models import unexpectederroruri as models_unexpectederroruri
from langcache.types import BaseModel
from typing import Optional


class UnexpectedErrorResponseContentData(BaseModel):
    title: str
    r"""A short, human-readable summary of the problem
    type.  It SHOULD NOT change from occurrence to occurrence of the
    problem, except for purposes of localization (e.g., using
    proactive content negotiation; see [RFC7231], Section 3.4).
    """

    type: models_unexpectederroruri.UnexpectedErrorURI

    status: Optional[int] = 500
    r"""The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem."""

    detail: Optional[str] = None
    r"""A human-readable explanation specific to this occurrence of the problem."""

    instance: Optional[str] = None
    r"""A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced."""


@dataclass(frozen=True)
class UnexpectedErrorResponseContent(LangCacheError):
    data: UnexpectedErrorResponseContentData = field(hash=False)

    def __init__(
        self,
        data: UnexpectedErrorResponseContentData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        object.__setattr__(self, "data", data)
