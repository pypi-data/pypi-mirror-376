"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from typing import TYPE_CHECKING
from importlib import import_module
import builtins
import sys

if TYPE_CHECKING:
    from .authenticationerroruri import AuthenticationErrorURI
    from .badrequesterroruri import BadRequestErrorURI
    from .cacheentry import CacheEntry, CacheEntryTypedDict
    from .deletebyidop import (
        DeleteByIDGlobals,
        DeleteByIDGlobalsTypedDict,
        DeleteByIDRequest,
        DeleteByIDRequestTypedDict,
    )
    from .deletequeryop import DeleteQueryGlobals, DeleteQueryGlobalsTypedDict
    from .deletequeryrequest import DeleteQueryRequest, DeleteQueryRequestTypedDict
    from .deletequeryresponse import DeleteQueryResponse, DeleteQueryResponseTypedDict
    from .fielderror import FieldError, FieldErrorTypedDict
    from .forbiddenerroruri import ForbiddenErrorURI
    from .notfounderroruri import NotFoundErrorURI
    from .payloadtoolargeerroruri import PayloadTooLargeErrorURI
    from .resourceunavailableerroruri import ResourceUnavailableErrorURI
    from .searchop import SearchGlobals, SearchGlobalsTypedDict
    from .searchrequest import SearchRequest, SearchRequestTypedDict
    from .searchresponse import SearchResponse, SearchResponseTypedDict
    from .searchstrategy import SearchStrategy
    from .security import Security, SecurityTypedDict
    from .setop import SetGlobals, SetGlobalsTypedDict
    from .setrequest import SetRequest, SetRequestTypedDict
    from .setresponse import SetResponse, SetResponseTypedDict
    from .toomanyrequestserroruri import TooManyRequestsErrorURI
    from .unexpectederroruri import UnexpectedErrorURI

__all__ = [
    "AuthenticationErrorURI",
    "BadRequestErrorURI",
    "CacheEntry",
    "CacheEntryTypedDict",
    "DeleteByIDGlobals",
    "DeleteByIDGlobalsTypedDict",
    "DeleteByIDRequest",
    "DeleteByIDRequestTypedDict",
    "DeleteQueryGlobals",
    "DeleteQueryGlobalsTypedDict",
    "DeleteQueryRequest",
    "DeleteQueryRequestTypedDict",
    "DeleteQueryResponse",
    "DeleteQueryResponseTypedDict",
    "FieldError",
    "FieldErrorTypedDict",
    "ForbiddenErrorURI",
    "NotFoundErrorURI",
    "PayloadTooLargeErrorURI",
    "ResourceUnavailableErrorURI",
    "SearchGlobals",
    "SearchGlobalsTypedDict",
    "SearchRequest",
    "SearchRequestTypedDict",
    "SearchResponse",
    "SearchResponseTypedDict",
    "SearchStrategy",
    "Security",
    "SecurityTypedDict",
    "SetGlobals",
    "SetGlobalsTypedDict",
    "SetRequest",
    "SetRequestTypedDict",
    "SetResponse",
    "SetResponseTypedDict",
    "TooManyRequestsErrorURI",
    "UnexpectedErrorURI",
]

_dynamic_imports: dict[str, str] = {
    "AuthenticationErrorURI": ".authenticationerroruri",
    "BadRequestErrorURI": ".badrequesterroruri",
    "CacheEntry": ".cacheentry",
    "CacheEntryTypedDict": ".cacheentry",
    "DeleteByIDGlobals": ".deletebyidop",
    "DeleteByIDGlobalsTypedDict": ".deletebyidop",
    "DeleteByIDRequest": ".deletebyidop",
    "DeleteByIDRequestTypedDict": ".deletebyidop",
    "DeleteQueryGlobals": ".deletequeryop",
    "DeleteQueryGlobalsTypedDict": ".deletequeryop",
    "DeleteQueryRequest": ".deletequeryrequest",
    "DeleteQueryRequestTypedDict": ".deletequeryrequest",
    "DeleteQueryResponse": ".deletequeryresponse",
    "DeleteQueryResponseTypedDict": ".deletequeryresponse",
    "FieldError": ".fielderror",
    "FieldErrorTypedDict": ".fielderror",
    "ForbiddenErrorURI": ".forbiddenerroruri",
    "NotFoundErrorURI": ".notfounderroruri",
    "PayloadTooLargeErrorURI": ".payloadtoolargeerroruri",
    "ResourceUnavailableErrorURI": ".resourceunavailableerroruri",
    "SearchGlobals": ".searchop",
    "SearchGlobalsTypedDict": ".searchop",
    "SearchRequest": ".searchrequest",
    "SearchRequestTypedDict": ".searchrequest",
    "SearchResponse": ".searchresponse",
    "SearchResponseTypedDict": ".searchresponse",
    "SearchStrategy": ".searchstrategy",
    "Security": ".security",
    "SecurityTypedDict": ".security",
    "SetGlobals": ".setop",
    "SetGlobalsTypedDict": ".setop",
    "SetRequest": ".setrequest",
    "SetRequestTypedDict": ".setrequest",
    "SetResponse": ".setresponse",
    "SetResponseTypedDict": ".setresponse",
    "TooManyRequestsErrorURI": ".toomanyrequestserroruri",
    "UnexpectedErrorURI": ".unexpectederroruri",
}


def dynamic_import(modname, retries=3):
    for attempt in range(retries):
        try:
            return import_module(modname, __package__)
        except KeyError:
            # Clear any half-initialized module and retry
            sys.modules.pop(modname, None)
            if attempt == retries - 1:
                break
    raise KeyError(f"Failed to import module '{modname}' after {retries} attempts")


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = dynamic_import(module_name)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = builtins.list(_dynamic_imports.keys())
    return builtins.sorted(lazy_attrs)
