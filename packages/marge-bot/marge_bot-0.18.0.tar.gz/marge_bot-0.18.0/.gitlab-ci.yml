default:
  interruptible: true

include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'
  - project: 'renovate-bot/renovate-runner'
    file: '/templates/renovate-config-validator.gitlab-ci.yml'

variables:
  PY_COLORS: 1

# We enforce semi-linear history. Some jobs only need to run on MRs.
.rules-merge-request:
  rules:
    - if: $CI_MERGE_REQUEST_ID

.rules-main:
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

.test:
  script:
    - uv sync --only-group dev
    - uv run tox -e py3
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+%)/'
  artifacts:
    paths:
      - htmlcov/
    reports:
      junit: test.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

test:
  extends:
    - .rules-merge-request
    - .test
  image: ghcr.io/astral-sh/uv:0.8.17-python${PYTHON_VERSION}-bookworm
  parallel:
    matrix:
      - PYTHON_VERSION:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"

coverage:
  extends:
    - .rules-main
    - .test
  image: ghcr.io/astral-sh/uv:0.8.17-python3.13-trixie

lint:
  extends: .rules-merge-request
  image: ghcr.io/astral-sh/uv:0.8.17-python3.13-trixie
  script:
    - uv sync --only-group dev
    - uv run tox -e commitizen
    - uv run tox -e flake8,mypy,pylint
    - uv run tox -e black,isort -- --check

helm-test:
  variables:
    GIT_DEPTH: 0
  image: quay.io/helmpack/chart-testing:v3.13.0
  script:
    - ct lint --charts contrib/helm/marge-bot --target-branch $CI_DEFAULT_BRANCH  --validate-maintainers=false
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
      changes:
        - contrib/helm/**/*

.docker-build:
  image: quay.io/buildah/stable:v1.41.4
  variables:
    STORAGE_DRIVER: vfs
    BUILDAH_FORMAT: docker
  tags:
    - $RUNNER_TAG
  parallel:
    matrix:
      - RUNNER_TAG: saas-linux-medium-amd64
        OS_ARCH: linux/amd64
      - RUNNER_TAG: saas-linux-medium-arm64
        OS_ARCH: linux/arm64

docker-build-mr:
  extends: .docker-build
  script:
    - buildah build
  rules:
    - if: '$CI_MERGE_REQUEST_ID'
      changes:
        paths:
          - marge/
          - .gitlab-ci.yml
          - Dockerfile
          - uv.lock
          - pyproject.toml

docker-build:
  extends: .docker-build
  before_script:
    - buildah login --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - buildah build -t $CI_REGISTRY_IMAGE/$OS_ARCH:$CI_COMMIT_REF_NAME
    - buildah push $CI_REGISTRY_IMAGE/$OS_ARCH:$CI_COMMIT_REF_NAME
  rules:
    - if: '$CI_COMMIT_BRANCH || $CI_COMMIT_TAG'

docker-build-multiarch:
  needs:
    - docker-build
  image:
    name: mplatform/manifest-tool:alpine-v2.2.0
    entrypoint: [""]
  script:
    - manifest-tool --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD push from-args
      --platforms linux/amd64,linux/arm64
      --template $CI_REGISTRY_IMAGE/OS/ARCH:$CI_COMMIT_REF_NAME
      --target $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  rules:
    - if: '$CI_COMMIT_BRANCH || $CI_COMMIT_TAG'

docker-promote:
  needs:
    - docker-build-multiarch
  image:
    name: quay.io/skopeo/stable:v1.20.0
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  script:
    - skopeo login --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - skopeo copy docker://$CI_REGISTRY_IMAGE/linux/amd64:$CI_COMMIT_TAG docker://$CI_REGISTRY_IMAGE/linux/amd64:latest
    - skopeo copy docker://$CI_REGISTRY_IMAGE/linux/arm64:$CI_COMMIT_TAG docker://$CI_REGISTRY_IMAGE/linux/arm64:latest
    - skopeo copy docker://$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG docker://$CI_REGISTRY_IMAGE:latest
  rules:
    - if: '$CI_COMMIT_TAG'

pages-preview:
  extends: .rules-merge-request
  image: ghcr.io/astral-sh/uv:0.8.17-python3.13-trixie-slim
  script:
    - uv sync --only-group docs
    - uv run mkdocs --color build --strict ${CI_MERGE_REQUEST_IID+--no-directory-urls}
  artifacts:
    paths:
      - site/
  environment:
    name: preview/${CI_MERGE_REQUEST_PROJECT_PATH}/${CI_MERGE_REQUEST_IID}
    url: https://${CI_PROJECT_NAMESPACE}.${CI_PAGES_DOMAIN}/-/${CI_PROJECT_NAME}/-/jobs/${CI_JOB_ID}/artifacts/site/index.html

pages:
  extends:
    - pages-preview
    - .rules-main
  publish: site
  environment:
    name: pages
    url: $CI_PAGES_URL

release:
  image: node:lts
  needs:
    - docker-build-multiarch
  interruptible: false
  variables:
    GIT_AUTHOR_NAME: $GITLAB_USER_NAME
    GIT_AUTHOR_EMAIL: $GITLAB_USER_EMAIL
    GIT_COMMITTER_NAME: $GITLAB_USER_NAME
    GIT_COMMITTER_EMAIL: $GITLAB_USER_EMAIL
    GITLAB_HOST: $CI_SERVER_URL
    GITLAB_TOKEN: $RELEASE_GITLAB_TOKEN
  before_script:
    - yarn --frozen-lockfile
  script:
    - yarn semantic-release
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      allow_failure: false
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
      allow_failure: true # don't block main pipeline status

publish:
  image: ghcr.io/astral-sh/uv:0.8.17-python3.13-trixie
  id_tokens:
    PYPI_ID_TOKEN:
      aud: pypi
    SIGSTORE_ID_TOKEN:
      aud: sigstore
  before_script:
    - apt update && apt install -y jq
    - uv sync --group release
  script:
    # Build & sign
    - uv build
    - uv run -m pypi_attestations sign dist/*
    # Exchange token
    - OIDC_TOKEN=$(uv run -m id pypi)
    - RESPONSE=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\":\"${OIDC_TOKEN}\"}")
    - API_TOKEN=$(jq --raw-output '.token' <<< "${RESPONSE}")
    # Publish
    - uv run twine upload --verbose --attestations -u __token__ -p "${API_TOKEN}" dist/*
  artifacts:
    paths:
      - dist/
  rules:
    - if: '$CI_COMMIT_TAG'
  environment:
    name: release
    url: https://pypi.org/project/marge-bot
