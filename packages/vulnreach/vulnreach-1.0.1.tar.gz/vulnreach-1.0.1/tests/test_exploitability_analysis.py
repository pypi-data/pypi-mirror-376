#!/usr/bin/env python3
"""
Test script for exploitability analysis functionality
"""

import sys
import os
import json
from pathlib import Path

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent / "src"))

from vulnreach.utils.exploitability_analyzer import ExploitabilityAnalyzer


def test_exploitability_analyzer():
    """Test the ExploitabilityAnalyzer functionality"""
    
    print("🧪 Testing ExploitabilityAnalyzer...")
    
    # Initialize analyzer
    analyzer = ExploitabilityAnalyzer()
    
    # Check prerequisites
    prereqs = analyzer.check_prerequisites()
    print(f"\n📋 Prerequisites check:")
    print(f"   SearchSploit available: {prereqs['searchsploit_available']}")
    print(f"   SearchSploit path: {prereqs.get('searchsploit_path', 'N/A')}")
    print(f"   ExploitDB available: {prereqs['exploit_db_available']}")
    print(f"   ExploitDB path: {prereqs.get('exploit_db_path', 'N/A')}")
    
    # Sample vulnerability data for testing
    sample_vulnerabilities = [
        {
            'vulnerability_id': 'CVE-2021-44228',  # Log4j vulnerability
            'pkg_name': 'log4j-core',
            'pkg_version': '2.14.1',
            'severity': 'CRITICAL',
            'cvss_score': 10.0
        },
        {
            'vulnerability_id': 'CVE-2022-22965',  # Spring4Shell
            'pkg_name': 'spring-beans',
            'pkg_version': '5.3.17',
            'severity': 'CRITICAL',
            'cvss_score': 9.8
        },
        {
            'vulnerability_id': 'CVE-2017-5638',   # Struts2
            'pkg_name': 'struts2-core',
            'pkg_version': '2.3.32',
            'severity': 'CRITICAL',
            'cvss_score': 10.0
        },
        {
            'vulnerability_id': 'CVE-2019-0708',   # BlueKeep
            'pkg_name': 'rdp-service',
            'pkg_version': '1.0',
            'severity': 'CRITICAL',
            'cvss_score': 9.8
        },
        {
            'vulnerability_id': 'CVE-2023-99999',  # Non-existent CVE for testing
            'pkg_name': 'fake-package',
            'pkg_version': '1.0.0',
            'severity': 'HIGH',
            'cvss_score': 8.5
        }
    ]
    
    print(f"\n🔍 Testing with {len(sample_vulnerabilities)} sample vulnerabilities...")
    
    # Test individual vulnerability analysis
    print("\n📊 Testing individual vulnerability analysis:")
    for vuln in sample_vulnerabilities[:2]:  # Test first 2 for individual analysis
        print(f"\n   Analyzing {vuln['vulnerability_id']}...")
        analysis = analyzer.analyze_vulnerability(
            cve_id=vuln['vulnerability_id'],
            component_name=vuln['pkg_name'],
            component_version=vuln['pkg_version'],
            severity=vuln['severity'],
            cvss_score=vuln['cvss_score']
        )
        print(f"   Result: {analysis.exploit_count} exploits found, Risk: {analysis.exploit_risk_level}")
        if analysis.exploits_found:
            print(f"   Top exploit: {analysis.exploits_found[0].title}")
    
    # Test batch analysis
    print(f"\n📈 Testing batch vulnerability analysis...")
    try:
        analyses = analyzer.analyze_vulnerability_batch(sample_vulnerabilities)
        
        # Generate test report
        report_path = "test_exploitability_report.json"
        report = analyzer.generate_exploitability_report(analyses, report_path)
        
        # Print summary
        analyzer.print_exploitability_summary(analyses)
        
        print(f"\n✅ Test completed successfully!")
        print(f"📄 Test report generated: {report_path}")
        
        # Show report summary
        print(f"\n📊 Report Summary:")
        print(f"   Total vulnerabilities: {report['summary']['total_vulnerabilities']}")
        print(f"   With exploits: {report['summary']['vulnerabilities_with_exploits']}")
        print(f"   Exploit rate: {report['summary']['exploit_availability_rate']}%")
        print(f"   Critical exploitable: {report['summary']['critical_exploitable']}")
        print(f"   High exploitable: {report['summary']['high_exploitable']}")
        
        return True
        
    except Exception as e:
        print(f"❌ Batch analysis failed: {e}")
        return False


def test_basic_functionality():
    """Test basic functionality without SearchSploit"""
    print("\n🔧 Testing basic functionality without external dependencies...")
    
    analyzer = ExploitabilityAnalyzer()
    
    # Test single analysis (should work even without SearchSploit)
    analysis = analyzer.analyze_vulnerability(
        cve_id="CVE-2021-44228",
        component_name="log4j",
        component_version="2.14.1",
        severity="CRITICAL",
        cvss_score=10.0
    )
    
    print(f"✅ Basic analysis created successfully")
    print(f"   CVE: {analysis.cve_id}")
    print(f"   Component: {analysis.component_name}@{analysis.component_version}")
    print(f"   Risk Level: {analysis.exploit_risk_level}")
    print(f"   Timestamp: {analysis.analysis_timestamp}")
    
    return True


if __name__ == "__main__":
    print("🛡️  VulnReach Exploitability Analysis Test Suite")
    print("=" * 60)
    
    # Test basic functionality first
    if test_basic_functionality():
        print("\n✅ Basic functionality test passed")
    else:
        print("\n❌ Basic functionality test failed")
        sys.exit(1)
    
    # Test full functionality
    if test_exploitability_analyzer():
        print("\n🎉 All tests passed!")
        sys.exit(0)
    else:
        print("\n❌ Some tests failed")
        sys.exit(1)