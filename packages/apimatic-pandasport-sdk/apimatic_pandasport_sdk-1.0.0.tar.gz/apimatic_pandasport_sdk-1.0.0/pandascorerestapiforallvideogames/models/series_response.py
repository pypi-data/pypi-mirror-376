# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.base_league import BaseLeague
from pandascorerestapiforallvideogames.models.base_tournament import BaseTournament
from pandascorerestapiforallvideogames.models.current_videogame_enum import CurrentVideogameEnum


class SeriesResponse(object):

    """Implementation of the 'Series Response' model.

    Attributes:
        begin_at (datetime): The model property of type datetime.
        description (str): The model property of type str.
        end_at (datetime): The model property of type datetime.
        full_name (str): The model property of type str.
        id (int): The model property of type int.
        league (BaseLeague): The model property of type BaseLeague.
        league_id (int): The model property of type int.
        modified_at (datetime): The model property of type datetime.
        name (str): The model property of type str.
        season (str): The model property of type str.
        slug (str): The model property of type str.
        tier (str): The model property of type str.
        tournaments (List[BaseTournament]): The model property of type
            List[BaseTournament].
        videogame (CurrentVideogameEnum): The model property of type
            CurrentVideogameEnum.
        videogame_title (Any): The model property of type Any.
        winner_id (Any): The model property of type Any.
        winner_type (Any): The model property of type Any.
        year (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "begin_at": 'begin_at',
        "description": 'description',
        "end_at": 'end_at',
        "full_name": 'full_name',
        "id": 'id',
        "league": 'league',
        "league_id": 'league_id',
        "modified_at": 'modified_at',
        "name": 'name',
        "season": 'season',
        "slug": 'slug',
        "tier": 'tier',
        "tournaments": 'tournaments',
        "videogame": 'videogame',
        "videogame_title": 'videogame_title',
        "winner_id": 'winner_id',
        "winner_type": 'winner_type',
        "year": 'year'
    }

    _nullables = [
        'begin_at',
        'description',
        'end_at',
        'name',
        'season',
        'tier',
        'winner_id',
    ]

    def __init__(self,
                 begin_at=None,
                 description=None,
                 end_at=None,
                 full_name=None,
                 id=None,
                 league=None,
                 league_id=None,
                 modified_at=None,
                 name=None,
                 season=None,
                 slug=None,
                 tier=None,
                 tournaments=None,
                 videogame=None,
                 videogame_title=None,
                 winner_id=None,
                 winner_type=None,
                 year=None):
        """Constructor for the SeriesResponse class"""

        # Initialize members of the class
        self.begin_at = APIHelper.apply_datetime_converter(begin_at, APIHelper.RFC3339DateTime) if begin_at else None 
        self.description = description 
        self.end_at = APIHelper.apply_datetime_converter(end_at, APIHelper.RFC3339DateTime) if end_at else None 
        self.full_name = full_name 
        self.id = id 
        self.league = league 
        self.league_id = league_id 
        self.modified_at = APIHelper.apply_datetime_converter(modified_at, APIHelper.RFC3339DateTime) if modified_at else None 
        self.name = name 
        self.season = season 
        self.slug = slug 
        self.tier = tier 
        self.tournaments = tournaments 
        self.videogame = videogame 
        self.videogame_title = videogame_title 
        self.winner_id = winner_id 
        self.winner_type = winner_type 
        self.year = year 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        begin_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("begin_at")).datetime if dictionary.get("begin_at") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        end_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("end_at")).datetime if dictionary.get("end_at") else None
        full_name = dictionary.get("full_name") if dictionary.get("full_name") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        league = BaseLeague.from_dictionary(dictionary.get('league')) if dictionary.get('league') else None
        league_id = dictionary.get("league_id") if dictionary.get("league_id") else None
        modified_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("modified_at")).datetime if dictionary.get("modified_at") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        season = dictionary.get("season") if dictionary.get("season") else None
        slug = dictionary.get("slug") if dictionary.get("slug") else None
        tier = dictionary.get("tier") if dictionary.get("tier") else None
        tournaments = None
        if dictionary.get('tournaments') is not None:
            tournaments = [BaseTournament.from_dictionary(x) for x in dictionary.get('tournaments')]
        videogame = dictionary.get("videogame") if dictionary.get("videogame") else None
        videogame_title = dictionary.get("videogame_title") if dictionary.get("videogame_title") else None
        winner_id = dictionary.get("winner_id") if dictionary.get("winner_id") else None
        winner_type = dictionary.get("winner_type") if dictionary.get("winner_type") else None
        year = dictionary.get("year") if dictionary.get("year") else None
        # Return an object of this model
        return cls(begin_at,
                   description,
                   end_at,
                   full_name,
                   id,
                   league,
                   league_id,
                   modified_at,
                   name,
                   season,
                   slug,
                   tier,
                   tournaments,
                   videogame,
                   videogame_title,
                   winner_id,
                   winner_type,
                   year)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.begin_at,
                                           type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime),
                                           is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.description,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.end_at,
                                            type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.full_name,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.id,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.league,
                                            type_callable=lambda value: BaseLeague.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.league_id,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.modified_at,
                                            type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime)) \
                and APIHelper.is_valid_type(value=dictionary.name,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.season,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.slug,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.tier,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.tournaments,
                                            type_callable=lambda value: BaseTournament.validate(value),
                                            is_model_dict=True,
                                            is_inner_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.videogame,
                                            type_callable=lambda value: CurrentVideogameEnum.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.videogame_title,
                                            type_callable=lambda value: isinstance(value, Any)) \
                and APIHelper.is_valid_type(value=dictionary.winner_id,
                                            type_callable=lambda value: isinstance(value, Any),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.winner_type,
                                            type_callable=lambda value: isinstance(value, Any)) \
                and APIHelper.is_valid_type(value=dictionary.year,
                                            type_callable=lambda value: isinstance(value, int))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('begin_at'),
                                       type_callable=lambda value: isinstance(value, str),
                                       is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('description'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('end_at'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('full_name'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('id'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('league'),
                                        type_callable=lambda value: BaseLeague.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('league_id'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('modified_at'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('name'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('season'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('slug'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('tier'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('tournaments'),
                                        type_callable=lambda value: BaseTournament.validate(value),
                                        is_model_dict=True,
                                        is_inner_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('videogame'),
                                        type_callable=lambda value: CurrentVideogameEnum.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('videogame_title'),
                                        type_callable=lambda value: isinstance(value, Any)) \
            and APIHelper.is_valid_type(value=dictionary.get('winner_id'),
                                        type_callable=lambda value: isinstance(value, Any),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('winner_type'),
                                        type_callable=lambda value: isinstance(value, Any)) \
            and APIHelper.is_valid_type(value=dictionary.get('year'),
                                        type_callable=lambda value: isinstance(value, int))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={self.begin_at!r}, '
                f'description={self.description!r}, '
                f'end_at={self.end_at!r}, '
                f'full_name={self.full_name!r}, '
                f'id={self.id!r}, '
                f'league={self.league!r}, '
                f'league_id={self.league_id!r}, '
                f'modified_at={self.modified_at!r}, '
                f'name={self.name!r}, '
                f'season={self.season!r}, '
                f'slug={self.slug!r}, '
                f'tier={self.tier!r}, '
                f'tournaments={self.tournaments!r}, '
                f'videogame={self.videogame!r}, '
                f'videogame_title={self.videogame_title!r}, '
                f'winner_id={self.winner_id!r}, '
                f'winner_type={self.winner_type!r}, '
                f'year={self.year!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={self.begin_at!s}, '
                f'description={self.description!s}, '
                f'end_at={self.end_at!s}, '
                f'full_name={self.full_name!s}, '
                f'id={self.id!s}, '
                f'league={self.league!s}, '
                f'league_id={self.league_id!s}, '
                f'modified_at={self.modified_at!s}, '
                f'name={self.name!s}, '
                f'season={self.season!s}, '
                f'slug={self.slug!s}, '
                f'tier={self.tier!s}, '
                f'tournaments={self.tournaments!s}, '
                f'videogame={self.videogame!s}, '
                f'videogame_title={self.videogame_title!s}, '
                f'winner_id={self.winner_id!s}, '
                f'winner_type={self.winner_type!s}, '
                f'year={self.year!s})')
