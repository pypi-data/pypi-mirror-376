# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.game_status_enum import GameStatusEnum
from pandascorerestapiforallvideogames.models.game_winner import GameWinner


class BettingPUBGGame(object):

    """Implementation of the 'BettingPUBGGame' model.

    Attributes:
        begin_at (datetime): The model property of type datetime.
        complete (bool): Whether game data are complete and won't change
        detailed_stats (bool): Whether the game offers full stats
        end_at (datetime): The model property of type datetime.
        finished (bool): Whether game is finished
        forfeit (bool): Whether game is forfeit
        id (int): The model property of type int.
        length (int): The model property of type int.
        match_id (int): The model property of type int.
        position (int): The model property of type int.
        status (GameStatusEnum): The model property of type GameStatusEnum.
        video_url (str): The model property of type str.
        winner (GameWinner): The model property of type GameWinner.
        winner_type (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "begin_at": 'begin_at',
        "complete": 'complete',
        "detailed_stats": 'detailed_stats',
        "end_at": 'end_at',
        "finished": 'finished',
        "forfeit": 'forfeit',
        "id": 'id',
        "length": 'length',
        "match_id": 'match_id',
        "position": 'position',
        "status": 'status',
        "video_url": 'video_url',
        "winner": 'winner',
        "winner_type": 'winner_type'
    }

    _nullables = [
        'begin_at',
        'end_at',
        'length',
        'video_url',
    ]

    def __init__(self,
                 begin_at=None,
                 complete=None,
                 detailed_stats=None,
                 end_at=None,
                 finished=None,
                 forfeit=None,
                 id=None,
                 length=None,
                 match_id=None,
                 position=None,
                 status=None,
                 video_url=None,
                 winner=None,
                 winner_type=None):
        """Constructor for the BettingPUBGGame class"""

        # Initialize members of the class
        self.begin_at = APIHelper.apply_datetime_converter(begin_at, APIHelper.RFC3339DateTime) if begin_at else None 
        self.complete = complete 
        self.detailed_stats = detailed_stats 
        self.end_at = APIHelper.apply_datetime_converter(end_at, APIHelper.RFC3339DateTime) if end_at else None 
        self.finished = finished 
        self.forfeit = forfeit 
        self.id = id 
        self.length = length 
        self.match_id = match_id 
        self.position = position 
        self.status = status 
        self.video_url = video_url 
        self.winner = winner 
        self.winner_type = winner_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        begin_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("begin_at")).datetime if dictionary.get("begin_at") else None
        complete = dictionary.get("complete") if "complete" in dictionary.keys() else None
        detailed_stats = dictionary.get("detailed_stats") if "detailed_stats" in dictionary.keys() else None
        end_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("end_at")).datetime if dictionary.get("end_at") else None
        finished = dictionary.get("finished") if "finished" in dictionary.keys() else None
        forfeit = dictionary.get("forfeit") if "forfeit" in dictionary.keys() else None
        id = dictionary.get("id") if dictionary.get("id") else None
        length = dictionary.get("length") if dictionary.get("length") else None
        match_id = dictionary.get("match_id") if dictionary.get("match_id") else None
        position = dictionary.get("position") if dictionary.get("position") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        video_url = dictionary.get("video_url") if dictionary.get("video_url") else None
        winner = GameWinner.from_dictionary(dictionary.get('winner')) if dictionary.get('winner') else None
        winner_type = dictionary.get("winner_type") if dictionary.get("winner_type") else None
        # Return an object of this model
        return cls(begin_at,
                   complete,
                   detailed_stats,
                   end_at,
                   finished,
                   forfeit,
                   id,
                   length,
                   match_id,
                   position,
                   status,
                   video_url,
                   winner,
                   winner_type)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.begin_at,
                                           type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime),
                                           is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.complete,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.detailed_stats,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.end_at,
                                            type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.finished,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.forfeit,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.id,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.length,
                                            type_callable=lambda value: isinstance(value, int),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.match_id,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.position,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.status,
                                            type_callable=lambda value: GameStatusEnum.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.video_url,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.winner,
                                            type_callable=lambda value: GameWinner.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.winner_type,
                                            type_callable=lambda value: isinstance(value, Any))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('begin_at'),
                                       type_callable=lambda value: isinstance(value, str),
                                       is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('complete'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('detailed_stats'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('end_at'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('finished'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('forfeit'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('id'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('length'),
                                        type_callable=lambda value: isinstance(value, int),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('match_id'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('position'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('status'),
                                        type_callable=lambda value: GameStatusEnum.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('video_url'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('winner'),
                                        type_callable=lambda value: GameWinner.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('winner_type'),
                                        type_callable=lambda value: isinstance(value, Any))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={self.begin_at!r}, '
                f'complete={self.complete!r}, '
                f'detailed_stats={self.detailed_stats!r}, '
                f'end_at={self.end_at!r}, '
                f'finished={self.finished!r}, '
                f'forfeit={self.forfeit!r}, '
                f'id={self.id!r}, '
                f'length={self.length!r}, '
                f'match_id={self.match_id!r}, '
                f'position={self.position!r}, '
                f'status={self.status!r}, '
                f'video_url={self.video_url!r}, '
                f'winner={self.winner!r}, '
                f'winner_type={self.winner_type!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={self.begin_at!s}, '
                f'complete={self.complete!s}, '
                f'detailed_stats={self.detailed_stats!s}, '
                f'end_at={self.end_at!s}, '
                f'finished={self.finished!s}, '
                f'forfeit={self.forfeit!s}, '
                f'id={self.id!s}, '
                f'length={self.length!s}, '
                f'match_id={self.match_id!s}, '
                f'position={self.position!s}, '
                f'status={self.status!s}, '
                f'video_url={self.video_url!s}, '
                f'winner={self.winner!s}, '
                f'winner_type={self.winner_type!s})')
