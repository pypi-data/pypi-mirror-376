# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.match_localized_stream import MatchLocalizedStream


class MatchLocalizedStreams(object):

    """Implementation of the 'MatchLocalizedStreams' model.

    Attributes:
        english (MatchLocalizedStream): The model property of type
            MatchLocalizedStream.
        official (MatchLocalizedStream): The model property of type
            MatchLocalizedStream.
        russian (MatchLocalizedStream): The model property of type
            MatchLocalizedStream.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "english": 'english',
        "official": 'official',
        "russian": 'russian'
    }

    def __init__(self,
                 english=None,
                 official=None,
                 russian=None):
        """Constructor for the MatchLocalizedStreams class"""

        # Initialize members of the class
        self.english = english 
        self.official = official 
        self.russian = russian 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        english = MatchLocalizedStream.from_dictionary(dictionary.get('english')) if dictionary.get('english') else None
        official = MatchLocalizedStream.from_dictionary(dictionary.get('official')) if dictionary.get('official') else None
        russian = MatchLocalizedStream.from_dictionary(dictionary.get('russian')) if dictionary.get('russian') else None
        # Return an object of this model
        return cls(english,
                   official,
                   russian)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.english,
                                           type_callable=lambda value: MatchLocalizedStream.validate(value),
                                           is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.official,
                                            type_callable=lambda value: MatchLocalizedStream.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.russian,
                                            type_callable=lambda value: MatchLocalizedStream.validate(value),
                                            is_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('english'),
                                       type_callable=lambda value: MatchLocalizedStream.validate(value),
                                       is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('official'),
                                        type_callable=lambda value: MatchLocalizedStream.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('russian'),
                                        type_callable=lambda value: MatchLocalizedStream.validate(value),
                                        is_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'english={self.english!r}, '
                f'official={self.official!r}, '
                f'russian={self.russian!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'english={self.english!s}, '
                f'official={self.official!s}, '
                f'russian={self.russian!s})')
