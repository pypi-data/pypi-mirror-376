# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper


class FilterOverTeams(object):

    """Implementation of the 'filter_over_Teams' model.

    Attributes:
        acronym (List[str]): The model property of type List[str].
        id (List[int]): The model property of type List[int].
        location (List[str]): The model property of type List[str].
        modified_at (List[datetime]): The model property of type
            List[datetime].
        name (List[str]): The model property of type List[str].
        slug (List[str]): The model property of type List[str].
        videogame_id (List[VideogameIDEnum]): The model property of type
            List[VideogameIDEnum].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "acronym": 'acronym',
        "id": 'id',
        "location": 'location',
        "modified_at": 'modified_at',
        "name": 'name',
        "slug": 'slug',
        "videogame_id": 'videogame_id'
    }

    _optionals = [
        'acronym',
        'id',
        'location',
        'modified_at',
        'name',
        'slug',
        'videogame_id',
    ]

    def __init__(self,
                 acronym=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 location=APIHelper.SKIP,
                 modified_at=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 slug=APIHelper.SKIP,
                 videogame_id=APIHelper.SKIP):
        """Constructor for the FilterOverTeams class"""

        # Initialize members of the class
        if acronym is not APIHelper.SKIP:
            self.acronym = acronym 
        if id is not APIHelper.SKIP:
            self.id = id 
        if location is not APIHelper.SKIP:
            self.location = location 
        if modified_at is not None and modified_at is not APIHelper.SKIP:
            self.modified_at = APIHelper.apply_datetime_converter(modified_at, APIHelper.RFC3339DateTime)
        if name is not APIHelper.SKIP:
            self.name = name 
        if slug is not APIHelper.SKIP:
            self.slug = slug 
        if videogame_id is not APIHelper.SKIP:
            self.videogame_id = videogame_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        acronym = dictionary.get("acronym") if dictionary.get("acronym") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        location = dictionary.get("location") if dictionary.get("location") else APIHelper.SKIP
        modified_at = None
        if dictionary.get('modified_at') is not None:
            modified_at = list()
            for x in dictionary.get('modified_at'):
                modified_at.append(APIHelper.RFC3339DateTime.from_value(x).datetime)
        else:
            modified_at = APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        slug = dictionary.get("slug") if dictionary.get("slug") else APIHelper.SKIP
        videogame_id = dictionary.get("videogame_id") if dictionary.get("videogame_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(acronym,
                   id,
                   location,
                   modified_at,
                   name,
                   slug,
                   videogame_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'acronym={(self.acronym if hasattr(self, "acronym") else None)!r}, '
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'location={(self.location if hasattr(self, "location") else None)!r}, '
                f'modified_at={(self.modified_at if hasattr(self, "modified_at") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'slug={(self.slug if hasattr(self, "slug") else None)!r}, '
                f'videogame_id={(self.videogame_id if hasattr(self, "videogame_id") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'acronym={(self.acronym if hasattr(self, "acronym") else None)!s}, '
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'location={(self.location if hasattr(self, "location") else None)!s}, '
                f'modified_at={(self.modified_at if hasattr(self, "modified_at") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'slug={(self.slug if hasattr(self, "slug") else None)!s}, '
                f'videogame_id={(self.videogame_id if hasattr(self, "videogame_id") else None)!s})')
