# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper


class SearchOverTeams(object):

    """Implementation of the 'search_over_Teams' model.

    Attributes:
        acronym (str): The model property of type str.
        location (str): The team's organization location
        name (str): The model property of type str.
        slug (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "acronym": 'acronym',
        "location": 'location',
        "name": 'name',
        "slug": 'slug'
    }

    _optionals = [
        'acronym',
        'location',
        'name',
        'slug',
    ]

    def __init__(self,
                 acronym=APIHelper.SKIP,
                 location=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 slug=APIHelper.SKIP):
        """Constructor for the SearchOverTeams class"""

        # Initialize members of the class
        if acronym is not APIHelper.SKIP:
            self.acronym = acronym 
        if location is not APIHelper.SKIP:
            self.location = location 
        if name is not APIHelper.SKIP:
            self.name = name 
        if slug is not APIHelper.SKIP:
            self.slug = slug 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        acronym = dictionary.get("acronym") if dictionary.get("acronym") else APIHelper.SKIP
        location = dictionary.get("location") if dictionary.get("location") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        slug = dictionary.get("slug") if dictionary.get("slug") else APIHelper.SKIP
        # Return an object of this model
        return cls(acronym,
                   location,
                   name,
                   slug)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'acronym={(self.acronym if hasattr(self, "acronym") else None)!r}, '
                f'location={(self.location if hasattr(self, "location") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'slug={(self.slug if hasattr(self, "slug") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'acronym={(self.acronym if hasattr(self, "acronym") else None)!s}, '
                f'location={(self.location if hasattr(self, "location") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'slug={(self.slug if hasattr(self, "slug") else None)!s})')
