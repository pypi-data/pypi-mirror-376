# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper


class LiveEndpoint(object):

    """Implementation of the 'LiveEndpoint' model.

    Attributes:
        begin_at (datetime): The model property of type datetime.
        expected_begin_at (datetime): The model property of type datetime.
        last_active (int): The model property of type int.
        match_id (int): The model property of type int.
        open (bool): Whether live is open
        mtype (LiveTypeEnum): The model property of type LiveTypeEnum.
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "begin_at": 'begin_at',
        "expected_begin_at": 'expected_begin_at',
        "last_active": 'last_active',
        "match_id": 'match_id',
        "open": 'open',
        "mtype": 'type',
        "url": 'url'
    }

    _nullables = [
        'begin_at',
        'expected_begin_at',
        'last_active',
    ]

    def __init__(self,
                 begin_at=None,
                 expected_begin_at=None,
                 last_active=None,
                 match_id=None,
                 open=None,
                 mtype=None,
                 url=None):
        """Constructor for the LiveEndpoint class"""

        # Initialize members of the class
        self.begin_at = APIHelper.apply_datetime_converter(begin_at, APIHelper.RFC3339DateTime) if begin_at else None 
        self.expected_begin_at = APIHelper.apply_datetime_converter(expected_begin_at, APIHelper.RFC3339DateTime) if expected_begin_at else None 
        self.last_active = last_active 
        self.match_id = match_id 
        self.open = open 
        self.mtype = mtype 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        begin_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("begin_at")).datetime if dictionary.get("begin_at") else None
        expected_begin_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("expected_begin_at")).datetime if dictionary.get("expected_begin_at") else None
        last_active = dictionary.get("last_active") if dictionary.get("last_active") else None
        match_id = dictionary.get("match_id") if dictionary.get("match_id") else None
        open = dictionary.get("open") if "open" in dictionary.keys() else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(begin_at,
                   expected_begin_at,
                   last_active,
                   match_id,
                   open,
                   mtype,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={self.begin_at!r}, '
                f'expected_begin_at={self.expected_begin_at!r}, '
                f'last_active={self.last_active!r}, '
                f'match_id={self.match_id!r}, '
                f'open={self.open!r}, '
                f'mtype={self.mtype!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={self.begin_at!s}, '
                f'expected_begin_at={self.expected_begin_at!s}, '
                f'last_active={self.last_active!s}, '
                f'match_id={self.match_id!s}, '
                f'open={self.open!s}, '
                f'mtype={self.mtype!s}, '
                f'url={self.url!s})')
