# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.player import Player


class TournamentPlayerRosters(object):

    """Implementation of the 'TournamentPlayerRosters' model.

    Rosters for a tournament with player participants

    Attributes:
        rosters (List[Player]): The model property of type List[Player].
        mtype (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "rosters": 'rosters',
        "mtype": 'type'
    }

    def __init__(self,
                 rosters=None):
        """Constructor for the TournamentPlayerRosters class"""

        # Initialize members of the class
        self.rosters = rosters 
        self.mtype = 'Player' 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        rosters = None
        if dictionary.get('rosters') is not None:
            rosters = [Player.from_dictionary(x) for x in dictionary.get('rosters')]
        # Return an object of this model
        return cls(rosters)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.rosters,
                                           type_callable=lambda value: Player.validate(value),
                                           is_model_dict=True,
                                           is_inner_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.mtype,
                                            type_callable=lambda value: isinstance(value, str))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('rosters'),
                                       type_callable=lambda value: Player.validate(value),
                                       is_model_dict=True,
                                       is_inner_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('type'),
                                        type_callable=lambda value: isinstance(value, str))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'rosters={self.rosters!r}, '
                f'mtype={self.mtype!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'rosters={self.rosters!s}, '
                f'mtype={self.mtype!s})')
