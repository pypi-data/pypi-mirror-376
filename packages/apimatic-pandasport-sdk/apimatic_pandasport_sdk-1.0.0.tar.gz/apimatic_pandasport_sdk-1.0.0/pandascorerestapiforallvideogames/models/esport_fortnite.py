# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.models.betting_serie import BettingSerie


class EsportFortnite(object):

    """Implementation of the 'Esport_Fortnite' model.

    Attributes:
        current_version (str): The model property of type str.
        id (int): The model property of type int.
        name (str): The model property of type str.
        series (List[BettingSerie]): The model property of type
            List[BettingSerie].
        slug (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "current_version": 'current_version',
        "id": 'id',
        "name": 'name',
        "series": 'series',
        "slug": 'slug'
    }

    _nullables = [
        'current_version',
    ]

    def __init__(self,
                 current_version=None,
                 series=None):
        """Constructor for the EsportFortnite class"""

        # Initialize members of the class
        self.current_version = current_version 
        self.id = 21 
        self.name = 'Fortnite' 
        self.series = series 
        self.slug = 'fortnite' 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        current_version = dictionary.get("current_version") if dictionary.get("current_version") else None
        series = None
        if dictionary.get('series') is not None:
            series = [BettingSerie.from_dictionary(x) for x in dictionary.get('series')]
        # Return an object of this model
        return cls(current_version,
                   series)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'current_version={self.current_version!r}, '
                f'id={self.id!r}, '
                f'name={self.name!r}, '
                f'series={self.series!r}, '
                f'slug={self.slug!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'current_version={self.current_version!s}, '
                f'id={self.id!s}, '
                f'name={self.name!s}, '
                f'series={self.series!s}, '
                f'slug={self.slug!s})')
