# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.current_videogame_enum import CurrentVideogameEnum


class MatchOpponentBasePlayer(object):

    """Implementation of the 'MatchOpponentBasePlayer' model.

    Attributes:
        birth_year (float): The model property of type float.
        birthday (str): The model property of type str.
        current_videogame (CurrentVideogameEnum): The model property of type
            CurrentVideogameEnum.
        first_name (str): The model property of type str.
        hometown (str): The model property of type str.
        id (int): The model property of type int.
        image_url (str): The model property of type str.
        last_name (str): The model property of type str.
        name (str): The model property of type str.
        nationality (str): The model property of type str.
        role (str): The model property of type str.
        slug (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "birth_year": 'birth_year',
        "birthday": 'birthday',
        "current_videogame": 'current_videogame',
        "first_name": 'first_name',
        "hometown": 'hometown',
        "id": 'id',
        "image_url": 'image_url',
        "last_name": 'last_name',
        "name": 'name',
        "nationality": 'nationality',
        "role": 'role',
        "slug": 'slug'
    }

    _nullables = [
        'birth_year',
        'birthday',
        'first_name',
        'hometown',
        'image_url',
        'last_name',
        'nationality',
        'role',
        'slug',
    ]

    def __init__(self,
                 birth_year=None,
                 birthday=None,
                 current_videogame=None,
                 first_name=None,
                 hometown=None,
                 id=None,
                 image_url=None,
                 last_name=None,
                 name=None,
                 nationality=None,
                 role=None,
                 slug=None):
        """Constructor for the MatchOpponentBasePlayer class"""

        # Initialize members of the class
        self.birth_year = birth_year 
        self.birthday = birthday 
        self.current_videogame = current_videogame 
        self.first_name = first_name 
        self.hometown = hometown 
        self.id = id 
        self.image_url = image_url 
        self.last_name = last_name 
        self.name = name 
        self.nationality = nationality 
        self.role = role 
        self.slug = slug 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        birth_year = dictionary.get("birth_year") if dictionary.get("birth_year") else None
        birthday = dictionary.get("birthday") if dictionary.get("birthday") else None
        current_videogame = dictionary.get("current_videogame") if dictionary.get("current_videogame") else None
        first_name = dictionary.get("first_name") if dictionary.get("first_name") else None
        hometown = dictionary.get("hometown") if dictionary.get("hometown") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        image_url = dictionary.get("image_url") if dictionary.get("image_url") else None
        last_name = dictionary.get("last_name") if dictionary.get("last_name") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        nationality = dictionary.get("nationality") if dictionary.get("nationality") else None
        role = dictionary.get("role") if dictionary.get("role") else None
        slug = dictionary.get("slug") if dictionary.get("slug") else None
        # Return an object of this model
        return cls(birth_year,
                   birthday,
                   current_videogame,
                   first_name,
                   hometown,
                   id,
                   image_url,
                   last_name,
                   name,
                   nationality,
                   role,
                   slug)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.birth_year,
                                           type_callable=lambda value: isinstance(value, float),
                                           is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.birthday,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.current_videogame,
                                            type_callable=lambda value: CurrentVideogameEnum.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.first_name,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.hometown,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.id,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.image_url,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.last_name,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.name,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.nationality,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.role,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.slug,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('birth_year'),
                                       type_callable=lambda value: isinstance(value, float),
                                       is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('birthday'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('current_videogame'),
                                        type_callable=lambda value: CurrentVideogameEnum.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('first_name'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('hometown'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('id'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('image_url'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('last_name'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('name'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('nationality'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('role'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('slug'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'birth_year={self.birth_year!r}, '
                f'birthday={self.birthday!r}, '
                f'current_videogame={self.current_videogame!r}, '
                f'first_name={self.first_name!r}, '
                f'hometown={self.hometown!r}, '
                f'id={self.id!r}, '
                f'image_url={self.image_url!r}, '
                f'last_name={self.last_name!r}, '
                f'name={self.name!r}, '
                f'nationality={self.nationality!r}, '
                f'role={self.role!r}, '
                f'slug={self.slug!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'birth_year={self.birth_year!s}, '
                f'birthday={self.birthday!s}, '
                f'current_videogame={self.current_videogame!s}, '
                f'first_name={self.first_name!s}, '
                f'hometown={self.hometown!s}, '
                f'id={self.id!s}, '
                f'image_url={self.image_url!s}, '
                f'last_name={self.last_name!s}, '
                f'name={self.name!s}, '
                f'nationality={self.nationality!s}, '
                f'role={self.role!s}, '
                f'slug={self.slug!s})')
