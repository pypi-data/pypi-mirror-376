# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.videogame_league import VideogameLeague


class VideogameCodmw(object):

    """Implementation of the 'Videogame_Codmw' model.

    Attributes:
        current_version (str): The model property of type str.
        id (int): The model property of type int.
        leagues (List[VideogameLeague]): The model property of type
            List[VideogameLeague].
        name (str): The model property of type str.
        slug (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "current_version": 'current_version',
        "id": 'id',
        "leagues": 'leagues',
        "name": 'name',
        "slug": 'slug'
    }

    _nullables = [
        'current_version',
    ]

    def __init__(self,
                 current_version=None,
                 leagues=None):
        """Constructor for the VideogameCodmw class"""

        # Initialize members of the class
        self.current_version = current_version 
        self.id = 23 
        self.leagues = leagues 
        self.name = 'Call of Duty' 
        self.slug = 'cod-mw' 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        current_version = dictionary.get("current_version") if dictionary.get("current_version") else None
        leagues = None
        if dictionary.get('leagues') is not None:
            leagues = [VideogameLeague.from_dictionary(x) for x in dictionary.get('leagues')]
        # Return an object of this model
        return cls(current_version,
                   leagues)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.current_version,
                                           type_callable=lambda value: isinstance(value, str),
                                           is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.id,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.leagues,
                                            type_callable=lambda value: VideogameLeague.validate(value),
                                            is_model_dict=True,
                                            is_inner_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.name,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.slug,
                                            type_callable=lambda value: isinstance(value, str))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('current_version'),
                                       type_callable=lambda value: isinstance(value, str),
                                       is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('id'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('leagues'),
                                        type_callable=lambda value: VideogameLeague.validate(value),
                                        is_model_dict=True,
                                        is_inner_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('name'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('slug'),
                                        type_callable=lambda value: isinstance(value, str))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'current_version={self.current_version!r}, '
                f'id={self.id!r}, '
                f'leagues={self.leagues!r}, '
                f'name={self.name!r}, '
                f'slug={self.slug!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'current_version={self.current_version!s}, '
                f'id={self.id!s}, '
                f'leagues={self.leagues!s}, '
                f'name={self.name!s}, '
                f'slug={self.slug!s})')
