# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper


class MatchPlayerResult(object):

    """Implementation of the 'MatchPlayerResult' model.

    Attributes:
        player_id (int): The model property of type int.
        score (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "player_id": 'player_id',
        "score": 'score'
    }

    def __init__(self,
                 player_id=None,
                 score=None):
        """Constructor for the MatchPlayerResult class"""

        # Initialize members of the class
        self.player_id = player_id 
        self.score = score 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        player_id = dictionary.get("player_id") if dictionary.get("player_id") else None
        score = dictionary.get("score") if dictionary.get("score") else None
        # Return an object of this model
        return cls(player_id,
                   score)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.player_id,
                                           type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.score,
                                            type_callable=lambda value: isinstance(value, int))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('player_id'),
                                       type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('score'),
                                        type_callable=lambda value: isinstance(value, int))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'player_id={self.player_id!r}, '
                f'score={self.score!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'player_id={self.player_id!s}, '
                f'score={self.score!s})')
