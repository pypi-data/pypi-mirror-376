# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.betting_base_tournament import BettingBaseTournament
from pandascorerestapiforallvideogames.models.betting_match_status_enum import BettingMatchStatusEnum
from pandascorerestapiforallvideogames.models.betting_metadata import BettingMetadata
from pandascorerestapiforallvideogames.models.current_videogame_enum import CurrentVideogameEnum
from pandascorerestapiforallvideogames.models.match_live import MatchLive
from pandascorerestapiforallvideogames.models.match_localized_streams import MatchLocalizedStreams
from pandascorerestapiforallvideogames.models.match_type_enum import MatchTypeEnum
from pandascorerestapiforallvideogames.models.opponent import Opponent
from pandascorerestapiforallvideogames.models.stream import Stream


class BettingMatch(object):

    """Implementation of the 'BettingMatch' model.

    Attributes:
        begin_at (datetime): The model property of type datetime.
        betting_metadata (BettingMetadata): The model property of type
            BettingMetadata.
        detailed_stats (bool): Whether the match offers full stats
        draw (bool): Whether result of the match is a draw
        end_at (datetime): The model property of type datetime.
        forfeit (bool): Whether match was forfeited
        game_advantage (Any): The model property of type Any.
        games (List[BettingCSGOGame | BettingDota2Game | BettingLoLGame |
            BettingOwGame | BettingPUBGGame]): The model property of type
            List[BettingCSGOGame | BettingDota2Game | BettingLoLGame |
            BettingOwGame | BettingPUBGGame].
        id (int): The model property of type int.
        league (Any): The model property of type Any.
        league_id (int): The model property of type int.
        live (MatchLive): The model property of type MatchLive.
        live_embed_url (str): The model property of type str.
        match_type (MatchTypeEnum): The model property of type MatchTypeEnum.
        modified_at (datetime): The model property of type datetime.
        name (str): The model property of type str.
        number_of_games (int): Number of games
        official_stream_url (str): The model property of type str.
        opponents (List[Opponent]): The model property of type List[Opponent].
        original_scheduled_at (datetime): The model property of type datetime.
        rescheduled (bool): The model property of type bool.
        results (List[MatchTeamResult | MatchPlayerResult]): The model
            property of type List[MatchTeamResult | MatchPlayerResult].
        scheduled_at (datetime): The model property of type datetime.
        serie (Any): The model property of type Any.
        serie_id (int): The model property of type int.
        slug (str): The model property of type str.
        status (BettingMatchStatusEnum): The model property of type
            BettingMatchStatusEnum.
        streams (MatchLocalizedStreams): The model property of type
            MatchLocalizedStreams.
        streams_list (List[Stream]): The model property of type List[Stream].
        tournament (BettingBaseTournament): The model property of type
            BettingBaseTournament.
        tournament_id (int): The model property of type int.
        videogame (CurrentVideogameEnum): The model property of type
            CurrentVideogameEnum.
        videogame_version (Any): The model property of type Any.
        winner (Any): The model property of type Any.
        winner_id (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "begin_at": 'begin_at',
        "betting_metadata": 'betting_metadata',
        "detailed_stats": 'detailed_stats',
        "draw": 'draw',
        "end_at": 'end_at',
        "forfeit": 'forfeit',
        "game_advantage": 'game_advantage',
        "games": 'games',
        "id": 'id',
        "league": 'league',
        "league_id": 'league_id',
        "live": 'live',
        "live_embed_url": 'live_embed_url',
        "match_type": 'match_type',
        "modified_at": 'modified_at',
        "name": 'name',
        "number_of_games": 'number_of_games',
        "official_stream_url": 'official_stream_url',
        "opponents": 'opponents',
        "original_scheduled_at": 'original_scheduled_at',
        "rescheduled": 'rescheduled',
        "results": 'results',
        "scheduled_at": 'scheduled_at',
        "serie": 'serie',
        "serie_id": 'serie_id',
        "slug": 'slug',
        "status": 'status',
        "streams": 'streams',
        "streams_list": 'streams_list',
        "tournament": 'tournament',
        "tournament_id": 'tournament_id',
        "videogame": 'videogame',
        "videogame_version": 'videogame_version',
        "winner": 'winner',
        "winner_id": 'winner_id'
    }

    _nullables = [
        'begin_at',
        'end_at',
        'game_advantage',
        'live_embed_url',
        'official_stream_url',
        'original_scheduled_at',
        'rescheduled',
        'scheduled_at',
        'slug',
        'winner_id',
    ]

    def __init__(self,
                 begin_at=None,
                 betting_metadata=None,
                 detailed_stats=None,
                 draw=None,
                 end_at=None,
                 forfeit=None,
                 game_advantage=None,
                 games=None,
                 id=None,
                 league=None,
                 league_id=None,
                 live=None,
                 live_embed_url=None,
                 match_type=None,
                 modified_at=None,
                 name=None,
                 number_of_games=None,
                 official_stream_url=None,
                 opponents=None,
                 original_scheduled_at=None,
                 rescheduled=None,
                 results=None,
                 scheduled_at=None,
                 serie=None,
                 serie_id=None,
                 slug=None,
                 status=None,
                 streams=None,
                 streams_list=None,
                 tournament=None,
                 tournament_id=None,
                 videogame=None,
                 videogame_version=None,
                 winner=None,
                 winner_id=None):
        """Constructor for the BettingMatch class"""

        # Initialize members of the class
        self.begin_at = APIHelper.apply_datetime_converter(begin_at, APIHelper.RFC3339DateTime) if begin_at else None 
        self.betting_metadata = betting_metadata 
        self.detailed_stats = detailed_stats 
        self.draw = draw 
        self.end_at = APIHelper.apply_datetime_converter(end_at, APIHelper.RFC3339DateTime) if end_at else None 
        self.forfeit = forfeit 
        self.game_advantage = game_advantage 
        self.games = games 
        self.id = id 
        self.league = league 
        self.league_id = league_id 
        self.live = live 
        self.live_embed_url = live_embed_url 
        self.match_type = match_type 
        self.modified_at = APIHelper.apply_datetime_converter(modified_at, APIHelper.RFC3339DateTime) if modified_at else None 
        self.name = name 
        self.number_of_games = number_of_games 
        self.official_stream_url = official_stream_url 
        self.opponents = opponents 
        self.original_scheduled_at = APIHelper.apply_datetime_converter(original_scheduled_at, APIHelper.RFC3339DateTime) if original_scheduled_at else None 
        self.rescheduled = rescheduled 
        self.results = results 
        self.scheduled_at = APIHelper.apply_datetime_converter(scheduled_at, APIHelper.RFC3339DateTime) if scheduled_at else None 
        self.serie = serie 
        self.serie_id = serie_id 
        self.slug = slug 
        self.status = status 
        self.streams = streams 
        self.streams_list = streams_list 
        self.tournament = tournament 
        self.tournament_id = tournament_id 
        self.videogame = videogame 
        self.videogame_version = videogame_version 
        self.winner = winner 
        self.winner_id = winner_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from pandascorerestapiforallvideogames.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        begin_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("begin_at")).datetime if dictionary.get("begin_at") else None
        betting_metadata = BettingMetadata.from_dictionary(dictionary.get('betting_metadata')) if dictionary.get('betting_metadata') else None
        detailed_stats = dictionary.get("detailed_stats") if "detailed_stats" in dictionary.keys() else None
        draw = dictionary.get("draw") if "draw" in dictionary.keys() else None
        end_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("end_at")).datetime if dictionary.get("end_at") else None
        forfeit = dictionary.get("forfeit") if "forfeit" in dictionary.keys() else None
        game_advantage = dictionary.get("game_advantage") if dictionary.get("game_advantage") else None
        games = APIHelper.deserialize_union_type(UnionTypeLookUp.get('BettingGame12'), dictionary.get('games'), False) if dictionary.get('games') is not None else None
        id = dictionary.get("id") if dictionary.get("id") else None
        league = dictionary.get("league") if dictionary.get("league") else None
        league_id = dictionary.get("league_id") if dictionary.get("league_id") else None
        live = MatchLive.from_dictionary(dictionary.get('live')) if dictionary.get('live') else None
        live_embed_url = dictionary.get("live_embed_url") if dictionary.get("live_embed_url") else None
        match_type = dictionary.get("match_type") if dictionary.get("match_type") else None
        modified_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("modified_at")).datetime if dictionary.get("modified_at") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        number_of_games = dictionary.get("number_of_games") if dictionary.get("number_of_games") else None
        official_stream_url = dictionary.get("official_stream_url") if dictionary.get("official_stream_url") else None
        opponents = None
        if dictionary.get('opponents') is not None:
            opponents = [Opponent.from_dictionary(x) for x in dictionary.get('opponents')]
        original_scheduled_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("original_scheduled_at")).datetime if dictionary.get("original_scheduled_at") else None
        rescheduled = dictionary.get("rescheduled") if "rescheduled" in dictionary.keys() else None
        results = APIHelper.deserialize_union_type(UnionTypeLookUp.get('MatchResult1'), dictionary.get('results'), False) if dictionary.get('results') is not None else None
        scheduled_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("scheduled_at")).datetime if dictionary.get("scheduled_at") else None
        serie = dictionary.get("serie") if dictionary.get("serie") else None
        serie_id = dictionary.get("serie_id") if dictionary.get("serie_id") else None
        slug = dictionary.get("slug") if dictionary.get("slug") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        streams = MatchLocalizedStreams.from_dictionary(dictionary.get('streams')) if dictionary.get('streams') else None
        streams_list = None
        if dictionary.get('streams_list') is not None:
            streams_list = [Stream.from_dictionary(x) for x in dictionary.get('streams_list')]
        tournament = BettingBaseTournament.from_dictionary(dictionary.get('tournament')) if dictionary.get('tournament') else None
        tournament_id = dictionary.get("tournament_id") if dictionary.get("tournament_id") else None
        videogame = dictionary.get("videogame") if dictionary.get("videogame") else None
        videogame_version = dictionary.get("videogame_version") if dictionary.get("videogame_version") else None
        winner = dictionary.get("winner") if dictionary.get("winner") else None
        winner_id = dictionary.get("winner_id") if dictionary.get("winner_id") else None
        # Return an object of this model
        return cls(begin_at,
                   betting_metadata,
                   detailed_stats,
                   draw,
                   end_at,
                   forfeit,
                   game_advantage,
                   games,
                   id,
                   league,
                   league_id,
                   live,
                   live_embed_url,
                   match_type,
                   modified_at,
                   name,
                   number_of_games,
                   official_stream_url,
                   opponents,
                   original_scheduled_at,
                   rescheduled,
                   results,
                   scheduled_at,
                   serie,
                   serie_id,
                   slug,
                   status,
                   streams,
                   streams_list,
                   tournament,
                   tournament_id,
                   videogame,
                   videogame_version,
                   winner,
                   winner_id)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """
        from pandascorerestapiforallvideogames.utilities.union_type_lookup import UnionTypeLookUp

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.begin_at,
                                           type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime),
                                           is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.betting_metadata,
                                            type_callable=lambda value: BettingMetadata.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.detailed_stats,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.draw,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.end_at,
                                            type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.forfeit,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.game_advantage,
                                            type_callable=lambda value: isinstance(value, Any),
                                            is_value_nullable=True) \
                and UnionTypeLookUp.get('BettingGame12').validate(dictionary.games).is_valid \
                and APIHelper.is_valid_type(value=dictionary.id,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.league,
                                            type_callable=lambda value: isinstance(value, Any)) \
                and APIHelper.is_valid_type(value=dictionary.league_id,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.live,
                                            type_callable=lambda value: MatchLive.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.live_embed_url,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.match_type,
                                            type_callable=lambda value: MatchTypeEnum.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.modified_at,
                                            type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime)) \
                and APIHelper.is_valid_type(value=dictionary.name,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.number_of_games,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.official_stream_url,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.opponents,
                                            type_callable=lambda value: Opponent.validate(value),
                                            is_model_dict=True,
                                            is_inner_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.original_scheduled_at,
                                            type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.rescheduled,
                                            type_callable=lambda value: isinstance(value, bool),
                                            is_value_nullable=True) \
                and UnionTypeLookUp.get('MatchResult1').validate(dictionary.results).is_valid \
                and APIHelper.is_valid_type(value=dictionary.scheduled_at,
                                            type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.serie,
                                            type_callable=lambda value: isinstance(value, Any)) \
                and APIHelper.is_valid_type(value=dictionary.serie_id,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.slug,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.status,
                                            type_callable=lambda value: BettingMatchStatusEnum.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.streams,
                                            type_callable=lambda value: MatchLocalizedStreams.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.streams_list,
                                            type_callable=lambda value: Stream.validate(value),
                                            is_model_dict=True,
                                            is_inner_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.tournament,
                                            type_callable=lambda value: BettingBaseTournament.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.tournament_id,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.videogame,
                                            type_callable=lambda value: CurrentVideogameEnum.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.videogame_version,
                                            type_callable=lambda value: isinstance(value, Any)) \
                and APIHelper.is_valid_type(value=dictionary.winner,
                                            type_callable=lambda value: isinstance(value, Any)) \
                and APIHelper.is_valid_type(value=dictionary.winner_id,
                                            type_callable=lambda value: isinstance(value, Any),
                                            is_value_nullable=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('begin_at'),
                                       type_callable=lambda value: isinstance(value, str),
                                       is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('betting_metadata'),
                                        type_callable=lambda value: BettingMetadata.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('detailed_stats'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('draw'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('end_at'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('forfeit'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('game_advantage'),
                                        type_callable=lambda value: isinstance(value, Any),
                                        is_value_nullable=True) \
            and UnionTypeLookUp.get('BettingGame12').validate(dictionary.get('games')).is_valid \
            and APIHelper.is_valid_type(value=dictionary.get('id'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('league'),
                                        type_callable=lambda value: isinstance(value, Any)) \
            and APIHelper.is_valid_type(value=dictionary.get('league_id'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('live'),
                                        type_callable=lambda value: MatchLive.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('live_embed_url'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('match_type'),
                                        type_callable=lambda value: MatchTypeEnum.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('modified_at'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('name'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('number_of_games'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('official_stream_url'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('opponents'),
                                        type_callable=lambda value: Opponent.validate(value),
                                        is_model_dict=True,
                                        is_inner_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('original_scheduled_at'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('rescheduled'),
                                        type_callable=lambda value: isinstance(value, bool),
                                        is_value_nullable=True) \
            and UnionTypeLookUp.get('MatchResult1').validate(dictionary.get('results')).is_valid \
            and APIHelper.is_valid_type(value=dictionary.get('scheduled_at'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('serie'),
                                        type_callable=lambda value: isinstance(value, Any)) \
            and APIHelper.is_valid_type(value=dictionary.get('serie_id'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('slug'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('status'),
                                        type_callable=lambda value: BettingMatchStatusEnum.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('streams'),
                                        type_callable=lambda value: MatchLocalizedStreams.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('streams_list'),
                                        type_callable=lambda value: Stream.validate(value),
                                        is_model_dict=True,
                                        is_inner_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('tournament'),
                                        type_callable=lambda value: BettingBaseTournament.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('tournament_id'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('videogame'),
                                        type_callable=lambda value: CurrentVideogameEnum.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('videogame_version'),
                                        type_callable=lambda value: isinstance(value, Any)) \
            and APIHelper.is_valid_type(value=dictionary.get('winner'),
                                        type_callable=lambda value: isinstance(value, Any)) \
            and APIHelper.is_valid_type(value=dictionary.get('winner_id'),
                                        type_callable=lambda value: isinstance(value, Any),
                                        is_value_nullable=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={self.begin_at!r}, '
                f'betting_metadata={self.betting_metadata!r}, '
                f'detailed_stats={self.detailed_stats!r}, '
                f'draw={self.draw!r}, '
                f'end_at={self.end_at!r}, '
                f'forfeit={self.forfeit!r}, '
                f'game_advantage={self.game_advantage!r}, '
                f'games={self.games!r}, '
                f'id={self.id!r}, '
                f'league={self.league!r}, '
                f'league_id={self.league_id!r}, '
                f'live={self.live!r}, '
                f'live_embed_url={self.live_embed_url!r}, '
                f'match_type={self.match_type!r}, '
                f'modified_at={self.modified_at!r}, '
                f'name={self.name!r}, '
                f'number_of_games={self.number_of_games!r}, '
                f'official_stream_url={self.official_stream_url!r}, '
                f'opponents={self.opponents!r}, '
                f'original_scheduled_at={self.original_scheduled_at!r}, '
                f'rescheduled={self.rescheduled!r}, '
                f'results={self.results!r}, '
                f'scheduled_at={self.scheduled_at!r}, '
                f'serie={self.serie!r}, '
                f'serie_id={self.serie_id!r}, '
                f'slug={self.slug!r}, '
                f'status={self.status!r}, '
                f'streams={self.streams!r}, '
                f'streams_list={self.streams_list!r}, '
                f'tournament={self.tournament!r}, '
                f'tournament_id={self.tournament_id!r}, '
                f'videogame={self.videogame!r}, '
                f'videogame_version={self.videogame_version!r}, '
                f'winner={self.winner!r}, '
                f'winner_id={self.winner_id!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={self.begin_at!s}, '
                f'betting_metadata={self.betting_metadata!s}, '
                f'detailed_stats={self.detailed_stats!s}, '
                f'draw={self.draw!s}, '
                f'end_at={self.end_at!s}, '
                f'forfeit={self.forfeit!s}, '
                f'game_advantage={self.game_advantage!s}, '
                f'games={self.games!s}, '
                f'id={self.id!s}, '
                f'league={self.league!s}, '
                f'league_id={self.league_id!s}, '
                f'live={self.live!s}, '
                f'live_embed_url={self.live_embed_url!s}, '
                f'match_type={self.match_type!s}, '
                f'modified_at={self.modified_at!s}, '
                f'name={self.name!s}, '
                f'number_of_games={self.number_of_games!s}, '
                f'official_stream_url={self.official_stream_url!s}, '
                f'opponents={self.opponents!s}, '
                f'original_scheduled_at={self.original_scheduled_at!s}, '
                f'rescheduled={self.rescheduled!s}, '
                f'results={self.results!s}, '
                f'scheduled_at={self.scheduled_at!s}, '
                f'serie={self.serie!s}, '
                f'serie_id={self.serie_id!s}, '
                f'slug={self.slug!s}, '
                f'status={self.status!s}, '
                f'streams={self.streams!s}, '
                f'streams_list={self.streams_list!s}, '
                f'tournament={self.tournament!s}, '
                f'tournament_id={self.tournament_id!s}, '
                f'videogame={self.videogame!s}, '
                f'videogame_version={self.videogame_version!s}, '
                f'winner={self.winner!s}, '
                f'winner_id={self.winner_id!s})')
