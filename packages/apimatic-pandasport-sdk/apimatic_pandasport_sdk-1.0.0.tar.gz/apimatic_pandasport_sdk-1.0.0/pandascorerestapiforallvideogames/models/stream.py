# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.stream_language_enum import StreamLanguageEnum


class Stream(object):

    """Implementation of the 'Stream' model.

    Attributes:
        embed_url (str): The model property of type str.
        language (StreamLanguageEnum): The model property of type
            StreamLanguageEnum.
        main (bool): Whether it is the main stream. Main stream is always
            official.
        official (bool): Whether it is an official broadcast.
        raw_url (str): URL to the stream on host website.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "embed_url": 'embed_url',
        "language": 'language',
        "main": 'main',
        "official": 'official',
        "raw_url": 'raw_url'
    }

    _nullables = [
        'embed_url',
    ]

    def __init__(self,
                 embed_url=None,
                 language=None,
                 main=None,
                 official=None,
                 raw_url=None):
        """Constructor for the Stream class"""

        # Initialize members of the class
        self.embed_url = embed_url 
        self.language = language 
        self.main = main 
        self.official = official 
        self.raw_url = raw_url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        embed_url = dictionary.get("embed_url") if dictionary.get("embed_url") else None
        language = dictionary.get("language") if dictionary.get("language") else None
        main = dictionary.get("main") if "main" in dictionary.keys() else None
        official = dictionary.get("official") if "official" in dictionary.keys() else None
        raw_url = dictionary.get("raw_url") if dictionary.get("raw_url") else None
        # Return an object of this model
        return cls(embed_url,
                   language,
                   main,
                   official,
                   raw_url)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.embed_url,
                                           type_callable=lambda value: isinstance(value, str),
                                           is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.language,
                                            type_callable=lambda value: StreamLanguageEnum.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.main,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.official,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.raw_url,
                                            type_callable=lambda value: isinstance(value, str))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('embed_url'),
                                       type_callable=lambda value: isinstance(value, str),
                                       is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('language'),
                                        type_callable=lambda value: StreamLanguageEnum.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('main'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('official'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('raw_url'),
                                        type_callable=lambda value: isinstance(value, str))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'embed_url={self.embed_url!r}, '
                f'language={self.language!r}, '
                f'main={self.main!r}, '
                f'official={self.official!r}, '
                f'raw_url={self.raw_url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'embed_url={self.embed_url!s}, '
                f'language={self.language!s}, '
                f'main={self.main!s}, '
                f'official={self.official!s}, '
                f'raw_url={self.raw_url!s})')
