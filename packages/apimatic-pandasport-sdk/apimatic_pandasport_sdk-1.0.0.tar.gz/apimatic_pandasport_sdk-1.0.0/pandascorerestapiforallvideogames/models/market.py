# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.models.market_selection import MarketSelection


class Market(object):

    """Implementation of the 'Market' model.

    Attributes:
        id (str): The model property of type str.
        line (str): The model property of type str.
        margin (float): The model property of type float.
        name (str): The model property of type str.
        participant_id (Any): The model property of type Any.
        participant_type (Any): The model property of type Any.
        selections (List[MarketSelection]): The model property of type
            List[MarketSelection].
        status (MarketStatusEnum): The model property of type MarketStatusEnum.
        template (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "line": 'line',
        "margin": 'margin',
        "name": 'name',
        "participant_id": 'participant_id',
        "participant_type": 'participant_type',
        "selections": 'selections',
        "status": 'status',
        "template": 'template'
    }

    _nullables = [
        'line',
        'participant_id',
    ]

    def __init__(self,
                 id=None,
                 line=None,
                 margin=None,
                 name=None,
                 participant_id=None,
                 participant_type=None,
                 selections=None,
                 status=None,
                 template=None):
        """Constructor for the Market class"""

        # Initialize members of the class
        self.id = id 
        self.line = line 
        self.margin = margin 
        self.name = name 
        self.participant_id = participant_id 
        self.participant_type = participant_type 
        self.selections = selections 
        self.status = status 
        self.template = template 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        line = dictionary.get("line") if dictionary.get("line") else None
        margin = dictionary.get("margin") if dictionary.get("margin") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        participant_id = dictionary.get("participant_id") if dictionary.get("participant_id") else None
        participant_type = dictionary.get("participant_type") if dictionary.get("participant_type") else None
        selections = None
        if dictionary.get('selections') is not None:
            selections = [MarketSelection.from_dictionary(x) for x in dictionary.get('selections')]
        status = dictionary.get("status") if dictionary.get("status") else None
        template = dictionary.get("template") if dictionary.get("template") else None
        # Return an object of this model
        return cls(id,
                   line,
                   margin,
                   name,
                   participant_id,
                   participant_type,
                   selections,
                   status,
                   template)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'line={self.line!r}, '
                f'margin={self.margin!r}, '
                f'name={self.name!r}, '
                f'participant_id={self.participant_id!r}, '
                f'participant_type={self.participant_type!r}, '
                f'selections={self.selections!r}, '
                f'status={self.status!r}, '
                f'template={self.template!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'line={self.line!s}, '
                f'margin={self.margin!s}, '
                f'name={self.name!s}, '
                f'participant_id={self.participant_id!s}, '
                f'participant_type={self.participant_type!s}, '
                f'selections={self.selections!s}, '
                f'status={self.status!s}, '
                f'template={self.template!s})')
