# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper


class LiveEvent(object):

    """Implementation of the 'LiveEvent' model.

    Attributes:
        begin_at (datetime): The model property of type datetime.
        end_at (datetime): The model property of type datetime.
        game (VideogameSlugEnum): The model property of type VideogameSlugEnum.
        id (int): The model property of type int.
        is_active (bool): Whether event is active
        stream_url (str): The model property of type str.
        tournament_id (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "begin_at": 'begin_at',
        "end_at": 'end_at',
        "game": 'game',
        "id": 'id',
        "is_active": 'is_active',
        "stream_url": 'stream_url',
        "tournament_id": 'tournament_id'
    }

    _nullables = [
        'begin_at',
        'end_at',
        'stream_url',
    ]

    def __init__(self,
                 begin_at=None,
                 end_at=None,
                 game=None,
                 id=None,
                 is_active=None,
                 stream_url=None,
                 tournament_id=None):
        """Constructor for the LiveEvent class"""

        # Initialize members of the class
        self.begin_at = APIHelper.apply_datetime_converter(begin_at, APIHelper.RFC3339DateTime) if begin_at else None 
        self.end_at = APIHelper.apply_datetime_converter(end_at, APIHelper.RFC3339DateTime) if end_at else None 
        self.game = game 
        self.id = id 
        self.is_active = is_active 
        self.stream_url = stream_url 
        self.tournament_id = tournament_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        begin_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("begin_at")).datetime if dictionary.get("begin_at") else None
        end_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("end_at")).datetime if dictionary.get("end_at") else None
        game = dictionary.get("game") if dictionary.get("game") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        is_active = dictionary.get("is_active") if "is_active" in dictionary.keys() else None
        stream_url = dictionary.get("stream_url") if dictionary.get("stream_url") else None
        tournament_id = dictionary.get("tournament_id") if dictionary.get("tournament_id") else None
        # Return an object of this model
        return cls(begin_at,
                   end_at,
                   game,
                   id,
                   is_active,
                   stream_url,
                   tournament_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={self.begin_at!r}, '
                f'end_at={self.end_at!r}, '
                f'game={self.game!r}, '
                f'id={self.id!r}, '
                f'is_active={self.is_active!r}, '
                f'stream_url={self.stream_url!r}, '
                f'tournament_id={self.tournament_id!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={self.begin_at!s}, '
                f'end_at={self.end_at!s}, '
                f'game={self.game!s}, '
                f'id={self.id!s}, '
                f'is_active={self.is_active!s}, '
                f'stream_url={self.stream_url!s}, '
                f'tournament_id={self.tournament_id!s})')
