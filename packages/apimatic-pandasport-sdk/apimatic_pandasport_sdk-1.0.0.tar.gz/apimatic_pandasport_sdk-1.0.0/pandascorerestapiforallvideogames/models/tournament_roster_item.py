# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.base_player import BasePlayer
from pandascorerestapiforallvideogames.models.base_team import BaseTeam


class TournamentRosterItem(object):

    """Implementation of the 'TournamentRosterItem' model.

    Attributes:
        players (List[BasePlayer]): The model property of type
            List[BasePlayer].
        team (BaseTeam): The model property of type BaseTeam.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "players": 'players',
        "team": 'team'
    }

    def __init__(self,
                 players=None,
                 team=None):
        """Constructor for the TournamentRosterItem class"""

        # Initialize members of the class
        self.players = players 
        self.team = team 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        players = None
        if dictionary.get('players') is not None:
            players = [BasePlayer.from_dictionary(x) for x in dictionary.get('players')]
        team = BaseTeam.from_dictionary(dictionary.get('team')) if dictionary.get('team') else None
        # Return an object of this model
        return cls(players,
                   team)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.players,
                                           type_callable=lambda value: BasePlayer.validate(value),
                                           is_model_dict=True,
                                           is_inner_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.team,
                                            type_callable=lambda value: BaseTeam.validate(value),
                                            is_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('players'),
                                       type_callable=lambda value: BasePlayer.validate(value),
                                       is_model_dict=True,
                                       is_inner_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('team'),
                                        type_callable=lambda value: BaseTeam.validate(value),
                                        is_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'players={self.players!r}, '
                f'team={self.team!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'players={self.players!s}, '
                f'team={self.team!s})')
