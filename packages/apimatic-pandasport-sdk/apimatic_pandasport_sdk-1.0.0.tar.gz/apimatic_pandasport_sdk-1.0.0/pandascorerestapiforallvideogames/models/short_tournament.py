# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.base_league import BaseLeague
from pandascorerestapiforallvideogames.models.base_match import BaseMatch
from pandascorerestapiforallvideogames.models.base_serie import BaseSerie
from pandascorerestapiforallvideogames.models.base_team import BaseTeam


class ShortTournament(object):

    """Implementation of the 'ShortTournament' model.

    Attributes:
        begin_at (datetime): The model property of type datetime.
        end_at (datetime): The model property of type datetime.
        id (int): The model property of type int.
        league (BaseLeague): The model property of type BaseLeague.
        league_id (int): The model property of type int.
        live_supported (bool): Whether live is supported
        matches (List[BaseMatch]): The model property of type List[BaseMatch].
        modified_at (datetime): The model property of type datetime.
        name (str): The model property of type str.
        prizepool (str): The model property of type str.
        serie (BaseSerie): The model property of type BaseSerie.
        serie_id (int): The model property of type int.
        slug (str): The model property of type str.
        teams (List[BaseTeam]): The model property of type List[BaseTeam].
        videogame (CurrentVideogameEnum): The model property of type
            CurrentVideogameEnum.
        winner_id (Any): The model property of type Any.
        winner_type (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "begin_at": 'begin_at',
        "end_at": 'end_at',
        "id": 'id',
        "league": 'league',
        "league_id": 'league_id',
        "live_supported": 'live_supported',
        "matches": 'matches',
        "modified_at": 'modified_at',
        "name": 'name',
        "prizepool": 'prizepool',
        "serie": 'serie',
        "serie_id": 'serie_id',
        "slug": 'slug',
        "teams": 'teams',
        "videogame": 'videogame',
        "winner_id": 'winner_id',
        "winner_type": 'winner_type'
    }

    _nullables = [
        'begin_at',
        'end_at',
        'prizepool',
        'winner_id',
    ]

    def __init__(self,
                 begin_at=None,
                 end_at=None,
                 id=None,
                 league=None,
                 league_id=None,
                 live_supported=None,
                 matches=None,
                 modified_at=None,
                 name=None,
                 prizepool=None,
                 serie=None,
                 serie_id=None,
                 slug=None,
                 teams=None,
                 videogame=None,
                 winner_id=None,
                 winner_type=None):
        """Constructor for the ShortTournament class"""

        # Initialize members of the class
        self.begin_at = APIHelper.apply_datetime_converter(begin_at, APIHelper.RFC3339DateTime) if begin_at else None 
        self.end_at = APIHelper.apply_datetime_converter(end_at, APIHelper.RFC3339DateTime) if end_at else None 
        self.id = id 
        self.league = league 
        self.league_id = league_id 
        self.live_supported = live_supported 
        self.matches = matches 
        self.modified_at = APIHelper.apply_datetime_converter(modified_at, APIHelper.RFC3339DateTime) if modified_at else None 
        self.name = name 
        self.prizepool = prizepool 
        self.serie = serie 
        self.serie_id = serie_id 
        self.slug = slug 
        self.teams = teams 
        self.videogame = videogame 
        self.winner_id = winner_id 
        self.winner_type = winner_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        begin_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("begin_at")).datetime if dictionary.get("begin_at") else None
        end_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("end_at")).datetime if dictionary.get("end_at") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        league = BaseLeague.from_dictionary(dictionary.get('league')) if dictionary.get('league') else None
        league_id = dictionary.get("league_id") if dictionary.get("league_id") else None
        live_supported = dictionary.get("live_supported") if "live_supported" in dictionary.keys() else None
        matches = None
        if dictionary.get('matches') is not None:
            matches = [BaseMatch.from_dictionary(x) for x in dictionary.get('matches')]
        modified_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("modified_at")).datetime if dictionary.get("modified_at") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        prizepool = dictionary.get("prizepool") if dictionary.get("prizepool") else None
        serie = BaseSerie.from_dictionary(dictionary.get('serie')) if dictionary.get('serie') else None
        serie_id = dictionary.get("serie_id") if dictionary.get("serie_id") else None
        slug = dictionary.get("slug") if dictionary.get("slug") else None
        teams = None
        if dictionary.get('teams') is not None:
            teams = [BaseTeam.from_dictionary(x) for x in dictionary.get('teams')]
        videogame = dictionary.get("videogame") if dictionary.get("videogame") else None
        winner_id = dictionary.get("winner_id") if dictionary.get("winner_id") else None
        winner_type = dictionary.get("winner_type") if dictionary.get("winner_type") else None
        # Return an object of this model
        return cls(begin_at,
                   end_at,
                   id,
                   league,
                   league_id,
                   live_supported,
                   matches,
                   modified_at,
                   name,
                   prizepool,
                   serie,
                   serie_id,
                   slug,
                   teams,
                   videogame,
                   winner_id,
                   winner_type)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={self.begin_at!r}, '
                f'end_at={self.end_at!r}, '
                f'id={self.id!r}, '
                f'league={self.league!r}, '
                f'league_id={self.league_id!r}, '
                f'live_supported={self.live_supported!r}, '
                f'matches={self.matches!r}, '
                f'modified_at={self.modified_at!r}, '
                f'name={self.name!r}, '
                f'prizepool={self.prizepool!r}, '
                f'serie={self.serie!r}, '
                f'serie_id={self.serie_id!r}, '
                f'slug={self.slug!r}, '
                f'teams={self.teams!r}, '
                f'videogame={self.videogame!r}, '
                f'winner_id={self.winner_id!r}, '
                f'winner_type={self.winner_type!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={self.begin_at!s}, '
                f'end_at={self.end_at!s}, '
                f'id={self.id!s}, '
                f'league={self.league!s}, '
                f'league_id={self.league_id!s}, '
                f'live_supported={self.live_supported!s}, '
                f'matches={self.matches!s}, '
                f'modified_at={self.modified_at!s}, '
                f'name={self.name!s}, '
                f'prizepool={self.prizepool!s}, '
                f'serie={self.serie!s}, '
                f'serie_id={self.serie_id!s}, '
                f'slug={self.slug!s}, '
                f'teams={self.teams!s}, '
                f'videogame={self.videogame!s}, '
                f'winner_id={self.winner_id!s}, '
                f'winner_type={self.winner_type!s})')
