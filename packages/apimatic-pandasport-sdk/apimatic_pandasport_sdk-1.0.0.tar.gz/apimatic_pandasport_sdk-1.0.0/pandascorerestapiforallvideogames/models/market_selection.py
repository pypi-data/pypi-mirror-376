# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class MarketSelection(object):

    """Implementation of the 'MarketSelection' model.

    Attributes:
        line (str): The model property of type str.
        name (str): The model property of type str.
        participant_id (Any): The model property of type Any.
        participant_type (Any): The model property of type Any.
        position (int): The model property of type int.
        probability (float): The model property of type float.
        probability_with_margin (float): The model property of type float.
        result (Any): The model property of type Any.
        template (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "line": 'line',
        "name": 'name',
        "participant_id": 'participant_id',
        "participant_type": 'participant_type',
        "position": 'position',
        "probability": 'probability',
        "probability_with_margin": 'probability_with_margin',
        "result": 'result',
        "template": 'template'
    }

    _nullables = [
        'line',
        'participant_id',
    ]

    def __init__(self,
                 line=None,
                 name=None,
                 participant_id=None,
                 participant_type=None,
                 position=None,
                 probability=None,
                 probability_with_margin=None,
                 result=None,
                 template=None):
        """Constructor for the MarketSelection class"""

        # Initialize members of the class
        self.line = line 
        self.name = name 
        self.participant_id = participant_id 
        self.participant_type = participant_type 
        self.position = position 
        self.probability = probability 
        self.probability_with_margin = probability_with_margin 
        self.result = result 
        self.template = template 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        line = dictionary.get("line") if dictionary.get("line") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        participant_id = dictionary.get("participant_id") if dictionary.get("participant_id") else None
        participant_type = dictionary.get("participant_type") if dictionary.get("participant_type") else None
        position = dictionary.get("position") if dictionary.get("position") else None
        probability = dictionary.get("probability") if dictionary.get("probability") else None
        probability_with_margin = dictionary.get("probability_with_margin") if dictionary.get("probability_with_margin") else None
        result = dictionary.get("result") if dictionary.get("result") else None
        template = dictionary.get("template") if dictionary.get("template") else None
        # Return an object of this model
        return cls(line,
                   name,
                   participant_id,
                   participant_type,
                   position,
                   probability,
                   probability_with_margin,
                   result,
                   template)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'line={self.line!r}, '
                f'name={self.name!r}, '
                f'participant_id={self.participant_id!r}, '
                f'participant_type={self.participant_type!r}, '
                f'position={self.position!r}, '
                f'probability={self.probability!r}, '
                f'probability_with_margin={self.probability_with_margin!r}, '
                f'result={self.result!r}, '
                f'template={self.template!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'line={self.line!s}, '
                f'name={self.name!s}, '
                f'participant_id={self.participant_id!s}, '
                f'participant_type={self.participant_type!s}, '
                f'position={self.position!s}, '
                f'probability={self.probability!s}, '
                f'probability_with_margin={self.probability_with_margin!s}, '
                f'result={self.result!s}, '
                f'template={self.template!s})')
