# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.game_winner import GameWinner


class BettingGames(object):

    """Implementation of the 'BettingGames' model.

    Attributes:
        begin_at (datetime): The model property of type datetime.
        complete (bool): Whether game data are complete and won't change
        detailed_stats (bool): Whether the game offers full stats
        end_at (datetime): The model property of type datetime.
        finished (bool): Whether game is finished
        forfeit (bool): Whether game is forfeit
        game_round_teams (Any): The model property of type Any.
        id (int): The model property of type int.
        length (int): The model property of type int.
        map (Any): The model property of type Any.
        match_id (int): The model property of type int.
        number_of_rounds (int): The model property of type int.
        position (int): The model property of type int.
        status (Any): The model property of type Any.
        video_url (str): The model property of type str.
        winner (GameWinner): The model property of type GameWinner.
        winner_type (Any): The model property of type Any.
        game_teams (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "begin_at": 'begin_at',
        "complete": 'complete',
        "detailed_stats": 'detailed_stats',
        "end_at": 'end_at',
        "finished": 'finished',
        "forfeit": 'forfeit',
        "game_round_teams": 'game_round_teams',
        "id": 'id',
        "length": 'length',
        "map": 'map',
        "match_id": 'match_id',
        "number_of_rounds": 'number_of_rounds',
        "position": 'position',
        "status": 'status',
        "video_url": 'video_url',
        "winner": 'winner',
        "winner_type": 'winner_type',
        "game_teams": 'game_teams'
    }

    _optionals = [
        'begin_at',
        'complete',
        'detailed_stats',
        'end_at',
        'finished',
        'forfeit',
        'game_round_teams',
        'id',
        'length',
        'map',
        'match_id',
        'number_of_rounds',
        'position',
        'status',
        'video_url',
        'winner',
        'winner_type',
        'game_teams',
    ]

    _nullables = [
        'begin_at',
        'end_at',
        'game_round_teams',
        'length',
        'number_of_rounds',
        'video_url',
        'game_teams',
    ]

    def __init__(self,
                 begin_at=APIHelper.SKIP,
                 complete=APIHelper.SKIP,
                 detailed_stats=APIHelper.SKIP,
                 end_at=APIHelper.SKIP,
                 finished=APIHelper.SKIP,
                 forfeit=APIHelper.SKIP,
                 game_round_teams=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 length=APIHelper.SKIP,
                 map=APIHelper.SKIP,
                 match_id=APIHelper.SKIP,
                 number_of_rounds=APIHelper.SKIP,
                 position=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 video_url=APIHelper.SKIP,
                 winner=APIHelper.SKIP,
                 winner_type=APIHelper.SKIP,
                 game_teams=APIHelper.SKIP):
        """Constructor for the BettingGames class"""

        # Initialize members of the class
        if begin_at is not APIHelper.SKIP:
            self.begin_at = APIHelper.apply_datetime_converter(begin_at, APIHelper.RFC3339DateTime) if begin_at else None 
        if complete is not APIHelper.SKIP:
            self.complete = complete 
        if detailed_stats is not APIHelper.SKIP:
            self.detailed_stats = detailed_stats 
        if end_at is not APIHelper.SKIP:
            self.end_at = APIHelper.apply_datetime_converter(end_at, APIHelper.RFC3339DateTime) if end_at else None 
        if finished is not APIHelper.SKIP:
            self.finished = finished 
        if forfeit is not APIHelper.SKIP:
            self.forfeit = forfeit 
        if game_round_teams is not APIHelper.SKIP:
            self.game_round_teams = game_round_teams 
        if id is not APIHelper.SKIP:
            self.id = id 
        if length is not APIHelper.SKIP:
            self.length = length 
        if map is not APIHelper.SKIP:
            self.map = map 
        if match_id is not APIHelper.SKIP:
            self.match_id = match_id 
        if number_of_rounds is not APIHelper.SKIP:
            self.number_of_rounds = number_of_rounds 
        if position is not APIHelper.SKIP:
            self.position = position 
        if status is not APIHelper.SKIP:
            self.status = status 
        if video_url is not APIHelper.SKIP:
            self.video_url = video_url 
        if winner is not APIHelper.SKIP:
            self.winner = winner 
        if winner_type is not APIHelper.SKIP:
            self.winner_type = winner_type 
        if game_teams is not APIHelper.SKIP:
            self.game_teams = game_teams 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        if 'begin_at' in dictionary.keys():
            begin_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("begin_at")).datetime if dictionary.get("begin_at") else None
        else:
            begin_at = APIHelper.SKIP
        complete = dictionary.get("complete") if "complete" in dictionary.keys() else APIHelper.SKIP
        detailed_stats = dictionary.get("detailed_stats") if "detailed_stats" in dictionary.keys() else APIHelper.SKIP
        if 'end_at' in dictionary.keys():
            end_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("end_at")).datetime if dictionary.get("end_at") else None
        else:
            end_at = APIHelper.SKIP
        finished = dictionary.get("finished") if "finished" in dictionary.keys() else APIHelper.SKIP
        forfeit = dictionary.get("forfeit") if "forfeit" in dictionary.keys() else APIHelper.SKIP
        game_round_teams = dictionary.get("game_round_teams") if "game_round_teams" in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        length = dictionary.get("length") if "length" in dictionary.keys() else APIHelper.SKIP
        map = dictionary.get("map") if dictionary.get("map") else APIHelper.SKIP
        match_id = dictionary.get("match_id") if dictionary.get("match_id") else APIHelper.SKIP
        number_of_rounds = dictionary.get("number_of_rounds") if "number_of_rounds" in dictionary.keys() else APIHelper.SKIP
        position = dictionary.get("position") if dictionary.get("position") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        video_url = dictionary.get("video_url") if "video_url" in dictionary.keys() else APIHelper.SKIP
        winner = GameWinner.from_dictionary(dictionary.get('winner')) if 'winner' in dictionary.keys() else APIHelper.SKIP
        winner_type = dictionary.get("winner_type") if dictionary.get("winner_type") else APIHelper.SKIP
        game_teams = dictionary.get("game_teams") if "game_teams" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(begin_at,
                   complete,
                   detailed_stats,
                   end_at,
                   finished,
                   forfeit,
                   game_round_teams,
                   id,
                   length,
                   map,
                   match_id,
                   number_of_rounds,
                   position,
                   status,
                   video_url,
                   winner,
                   winner_type,
                   game_teams)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={(self.begin_at if hasattr(self, "begin_at") else None)!r}, '
                f'complete={(self.complete if hasattr(self, "complete") else None)!r}, '
                f'detailed_stats={(self.detailed_stats if hasattr(self, "detailed_stats") else None)!r}, '
                f'end_at={(self.end_at if hasattr(self, "end_at") else None)!r}, '
                f'finished={(self.finished if hasattr(self, "finished") else None)!r}, '
                f'forfeit={(self.forfeit if hasattr(self, "forfeit") else None)!r}, '
                f'game_round_teams={(self.game_round_teams if hasattr(self, "game_round_teams") else None)!r}, '
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'length={(self.length if hasattr(self, "length") else None)!r}, '
                f'map={(self.map if hasattr(self, "map") else None)!r}, '
                f'match_id={(self.match_id if hasattr(self, "match_id") else None)!r}, '
                f'number_of_rounds={(self.number_of_rounds if hasattr(self, "number_of_rounds") else None)!r}, '
                f'position={(self.position if hasattr(self, "position") else None)!r}, '
                f'status={(self.status if hasattr(self, "status") else None)!r}, '
                f'video_url={(self.video_url if hasattr(self, "video_url") else None)!r}, '
                f'winner={(self.winner if hasattr(self, "winner") else None)!r}, '
                f'winner_type={(self.winner_type if hasattr(self, "winner_type") else None)!r}, '
                f'game_teams={(self.game_teams if hasattr(self, "game_teams") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={(self.begin_at if hasattr(self, "begin_at") else None)!s}, '
                f'complete={(self.complete if hasattr(self, "complete") else None)!s}, '
                f'detailed_stats={(self.detailed_stats if hasattr(self, "detailed_stats") else None)!s}, '
                f'end_at={(self.end_at if hasattr(self, "end_at") else None)!s}, '
                f'finished={(self.finished if hasattr(self, "finished") else None)!s}, '
                f'forfeit={(self.forfeit if hasattr(self, "forfeit") else None)!s}, '
                f'game_round_teams={(self.game_round_teams if hasattr(self, "game_round_teams") else None)!s}, '
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'length={(self.length if hasattr(self, "length") else None)!s}, '
                f'map={(self.map if hasattr(self, "map") else None)!s}, '
                f'match_id={(self.match_id if hasattr(self, "match_id") else None)!s}, '
                f'number_of_rounds={(self.number_of_rounds if hasattr(self, "number_of_rounds") else None)!s}, '
                f'position={(self.position if hasattr(self, "position") else None)!s}, '
                f'status={(self.status if hasattr(self, "status") else None)!s}, '
                f'video_url={(self.video_url if hasattr(self, "video_url") else None)!s}, '
                f'winner={(self.winner if hasattr(self, "winner") else None)!s}, '
                f'winner_type={(self.winner_type if hasattr(self, "winner_type") else None)!s}, '
                f'game_teams={(self.game_teams if hasattr(self, "game_teams") else None)!s})')
