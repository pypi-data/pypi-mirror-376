# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper


class Page(object):

    """Implementation of the 'page' model.

    Attributes:
        number (int): The model property of type int.
        size (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "number": 'number',
        "size": 'size'
    }

    _optionals = [
        'number',
        'size',
    ]

    def __init__(self,
                 number=1,
                 size=50):
        """Constructor for the Page class"""

        # Initialize members of the class
        self.number = number 
        self.size = size 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        number = dictionary.get("number") if dictionary.get("number") else 1
        size = dictionary.get("size") if dictionary.get("size") else 50
        # Return an object of this model
        return cls(number,
                   size)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'number={(self.number if hasattr(self, "number") else None)!r}, '
                f'size={(self.size if hasattr(self, "size") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'number={(self.number if hasattr(self, "number") else None)!s}, '
                f'size={(self.size if hasattr(self, "size") else None)!s})')
