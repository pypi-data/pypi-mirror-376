# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.base_player import BasePlayer


class Team(object):

    """Implementation of the 'Team' model.

    Attributes:
        acronym (str): The model property of type str.
        current_videogame (Any): The model property of type Any.
        id (int): The model property of type int.
        image_url (str): The model property of type str.
        location (str): The model property of type str.
        modified_at (datetime): The model property of type datetime.
        name (str): The model property of type str.
        players (List[BasePlayer]): The model property of type
            List[BasePlayer].
        slug (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "acronym": 'acronym',
        "current_videogame": 'current_videogame',
        "id": 'id',
        "image_url": 'image_url',
        "location": 'location',
        "modified_at": 'modified_at',
        "name": 'name',
        "players": 'players',
        "slug": 'slug'
    }

    _nullables = [
        'acronym',
        'image_url',
        'location',
        'slug',
    ]

    def __init__(self,
                 acronym=None,
                 current_videogame=None,
                 id=None,
                 image_url=None,
                 location=None,
                 modified_at=None,
                 name=None,
                 players=None,
                 slug=None):
        """Constructor for the Team class"""

        # Initialize members of the class
        self.acronym = acronym 
        self.current_videogame = current_videogame 
        self.id = id 
        self.image_url = image_url 
        self.location = location 
        self.modified_at = APIHelper.apply_datetime_converter(modified_at, APIHelper.RFC3339DateTime) if modified_at else None 
        self.name = name 
        self.players = players 
        self.slug = slug 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        acronym = dictionary.get("acronym") if dictionary.get("acronym") else None
        current_videogame = dictionary.get("current_videogame") if dictionary.get("current_videogame") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        image_url = dictionary.get("image_url") if dictionary.get("image_url") else None
        location = dictionary.get("location") if dictionary.get("location") else None
        modified_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("modified_at")).datetime if dictionary.get("modified_at") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        players = None
        if dictionary.get('players') is not None:
            players = [BasePlayer.from_dictionary(x) for x in dictionary.get('players')]
        slug = dictionary.get("slug") if dictionary.get("slug") else None
        # Return an object of this model
        return cls(acronym,
                   current_videogame,
                   id,
                   image_url,
                   location,
                   modified_at,
                   name,
                   players,
                   slug)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.acronym,
                                           type_callable=lambda value: isinstance(value, str),
                                           is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.current_videogame,
                                            type_callable=lambda value: isinstance(value, Any)) \
                and APIHelper.is_valid_type(value=dictionary.id,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.image_url,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.location,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.modified_at,
                                            type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime)) \
                and APIHelper.is_valid_type(value=dictionary.name,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.players,
                                            type_callable=lambda value: BasePlayer.validate(value),
                                            is_model_dict=True,
                                            is_inner_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.slug,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('acronym'),
                                       type_callable=lambda value: isinstance(value, str),
                                       is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('current_videogame'),
                                        type_callable=lambda value: isinstance(value, Any)) \
            and APIHelper.is_valid_type(value=dictionary.get('id'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('image_url'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('location'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('modified_at'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('name'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('players'),
                                        type_callable=lambda value: BasePlayer.validate(value),
                                        is_model_dict=True,
                                        is_inner_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('slug'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'acronym={self.acronym!r}, '
                f'current_videogame={self.current_videogame!r}, '
                f'id={self.id!r}, '
                f'image_url={self.image_url!r}, '
                f'location={self.location!r}, '
                f'modified_at={self.modified_at!r}, '
                f'name={self.name!r}, '
                f'players={self.players!r}, '
                f'slug={self.slug!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'acronym={self.acronym!s}, '
                f'current_videogame={self.current_videogame!s}, '
                f'id={self.id!s}, '
                f'image_url={self.image_url!s}, '
                f'location={self.location!s}, '
                f'modified_at={self.modified_at!s}, '
                f'name={self.name!s}, '
                f'players={self.players!s}, '
                f'slug={self.slug!s})')
