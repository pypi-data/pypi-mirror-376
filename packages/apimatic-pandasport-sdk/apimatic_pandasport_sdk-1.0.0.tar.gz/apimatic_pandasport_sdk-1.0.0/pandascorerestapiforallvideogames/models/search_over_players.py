# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper


class SearchOverPlayers(object):

    """Implementation of the 'search_over_Players' model.

    Attributes:
        birthday (str): Not present if the client did not subscribe to the
            appropriate plan.
        first_name (str): The model property of type str.
        hometown (str): The model property of type str.
        last_name (str): The model property of type str.
        name (str): The model property of type str.
        nationality (str): The model property of type str.
        role (str): The model property of type str.
        slug (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "birthday": 'birthday',
        "first_name": 'first_name',
        "hometown": 'hometown',
        "last_name": 'last_name',
        "name": 'name',
        "nationality": 'nationality',
        "role": 'role',
        "slug": 'slug'
    }

    _optionals = [
        'birthday',
        'first_name',
        'hometown',
        'last_name',
        'name',
        'nationality',
        'role',
        'slug',
    ]

    def __init__(self,
                 birthday=APIHelper.SKIP,
                 first_name=APIHelper.SKIP,
                 hometown=APIHelper.SKIP,
                 last_name=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 nationality=APIHelper.SKIP,
                 role=APIHelper.SKIP,
                 slug=APIHelper.SKIP):
        """Constructor for the SearchOverPlayers class"""

        # Initialize members of the class
        if birthday is not APIHelper.SKIP:
            self.birthday = birthday 
        if first_name is not APIHelper.SKIP:
            self.first_name = first_name 
        if hometown is not APIHelper.SKIP:
            self.hometown = hometown 
        if last_name is not APIHelper.SKIP:
            self.last_name = last_name 
        if name is not APIHelper.SKIP:
            self.name = name 
        if nationality is not APIHelper.SKIP:
            self.nationality = nationality 
        if role is not APIHelper.SKIP:
            self.role = role 
        if slug is not APIHelper.SKIP:
            self.slug = slug 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        birthday = dictionary.get("birthday") if dictionary.get("birthday") else APIHelper.SKIP
        first_name = dictionary.get("first_name") if dictionary.get("first_name") else APIHelper.SKIP
        hometown = dictionary.get("hometown") if dictionary.get("hometown") else APIHelper.SKIP
        last_name = dictionary.get("last_name") if dictionary.get("last_name") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        nationality = dictionary.get("nationality") if dictionary.get("nationality") else APIHelper.SKIP
        role = dictionary.get("role") if dictionary.get("role") else APIHelper.SKIP
        slug = dictionary.get("slug") if dictionary.get("slug") else APIHelper.SKIP
        # Return an object of this model
        return cls(birthday,
                   first_name,
                   hometown,
                   last_name,
                   name,
                   nationality,
                   role,
                   slug)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'birthday={(self.birthday if hasattr(self, "birthday") else None)!r}, '
                f'first_name={(self.first_name if hasattr(self, "first_name") else None)!r}, '
                f'hometown={(self.hometown if hasattr(self, "hometown") else None)!r}, '
                f'last_name={(self.last_name if hasattr(self, "last_name") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'nationality={(self.nationality if hasattr(self, "nationality") else None)!r}, '
                f'role={(self.role if hasattr(self, "role") else None)!r}, '
                f'slug={(self.slug if hasattr(self, "slug") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'birthday={(self.birthday if hasattr(self, "birthday") else None)!s}, '
                f'first_name={(self.first_name if hasattr(self, "first_name") else None)!s}, '
                f'hometown={(self.hometown if hasattr(self, "hometown") else None)!s}, '
                f'last_name={(self.last_name if hasattr(self, "last_name") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'nationality={(self.nationality if hasattr(self, "nationality") else None)!s}, '
                f'role={(self.role if hasattr(self, "role") else None)!s}, '
                f'slug={(self.slug if hasattr(self, "slug") else None)!s})')
