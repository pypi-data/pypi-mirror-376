# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper


class FilterOverSeries(object):

    """Implementation of the 'filter_over_Series' model.

    Attributes:
        begin_at (List[datetime]): The model property of type List[datetime].
        description (List[str]): The model property of type List[str].
        end_at (List[datetime]): The model property of type List[datetime].
        id (List[int]): The model property of type List[int].
        league_id (List[int]): The model property of type List[int].
        modified_at (List[datetime]): The model property of type
            List[datetime].
        name (List[str]): The model property of type List[str].
        season (List[str]): The model property of type List[str].
        slug (List[str]): The model property of type List[str].
        tier (List[str]): The model property of type List[str].
        winner_id (List[int] | None): The model property of type List[int] |
            None.
        winner_type (List[OpponentTypeEnum]): The model property of type
            List[OpponentTypeEnum].
        year (List[int]): The model property of type List[int].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "begin_at": 'begin_at',
        "description": 'description',
        "end_at": 'end_at',
        "id": 'id',
        "league_id": 'league_id',
        "modified_at": 'modified_at',
        "name": 'name',
        "season": 'season',
        "slug": 'slug',
        "tier": 'tier',
        "winner_id": 'winner_id',
        "winner_type": 'winner_type',
        "year": 'year'
    }

    _optionals = [
        'begin_at',
        'description',
        'end_at',
        'id',
        'league_id',
        'modified_at',
        'name',
        'season',
        'slug',
        'tier',
        'winner_id',
        'winner_type',
        'year',
    ]

    def __init__(self,
                 begin_at=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 end_at=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 league_id=APIHelper.SKIP,
                 modified_at=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 season=APIHelper.SKIP,
                 slug=APIHelper.SKIP,
                 tier=APIHelper.SKIP,
                 winner_id=APIHelper.SKIP,
                 winner_type=APIHelper.SKIP,
                 year=APIHelper.SKIP):
        """Constructor for the FilterOverSeries class"""

        # Initialize members of the class
        if begin_at is not None and begin_at is not APIHelper.SKIP:
            self.begin_at = APIHelper.apply_datetime_converter(begin_at, APIHelper.RFC3339DateTime)
        if description is not APIHelper.SKIP:
            self.description = description 
        if end_at is not None and end_at is not APIHelper.SKIP:
            self.end_at = APIHelper.apply_datetime_converter(end_at, APIHelper.RFC3339DateTime)
        if id is not APIHelper.SKIP:
            self.id = id 
        if league_id is not APIHelper.SKIP:
            self.league_id = league_id 
        if modified_at is not None and modified_at is not APIHelper.SKIP:
            self.modified_at = APIHelper.apply_datetime_converter(modified_at, APIHelper.RFC3339DateTime)
        if name is not APIHelper.SKIP:
            self.name = name 
        if season is not APIHelper.SKIP:
            self.season = season 
        if slug is not APIHelper.SKIP:
            self.slug = slug 
        if tier is not APIHelper.SKIP:
            self.tier = tier 
        if winner_id is not APIHelper.SKIP:
            self.winner_id = winner_id 
        if winner_type is not APIHelper.SKIP:
            self.winner_type = winner_type 
        if year is not APIHelper.SKIP:
            self.year = year 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from pandascorerestapiforallvideogames.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        begin_at = None
        if dictionary.get('begin_at') is not None:
            begin_at = list()
            for x in dictionary.get('begin_at'):
                begin_at.append(APIHelper.RFC3339DateTime.from_value(x).datetime)
        else:
            begin_at = APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        end_at = None
        if dictionary.get('end_at') is not None:
            end_at = list()
            for x in dictionary.get('end_at'):
                end_at.append(APIHelper.RFC3339DateTime.from_value(x).datetime)
        else:
            end_at = APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        league_id = dictionary.get("league_id") if dictionary.get("league_id") else APIHelper.SKIP
        modified_at = None
        if dictionary.get('modified_at') is not None:
            modified_at = list()
            for x in dictionary.get('modified_at'):
                modified_at.append(APIHelper.RFC3339DateTime.from_value(x).datetime)
        else:
            modified_at = APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        season = dictionary.get("season") if dictionary.get("season") else APIHelper.SKIP
        slug = dictionary.get("slug") if dictionary.get("slug") else APIHelper.SKIP
        tier = dictionary.get("tier") if dictionary.get("tier") else APIHelper.SKIP
        winner_id = APIHelper.deserialize_union_type(UnionTypeLookUp.get('OpponentID'), dictionary.get('winner_id'), False) if dictionary.get('winner_id') is not None else APIHelper.SKIP
        winner_type = dictionary.get("winner_type") if dictionary.get("winner_type") else APIHelper.SKIP
        year = dictionary.get("year") if dictionary.get("year") else APIHelper.SKIP
        # Return an object of this model
        return cls(begin_at,
                   description,
                   end_at,
                   id,
                   league_id,
                   modified_at,
                   name,
                   season,
                   slug,
                   tier,
                   winner_id,
                   winner_type,
                   year)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={(self.begin_at if hasattr(self, "begin_at") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'end_at={(self.end_at if hasattr(self, "end_at") else None)!r}, '
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'league_id={(self.league_id if hasattr(self, "league_id") else None)!r}, '
                f'modified_at={(self.modified_at if hasattr(self, "modified_at") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'season={(self.season if hasattr(self, "season") else None)!r}, '
                f'slug={(self.slug if hasattr(self, "slug") else None)!r}, '
                f'tier={(self.tier if hasattr(self, "tier") else None)!r}, '
                f'winner_id={(self.winner_id if hasattr(self, "winner_id") else None)!r}, '
                f'winner_type={(self.winner_type if hasattr(self, "winner_type") else None)!r}, '
                f'year={(self.year if hasattr(self, "year") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={(self.begin_at if hasattr(self, "begin_at") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'end_at={(self.end_at if hasattr(self, "end_at") else None)!s}, '
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'league_id={(self.league_id if hasattr(self, "league_id") else None)!s}, '
                f'modified_at={(self.modified_at if hasattr(self, "modified_at") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'season={(self.season if hasattr(self, "season") else None)!s}, '
                f'slug={(self.slug if hasattr(self, "slug") else None)!s}, '
                f'tier={(self.tier if hasattr(self, "tier") else None)!s}, '
                f'winner_id={(self.winner_id if hasattr(self, "winner_id") else None)!s}, '
                f'winner_type={(self.winner_type if hasattr(self, "winner_type") else None)!s}, '
                f'year={(self.year if hasattr(self, "year") else None)!s})')
