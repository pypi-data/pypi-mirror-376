# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.configuration import Server
from pandascorerestapiforallvideogames.controllers.base_controller import BaseController
from pandascorerestapiforallvideogames.utilities.union_type_lookup import UnionTypeLookUp
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from pandascorerestapiforallvideogames.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.or_auth_group import Or
from pandascorerestapiforallvideogames.models.serie import Serie
from pandascorerestapiforallvideogames.models.series_response import SeriesResponse
from pandascorerestapiforallvideogames.models.match import Match
from pandascorerestapiforallvideogames.models.player import Player
from pandascorerestapiforallvideogames.models.short_tournament import ShortTournament
from pandascorerestapiforallvideogames.exceptions.error_4001_exception import Error4001Exception


class SeriesController(BaseController):

    """A Controller to access Endpoints in the pandascorerestapiforallvideogames API."""
    def __init__(self, config):
        super(SeriesController, self).__init__(config)

    def get_series(self,
                   filter=None,
                   search=None,
                   sort=None,
                   range=None,
                   page=None,
                   per_page=50):
        """Does a GET request to /series.

        List series

        Args:
            filter (Filter5, optional): Options to filter results. String
                fields are case sensitive
            search (Search5, optional): Options to search results
            sort (List[SortOverSeriesEnum], optional): Options to sort results
            range (Range5, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Serie]: Response from the API. A list of series

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/series')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetSeriesPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Serie.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_series_past(self,
                        filter=None,
                        search=None,
                        sort=None,
                        range=None,
                        page=None,
                        per_page=50):
        """Does a GET request to /series/past.

        List past series

        Args:
            filter (Filter5, optional): Options to filter results. String
                fields are case sensitive
            search (Search5, optional): Options to search results
            sort (List[SortOverSeriesEnum], optional): Options to sort results
            range (Range5, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Serie]: Response from the API. A list of series

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/series/past')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetSeriesPastPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Serie.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_series_running(self,
                           filter=None,
                           search=None,
                           sort=None,
                           range=None,
                           page=None,
                           per_page=50):
        """Does a GET request to /series/running.

        List currently running series

        Args:
            filter (Filter5, optional): Options to filter results. String
                fields are case sensitive
            search (Search5, optional): Options to search results
            sort (List[SortOverSeriesEnum], optional): Options to sort results
            range (Range5, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Serie]: Response from the API. A list of series

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/series/running')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetSeriesRunningPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Serie.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_series_upcoming(self,
                            filter=None,
                            search=None,
                            sort=None,
                            range=None,
                            page=None,
                            per_page=50):
        """Does a GET request to /series/upcoming.

        List upcoming series

        Args:
            filter (Filter5, optional): Options to filter results. String
                fields are case sensitive
            search (Search5, optional): Options to search results
            sort (List[SortOverSeriesEnum], optional): Options to sort results
            range (Range5, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Serie]: Response from the API. A list of series

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/series/upcoming')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetSeriesUpcomingPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Serie.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_series_serie_id_or_slug(self,
                                    serie_id_or_slug):
        """Does a GET request to /series/{serie_id_or_slug}.

        Get a single serie by ID or by slug

        Args:
            serie_id_or_slug (Any): A serie ID or slug

        Returns:
            SeriesResponse: Response from the API. A serie

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/series/{serie_id_or_slug}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('serie_id_or_slug')
                            .value(serie_id_or_slug)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SeriesResponse.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_series_serie_id_or_slug_matches(self,
                                            serie_id_or_slug,
                                            filter=None,
                                            search=None,
                                            sort=None,
                                            range=None,
                                            page=None,
                                            per_page=50):
        """Does a GET request to /series/{serie_id_or_slug}/matches.

        List matches of the given serie

        Args:
            serie_id_or_slug (Any): A serie ID or slug
            filter (Filter1, optional): Options to filter results. String
                fields are case sensitive
            search (Search1, optional): Options to search results
            sort (List[SortOverMatchEnum], optional): Options to sort results
            range (Range1, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Match]: Response from the API. A list of matches of any
                e-sport

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/series/{serie_id_or_slug}/matches')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('serie_id_or_slug')
                            .value(serie_id_or_slug)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetSeriesSerieIdOrSlugMatchesPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Match.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_series_serie_id_or_slug_matches_past(self,
                                                 serie_id_or_slug,
                                                 filter=None,
                                                 search=None,
                                                 sort=None,
                                                 range=None,
                                                 page=None,
                                                 per_page=50):
        """Does a GET request to /series/{serie_id_or_slug}/matches/past.

        List past matches for the given serie

        Args:
            serie_id_or_slug (Any): A serie ID or slug
            filter (Filter1, optional): Options to filter results. String
                fields are case sensitive
            search (Search1, optional): Options to search results
            sort (List[SortOverMatchEnum], optional): Options to sort results
            range (Range1, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Match]: Response from the API. A list of matches of any
                e-sport

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/series/{serie_id_or_slug}/matches/past')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('serie_id_or_slug')
                            .value(serie_id_or_slug)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetSeriesSerieIdOrSlugMatchesPastPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Match.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_series_serie_id_or_slug_matches_running(self,
                                                    serie_id_or_slug,
                                                    filter=None,
                                                    search=None,
                                                    sort=None,
                                                    range=None,
                                                    page=None,
                                                    per_page=50):
        """Does a GET request to /series/{serie_id_or_slug}/matches/running.

        List currently running matches for the given serie

        Args:
            serie_id_or_slug (Any): A serie ID or slug
            filter (Filter1, optional): Options to filter results. String
                fields are case sensitive
            search (Search1, optional): Options to search results
            sort (List[SortOverMatchEnum], optional): Options to sort results
            range (Range1, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Match]: Response from the API. A list of matches of any
                e-sport

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/series/{serie_id_or_slug}/matches/running')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('serie_id_or_slug')
                            .value(serie_id_or_slug)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetSeriesSerieIdOrSlugMatchesRunningPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Match.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_series_serie_id_or_slug_matches_upcoming(self,
                                                     serie_id_or_slug,
                                                     filter=None,
                                                     search=None,
                                                     sort=None,
                                                     range=None,
                                                     page=None,
                                                     per_page=50):
        """Does a GET request to /series/{serie_id_or_slug}/matches/upcoming.

        List upcoming matches for the given serie

        Args:
            serie_id_or_slug (Any): A serie ID or slug
            filter (Filter1, optional): Options to filter results. String
                fields are case sensitive
            search (Search1, optional): Options to search results
            sort (List[SortOverMatchEnum], optional): Options to sort results
            range (Range1, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Match]: Response from the API. A list of matches of any
                e-sport

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/series/{serie_id_or_slug}/matches/upcoming')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('serie_id_or_slug')
                            .value(serie_id_or_slug)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetSeriesSerieIdOrSlugMatchesUpcomingPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Match.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_series_serie_id_or_slug_players(self,
                                            serie_id_or_slug,
                                            filter=None,
                                            search=None,
                                            sort=None,
                                            range=None,
                                            page=None,
                                            per_page=50):
        """Does a GET request to /series/{serie_id_or_slug}/players.

        List players for the given serie

        Args:
            serie_id_or_slug (str): Automatically added
            filter (Filter11, optional): Options to filter results. String
                fields are case sensitive
            search (Search11, optional): Options to search results
            sort (List[SortOverPlayerEnum], optional): Options to sort results
            range (Range11, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Player]: Response from the API. A list of players

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/series/{serie_id_or_slug}/players')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('serie_id_or_slug')
                            .value(serie_id_or_slug)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetSeriesSerieIdOrSlugPlayersPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Player.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_series_serie_id_or_slug_tournaments(self,
                                                serie_id_or_slug,
                                                filter=None,
                                                search=None,
                                                sort=None,
                                                range=None,
                                                page=None,
                                                per_page=50):
        """Does a GET request to /series/{serie_id_or_slug}/tournaments.

        List tournaments of the given serie

        Args:
            serie_id_or_slug (Any): A serie ID or slug
            filter (Filter6, optional): Options to filter results. String
                fields are case sensitive
            search (Search6, optional): Options to search results
            sort (List[SortOverShortTournamentEnum], optional): Options to
                sort results
            range (Range6, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[ShortTournament]: Response from the API. A list of tournaments

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/series/{serie_id_or_slug}/tournaments')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('serie_id_or_slug')
                            .value(serie_id_or_slug)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetSeriesSerieIdOrSlugTournamentsPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ShortTournament.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()
