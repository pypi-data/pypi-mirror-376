# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.configuration import Server
from pandascorerestapiforallvideogames.controllers.base_controller import BaseController
from pandascorerestapiforallvideogames.utilities.union_type_lookup import UnionTypeLookUp
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from pandascorerestapiforallvideogames.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.or_auth_group import Or
from pandascorerestapiforallvideogames.models.live import Live
from pandascorerestapiforallvideogames.models.match import Match
from pandascorerestapiforallvideogames.exceptions.error_4001_exception import Error4001Exception


class MatchesController(BaseController):

    """A Controller to access Endpoints in the pandascorerestapiforallvideogames API."""
    def __init__(self, config):
        super(MatchesController, self).__init__(config)

    def get_lives(self,
                  page=None,
                  per_page=50):
        """Does a GET request to /lives.

        List currently running live matches, available from pandascore with
        live websocket data.

        Args:
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Live]: Response from the API. A list of games being played or
                about to be played

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/lives')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetLivesPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Live.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_matches(self,
                    filter=None,
                    search=None,
                    sort=None,
                    range=None,
                    page=None,
                    per_page=50):
        """Does a GET request to /matches.

        List matches

        Args:
            filter (Filter1, optional): Options to filter results. String
                fields are case sensitive
            search (Search1, optional): Options to search results
            sort (List[SortOverMatchEnum], optional): Options to sort results
            range (Range1, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Match]: Response from the API. A list of matches of any
                e-sport

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/matches')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetMatchesPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Match.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_matches_past(self,
                         filter=None,
                         search=None,
                         sort=None,
                         range=None,
                         page=None,
                         per_page=50):
        """Does a GET request to /matches/past.

        List past matches

        Args:
            filter (Filter1, optional): Options to filter results. String
                fields are case sensitive
            search (Search1, optional): Options to search results
            sort (List[SortOverMatchEnum], optional): Options to sort results
            range (Range1, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Match]: Response from the API. A list of matches of any
                e-sport

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/matches/past')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetMatchesPastPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Match.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_matches_running(self,
                            filter=None,
                            search=None,
                            sort=None,
                            range=None,
                            page=None,
                            per_page=50):
        """Does a GET request to /matches/running.

        List currently running matches

        Args:
            filter (Filter1, optional): Options to filter results. String
                fields are case sensitive
            search (Search1, optional): Options to search results
            sort (List[SortOverMatchEnum], optional): Options to sort results
            range (Range1, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Match]: Response from the API. A list of matches of any
                e-sport

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/matches/running')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetMatchesRunningPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Match.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_matches_upcoming(self,
                             filter=None,
                             search=None,
                             sort=None,
                             range=None,
                             page=None,
                             per_page=50):
        """Does a GET request to /matches/upcoming.

        List upcoming matches

        Args:
            filter (Filter1, optional): Options to filter results. String
                fields are case sensitive
            search (Search1, optional): Options to search results
            sort (List[SortOverMatchEnum], optional): Options to sort results
            range (Range1, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Match]: Response from the API. A list of matches of any
                e-sport

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/matches/upcoming')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetMatchesUpcomingPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Match.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_matches_match_id_or_slug(self,
                                     match_id_or_slug):
        """Does a GET request to /matches/{match_id_or_slug}.

        Get a single match by ID or by slug

        Args:
            match_id_or_slug (Any): A match ID or slug

        Returns:
            Match: Response from the API. A match of any e-sport

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/matches/{match_id_or_slug}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('match_id_or_slug')
                            .value(match_id_or_slug)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Match.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_matches_match_id_or_slug_opponents(self,
                                               match_id_or_slug):
        """Does a GET request to /matches/{match_id_or_slug}/opponents.

        List opponents (player or teams) for the given match

        Args:
            match_id_or_slug (Any): A match ID or slug

        Returns:
            MatchTeamOpponentsObject | MatchPlayerOpponentsObject: Response
                from the API. The match's opponents

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/matches/{match_id_or_slug}/opponents')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('match_id_or_slug')
                            .value(match_id_or_slug)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(lambda value: APIHelper.deserialize_union_type(
                 UnionTypeLookUp.get('MatchOpponentsObject'), value))
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()
