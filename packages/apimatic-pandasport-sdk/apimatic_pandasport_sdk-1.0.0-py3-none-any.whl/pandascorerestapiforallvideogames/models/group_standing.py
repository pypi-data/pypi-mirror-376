# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.base_team import BaseTeam


class GroupStanding(object):

    """Implementation of the 'GroupStanding' model.

    Attributes:
        losses (int): The model property of type int.
        rank (int): The model property of type int.
        team (BaseTeam): The model property of type BaseTeam.
        ties (int): Only present if ties occured during the tournament
        total (int): The model property of type int.
        wins (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "losses": 'losses',
        "rank": 'rank',
        "team": 'team',
        "total": 'total',
        "wins": 'wins',
        "ties": 'ties'
    }

    _optionals = [
        'ties',
    ]

    def __init__(self,
                 losses=None,
                 rank=None,
                 team=None,
                 total=None,
                 wins=None,
                 ties=APIHelper.SKIP):
        """Constructor for the GroupStanding class"""

        # Initialize members of the class
        self.losses = losses 
        self.rank = rank 
        self.team = team 
        if ties is not APIHelper.SKIP:
            self.ties = ties 
        self.total = total 
        self.wins = wins 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        losses = dictionary.get("losses") if dictionary.get("losses") else None
        rank = dictionary.get("rank") if dictionary.get("rank") else None
        team = BaseTeam.from_dictionary(dictionary.get('team')) if dictionary.get('team') else None
        total = dictionary.get("total") if dictionary.get("total") else None
        wins = dictionary.get("wins") if dictionary.get("wins") else None
        ties = dictionary.get("ties") if dictionary.get("ties") else APIHelper.SKIP
        # Return an object of this model
        return cls(losses,
                   rank,
                   team,
                   total,
                   wins,
                   ties)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.losses,
                                           type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.rank,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.team,
                                            type_callable=lambda value: BaseTeam.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.total,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.wins,
                                            type_callable=lambda value: isinstance(value, int))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('losses'),
                                       type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('rank'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('team'),
                                        type_callable=lambda value: BaseTeam.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('total'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('wins'),
                                        type_callable=lambda value: isinstance(value, int))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'losses={self.losses!r}, '
                f'rank={self.rank!r}, '
                f'team={self.team!r}, '
                f'ties={(self.ties if hasattr(self, "ties") else None)!r}, '
                f'total={self.total!r}, '
                f'wins={self.wins!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'losses={self.losses!s}, '
                f'rank={self.rank!s}, '
                f'team={self.team!s}, '
                f'ties={(self.ties if hasattr(self, "ties") else None)!s}, '
                f'total={self.total!s}, '
                f'wins={self.wins!s})')
