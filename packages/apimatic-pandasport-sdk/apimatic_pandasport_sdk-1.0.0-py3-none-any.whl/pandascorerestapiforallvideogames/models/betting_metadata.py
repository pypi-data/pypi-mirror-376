# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper


class BettingMetadata(object):

    """Implementation of the 'BettingMetadata' model.

    Attributes:
        betting_group (Any): The model property of type Any.
        blueprint (Any): The model property of type Any.
        bookable (bool): Whether match can be booked
        booked (bool): Whether match has been booked
        live_available (bool): Whether live is available
        markets_created (bool): Whether markets has been created
        markets_updated_at (datetime): The model property of type datetime.
        pandascore_reviewed (bool): Whether PandaScore reviewed the match
        settled (bool): Whether match has been settled

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "betting_group": 'betting_group',
        "blueprint": 'blueprint',
        "bookable": 'bookable',
        "booked": 'booked',
        "live_available": 'live_available',
        "markets_created": 'markets_created',
        "markets_updated_at": 'markets_updated_at',
        "pandascore_reviewed": 'pandascore_reviewed',
        "settled": 'settled'
    }

    def __init__(self,
                 betting_group=None,
                 blueprint=None,
                 bookable=None,
                 booked=None,
                 live_available=None,
                 markets_created=None,
                 markets_updated_at=None,
                 pandascore_reviewed=None,
                 settled=None):
        """Constructor for the BettingMetadata class"""

        # Initialize members of the class
        self.betting_group = betting_group 
        self.blueprint = blueprint 
        self.bookable = bookable 
        self.booked = booked 
        self.live_available = live_available 
        self.markets_created = markets_created 
        self.markets_updated_at = APIHelper.apply_datetime_converter(markets_updated_at, APIHelper.RFC3339DateTime) if markets_updated_at else None 
        self.pandascore_reviewed = pandascore_reviewed 
        self.settled = settled 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        betting_group = dictionary.get("betting_group") if dictionary.get("betting_group") else None
        blueprint = dictionary.get("blueprint") if dictionary.get("blueprint") else None
        bookable = dictionary.get("bookable") if "bookable" in dictionary.keys() else None
        booked = dictionary.get("booked") if "booked" in dictionary.keys() else None
        live_available = dictionary.get("live_available") if "live_available" in dictionary.keys() else None
        markets_created = dictionary.get("markets_created") if "markets_created" in dictionary.keys() else None
        markets_updated_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("markets_updated_at")).datetime if dictionary.get("markets_updated_at") else None
        pandascore_reviewed = dictionary.get("pandascore_reviewed") if "pandascore_reviewed" in dictionary.keys() else None
        settled = dictionary.get("settled") if "settled" in dictionary.keys() else None
        # Return an object of this model
        return cls(betting_group,
                   blueprint,
                   bookable,
                   booked,
                   live_available,
                   markets_created,
                   markets_updated_at,
                   pandascore_reviewed,
                   settled)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.betting_group,
                                           type_callable=lambda value: isinstance(value, Any)) \
                and APIHelper.is_valid_type(value=dictionary.blueprint,
                                            type_callable=lambda value: isinstance(value, Any)) \
                and APIHelper.is_valid_type(value=dictionary.bookable,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.booked,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.live_available,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.markets_created,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.markets_updated_at,
                                            type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime)) \
                and APIHelper.is_valid_type(value=dictionary.pandascore_reviewed,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.settled,
                                            type_callable=lambda value: isinstance(value, bool))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('betting_group'),
                                       type_callable=lambda value: isinstance(value, Any)) \
            and APIHelper.is_valid_type(value=dictionary.get('blueprint'),
                                        type_callable=lambda value: isinstance(value, Any)) \
            and APIHelper.is_valid_type(value=dictionary.get('bookable'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('booked'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('live_available'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('markets_created'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('markets_updated_at'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('pandascore_reviewed'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('settled'),
                                        type_callable=lambda value: isinstance(value, bool))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'betting_group={self.betting_group!r}, '
                f'blueprint={self.blueprint!r}, '
                f'bookable={self.bookable!r}, '
                f'booked={self.booked!r}, '
                f'live_available={self.live_available!r}, '
                f'markets_created={self.markets_created!r}, '
                f'markets_updated_at={self.markets_updated_at!r}, '
                f'pandascore_reviewed={self.pandascore_reviewed!r}, '
                f'settled={self.settled!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'betting_group={self.betting_group!s}, '
                f'blueprint={self.blueprint!s}, '
                f'bookable={self.bookable!s}, '
                f'booked={self.booked!s}, '
                f'live_available={self.live_available!s}, '
                f'markets_created={self.markets_created!s}, '
                f'markets_updated_at={self.markets_updated_at!s}, '
                f'pandascore_reviewed={self.pandascore_reviewed!s}, '
                f'settled={self.settled!s})')
