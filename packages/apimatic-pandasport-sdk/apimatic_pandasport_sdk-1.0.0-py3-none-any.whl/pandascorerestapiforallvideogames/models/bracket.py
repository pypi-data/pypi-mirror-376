# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.game import Game
from pandascorerestapiforallvideogames.models.match_live import MatchLive
from pandascorerestapiforallvideogames.models.match_localized_streams import MatchLocalizedStreams
from pandascorerestapiforallvideogames.models.opponent import Opponent
from pandascorerestapiforallvideogames.models.previous_match import PreviousMatch
from pandascorerestapiforallvideogames.models.stream import Stream


class Bracket(object):

    """Implementation of the 'Bracket' model.

    Attributes:
        begin_at (datetime): The model property of type datetime.
        detailed_stats (bool): Whether the match offers full stats
        draw (bool): Whether result of the match is a draw
        end_at (datetime): The model property of type datetime.
        forfeit (bool): Whether match was forfeited
        game_advantage (Any): The model property of type Any.
        games (List[Game]): The model property of type List[Game].
        id (int): The model property of type int.
        live (MatchLive): The model property of type MatchLive.
        live_embed_url (str): The model property of type str.
        match_type (MatchTypeEnum): The model property of type MatchTypeEnum.
        modified_at (datetime): The model property of type datetime.
        name (str): The model property of type str.
        number_of_games (int): Number of games
        official_stream_url (str): The model property of type str.
        opponents (List[Opponent]): The model property of type List[Opponent].
        original_scheduled_at (datetime): The model property of type datetime.
        previous_matches (List[PreviousMatch]): The model property of type
            List[PreviousMatch].
        scheduled_at (datetime): The model property of type datetime.
        slug (str): The model property of type str.
        status (MatchStatusEnum): The model property of type MatchStatusEnum.
        streams (MatchLocalizedStreams): The model property of type
            MatchLocalizedStreams.
        streams_list (List[Stream]): The model property of type List[Stream].
        tournament_id (int): The model property of type int.
        winner_id (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "begin_at": 'begin_at',
        "detailed_stats": 'detailed_stats',
        "draw": 'draw',
        "end_at": 'end_at',
        "forfeit": 'forfeit',
        "game_advantage": 'game_advantage',
        "games": 'games',
        "id": 'id',
        "live": 'live',
        "live_embed_url": 'live_embed_url',
        "match_type": 'match_type',
        "modified_at": 'modified_at',
        "name": 'name',
        "number_of_games": 'number_of_games',
        "official_stream_url": 'official_stream_url',
        "opponents": 'opponents',
        "original_scheduled_at": 'original_scheduled_at',
        "previous_matches": 'previous_matches',
        "scheduled_at": 'scheduled_at',
        "slug": 'slug',
        "status": 'status',
        "streams": 'streams',
        "streams_list": 'streams_list',
        "tournament_id": 'tournament_id',
        "winner_id": 'winner_id'
    }

    _nullables = [
        'begin_at',
        'end_at',
        'game_advantage',
        'live_embed_url',
        'official_stream_url',
        'original_scheduled_at',
        'scheduled_at',
        'slug',
        'winner_id',
    ]

    def __init__(self,
                 begin_at=None,
                 detailed_stats=None,
                 draw=None,
                 end_at=None,
                 forfeit=None,
                 game_advantage=None,
                 games=None,
                 id=None,
                 live=None,
                 live_embed_url=None,
                 match_type=None,
                 modified_at=None,
                 name=None,
                 number_of_games=None,
                 official_stream_url=None,
                 opponents=None,
                 original_scheduled_at=None,
                 previous_matches=None,
                 scheduled_at=None,
                 slug=None,
                 status=None,
                 streams=None,
                 streams_list=None,
                 tournament_id=None,
                 winner_id=None):
        """Constructor for the Bracket class"""

        # Initialize members of the class
        self.begin_at = APIHelper.apply_datetime_converter(begin_at, APIHelper.RFC3339DateTime) if begin_at else None 
        self.detailed_stats = detailed_stats 
        self.draw = draw 
        self.end_at = APIHelper.apply_datetime_converter(end_at, APIHelper.RFC3339DateTime) if end_at else None 
        self.forfeit = forfeit 
        self.game_advantage = game_advantage 
        self.games = games 
        self.id = id 
        self.live = live 
        self.live_embed_url = live_embed_url 
        self.match_type = match_type 
        self.modified_at = APIHelper.apply_datetime_converter(modified_at, APIHelper.RFC3339DateTime) if modified_at else None 
        self.name = name 
        self.number_of_games = number_of_games 
        self.official_stream_url = official_stream_url 
        self.opponents = opponents 
        self.original_scheduled_at = APIHelper.apply_datetime_converter(original_scheduled_at, APIHelper.RFC3339DateTime) if original_scheduled_at else None 
        self.previous_matches = previous_matches 
        self.scheduled_at = APIHelper.apply_datetime_converter(scheduled_at, APIHelper.RFC3339DateTime) if scheduled_at else None 
        self.slug = slug 
        self.status = status 
        self.streams = streams 
        self.streams_list = streams_list 
        self.tournament_id = tournament_id 
        self.winner_id = winner_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        begin_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("begin_at")).datetime if dictionary.get("begin_at") else None
        detailed_stats = dictionary.get("detailed_stats") if "detailed_stats" in dictionary.keys() else None
        draw = dictionary.get("draw") if "draw" in dictionary.keys() else None
        end_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("end_at")).datetime if dictionary.get("end_at") else None
        forfeit = dictionary.get("forfeit") if "forfeit" in dictionary.keys() else None
        game_advantage = dictionary.get("game_advantage") if dictionary.get("game_advantage") else None
        games = None
        if dictionary.get('games') is not None:
            games = [Game.from_dictionary(x) for x in dictionary.get('games')]
        id = dictionary.get("id") if dictionary.get("id") else None
        live = MatchLive.from_dictionary(dictionary.get('live')) if dictionary.get('live') else None
        live_embed_url = dictionary.get("live_embed_url") if dictionary.get("live_embed_url") else None
        match_type = dictionary.get("match_type") if dictionary.get("match_type") else None
        modified_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("modified_at")).datetime if dictionary.get("modified_at") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        number_of_games = dictionary.get("number_of_games") if dictionary.get("number_of_games") else None
        official_stream_url = dictionary.get("official_stream_url") if dictionary.get("official_stream_url") else None
        opponents = None
        if dictionary.get('opponents') is not None:
            opponents = [Opponent.from_dictionary(x) for x in dictionary.get('opponents')]
        original_scheduled_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("original_scheduled_at")).datetime if dictionary.get("original_scheduled_at") else None
        previous_matches = None
        if dictionary.get('previous_matches') is not None:
            previous_matches = [PreviousMatch.from_dictionary(x) for x in dictionary.get('previous_matches')]
        scheduled_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("scheduled_at")).datetime if dictionary.get("scheduled_at") else None
        slug = dictionary.get("slug") if dictionary.get("slug") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        streams = MatchLocalizedStreams.from_dictionary(dictionary.get('streams')) if dictionary.get('streams') else None
        streams_list = None
        if dictionary.get('streams_list') is not None:
            streams_list = [Stream.from_dictionary(x) for x in dictionary.get('streams_list')]
        tournament_id = dictionary.get("tournament_id") if dictionary.get("tournament_id") else None
        winner_id = dictionary.get("winner_id") if dictionary.get("winner_id") else None
        # Return an object of this model
        return cls(begin_at,
                   detailed_stats,
                   draw,
                   end_at,
                   forfeit,
                   game_advantage,
                   games,
                   id,
                   live,
                   live_embed_url,
                   match_type,
                   modified_at,
                   name,
                   number_of_games,
                   official_stream_url,
                   opponents,
                   original_scheduled_at,
                   previous_matches,
                   scheduled_at,
                   slug,
                   status,
                   streams,
                   streams_list,
                   tournament_id,
                   winner_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={self.begin_at!r}, '
                f'detailed_stats={self.detailed_stats!r}, '
                f'draw={self.draw!r}, '
                f'end_at={self.end_at!r}, '
                f'forfeit={self.forfeit!r}, '
                f'game_advantage={self.game_advantage!r}, '
                f'games={self.games!r}, '
                f'id={self.id!r}, '
                f'live={self.live!r}, '
                f'live_embed_url={self.live_embed_url!r}, '
                f'match_type={self.match_type!r}, '
                f'modified_at={self.modified_at!r}, '
                f'name={self.name!r}, '
                f'number_of_games={self.number_of_games!r}, '
                f'official_stream_url={self.official_stream_url!r}, '
                f'opponents={self.opponents!r}, '
                f'original_scheduled_at={self.original_scheduled_at!r}, '
                f'previous_matches={self.previous_matches!r}, '
                f'scheduled_at={self.scheduled_at!r}, '
                f'slug={self.slug!r}, '
                f'status={self.status!r}, '
                f'streams={self.streams!r}, '
                f'streams_list={self.streams_list!r}, '
                f'tournament_id={self.tournament_id!r}, '
                f'winner_id={self.winner_id!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={self.begin_at!s}, '
                f'detailed_stats={self.detailed_stats!s}, '
                f'draw={self.draw!s}, '
                f'end_at={self.end_at!s}, '
                f'forfeit={self.forfeit!s}, '
                f'game_advantage={self.game_advantage!s}, '
                f'games={self.games!s}, '
                f'id={self.id!s}, '
                f'live={self.live!s}, '
                f'live_embed_url={self.live_embed_url!s}, '
                f'match_type={self.match_type!s}, '
                f'modified_at={self.modified_at!s}, '
                f'name={self.name!s}, '
                f'number_of_games={self.number_of_games!s}, '
                f'official_stream_url={self.official_stream_url!s}, '
                f'opponents={self.opponents!s}, '
                f'original_scheduled_at={self.original_scheduled_at!s}, '
                f'previous_matches={self.previous_matches!s}, '
                f'scheduled_at={self.scheduled_at!s}, '
                f'slug={self.slug!s}, '
                f'status={self.status!s}, '
                f'streams={self.streams!s}, '
                f'streams_list={self.streams_list!s}, '
                f'tournament_id={self.tournament_id!s}, '
                f'winner_id={self.winner_id!s})')
