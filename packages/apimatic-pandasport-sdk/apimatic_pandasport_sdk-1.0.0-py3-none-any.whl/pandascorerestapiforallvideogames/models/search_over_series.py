# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper


class SearchOverSeries(object):

    """Implementation of the 'search_over_Series' model.

    Attributes:
        description (str): The model property of type str.
        name (str): The model property of type str.
        season (str): The model property of type str.
        slug (str): The model property of type str.
        tier (str): The model property of type str.
        winner_type (OpponentTypeEnum): The model property of type
            OpponentTypeEnum.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "description": 'description',
        "name": 'name',
        "season": 'season',
        "slug": 'slug',
        "tier": 'tier',
        "winner_type": 'winner_type'
    }

    _optionals = [
        'description',
        'name',
        'season',
        'slug',
        'tier',
        'winner_type',
    ]

    def __init__(self,
                 description=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 season=APIHelper.SKIP,
                 slug=APIHelper.SKIP,
                 tier=APIHelper.SKIP,
                 winner_type=APIHelper.SKIP):
        """Constructor for the SearchOverSeries class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        if name is not APIHelper.SKIP:
            self.name = name 
        if season is not APIHelper.SKIP:
            self.season = season 
        if slug is not APIHelper.SKIP:
            self.slug = slug 
        if tier is not APIHelper.SKIP:
            self.tier = tier 
        if winner_type is not APIHelper.SKIP:
            self.winner_type = winner_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        season = dictionary.get("season") if dictionary.get("season") else APIHelper.SKIP
        slug = dictionary.get("slug") if dictionary.get("slug") else APIHelper.SKIP
        tier = dictionary.get("tier") if dictionary.get("tier") else APIHelper.SKIP
        winner_type = dictionary.get("winner_type") if dictionary.get("winner_type") else APIHelper.SKIP
        # Return an object of this model
        return cls(description,
                   name,
                   season,
                   slug,
                   tier,
                   winner_type)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'season={(self.season if hasattr(self, "season") else None)!r}, '
                f'slug={(self.slug if hasattr(self, "slug") else None)!r}, '
                f'tier={(self.tier if hasattr(self, "tier") else None)!r}, '
                f'winner_type={(self.winner_type if hasattr(self, "winner_type") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'season={(self.season if hasattr(self, "season") else None)!s}, '
                f'slug={(self.slug if hasattr(self, "slug") else None)!s}, '
                f'tier={(self.tier if hasattr(self, "tier") else None)!s}, '
                f'winner_type={(self.winner_type if hasattr(self, "winner_type") else None)!s})')
