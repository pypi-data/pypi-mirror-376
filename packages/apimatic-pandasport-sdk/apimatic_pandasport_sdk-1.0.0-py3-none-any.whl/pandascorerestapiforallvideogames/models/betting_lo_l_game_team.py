# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class BettingLoLGameTeam(object):

    """Implementation of the 'BettingLoLGameTeam' model.

    Team's data for a Game

    Attributes:
        baron_kills (int): The model property of type int.
        color (LoLTeamColorEnum): The model property of type LoLTeamColorEnum.
        dragon_kills (int): The model property of type int.
        first_baron (bool): The model property of type bool.
        first_blood (bool): The model property of type bool.
        first_dragon (bool): The model property of type bool.
        first_herald (bool): The model property of type bool.
        first_inhibitor (bool): The model property of type bool.
        first_tower (bool): The model property of type bool.
        gold_earned (int): The model property of type int.
        herald_kill (int): The model property of type int.
        inhibitor_kills (int): The model property of type int.
        team_id (int): The model property of type int.
        team_kills (int): The model property of type int.
        tower_kills (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "baron_kills": 'baron_kills',
        "color": 'color',
        "dragon_kills": 'dragon_kills',
        "first_baron": 'first_baron',
        "first_blood": 'first_blood',
        "first_dragon": 'first_dragon',
        "first_herald": 'first_herald',
        "first_inhibitor": 'first_inhibitor',
        "first_tower": 'first_tower',
        "gold_earned": 'gold_earned',
        "herald_kill": 'herald_kill',
        "inhibitor_kills": 'inhibitor_kills',
        "team_id": 'team_id',
        "team_kills": 'team_kills',
        "tower_kills": 'tower_kills'
    }

    _nullables = [
        'baron_kills',
        'dragon_kills',
        'first_baron',
        'first_blood',
        'first_dragon',
        'first_herald',
        'first_inhibitor',
        'first_tower',
        'gold_earned',
        'herald_kill',
        'inhibitor_kills',
        'team_kills',
        'tower_kills',
    ]

    def __init__(self,
                 baron_kills=None,
                 color=None,
                 dragon_kills=None,
                 first_baron=None,
                 first_blood=None,
                 first_dragon=None,
                 first_herald=None,
                 first_inhibitor=None,
                 first_tower=None,
                 gold_earned=None,
                 herald_kill=None,
                 inhibitor_kills=None,
                 team_id=None,
                 team_kills=None,
                 tower_kills=None):
        """Constructor for the BettingLoLGameTeam class"""

        # Initialize members of the class
        self.baron_kills = baron_kills 
        self.color = color 
        self.dragon_kills = dragon_kills 
        self.first_baron = first_baron 
        self.first_blood = first_blood 
        self.first_dragon = first_dragon 
        self.first_herald = first_herald 
        self.first_inhibitor = first_inhibitor 
        self.first_tower = first_tower 
        self.gold_earned = gold_earned 
        self.herald_kill = herald_kill 
        self.inhibitor_kills = inhibitor_kills 
        self.team_id = team_id 
        self.team_kills = team_kills 
        self.tower_kills = tower_kills 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        baron_kills = dictionary.get("baron_kills") if dictionary.get("baron_kills") else None
        color = dictionary.get("color") if dictionary.get("color") else None
        dragon_kills = dictionary.get("dragon_kills") if dictionary.get("dragon_kills") else None
        first_baron = dictionary.get("first_baron") if "first_baron" in dictionary.keys() else None
        first_blood = dictionary.get("first_blood") if "first_blood" in dictionary.keys() else None
        first_dragon = dictionary.get("first_dragon") if "first_dragon" in dictionary.keys() else None
        first_herald = dictionary.get("first_herald") if "first_herald" in dictionary.keys() else None
        first_inhibitor = dictionary.get("first_inhibitor") if "first_inhibitor" in dictionary.keys() else None
        first_tower = dictionary.get("first_tower") if "first_tower" in dictionary.keys() else None
        gold_earned = dictionary.get("gold_earned") if dictionary.get("gold_earned") else None
        herald_kill = dictionary.get("herald_kill") if dictionary.get("herald_kill") else None
        inhibitor_kills = dictionary.get("inhibitor_kills") if dictionary.get("inhibitor_kills") else None
        team_id = dictionary.get("team_id") if dictionary.get("team_id") else None
        team_kills = dictionary.get("team_kills") if dictionary.get("team_kills") else None
        tower_kills = dictionary.get("tower_kills") if dictionary.get("tower_kills") else None
        # Return an object of this model
        return cls(baron_kills,
                   color,
                   dragon_kills,
                   first_baron,
                   first_blood,
                   first_dragon,
                   first_herald,
                   first_inhibitor,
                   first_tower,
                   gold_earned,
                   herald_kill,
                   inhibitor_kills,
                   team_id,
                   team_kills,
                   tower_kills)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'baron_kills={self.baron_kills!r}, '
                f'color={self.color!r}, '
                f'dragon_kills={self.dragon_kills!r}, '
                f'first_baron={self.first_baron!r}, '
                f'first_blood={self.first_blood!r}, '
                f'first_dragon={self.first_dragon!r}, '
                f'first_herald={self.first_herald!r}, '
                f'first_inhibitor={self.first_inhibitor!r}, '
                f'first_tower={self.first_tower!r}, '
                f'gold_earned={self.gold_earned!r}, '
                f'herald_kill={self.herald_kill!r}, '
                f'inhibitor_kills={self.inhibitor_kills!r}, '
                f'team_id={self.team_id!r}, '
                f'team_kills={self.team_kills!r}, '
                f'tower_kills={self.tower_kills!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'baron_kills={self.baron_kills!s}, '
                f'color={self.color!s}, '
                f'dragon_kills={self.dragon_kills!s}, '
                f'first_baron={self.first_baron!s}, '
                f'first_blood={self.first_blood!s}, '
                f'first_dragon={self.first_dragon!s}, '
                f'first_herald={self.first_herald!s}, '
                f'first_inhibitor={self.first_inhibitor!s}, '
                f'first_tower={self.first_tower!s}, '
                f'gold_earned={self.gold_earned!s}, '
                f'herald_kill={self.herald_kill!s}, '
                f'inhibitor_kills={self.inhibitor_kills!s}, '
                f'team_id={self.team_id!s}, '
                f'team_kills={self.team_kills!s}, '
                f'tower_kills={self.tower_kills!s})')
