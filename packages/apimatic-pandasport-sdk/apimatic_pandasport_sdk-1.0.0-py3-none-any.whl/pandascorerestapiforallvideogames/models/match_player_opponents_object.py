# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.match_opponent_base_player import MatchOpponentBasePlayer


class MatchPlayerOpponentsObject(object):

    """Implementation of the 'MatchPlayerOpponentsObject' model.

    Attributes:
        opponent_type (str): The model property of type str.
        opponents (List[MatchOpponentBasePlayer]): A list of players

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "opponent_type": 'opponent_type',
        "opponents": 'opponents'
    }

    def __init__(self,
                 opponents=None):
        """Constructor for the MatchPlayerOpponentsObject class"""

        # Initialize members of the class
        self.opponent_type = 'Player' 
        self.opponents = opponents 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        opponents = None
        if dictionary.get('opponents') is not None:
            opponents = [MatchOpponentBasePlayer.from_dictionary(x) for x in dictionary.get('opponents')]
        # Return an object of this model
        return cls(opponents)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.opponent_type,
                                           type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.opponents,
                                            type_callable=lambda value: MatchOpponentBasePlayer.validate(value),
                                            is_model_dict=True,
                                            is_inner_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('opponent_type'),
                                       type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('opponents'),
                                        type_callable=lambda value: MatchOpponentBasePlayer.validate(value),
                                        is_model_dict=True,
                                        is_inner_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'opponent_type={self.opponent_type!r}, '
                f'opponents={self.opponents!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'opponent_type={self.opponent_type!s}, '
                f'opponents={self.opponents!s})')
