# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.models.incident_change_type_enum import IncidentChangeTypeEnum
from pandascorerestapiforallvideogames.models.team import Team


class IncidentOfTypeTeam(object):

    """Implementation of the 'IncidentOfTypeTeam' model.

    An added or changed team

    Attributes:
        change_type (IncidentChangeTypeEnum): The model property of type
            IncidentChangeTypeEnum.
        id (Any): The model property of type Any.
        modified_at (datetime): The model property of type datetime.
        object (Team): The model property of type Team.
        mtype (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "change_type": 'change_type',
        "id": 'id',
        "modified_at": 'modified_at',
        "object": 'object',
        "mtype": 'type'
    }

    def __init__(self,
                 change_type=None,
                 id=None,
                 modified_at=None,
                 object=None):
        """Constructor for the IncidentOfTypeTeam class"""

        # Initialize members of the class
        self.change_type = change_type 
        self.id = id 
        self.modified_at = APIHelper.apply_datetime_converter(modified_at, APIHelper.RFC3339DateTime) if modified_at else None 
        self.object = object 
        self.mtype = 'team' 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        change_type = dictionary.get("change_type") if dictionary.get("change_type") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        modified_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("modified_at")).datetime if dictionary.get("modified_at") else None
        object = Team.from_dictionary(dictionary.get('object')) if dictionary.get('object') else None
        # Return an object of this model
        return cls(change_type,
                   id,
                   modified_at,
                   object)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.change_type,
                                           type_callable=lambda value: IncidentChangeTypeEnum.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.id,
                                            type_callable=lambda value: isinstance(value, Any)) \
                and APIHelper.is_valid_type(value=dictionary.modified_at,
                                            type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime)) \
                and APIHelper.is_valid_type(value=dictionary.object,
                                            type_callable=lambda value: Team.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.mtype,
                                            type_callable=lambda value: isinstance(value, str))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('change_type'),
                                       type_callable=lambda value: IncidentChangeTypeEnum.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('id'),
                                        type_callable=lambda value: isinstance(value, Any)) \
            and APIHelper.is_valid_type(value=dictionary.get('modified_at'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('object'),
                                        type_callable=lambda value: Team.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('type'),
                                        type_callable=lambda value: isinstance(value, str))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'change_type={self.change_type!r}, '
                f'id={self.id!r}, '
                f'modified_at={self.modified_at!r}, '
                f'object={self.object!r}, '
                f'mtype={self.mtype!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'change_type={self.change_type!s}, '
                f'id={self.id!s}, '
                f'modified_at={self.modified_at!s}, '
                f'object={self.object!s}, '
                f'mtype={self.mtype!s})')
