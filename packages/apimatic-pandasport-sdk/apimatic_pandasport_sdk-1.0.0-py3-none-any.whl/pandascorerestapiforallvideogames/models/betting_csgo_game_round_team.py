# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class BettingCSGOGameRoundTeam(object):

    """Implementation of the 'BettingCSGOGameRoundTeam' model.

    Team's data for a Round

    Attributes:
        outcome (CSGOOutcomeEnum): The model property of type CSGOOutcomeEnum.
        round (int): The model property of type int.
        team_id (int): The model property of type int.
        terrorist (bool): For Counter Strike: Global Offensive: whether team
            is on T side
        winner (bool): For Counter Strike: Global Offensive: whether team has
            won the round

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "outcome": 'outcome',
        "round": 'round',
        "team_id": 'team_id',
        "terrorist": 'terrorist',
        "winner": 'winner'
    }

    def __init__(self,
                 outcome=None,
                 round=None,
                 team_id=None,
                 terrorist=None,
                 winner=None):
        """Constructor for the BettingCSGOGameRoundTeam class"""

        # Initialize members of the class
        self.outcome = outcome 
        self.round = round 
        self.team_id = team_id 
        self.terrorist = terrorist 
        self.winner = winner 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        outcome = dictionary.get("outcome") if dictionary.get("outcome") else None
        round = dictionary.get("round") if dictionary.get("round") else None
        team_id = dictionary.get("team_id") if dictionary.get("team_id") else None
        terrorist = dictionary.get("terrorist") if "terrorist" in dictionary.keys() else None
        winner = dictionary.get("winner") if "winner" in dictionary.keys() else None
        # Return an object of this model
        return cls(outcome,
                   round,
                   team_id,
                   terrorist,
                   winner)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'outcome={self.outcome!r}, '
                f'round={self.round!r}, '
                f'team_id={self.team_id!r}, '
                f'terrorist={self.terrorist!r}, '
                f'winner={self.winner!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'outcome={self.outcome!s}, '
                f'round={self.round!s}, '
                f'team_id={self.team_id!s}, '
                f'terrorist={self.terrorist!s}, '
                f'winner={self.winner!s})')
