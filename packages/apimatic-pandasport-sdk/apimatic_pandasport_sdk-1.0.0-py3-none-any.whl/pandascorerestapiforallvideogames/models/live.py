# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.models.live_endpoint import LiveEndpoint
from pandascorerestapiforallvideogames.models.match import Match


class Live(object):

    """Implementation of the 'Live' model.

    Attributes:
        endpoints (List[LiveEndpoint]): The model property of type
            List[LiveEndpoint].
        event (Any): The model property of type Any.
        match (Match): The model property of type Match.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "endpoints": 'endpoints',
        "event": 'event',
        "match": 'match'
    }

    def __init__(self,
                 endpoints=None,
                 event=None,
                 match=None):
        """Constructor for the Live class"""

        # Initialize members of the class
        self.endpoints = endpoints 
        self.event = event 
        self.match = match 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        endpoints = None
        if dictionary.get('endpoints') is not None:
            endpoints = [LiveEndpoint.from_dictionary(x) for x in dictionary.get('endpoints')]
        event = dictionary.get("event") if dictionary.get("event") else None
        match = Match.from_dictionary(dictionary.get('match')) if dictionary.get('match') else None
        # Return an object of this model
        return cls(endpoints,
                   event,
                   match)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'endpoints={self.endpoints!r}, '
                f'event={self.event!r}, '
                f'match={self.match!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'endpoints={self.endpoints!s}, '
                f'event={self.event!s}, '
                f'match={self.match!s})')
