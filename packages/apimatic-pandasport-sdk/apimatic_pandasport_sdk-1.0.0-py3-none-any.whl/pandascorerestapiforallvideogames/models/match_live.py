# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper


class MatchLive(object):

    """Implementation of the 'MatchLive' model.

    Attributes:
        opens_at (datetime): The model property of type datetime.
        supported (bool): Whether live is supported
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "opens_at": 'opens_at',
        "supported": 'supported',
        "url": 'url'
    }

    _nullables = [
        'opens_at',
        'url',
    ]

    def __init__(self,
                 opens_at=None,
                 supported=None,
                 url=None):
        """Constructor for the MatchLive class"""

        # Initialize members of the class
        self.opens_at = APIHelper.apply_datetime_converter(opens_at, APIHelper.RFC3339DateTime) if opens_at else None 
        self.supported = supported 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        opens_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("opens_at")).datetime if dictionary.get("opens_at") else None
        supported = dictionary.get("supported") if "supported" in dictionary.keys() else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(opens_at,
                   supported,
                   url)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.opens_at,
                                           type_callable=lambda value: isinstance(value, APIHelper.RFC3339DateTime),
                                           is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.supported,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.url,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('opens_at'),
                                       type_callable=lambda value: isinstance(value, str),
                                       is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('supported'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('url'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'opens_at={self.opens_at!r}, '
                f'supported={self.supported!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'opens_at={self.opens_at!s}, '
                f'supported={self.supported!s}, '
                f'url={self.url!s})')
