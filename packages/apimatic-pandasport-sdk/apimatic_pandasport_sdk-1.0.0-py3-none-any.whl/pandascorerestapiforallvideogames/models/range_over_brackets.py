# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper


class RangeOverBrackets(object):

    """Implementation of the 'range_over_Brackets' model.

    Attributes:
        begin_at (List[datetime]): The model property of type List[datetime].
        detailed_stats (List[bool]): The model property of type List[bool].
        draw (List[bool]): The model property of type List[bool].
        end_at (List[datetime]): The model property of type List[datetime].
        forfeit (List[bool]): The model property of type List[bool].
        game_advantage (List[int] | None): The model property of type
            List[int] | None.
        id (List[int]): The model property of type List[int].
        live_embed_url (List[str]): The model property of type List[str].
        match_type (List[MatchTypeEnum]): The model property of type
            List[MatchTypeEnum].
        modified_at (List[datetime]): The model property of type
            List[datetime].
        name (List[str]): The model property of type List[str].
        number_of_games (List[int]): The model property of type List[int].
        official_stream_url (List[str]): The model property of type List[str].
        original_scheduled_at (List[datetime]): The model property of type
            List[datetime].
        scheduled_at (List[datetime]): The model property of type
            List[datetime].
        slug (List[str]): The model property of type List[str].
        status (List[MatchStatusEnum]): The model property of type
            List[MatchStatusEnum].
        tournament_id (List[int]): The model property of type List[int].
        winner_id (List[int] | None): The model property of type List[int] |
            None.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "begin_at": 'begin_at',
        "detailed_stats": 'detailed_stats',
        "draw": 'draw',
        "end_at": 'end_at',
        "forfeit": 'forfeit',
        "game_advantage": 'game_advantage',
        "id": 'id',
        "live_embed_url": 'live_embed_url',
        "match_type": 'match_type',
        "modified_at": 'modified_at',
        "name": 'name',
        "number_of_games": 'number_of_games',
        "official_stream_url": 'official_stream_url',
        "original_scheduled_at": 'original_scheduled_at',
        "scheduled_at": 'scheduled_at',
        "slug": 'slug',
        "status": 'status',
        "tournament_id": 'tournament_id',
        "winner_id": 'winner_id'
    }

    _optionals = [
        'begin_at',
        'detailed_stats',
        'draw',
        'end_at',
        'forfeit',
        'game_advantage',
        'id',
        'live_embed_url',
        'match_type',
        'modified_at',
        'name',
        'number_of_games',
        'official_stream_url',
        'original_scheduled_at',
        'scheduled_at',
        'slug',
        'status',
        'tournament_id',
        'winner_id',
    ]

    def __init__(self,
                 begin_at=APIHelper.SKIP,
                 detailed_stats=APIHelper.SKIP,
                 draw=APIHelper.SKIP,
                 end_at=APIHelper.SKIP,
                 forfeit=APIHelper.SKIP,
                 game_advantage=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 live_embed_url=APIHelper.SKIP,
                 match_type=APIHelper.SKIP,
                 modified_at=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 number_of_games=APIHelper.SKIP,
                 official_stream_url=APIHelper.SKIP,
                 original_scheduled_at=APIHelper.SKIP,
                 scheduled_at=APIHelper.SKIP,
                 slug=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 tournament_id=APIHelper.SKIP,
                 winner_id=APIHelper.SKIP):
        """Constructor for the RangeOverBrackets class"""

        # Initialize members of the class
        if begin_at is not None and begin_at is not APIHelper.SKIP:
            self.begin_at = APIHelper.apply_datetime_converter(begin_at, APIHelper.RFC3339DateTime)
        if detailed_stats is not APIHelper.SKIP:
            self.detailed_stats = detailed_stats 
        if draw is not APIHelper.SKIP:
            self.draw = draw 
        if end_at is not None and end_at is not APIHelper.SKIP:
            self.end_at = APIHelper.apply_datetime_converter(end_at, APIHelper.RFC3339DateTime)
        if forfeit is not APIHelper.SKIP:
            self.forfeit = forfeit 
        if game_advantage is not APIHelper.SKIP:
            self.game_advantage = game_advantage 
        if id is not APIHelper.SKIP:
            self.id = id 
        if live_embed_url is not APIHelper.SKIP:
            self.live_embed_url = live_embed_url 
        if match_type is not APIHelper.SKIP:
            self.match_type = match_type 
        if modified_at is not None and modified_at is not APIHelper.SKIP:
            self.modified_at = APIHelper.apply_datetime_converter(modified_at, APIHelper.RFC3339DateTime)
        if name is not APIHelper.SKIP:
            self.name = name 
        if number_of_games is not APIHelper.SKIP:
            self.number_of_games = number_of_games 
        if official_stream_url is not APIHelper.SKIP:
            self.official_stream_url = official_stream_url 
        if original_scheduled_at is not None and original_scheduled_at is not APIHelper.SKIP:
            self.original_scheduled_at = APIHelper.apply_datetime_converter(original_scheduled_at, APIHelper.RFC3339DateTime)
        if scheduled_at is not None and scheduled_at is not APIHelper.SKIP:
            self.scheduled_at = APIHelper.apply_datetime_converter(scheduled_at, APIHelper.RFC3339DateTime)
        if slug is not APIHelper.SKIP:
            self.slug = slug 
        if status is not APIHelper.SKIP:
            self.status = status 
        if tournament_id is not APIHelper.SKIP:
            self.tournament_id = tournament_id 
        if winner_id is not APIHelper.SKIP:
            self.winner_id = winner_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from pandascorerestapiforallvideogames.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        begin_at = None
        if dictionary.get('begin_at') is not None:
            begin_at = list()
            for x in dictionary.get('begin_at'):
                begin_at.append(APIHelper.RFC3339DateTime.from_value(x).datetime)
        else:
            begin_at = APIHelper.SKIP
        detailed_stats = dictionary.get("detailed_stats") if "detailed_stats" in dictionary.keys() else APIHelper.SKIP
        draw = dictionary.get("draw") if "draw" in dictionary.keys() else APIHelper.SKIP
        end_at = None
        if dictionary.get('end_at') is not None:
            end_at = list()
            for x in dictionary.get('end_at'):
                end_at.append(APIHelper.RFC3339DateTime.from_value(x).datetime)
        else:
            end_at = APIHelper.SKIP
        forfeit = dictionary.get("forfeit") if "forfeit" in dictionary.keys() else APIHelper.SKIP
        game_advantage = APIHelper.deserialize_union_type(UnionTypeLookUp.get('OpponentID'), dictionary.get('game_advantage'), False) if dictionary.get('game_advantage') is not None else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        live_embed_url = dictionary.get("live_embed_url") if dictionary.get("live_embed_url") else APIHelper.SKIP
        match_type = dictionary.get("match_type") if dictionary.get("match_type") else APIHelper.SKIP
        modified_at = None
        if dictionary.get('modified_at') is not None:
            modified_at = list()
            for x in dictionary.get('modified_at'):
                modified_at.append(APIHelper.RFC3339DateTime.from_value(x).datetime)
        else:
            modified_at = APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        number_of_games = dictionary.get("number_of_games") if dictionary.get("number_of_games") else APIHelper.SKIP
        official_stream_url = dictionary.get("official_stream_url") if dictionary.get("official_stream_url") else APIHelper.SKIP
        original_scheduled_at = None
        if dictionary.get('original_scheduled_at') is not None:
            original_scheduled_at = list()
            for x in dictionary.get('original_scheduled_at'):
                original_scheduled_at.append(APIHelper.RFC3339DateTime.from_value(x).datetime)
        else:
            original_scheduled_at = APIHelper.SKIP
        scheduled_at = None
        if dictionary.get('scheduled_at') is not None:
            scheduled_at = list()
            for x in dictionary.get('scheduled_at'):
                scheduled_at.append(APIHelper.RFC3339DateTime.from_value(x).datetime)
        else:
            scheduled_at = APIHelper.SKIP
        slug = dictionary.get("slug") if dictionary.get("slug") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        tournament_id = dictionary.get("tournament_id") if dictionary.get("tournament_id") else APIHelper.SKIP
        winner_id = APIHelper.deserialize_union_type(UnionTypeLookUp.get('OpponentID'), dictionary.get('winner_id'), False) if dictionary.get('winner_id') is not None else APIHelper.SKIP
        # Return an object of this model
        return cls(begin_at,
                   detailed_stats,
                   draw,
                   end_at,
                   forfeit,
                   game_advantage,
                   id,
                   live_embed_url,
                   match_type,
                   modified_at,
                   name,
                   number_of_games,
                   official_stream_url,
                   original_scheduled_at,
                   scheduled_at,
                   slug,
                   status,
                   tournament_id,
                   winner_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={(self.begin_at if hasattr(self, "begin_at") else None)!r}, '
                f'detailed_stats={(self.detailed_stats if hasattr(self, "detailed_stats") else None)!r}, '
                f'draw={(self.draw if hasattr(self, "draw") else None)!r}, '
                f'end_at={(self.end_at if hasattr(self, "end_at") else None)!r}, '
                f'forfeit={(self.forfeit if hasattr(self, "forfeit") else None)!r}, '
                f'game_advantage={(self.game_advantage if hasattr(self, "game_advantage") else None)!r}, '
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'live_embed_url={(self.live_embed_url if hasattr(self, "live_embed_url") else None)!r}, '
                f'match_type={(self.match_type if hasattr(self, "match_type") else None)!r}, '
                f'modified_at={(self.modified_at if hasattr(self, "modified_at") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'number_of_games={(self.number_of_games if hasattr(self, "number_of_games") else None)!r}, '
                f'official_stream_url={(self.official_stream_url if hasattr(self, "official_stream_url") else None)!r}, '
                f'original_scheduled_at={(self.original_scheduled_at if hasattr(self, "original_scheduled_at") else None)!r}, '
                f'scheduled_at={(self.scheduled_at if hasattr(self, "scheduled_at") else None)!r}, '
                f'slug={(self.slug if hasattr(self, "slug") else None)!r}, '
                f'status={(self.status if hasattr(self, "status") else None)!r}, '
                f'tournament_id={(self.tournament_id if hasattr(self, "tournament_id") else None)!r}, '
                f'winner_id={(self.winner_id if hasattr(self, "winner_id") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'begin_at={(self.begin_at if hasattr(self, "begin_at") else None)!s}, '
                f'detailed_stats={(self.detailed_stats if hasattr(self, "detailed_stats") else None)!s}, '
                f'draw={(self.draw if hasattr(self, "draw") else None)!s}, '
                f'end_at={(self.end_at if hasattr(self, "end_at") else None)!s}, '
                f'forfeit={(self.forfeit if hasattr(self, "forfeit") else None)!s}, '
                f'game_advantage={(self.game_advantage if hasattr(self, "game_advantage") else None)!s}, '
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'live_embed_url={(self.live_embed_url if hasattr(self, "live_embed_url") else None)!s}, '
                f'match_type={(self.match_type if hasattr(self, "match_type") else None)!s}, '
                f'modified_at={(self.modified_at if hasattr(self, "modified_at") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'number_of_games={(self.number_of_games if hasattr(self, "number_of_games") else None)!s}, '
                f'official_stream_url={(self.official_stream_url if hasattr(self, "official_stream_url") else None)!s}, '
                f'original_scheduled_at={(self.original_scheduled_at if hasattr(self, "original_scheduled_at") else None)!s}, '
                f'scheduled_at={(self.scheduled_at if hasattr(self, "scheduled_at") else None)!s}, '
                f'slug={(self.slug if hasattr(self, "slug") else None)!s}, '
                f'status={(self.status if hasattr(self, "status") else None)!s}, '
                f'tournament_id={(self.tournament_id if hasattr(self, "tournament_id") else None)!s}, '
                f'winner_id={(self.winner_id if hasattr(self, "winner_id") else None)!s})')
