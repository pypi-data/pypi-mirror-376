# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pandascorerestapiforallvideogames.api_helper import APIHelper


class MatchResult(object):

    """Implementation of the 'MatchResult' model.

    Attributes:
        score (int): The model property of type int.
        team_id (int): The model property of type int.
        player_id (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "score": 'score',
        "team_id": 'team_id',
        "player_id": 'player_id'
    }

    _optionals = [
        'score',
        'team_id',
        'player_id',
    ]

    def __init__(self,
                 score=APIHelper.SKIP,
                 team_id=APIHelper.SKIP,
                 player_id=APIHelper.SKIP):
        """Constructor for the MatchResult class"""

        # Initialize members of the class
        if score is not APIHelper.SKIP:
            self.score = score 
        if team_id is not APIHelper.SKIP:
            self.team_id = team_id 
        if player_id is not APIHelper.SKIP:
            self.player_id = player_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        score = dictionary.get("score") if dictionary.get("score") else APIHelper.SKIP
        team_id = dictionary.get("team_id") if dictionary.get("team_id") else APIHelper.SKIP
        player_id = dictionary.get("player_id") if dictionary.get("player_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(score,
                   team_id,
                   player_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'score={(self.score if hasattr(self, "score") else None)!r}, '
                f'team_id={(self.team_id if hasattr(self, "team_id") else None)!r}, '
                f'player_id={(self.player_id if hasattr(self, "player_id") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'score={(self.score if hasattr(self, "score") else None)!s}, '
                f'team_id={(self.team_id if hasattr(self, "team_id") else None)!s}, '
                f'player_id={(self.player_id if hasattr(self, "player_id") else None)!s})')
