# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.configuration import Server
from pandascorerestapiforallvideogames.controllers.base_controller import BaseController
from pandascorerestapiforallvideogames.utilities.union_type_lookup import UnionTypeLookUp
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from pandascorerestapiforallvideogames.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.or_auth_group import Or
from pandascorerestapiforallvideogames.models.deletion_incident import DeletionIncident
from pandascorerestapiforallvideogames.exceptions.error_4001_exception import Error4001Exception


class IncidentsController(BaseController):

    """A Controller to access Endpoints in the pandascorerestapiforallvideogames API."""
    def __init__(self, config):
        super(IncidentsController, self).__init__(config)

    def get_additions(self,
                      page=None,
                      per_page=50,
                      mtype=None,
                      since=None,
                      videogame=None):
        """Does a GET request to /additions.

        Get the latest additions.
        This endpoint only shows unchanged objects.

        Args:
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`
            mtype (List[IncidentTypeEnum], optional): Filter by result type(s)
            since (datetime, optional): Filter out older results
            videogame (List[VideogameIDEnum | VideogameSlugEnum] | None,
                optional): Filter by videogame(s)

        Returns:
            List[IncidentOfTypeLeague | IncidentOfTypeMatch |
                IncidentOfTypePlayer | IncidentOfTypeSerie |
                IncidentOfTypeTeam | IncidentOfTypeTournament]: Response from
                the API. A list of created entities

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/additions')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetAdditionsPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('since')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, since)))
            .query_param(Parameter()
                         .key('videogame')
                         .value(videogame)
                         .validator(lambda value: UnionTypeLookUp.get('VideogameIDOrSlug').validate(value)))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(lambda value: APIHelper.deserialize_union_type(
                 UnionTypeLookUp.get('NonDeletionIncident'), value))
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_changes(self,
                    page=None,
                    per_page=50,
                    mtype=None,
                    since=None,
                    videogame=None):
        """Does a GET request to /changes.

        Get the latest updates.
        This endpoint only provides the latest change for an object. It does
        not keep track of previous changes.

        Args:
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`
            mtype (List[IncidentTypeEnum], optional): Filter by result type(s)
            since (datetime, optional): Filter out older results
            videogame (List[VideogameIDEnum | VideogameSlugEnum] | None,
                optional): Filter by videogame(s)

        Returns:
            List[IncidentOfTypeLeague | IncidentOfTypeMatch |
                IncidentOfTypePlayer | IncidentOfTypeSerie |
                IncidentOfTypeTeam | IncidentOfTypeTournament |
                DeletionIncident]: Response from the API. A list of changed
                entities

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/changes')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetChangesPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('since')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, since)))
            .query_param(Parameter()
                         .key('videogame')
                         .value(videogame)
                         .validator(lambda value: UnionTypeLookUp.get('VideogameIDOrSlug').validate(value)))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(lambda value: APIHelper.deserialize_union_type(
                 UnionTypeLookUp.get('Incident'), value))
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_deletions(self,
                      page=None,
                      per_page=50,
                      mtype=None,
                      since=None,
                      videogame=None):
        """Does a GET request to /deletions.

        Get the latest deleted documents

        Args:
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`
            mtype (List[IncidentTypeEnum], optional): Filter by result type(s)
            since (datetime, optional): Filter out older results
            videogame (List[VideogameIDEnum | VideogameSlugEnum] | None,
                optional): Filter by videogame(s)

        Returns:
            List[DeletionIncident]: Response from the API. A list of deleted
                entities

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/deletions')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetDeletionsPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('since')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, since)))
            .query_param(Parameter()
                         .key('videogame')
                         .value(videogame)
                         .validator(lambda value: UnionTypeLookUp.get('VideogameIDOrSlug').validate(value)))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeletionIncident.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_incidents(self,
                      page=None,
                      per_page=50,
                      mtype=None,
                      since=None,
                      videogame=None):
        """Does a GET request to /incidents.

         Get the latest updates and additions.
        This endpoint only provides the latest incident for an object. It does
        not keep track of previous incidents.

        Args:
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`
            mtype (List[IncidentTypeEnum], optional): Filter by result type(s)
            since (datetime, optional): Filter out older results
            videogame (List[VideogameIDEnum | VideogameSlugEnum] | None,
                optional): Filter by videogame(s)

        Returns:
            List[IncidentOfTypeLeague | IncidentOfTypeMatch |
                IncidentOfTypePlayer | IncidentOfTypeSerie |
                IncidentOfTypeTeam | IncidentOfTypeTournament |
                DeletionIncident]: Response from the API. A list of created or
                updated entities

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/incidents')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetIncidentsPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('since')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, since)))
            .query_param(Parameter()
                         .key('videogame')
                         .value(videogame)
                         .validator(lambda value: UnionTypeLookUp.get('VideogameIDOrSlug').validate(value)))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(lambda value: APIHelper.deserialize_union_type(
                 UnionTypeLookUp.get('Incident'), value))
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()
