# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from pandascorerestapiforallvideogames.api_helper import APIHelper
from pandascorerestapiforallvideogames.configuration import Server
from pandascorerestapiforallvideogames.controllers.base_controller import BaseController
from pandascorerestapiforallvideogames.utilities.union_type_lookup import UnionTypeLookUp
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from pandascorerestapiforallvideogames.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.or_auth_group import Or
from pandascorerestapiforallvideogames.models.short_tournament import ShortTournament
from pandascorerestapiforallvideogames.models.tournament import Tournament
from pandascorerestapiforallvideogames.models.bracket import Bracket
from pandascorerestapiforallvideogames.models.match import Match
from pandascorerestapiforallvideogames.models.player import Player
from pandascorerestapiforallvideogames.models.team import Team
from pandascorerestapiforallvideogames.exceptions.error_4001_exception import Error4001Exception


class TournamentsController(BaseController):

    """A Controller to access Endpoints in the pandascorerestapiforallvideogames API."""
    def __init__(self, config):
        super(TournamentsController, self).__init__(config)

    def get_tournaments(self,
                        filter=None,
                        search=None,
                        sort=None,
                        range=None,
                        page=None,
                        per_page=50):
        """Does a GET request to /tournaments.

        List tournaments

        Args:
            filter (Filter6, optional): Options to filter results. String
                fields are case sensitive
            search (Search6, optional): Options to search results
            sort (List[SortOverShortTournamentEnum], optional): Options to
                sort results
            range (Range6, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[ShortTournament]: Response from the API. A list of tournaments

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tournaments')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetTournamentsPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ShortTournament.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_tournaments_past(self,
                             filter=None,
                             search=None,
                             sort=None,
                             range=None,
                             page=None,
                             per_page=50):
        """Does a GET request to /tournaments/past.

        List past tournaments

        Args:
            filter (Filter6, optional): Options to filter results. String
                fields are case sensitive
            search (Search6, optional): Options to search results
            sort (List[SortOverShortTournamentEnum], optional): Options to
                sort results
            range (Range6, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[ShortTournament]: Response from the API. A list of tournaments

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tournaments/past')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetTournamentsPastPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ShortTournament.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_tournaments_running(self,
                                filter=None,
                                search=None,
                                sort=None,
                                range=None,
                                page=None,
                                per_page=50):
        """Does a GET request to /tournaments/running.

        List currently running tournaments

        Args:
            filter (Filter6, optional): Options to filter results. String
                fields are case sensitive
            search (Search6, optional): Options to search results
            sort (List[SortOverShortTournamentEnum], optional): Options to
                sort results
            range (Range6, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[ShortTournament]: Response from the API. A list of tournaments

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tournaments/running')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetTournamentsRunningPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ShortTournament.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_tournaments_upcoming(self,
                                 filter=None,
                                 search=None,
                                 sort=None,
                                 range=None,
                                 page=None,
                                 per_page=50):
        """Does a GET request to /tournaments/upcoming.

        List upcoming tournaments

        Args:
            filter (Filter6, optional): Options to filter results. String
                fields are case sensitive
            search (Search6, optional): Options to search results
            sort (List[SortOverShortTournamentEnum], optional): Options to
                sort results
            range (Range6, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[ShortTournament]: Response from the API. A list of tournaments

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tournaments/upcoming')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetTournamentsUpcomingPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ShortTournament.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_tournaments_tournament_id_or_slug(self,
                                              tournament_id_or_slug):
        """Does a GET request to /tournaments/{tournament_id_or_slug}.

        Get a single tournament by ID or by slug

        Args:
            tournament_id_or_slug (Any): A tournament ID or slug

        Returns:
            Tournament: Response from the API. A detailed tournament

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tournaments/{tournament_id_or_slug}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('tournament_id_or_slug')
                            .value(tournament_id_or_slug)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Tournament.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_tournaments_tournament_id_or_slug_brackets(self,
                                                       tournament_id_or_slug,
                                                       filter=None,
                                                       range=None,
                                                       sort=None,
                                                       search=None,
                                                       page=None,
                                                       per_page=50):
        """Does a GET request to /tournaments/{tournament_id_or_slug}/brackets.

        Get the brackets of the given tournament

        Args:
            tournament_id_or_slug (Any): A tournament ID or slug
            filter (Filter32, optional): Options to filter results. String
                fields are case sensitive
            range (Range32, optional): Options to select results within ranges
            sort (List[SortOverBracketEnum], optional): Options to sort results
            search (Search32, optional): Options to search results
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Bracket]: Response from the API. A tree of games played
                during a tournament

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tournaments/{tournament_id_or_slug}/brackets')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('tournament_id_or_slug')
                            .value(tournament_id_or_slug)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetTournamentsTournamentIdOrSlugBracketsPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Bracket.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_tournaments_tournament_id_or_slug_matches(self,
                                                      tournament_id_or_slug,
                                                      filter=None,
                                                      search=None,
                                                      sort=None,
                                                      range=None,
                                                      page=None,
                                                      per_page=50):
        """Does a GET request to /tournaments/{tournament_id_or_slug}/matches.

        List matches for the given tournament

        Args:
            tournament_id_or_slug (Any): A tournament ID or slug
            filter (Filter1, optional): Options to filter results. String
                fields are case sensitive
            search (Search1, optional): Options to search results
            sort (List[SortOverMatchEnum], optional): Options to sort results
            range (Range1, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Match]: Response from the API. A list of matches of any
                e-sport

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tournaments/{tournament_id_or_slug}/matches')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('tournament_id_or_slug')
                            .value(tournament_id_or_slug)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetTournamentsTournamentIdOrSlugMatchesPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Match.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_tournaments_tournament_id_or_slug_players(self,
                                                      tournament_id_or_slug,
                                                      filter=None,
                                                      search=None,
                                                      sort=None,
                                                      range=None,
                                                      page=None,
                                                      per_page=50):
        """Does a GET request to /tournaments/{tournament_id_or_slug}/players.

        List players for the given tournament

        Args:
            tournament_id_or_slug (str): Automatically added
            filter (Filter11, optional): Options to filter results. String
                fields are case sensitive
            search (Search11, optional): Options to search results
            sort (List[SortOverPlayerEnum], optional): Options to sort results
            range (Range11, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Player]: Response from the API. A list of players

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tournaments/{tournament_id_or_slug}/players')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('tournament_id_or_slug')
                            .value(tournament_id_or_slug)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetTournamentsTournamentIdOrSlugPlayersPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Player.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_tournaments_tournament_id_or_slug_rosters(self,
                                                      tournament_id_or_slug):
        """Does a GET request to /tournaments/{tournament_id_or_slug}/rosters.

        List participants (player or team) for a given tournament.

        Args:
            tournament_id_or_slug (Any): A tournament ID or slug

        Returns:
            TournamentTeamRosters | TournamentPlayerRosters: Response from the
                API. Tournament rosters (team or player)

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tournaments/{tournament_id_or_slug}/rosters')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('tournament_id_or_slug')
                            .value(tournament_id_or_slug)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(lambda value: APIHelper.deserialize_union_type(
                 UnionTypeLookUp.get('TournamentRosters'), value))
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_tournaments_tournament_id_or_slug_standings(self,
                                                        tournament_id_or_slug,
                                                        page=None,
                                                        per_page=50):
        """Does a GET request to /tournaments/{tournament_id_or_slug}/standings.

        Get the current standings for a given tournament

        Args:
            tournament_id_or_slug (Any): A tournament ID or slug
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[BracketStanding | GroupStanding]: Response from the API.
                Ranking of teams in a tournament

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tournaments/{tournament_id_or_slug}/standings')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('tournament_id_or_slug')
                            .value(tournament_id_or_slug)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetTournamentsTournamentIdOrSlugStandingsPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(lambda value: APIHelper.deserialize_union_type(
                 UnionTypeLookUp.get('Standing'), value))
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()

    def get_tournaments_tournament_id_or_slug_teams(self,
                                                    tournament_id_or_slug,
                                                    filter=None,
                                                    search=None,
                                                    sort=None,
                                                    range=None,
                                                    page=None,
                                                    per_page=50):
        """Does a GET request to /tournaments/{tournament_id_or_slug}/teams.

        List teams for the given tournament

        Args:
            tournament_id_or_slug (Any): A tournament ID or slug
            filter (Filter23, optional): Options to filter results. String
                fields are case sensitive
            search (Search23, optional): Options to search results
            sort (List[SortOverTeamEnum], optional): Options to sort results
            range (Range23, optional): Options to select results within ranges
            page (int | Page | None, optional): Pagination in the form of
                `page=2` or `page[size]=30&amp;page[number]=2`
            per_page (int, optional): Equivalent to `page[size]`

        Returns:
            List[Team]: Response from the API. A list of teams

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/tournaments/{tournament_id_or_slug}/teams')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('tournament_id_or_slug')
                            .value(tournament_id_or_slug)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .query_param(Parameter()
                         .key('range')
                         .value(range))
            .query_param(Parameter()
                         .key('page')
                         .value(page)
                         .validator(lambda value: UnionTypeLookUp.get('GetTournamentsTournamentIdOrSlugTeamsPage').validate(value)))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Or(Single('BearerToken'), Single('QueryToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Team.from_dictionary)
            .local_error('400', 'Bad request', Error4001Exception)
            .local_error('401', 'Unauthorized', Error4001Exception)
            .local_error('403', 'Forbidden', Error4001Exception)
            .local_error('404', 'Not found', Error4001Exception)
            .local_error('422', 'Unprocessable Entity', Error4001Exception)
        ).execute()
