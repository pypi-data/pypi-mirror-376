# -*- coding: utf-8 -*-

"""
pandascorerestapiforallvideogames

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from pandascorerestapiforallvideogames.configuration import Configuration
from pandascorerestapiforallvideogames.controllers.base_controller import BaseController
from pandascorerestapiforallvideogames.configuration import Environment
from pandascorerestapiforallvideogames.http.auth.bearer_token import BearerToken
from pandascorerestapiforallvideogames.http.auth.query_token import QueryToken
from pandascorerestapiforallvideogames.controllers.incidents_controller\
    import IncidentsController
from pandascorerestapiforallvideogames.controllers.leagues_controller\
    import LeaguesController
from pandascorerestapiforallvideogames.controllers.matches_controller\
    import MatchesController
from pandascorerestapiforallvideogames.controllers.players_controller\
    import PlayersController
from pandascorerestapiforallvideogames.controllers.series_controller\
    import SeriesController
from pandascorerestapiforallvideogames.controllers.teams_controller\
    import TeamsController
from pandascorerestapiforallvideogames.controllers.tournaments_controller\
    import TournamentsController
from pandascorerestapiforallvideogames.controllers.videogames_controller\
    import VideogamesController


class PandascorerestapiforallvideogamesClient(object):
    @LazyProperty
    def incidents(self):
        return IncidentsController(self.global_configuration)

    @LazyProperty
    def leagues(self):
        return LeaguesController(self.global_configuration)

    @LazyProperty
    def matches(self):
        return MatchesController(self.global_configuration)

    @LazyProperty
    def players(self):
        return PlayersController(self.global_configuration)

    @LazyProperty
    def series(self):
        return SeriesController(self.global_configuration)

    @LazyProperty
    def teams(self):
        return TeamsController(self.global_configuration)

    @LazyProperty
    def tournaments(self):
        return TournamentsController(self.global_configuration)

    @LazyProperty
    def videogames(self):
        return VideogamesController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None, proxy_settings=None,
                 environment=Environment.PRODUCTION,
                 bearer_token_credentials=None, query_token_credentials=None,
                 config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            proxy_settings=proxy_settings, environment=environment,
            bearer_token_credentials=bearer_token_credentials,
            query_token_credentials=query_token_credentials)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())

        self.auth_managers = {key: None for key in ['BearerToken',
                                                    'QueryToken']}
        self.auth_managers['BearerToken'] = BearerToken(
            self.config.bearer_token_credentials)
        self.auth_managers['QueryToken'] = QueryToken(
            self.config.query_token_credentials)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

