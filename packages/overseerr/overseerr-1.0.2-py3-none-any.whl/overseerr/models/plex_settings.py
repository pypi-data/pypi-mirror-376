# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: v1.34.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from overseerr.models.plex_library import PlexLibrary
from typing import Optional, Set
from typing_extensions import Self

class PlexSettings(BaseModel):
    """
    PlexSettings
    """ # noqa: E501
    name: StrictStr
    machine_id: StrictStr = Field(alias="machineId")
    ip: StrictStr
    port: Union[StrictFloat, StrictInt]
    use_ssl: Optional[StrictBool] = Field(default=None, alias="useSsl")
    libraries: Optional[List[PlexLibrary]] = None
    web_app_url: Optional[StrictStr] = Field(default=None, alias="webAppUrl")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["name", "machineId", "ip", "port", "useSsl", "libraries", "webAppUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlexSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "name",
            "machine_id",
            "libraries",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in libraries (list)
        _items = []
        if self.libraries:
            for _item_libraries in self.libraries:
                if _item_libraries:
                    _items.append(_item_libraries.to_dict())
            _dict['libraries'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if use_ssl (nullable) is None
        # and model_fields_set contains the field
        if self.use_ssl is None and "use_ssl" in self.model_fields_set:
            _dict['useSsl'] = None

        # set to None if web_app_url (nullable) is None
        # and model_fields_set contains the field
        if self.web_app_url is None and "web_app_url" in self.model_fields_set:
            _dict['webAppUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlexSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "machineId": obj.get("machineId"),
            "ip": obj.get("ip"),
            "port": obj.get("port"),
            "useSsl": obj.get("useSsl"),
            "libraries": [PlexLibrary.from_dict(_item) for _item in obj["libraries"]] if obj.get("libraries") is not None else None,
            "webAppUrl": obj.get("webAppUrl")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


