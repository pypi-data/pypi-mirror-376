# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: v1.34.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from overseerr.models.notification_agent_types import NotificationAgentTypes
from typing import Optional, Set
from typing_extensions import Self

class UserSettingsNotifications(BaseModel):
    """
    UserSettingsNotifications
    """ # noqa: E501
    notification_types: Optional[NotificationAgentTypes] = Field(default=None, alias="notificationTypes")
    email_enabled: Optional[StrictBool] = Field(default=None, alias="emailEnabled")
    pgp_key: Optional[StrictStr] = Field(default=None, alias="pgpKey")
    discord_enabled: Optional[StrictBool] = Field(default=None, alias="discordEnabled")
    discord_enabled_types: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="discordEnabledTypes")
    discord_id: Optional[StrictStr] = Field(default=None, alias="discordId")
    pushbullet_access_token: Optional[StrictStr] = Field(default=None, alias="pushbulletAccessToken")
    pushover_application_token: Optional[StrictStr] = Field(default=None, alias="pushoverApplicationToken")
    pushover_user_key: Optional[StrictStr] = Field(default=None, alias="pushoverUserKey")
    pushover_sound: Optional[StrictStr] = Field(default=None, alias="pushoverSound")
    telegram_enabled: Optional[StrictBool] = Field(default=None, alias="telegramEnabled")
    telegram_bot_username: Optional[StrictStr] = Field(default=None, alias="telegramBotUsername")
    telegram_chat_id: Optional[StrictStr] = Field(default=None, alias="telegramChatId")
    telegram_send_silently: Optional[StrictBool] = Field(default=None, alias="telegramSendSilently")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["notificationTypes", "emailEnabled", "pgpKey", "discordEnabled", "discordEnabledTypes", "discordId", "pushbulletAccessToken", "pushoverApplicationToken", "pushoverUserKey", "pushoverSound", "telegramEnabled", "telegramBotUsername", "telegramChatId", "telegramSendSilently"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserSettingsNotifications from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of notification_types
        if self.notification_types:
            _dict['notificationTypes'] = self.notification_types.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if pgp_key (nullable) is None
        # and model_fields_set contains the field
        if self.pgp_key is None and "pgp_key" in self.model_fields_set:
            _dict['pgpKey'] = None

        # set to None if discord_enabled_types (nullable) is None
        # and model_fields_set contains the field
        if self.discord_enabled_types is None and "discord_enabled_types" in self.model_fields_set:
            _dict['discordEnabledTypes'] = None

        # set to None if discord_id (nullable) is None
        # and model_fields_set contains the field
        if self.discord_id is None and "discord_id" in self.model_fields_set:
            _dict['discordId'] = None

        # set to None if pushbullet_access_token (nullable) is None
        # and model_fields_set contains the field
        if self.pushbullet_access_token is None and "pushbullet_access_token" in self.model_fields_set:
            _dict['pushbulletAccessToken'] = None

        # set to None if pushover_application_token (nullable) is None
        # and model_fields_set contains the field
        if self.pushover_application_token is None and "pushover_application_token" in self.model_fields_set:
            _dict['pushoverApplicationToken'] = None

        # set to None if pushover_user_key (nullable) is None
        # and model_fields_set contains the field
        if self.pushover_user_key is None and "pushover_user_key" in self.model_fields_set:
            _dict['pushoverUserKey'] = None

        # set to None if pushover_sound (nullable) is None
        # and model_fields_set contains the field
        if self.pushover_sound is None and "pushover_sound" in self.model_fields_set:
            _dict['pushoverSound'] = None

        # set to None if telegram_bot_username (nullable) is None
        # and model_fields_set contains the field
        if self.telegram_bot_username is None and "telegram_bot_username" in self.model_fields_set:
            _dict['telegramBotUsername'] = None

        # set to None if telegram_chat_id (nullable) is None
        # and model_fields_set contains the field
        if self.telegram_chat_id is None and "telegram_chat_id" in self.model_fields_set:
            _dict['telegramChatId'] = None

        # set to None if telegram_send_silently (nullable) is None
        # and model_fields_set contains the field
        if self.telegram_send_silently is None and "telegram_send_silently" in self.model_fields_set:
            _dict['telegramSendSilently'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserSettingsNotifications from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "notificationTypes": NotificationAgentTypes.from_dict(obj["notificationTypes"]) if obj.get("notificationTypes") is not None else None,
            "emailEnabled": obj.get("emailEnabled"),
            "pgpKey": obj.get("pgpKey"),
            "discordEnabled": obj.get("discordEnabled"),
            "discordEnabledTypes": obj.get("discordEnabledTypes"),
            "discordId": obj.get("discordId"),
            "pushbulletAccessToken": obj.get("pushbulletAccessToken"),
            "pushoverApplicationToken": obj.get("pushoverApplicationToken"),
            "pushoverUserKey": obj.get("pushoverUserKey"),
            "pushoverSound": obj.get("pushoverSound"),
            "telegramEnabled": obj.get("telegramEnabled"),
            "telegramBotUsername": obj.get("telegramBotUsername"),
            "telegramChatId": obj.get("telegramChatId"),
            "telegramSendSilently": obj.get("telegramSendSilently")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


