# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: v1.34.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RadarrSettings(BaseModel):
    """
    RadarrSettings
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = None
    name: StrictStr
    hostname: StrictStr
    port: Union[StrictFloat, StrictInt]
    api_key: StrictStr = Field(alias="apiKey")
    use_ssl: StrictBool = Field(alias="useSsl")
    base_url: Optional[StrictStr] = Field(default=None, alias="baseUrl")
    active_profile_id: Union[StrictFloat, StrictInt] = Field(alias="activeProfileId")
    active_profile_name: StrictStr = Field(alias="activeProfileName")
    active_directory: StrictStr = Field(alias="activeDirectory")
    is4k: StrictBool
    minimum_availability: StrictStr = Field(alias="minimumAvailability")
    is_default: StrictBool = Field(alias="isDefault")
    external_url: Optional[StrictStr] = Field(default=None, alias="externalUrl")
    sync_enabled: Optional[StrictBool] = Field(default=None, alias="syncEnabled")
    prevent_search: Optional[StrictBool] = Field(default=None, alias="preventSearch")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "name", "hostname", "port", "apiKey", "useSsl", "baseUrl", "activeProfileId", "activeProfileName", "activeDirectory", "is4k", "minimumAvailability", "isDefault", "externalUrl", "syncEnabled", "preventSearch"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RadarrSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "id",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RadarrSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "hostname": obj.get("hostname"),
            "port": obj.get("port"),
            "apiKey": obj.get("apiKey"),
            "useSsl": obj.get("useSsl"),
            "baseUrl": obj.get("baseUrl"),
            "activeProfileId": obj.get("activeProfileId"),
            "activeProfileName": obj.get("activeProfileName"),
            "activeDirectory": obj.get("activeDirectory"),
            "is4k": obj.get("is4k"),
            "minimumAvailability": obj.get("minimumAvailability"),
            "isDefault": obj.get("isDefault"),
            "externalUrl": obj.get("externalUrl"),
            "syncEnabled": obj.get("syncEnabled"),
            "preventSearch": obj.get("preventSearch")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


