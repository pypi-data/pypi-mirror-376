name: Build Wheels

on:
  push:
    branches: [ main, master, fix-ci-wheels ]
    tags:
      - 'v*'
      - 'V*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-wheels:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-14, windows-latest]

    env:
      # Build these CPython versions for each OS
      CIBW_BUILD: "cp311-* cp312-* cp313-*"
      # Skip musllinux and PyPy for now
      CIBW_SKIP: "pp* *-musllinux_*"
      # Architectures per-OS
      CIBW_ARCHS_LINUX: "x86_64 aarch64"
      CIBW_ARCHS_MACOS: arm64
      CIBW_ARCHS_WINDOWS: AMD64
      # Install system deps inside the manylinux container before building
      CIBW_BEFORE_ALL_LINUX: |
        yum -y update || true
        yum -y install openssl-devel zlib-devel || true
      # Pass verbose CMake for easier debugging
      CMAKE_VERBOSE_MAKEFILE: "ON"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Install zlib on Windows by building from source with CMake
      - name: Install zlib (Windows via CMake)
        if: startsWith(runner.os, 'Windows')
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          vcpkg install zlib
    
      # Linux builds run inside manylinux docker images, so host packages are unnecessary
      - name: Prep (Linux)
        if: startsWith(runner.os, 'Linux')
        run: echo "Using manylinux container for dependencies"

      - name: Enable QEMU for cross-arch builds
        if: startsWith(runner.os, 'Linux')
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Install build tools (macOS)
        if: startsWith(runner.os, 'macOS')
        run: |
          brew update
          brew uninstall cmake
          brew install cmake
          brew install cmake ninja openssl@3 zlib nlohmann-json || true
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "ZLIB_ROOT=$(brew --prefix zlib)" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$(brew --prefix openssl@3):$(brew --prefix zlib)" >> $GITHUB_ENV
          # Align build outputs with Homebrew bottles built on macos-14
          echo "MACOSX_DEPLOYMENT_TARGET=14.0" >> $GITHUB_ENV
          echo "CMAKE_OSX_DEPLOYMENT_TARGET=14.0" >> $GITHUB_ENV

      - name: Install cibuildwheel
        run: |
          python -m pip install -U pip
          python -m pip install cibuildwheel==2.20.0

      - name: Build wheels with cibuildwheel
        env:
          CIBW_BUILD: ${{ env.CIBW_BUILD }}
          CIBW_ARCHS: ${{ runner.os == 'Linux' && env.CIBW_ARCHS_LINUX || (runner.os == 'macOS' && env.CIBW_ARCHS_MACOS) || env.CIBW_ARCHS_WINDOWS }}
          OPENSSL_ROOT_DIR: ${{ env.OPENSSL_ROOT_DIR }}
          ZLIB_ROOT: ${{ env.ZLIB_ROOT }}
          CMAKE_PREFIX_PATH: ${{ env.CMAKE_PREFIX_PATH }}
          CIBW_ENVIRONMENT_MACOS: "MACOSX_DEPLOYMENT_TARGET=14.0 CMAKE_OSX_DEPLOYMENT_TARGET=14.0"
          # IMPORTANT: expand the GH env at YAML time (no %...%)
          CIBW_ENVIRONMENT_WINDOWS: "SKBUILD_CMAKE_DEFINE='ZLIB_LIBRARY=C:/vcpkg/packages/zlib_x64-windows/lib/zlib.lib;ZLIB_INCLUDE_DIR=C:/vcpkg/packages/zlib_x64-windows/include'"
        run: |
          python -m cibuildwheel --output-dir dist
      - name: Show wheels (Unix)
        if: runner.os != 'Windows'
        working-directory: dist
        run: ls -la
      - name: Show wheels (Windows)
        if: runner.os == 'Windows'
        working-directory: dist
        shell: pwsh
        run: Get-ChildItem -Force

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: dist/*.whl

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-22.04
    needs: build-wheels
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build backend
        run: |
          python -m pip install -U pip
          python -m pip install build

      - name: Build sdist
        run: |
          python -m build --sdist --outdir dist

      - name: Download wheels from matrix builds
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
