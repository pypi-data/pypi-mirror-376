"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .nesterror import NestError
from typing import TYPE_CHECKING
from importlib import import_module
import builtins
import sys

if TYPE_CHECKING:
    from .apps_api_rest_v0_chapter_get_chapterop import (
        AppsAPIRestV0ChapterGetChapterRequest,
        AppsAPIRestV0ChapterGetChapterRequestTypedDict,
    )
    from .apps_api_rest_v0_chapter_list_chaptersop import (
        AppsAPIRestV0ChapterListChaptersOrdering,
        AppsAPIRestV0ChapterListChaptersRequest,
        AppsAPIRestV0ChapterListChaptersRequestTypedDict,
    )
    from .apps_api_rest_v0_committee_get_chapterop import (
        AppsAPIRestV0CommitteeGetChapterRequest,
        AppsAPIRestV0CommitteeGetChapterRequestTypedDict,
    )
    from .apps_api_rest_v0_event_list_eventsop import (
        AppsAPIRestV0EventListEventsOrdering,
        AppsAPIRestV0EventListEventsRequest,
        AppsAPIRestV0EventListEventsRequestTypedDict,
    )
    from .apps_api_rest_v0_member_get_memberop import (
        AppsAPIRestV0MemberGetMemberRequest,
        AppsAPIRestV0MemberGetMemberRequestTypedDict,
    )
    from .apps_api_rest_v0_organization_get_organizationop import (
        AppsAPIRestV0OrganizationGetOrganizationRequest,
        AppsAPIRestV0OrganizationGetOrganizationRequestTypedDict,
    )
    from .apps_api_rest_v0_organization_list_organizationop import (
        AppsAPIRestV0OrganizationListOrganizationOrdering,
        AppsAPIRestV0OrganizationListOrganizationRequest,
        AppsAPIRestV0OrganizationListOrganizationRequestTypedDict,
    )
    from .apps_api_rest_v0_project_get_projectop import (
        AppsAPIRestV0ProjectGetProjectRequest,
        AppsAPIRestV0ProjectGetProjectRequestTypedDict,
    )
    from .apps_api_rest_v0_project_list_projectsop import (
        AppsAPIRestV0ProjectListProjectsOrdering,
        AppsAPIRestV0ProjectListProjectsRequest,
        AppsAPIRestV0ProjectListProjectsRequestTypedDict,
    )
    from .chaptererrorresponse import ChapterErrorResponse, ChapterErrorResponseData
    from .chapterschema import ChapterSchema, ChapterSchemaTypedDict
    from .committeeerrorresponse import (
        CommitteeErrorResponse,
        CommitteeErrorResponseData,
    )
    from .committeeschema import CommitteeSchema, CommitteeSchemaTypedDict
    from .eventschema import EventSchema, EventSchemaTypedDict
    from .issueschema import IssueSchema, IssueSchemaTypedDict
    from .list_committeesop import (
        ListCommitteesOrdering,
        ListCommitteesRequest,
        ListCommitteesRequestTypedDict,
    )
    from .list_issuesop import (
        ListIssuesOrdering,
        ListIssuesRequest,
        ListIssuesRequestTypedDict,
    )
    from .list_membersop import (
        ListMembersOrdering,
        ListMembersRequest,
        ListMembersRequestTypedDict,
    )
    from .list_releasesop import (
        ListReleasesOrdering,
        ListReleasesRequest,
        ListReleasesRequestTypedDict,
    )
    from .list_repositoriesop import (
        ListRepositoriesOrdering,
        ListRepositoriesRequest,
        ListRepositoriesRequestTypedDict,
    )
    from .membererrorresponse import MemberErrorResponse, MemberErrorResponseData
    from .memberschema import MemberSchema, MemberSchemaTypedDict
    from .nestapierror import NestAPIError
    from .no_response_error import NoResponseError
    from .organizationerrorresponse import (
        OrganizationErrorResponse,
        OrganizationErrorResponseData,
    )
    from .organizationschema import OrganizationSchema, OrganizationSchemaTypedDict
    from .pagedchapterschema import PagedChapterSchema, PagedChapterSchemaTypedDict
    from .pagedcommitteeschema import (
        PagedCommitteeSchema,
        PagedCommitteeSchemaTypedDict,
    )
    from .pagedeventschema import PagedEventSchema, PagedEventSchemaTypedDict
    from .pagedissueschema import PagedIssueSchema, PagedIssueSchemaTypedDict
    from .pagedmemberschema import PagedMemberSchema, PagedMemberSchemaTypedDict
    from .pagedorganizationschema import (
        PagedOrganizationSchema,
        PagedOrganizationSchemaTypedDict,
    )
    from .pagedprojectschema import PagedProjectSchema, PagedProjectSchemaTypedDict
    from .pagedreleaseschema import PagedReleaseSchema, PagedReleaseSchemaTypedDict
    from .pagedrepositoryschema import (
        PagedRepositorySchema,
        PagedRepositorySchemaTypedDict,
    )
    from .projecterrorresponse import ProjectErrorResponse, ProjectErrorResponseData
    from .projectlevel import ProjectLevel
    from .projectschema import ProjectSchema, ProjectSchemaTypedDict
    from .releaseschema import ReleaseSchema, ReleaseSchemaTypedDict
    from .repositoryschema import RepositorySchema, RepositorySchemaTypedDict
    from .responsevalidationerror import ResponseValidationError
    from .security import Security, SecurityTypedDict
    from .state import State

__all__ = [
    "AppsAPIRestV0ChapterGetChapterRequest",
    "AppsAPIRestV0ChapterGetChapterRequestTypedDict",
    "AppsAPIRestV0ChapterListChaptersOrdering",
    "AppsAPIRestV0ChapterListChaptersRequest",
    "AppsAPIRestV0ChapterListChaptersRequestTypedDict",
    "AppsAPIRestV0CommitteeGetChapterRequest",
    "AppsAPIRestV0CommitteeGetChapterRequestTypedDict",
    "AppsAPIRestV0EventListEventsOrdering",
    "AppsAPIRestV0EventListEventsRequest",
    "AppsAPIRestV0EventListEventsRequestTypedDict",
    "AppsAPIRestV0MemberGetMemberRequest",
    "AppsAPIRestV0MemberGetMemberRequestTypedDict",
    "AppsAPIRestV0OrganizationGetOrganizationRequest",
    "AppsAPIRestV0OrganizationGetOrganizationRequestTypedDict",
    "AppsAPIRestV0OrganizationListOrganizationOrdering",
    "AppsAPIRestV0OrganizationListOrganizationRequest",
    "AppsAPIRestV0OrganizationListOrganizationRequestTypedDict",
    "AppsAPIRestV0ProjectGetProjectRequest",
    "AppsAPIRestV0ProjectGetProjectRequestTypedDict",
    "AppsAPIRestV0ProjectListProjectsOrdering",
    "AppsAPIRestV0ProjectListProjectsRequest",
    "AppsAPIRestV0ProjectListProjectsRequestTypedDict",
    "ChapterErrorResponse",
    "ChapterErrorResponseData",
    "ChapterSchema",
    "ChapterSchemaTypedDict",
    "CommitteeErrorResponse",
    "CommitteeErrorResponseData",
    "CommitteeSchema",
    "CommitteeSchemaTypedDict",
    "EventSchema",
    "EventSchemaTypedDict",
    "IssueSchema",
    "IssueSchemaTypedDict",
    "ListCommitteesOrdering",
    "ListCommitteesRequest",
    "ListCommitteesRequestTypedDict",
    "ListIssuesOrdering",
    "ListIssuesRequest",
    "ListIssuesRequestTypedDict",
    "ListMembersOrdering",
    "ListMembersRequest",
    "ListMembersRequestTypedDict",
    "ListReleasesOrdering",
    "ListReleasesRequest",
    "ListReleasesRequestTypedDict",
    "ListRepositoriesOrdering",
    "ListRepositoriesRequest",
    "ListRepositoriesRequestTypedDict",
    "MemberErrorResponse",
    "MemberErrorResponseData",
    "MemberSchema",
    "MemberSchemaTypedDict",
    "NestAPIError",
    "NestError",
    "NoResponseError",
    "OrganizationErrorResponse",
    "OrganizationErrorResponseData",
    "OrganizationSchema",
    "OrganizationSchemaTypedDict",
    "PagedChapterSchema",
    "PagedChapterSchemaTypedDict",
    "PagedCommitteeSchema",
    "PagedCommitteeSchemaTypedDict",
    "PagedEventSchema",
    "PagedEventSchemaTypedDict",
    "PagedIssueSchema",
    "PagedIssueSchemaTypedDict",
    "PagedMemberSchema",
    "PagedMemberSchemaTypedDict",
    "PagedOrganizationSchema",
    "PagedOrganizationSchemaTypedDict",
    "PagedProjectSchema",
    "PagedProjectSchemaTypedDict",
    "PagedReleaseSchema",
    "PagedReleaseSchemaTypedDict",
    "PagedRepositorySchema",
    "PagedRepositorySchemaTypedDict",
    "ProjectErrorResponse",
    "ProjectErrorResponseData",
    "ProjectLevel",
    "ProjectSchema",
    "ProjectSchemaTypedDict",
    "ReleaseSchema",
    "ReleaseSchemaTypedDict",
    "RepositorySchema",
    "RepositorySchemaTypedDict",
    "ResponseValidationError",
    "Security",
    "SecurityTypedDict",
    "State",
]

_dynamic_imports: dict[str, str] = {
    "AppsAPIRestV0ChapterGetChapterRequest": ".apps_api_rest_v0_chapter_get_chapterop",
    "AppsAPIRestV0ChapterGetChapterRequestTypedDict": ".apps_api_rest_v0_chapter_get_chapterop",
    "AppsAPIRestV0ChapterListChaptersOrdering": ".apps_api_rest_v0_chapter_list_chaptersop",
    "AppsAPIRestV0ChapterListChaptersRequest": ".apps_api_rest_v0_chapter_list_chaptersop",
    "AppsAPIRestV0ChapterListChaptersRequestTypedDict": ".apps_api_rest_v0_chapter_list_chaptersop",
    "AppsAPIRestV0CommitteeGetChapterRequest": ".apps_api_rest_v0_committee_get_chapterop",
    "AppsAPIRestV0CommitteeGetChapterRequestTypedDict": ".apps_api_rest_v0_committee_get_chapterop",
    "AppsAPIRestV0EventListEventsOrdering": ".apps_api_rest_v0_event_list_eventsop",
    "AppsAPIRestV0EventListEventsRequest": ".apps_api_rest_v0_event_list_eventsop",
    "AppsAPIRestV0EventListEventsRequestTypedDict": ".apps_api_rest_v0_event_list_eventsop",
    "AppsAPIRestV0MemberGetMemberRequest": ".apps_api_rest_v0_member_get_memberop",
    "AppsAPIRestV0MemberGetMemberRequestTypedDict": ".apps_api_rest_v0_member_get_memberop",
    "AppsAPIRestV0OrganizationGetOrganizationRequest": ".apps_api_rest_v0_organization_get_organizationop",
    "AppsAPIRestV0OrganizationGetOrganizationRequestTypedDict": ".apps_api_rest_v0_organization_get_organizationop",
    "AppsAPIRestV0OrganizationListOrganizationOrdering": ".apps_api_rest_v0_organization_list_organizationop",
    "AppsAPIRestV0OrganizationListOrganizationRequest": ".apps_api_rest_v0_organization_list_organizationop",
    "AppsAPIRestV0OrganizationListOrganizationRequestTypedDict": ".apps_api_rest_v0_organization_list_organizationop",
    "AppsAPIRestV0ProjectGetProjectRequest": ".apps_api_rest_v0_project_get_projectop",
    "AppsAPIRestV0ProjectGetProjectRequestTypedDict": ".apps_api_rest_v0_project_get_projectop",
    "AppsAPIRestV0ProjectListProjectsOrdering": ".apps_api_rest_v0_project_list_projectsop",
    "AppsAPIRestV0ProjectListProjectsRequest": ".apps_api_rest_v0_project_list_projectsop",
    "AppsAPIRestV0ProjectListProjectsRequestTypedDict": ".apps_api_rest_v0_project_list_projectsop",
    "ChapterErrorResponse": ".chaptererrorresponse",
    "ChapterErrorResponseData": ".chaptererrorresponse",
    "ChapterSchema": ".chapterschema",
    "ChapterSchemaTypedDict": ".chapterschema",
    "CommitteeErrorResponse": ".committeeerrorresponse",
    "CommitteeErrorResponseData": ".committeeerrorresponse",
    "CommitteeSchema": ".committeeschema",
    "CommitteeSchemaTypedDict": ".committeeschema",
    "EventSchema": ".eventschema",
    "EventSchemaTypedDict": ".eventschema",
    "IssueSchema": ".issueschema",
    "IssueSchemaTypedDict": ".issueschema",
    "ListCommitteesOrdering": ".list_committeesop",
    "ListCommitteesRequest": ".list_committeesop",
    "ListCommitteesRequestTypedDict": ".list_committeesop",
    "ListIssuesOrdering": ".list_issuesop",
    "ListIssuesRequest": ".list_issuesop",
    "ListIssuesRequestTypedDict": ".list_issuesop",
    "ListMembersOrdering": ".list_membersop",
    "ListMembersRequest": ".list_membersop",
    "ListMembersRequestTypedDict": ".list_membersop",
    "ListReleasesOrdering": ".list_releasesop",
    "ListReleasesRequest": ".list_releasesop",
    "ListReleasesRequestTypedDict": ".list_releasesop",
    "ListRepositoriesOrdering": ".list_repositoriesop",
    "ListRepositoriesRequest": ".list_repositoriesop",
    "ListRepositoriesRequestTypedDict": ".list_repositoriesop",
    "MemberErrorResponse": ".membererrorresponse",
    "MemberErrorResponseData": ".membererrorresponse",
    "MemberSchema": ".memberschema",
    "MemberSchemaTypedDict": ".memberschema",
    "NestAPIError": ".nestapierror",
    "NoResponseError": ".no_response_error",
    "OrganizationErrorResponse": ".organizationerrorresponse",
    "OrganizationErrorResponseData": ".organizationerrorresponse",
    "OrganizationSchema": ".organizationschema",
    "OrganizationSchemaTypedDict": ".organizationschema",
    "PagedChapterSchema": ".pagedchapterschema",
    "PagedChapterSchemaTypedDict": ".pagedchapterschema",
    "PagedCommitteeSchema": ".pagedcommitteeschema",
    "PagedCommitteeSchemaTypedDict": ".pagedcommitteeschema",
    "PagedEventSchema": ".pagedeventschema",
    "PagedEventSchemaTypedDict": ".pagedeventschema",
    "PagedIssueSchema": ".pagedissueschema",
    "PagedIssueSchemaTypedDict": ".pagedissueschema",
    "PagedMemberSchema": ".pagedmemberschema",
    "PagedMemberSchemaTypedDict": ".pagedmemberschema",
    "PagedOrganizationSchema": ".pagedorganizationschema",
    "PagedOrganizationSchemaTypedDict": ".pagedorganizationschema",
    "PagedProjectSchema": ".pagedprojectschema",
    "PagedProjectSchemaTypedDict": ".pagedprojectschema",
    "PagedReleaseSchema": ".pagedreleaseschema",
    "PagedReleaseSchemaTypedDict": ".pagedreleaseschema",
    "PagedRepositorySchema": ".pagedrepositoryschema",
    "PagedRepositorySchemaTypedDict": ".pagedrepositoryschema",
    "ProjectErrorResponse": ".projecterrorresponse",
    "ProjectErrorResponseData": ".projecterrorresponse",
    "ProjectLevel": ".projectlevel",
    "ProjectSchema": ".projectschema",
    "ProjectSchemaTypedDict": ".projectschema",
    "ReleaseSchema": ".releaseschema",
    "ReleaseSchemaTypedDict": ".releaseschema",
    "RepositorySchema": ".repositoryschema",
    "RepositorySchemaTypedDict": ".repositoryschema",
    "ResponseValidationError": ".responsevalidationerror",
    "Security": ".security",
    "SecurityTypedDict": ".security",
    "State": ".state",
}


def dynamic_import(modname, retries=3):
    for attempt in range(retries):
        try:
            return import_module(modname, __package__)
        except KeyError:
            # Clear any half-initialized module and retry
            sys.modules.pop(modname, None)
            if attempt == retries - 1:
                break
    raise KeyError(f"Failed to import module '{modname}' after {retries} attempts")


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = dynamic_import(module_name)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = builtins.list(_dynamic_imports.keys())
    return builtins.sorted(lazy_attrs)
