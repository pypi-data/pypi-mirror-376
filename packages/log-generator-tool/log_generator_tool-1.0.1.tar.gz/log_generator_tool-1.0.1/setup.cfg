[metadata]
name = log-generator-tool
author = Log Generator Team
author_email = team@loggenerator.dev
description = Automatic log generation tool for log analyzer development and testing
long_description = file: README.md
long_description_content_type = text/markdown
url = https://github.com/log-generator/log-generator-tool
project_urls = 
	Bug Reports = https://github.com/log-generator/log-generator-tool/issues
	Source = https://github.com/log-generator/log-generator-tool
	Documentation = https://log-generator-tool.readthedocs.io/
license = MIT
license_files = LICENSE
classifiers = 
	Development Status :: 4 - Beta
	Intended Audience :: Developers
	Intended Audience :: System Administrators
	License :: OSI Approved :: MIT License
	Operating System :: OS Independent
	Programming Language :: Python :: 3
	Programming Language :: Python :: 3.8
	Programming Language :: Python :: 3.9
	Programming Language :: Python :: 3.10
	Programming Language :: Python :: 3.11
	Programming Language :: Python :: 3.12
	Topic :: Software Development :: Testing
	Topic :: System :: Logging
	Topic :: System :: Monitoring
	Topic :: Utilities
	Environment :: Console
	Natural Language :: English
	Natural Language :: Korean

[options]
packages = find:
python_requires = >=3.8
include_package_data = True
zip_safe = False

[options.packages.find]
exclude = 
	tests*
	docs*
	examples*

[options.entry_points]
console_scripts = 
	log-generator = log_generator.cli:main

[options.package_data]
log_generator = 
	patterns/*.yaml
	patterns/*.json
	config/*.yaml

[flake8]
max-line-length = 88
extend-ignore = 
	E203,
	E501,
	W503,
	F401,
	W291,
	W292,
	W293,
	F824,
	F841,
	F541,
	E128,
	E129,
	E303,
	E261,
	E231,
	E306,
	F402,
	E722,
	E741,
	E712
exclude = 
	.git,
	__pycache__,
	build,
	dist,
	*.egg-info,
	.venv,
	.pytest_cache,
	.mypy_cache,
	docs,
	examples/legacy
per-file-ignores = 
	__init__.py: F401, W291,W292
	tests/*: S101,S106,W291,W292,W293,F824

[coverage:run]
source = log_generator
omit = 
	*/tests/*
	*/test_*
	setup.py
	log_generator/__main__.py

[coverage:report]
exclude_lines = 
	pragma: no cover
	def __repr__
	if self.debug:
	if settings.DEBUG
	raise AssertionError
	raise NotImplementedError
	if 0:
	if __name__ == .__main__.:
	class .*\bProtocol\):
	@(abc\.)?abstractmethod
precision = 2
show_missing = True
skip_covered = False

[coverage:html]
directory = htmlcov

[tool:pytest]
minversion = 7.0
addopts = 
	-ra
	-q
	--strict-markers
	--strict-config
	--tb=short
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*
markers = 
	slow: marks tests as slow (deselect with '-m "not slow"')
	integration: marks tests as integration tests
	unit: marks tests as unit tests
	performance: marks tests as performance tests
	network: marks tests that require network access
filterwarnings = 
	error
	ignore::UserWarning
	ignore::DeprecationWarning
	ignore::PendingDeprecationWarning

[bdist_wheel]
universal = 0

[egg_info]
tag_build = 
tag_date = 0

