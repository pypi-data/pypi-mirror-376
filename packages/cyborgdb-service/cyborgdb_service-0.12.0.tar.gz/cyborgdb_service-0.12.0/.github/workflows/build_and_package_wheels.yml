name: Build and Package Wheels

on:
  push:
    branches: ["main"]
    tags:
      - "v*"

jobs:
  build_distributions:
    runs-on: ubuntu-latest

    # Determine environment based on trigger
    environment:
      name: ${{ startsWith(github.ref, 'refs/tags/') && (endsWith(github.ref, '-staging') && 'staging' || 'prod') || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Set Version from Tag for Wheels
        if: github.ref_type == 'tag'
        shell: bash
        run: |
          VERSION=${GITHUB_REF_NAME#v}  # Strip the 'v' prefix if present
          
          # Convert to PEP 440 compliant version
          if [[ "$VERSION" == *-staging ]]; then
            # Convert -staging to .dev0 (or you could use .a0 for alpha, .b0 for beta)
            PEP440_VERSION="${VERSION%-staging}.dev0"
          elif [[ "$VERSION" == *-dev ]]; then
            # Convert -dev to .dev1 
            PEP440_VERSION="${VERSION%-dev}.dev1"
          else
            # Use version as-is for production releases
            PEP440_VERSION="$VERSION"
          fi
          
          echo "Original version: $VERSION"
          echo "PEP 440 version: $PEP440_VERSION"
          echo "Setting PEP 440 compliant version $PEP440_VERSION for wheel build"
          echo "SETUPTOOLS_SCM_PRETEND_VERSION=$PEP440_VERSION" >> $GITHUB_ENV

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build wheel

      - name: Update endpoint URLs
        env:
          PACKAGE_ENDPOINT: ${{ vars.PACKAGE_ENDPOINT }}
        run: |
          if [ -z "$PACKAGE_ENDPOINT" ]; then
            echo "Error: PACKAGE_ENDPOINT is not set"
            exit 1
          fi
          echo "Setting package endpoint to $PACKAGE_ENDPOINT"

          sed -i'' -e "s|DEFAULT_PACKAGE_ENDPOINT = \".*\"|DEFAULT_PACKAGE_ENDPOINT = \"$PACKAGE_ENDPOINT\"|" cyborgdb_service/utils/endpoints.py

          echo "Updated DEFAULT_PACKAGE_ENDPOINT in cyborgdb_service/utils/endpoints.py:"
          cat cyborgdb_service/utils/endpoints.py | grep DEFAULT_PACKAGE_ENDPOINT

      - name: Build distributions
        run: |
          python -m build --sdist --wheel --outdir dist/
          echo "Built distributions:"
          ls -la dist/

      - name: Store distributions as artifact
        uses: actions/upload-artifact@v4
        with:
          name: cyborgdb-service-dist
          path: dist/*
          retention-days: 5
  
  publish_to_pypi:
    needs: [build_distributions]
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/v') && !endsWith(github.ref, '-staging')
    environment:
      name: prod
    permissions:
      id-token: write
      contents: write
    
    steps:
      - name: Download distribution artifacts
        uses: actions/download-artifact@v4
        with:
          name: cyborgdb-service-dist
          path: dist
          
      - name: Display structure of downloaded files
        run: ls -la dist/
          
      - name: Create release archive
        run: |
          VERSION=${GITHUB_REF_NAME#v}  # Strip the 'v' prefix if present
          echo "Creating archive for version $VERSION"
          zip -r cyborgdb_service-${VERSION}-dist.zip dist/
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Publish to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            cyborgdb_service-${{ env.RELEASE_VERSION }}-dist.zip
          generate_release_notes: true
          draft: false
          tag_name: ${{ github.ref_name }}
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true