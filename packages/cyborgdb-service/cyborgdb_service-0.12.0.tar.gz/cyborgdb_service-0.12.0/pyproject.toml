[build-system]
requires = ["setuptools>=42", "setuptools_scm>=8,<8.6", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cyborgdb-service"
# version = "0.10.1"
dynamic = ["version"]
description = "REST Server for CyborgDB: The Confidential Vector Database"
readme = "README.md"
requires-python = ">= 3.9"
license = { text = "Proprietary" }
authors = [{ name = "Cyborg Inc." }]
keywords = ["CyborgDB Service"]
dependencies = [
    "fastapi>=0.68.0",
    "uvicorn[standard]>=0.15.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "requests>=2.25.0",
    "numpy>=1.21.0",
    "packaging>=21.0"
]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: C++",
    "Topic :: Database",
    "Topic :: Database :: Database Engines/Servers",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Libraries",
]

[project.scripts]
cyborgdb-service = "cyborgdb_service.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["cyborgdb_service*"]

[project.urls]
"Homepage" = "https://www.cyborg.co"
"Documentation" = "https://docs.cyborg.co"

[tool.setuptools_scm]
version_scheme = "guess-next-dev"
local_scheme = "no-local-version"

[project.optional-dependencies]
embeddings = ["sentence-transformers>=2.2.0"]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=6.0.0",
    "httpx>=0.25.0",
    "ruff>=0.8.0",
]

[tool.ruff]
# Exclude auto-generated OpenAPI client code
extend-exclude = [
    "cyborgdb_service/openapi_client",
]

# Same as Black
line-length = 88
indent-width = 4

# Python 3.9+
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings
quote-style = "double"

# Like Black, indent with spaces, rather than tabs
indent-style = "space"

# Like Black, respect magic trailing commas
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending
line-ending = "auto"