# Auditing & Logging Configuration audit configurations
# This file consolidates event logging, audit trails, and monitoring configurations across all operating systems.

global:
  topic: System Auditing & Logging

kernel_logging_status_linux:
  regex: 'Logging_AuditdStatus:: auditd_status: (?P<status>.*)'
  excel_sheet_name: 06-Kernel Auditing Status
  sys_filter:
    - attr: os_family
      comp: eq
      value: Linux
  only_matching: True
  field_list:
    - status
  show_missing: True
  comment: |-
    AuditD performs kernel-level logging.  For instance, it's a common way to generate file system access logs and some FIM products (e.g. Rapid7) actually require it as they are only monitoring AuditD events.  It can generate a lot of data and requires special tools to make the most sense out of the output, so we only grab the configs and none of the events.  Some CIS benchmarks for both Linux and Docker (and probably others) are based on AuditD, so we also check to see if it's running at all.

    NOTE: There's a relatively new replacement for AuditD called go-audit (written in Golang - hence the name).  This is a suitable replacement for what I've seen, but we don't currently pull any configs for it.  Reference: https://github.com/slackhq/go-audit

kernel_logging_rules_linux:
  regex: 'Logging_AuditdRunningConfig::'
  excel_sheet_name: 06-Kernel Auditing Rules
  sys_filter:
    - attr: os_family
      comp: eq
      value: Linux
  comment: |-
    This list provides all of the rules configured in AuditD.  There should be one rule for each event that is to be logged by the kernel.

kernel_logging_setuid_linux:
  regex: 'Logging_AuditdSETUID::(?P<binary>[\w/]+):(?P<ruleCount>\d+)'
  excel_sheet_name: 06-Kernel Auditing Config (SETUID)
  sys_filter:
    - attr: os_family
      comp: eq
      value: Linux
  only_matching: True
  field_list: 
    - binary
    - ruleCount
  comment: |-
    SETUID binaries are those programs and utilities that will run as a fixed, usually ROOT, user).  We check that each SETUID binary has it's own AuditD log entry.  This is a specific CIS benchmark check.  See below for how to make sense of this output.

    Output:
        <path-to-binary> <number-of-auditd-matches>
        A 0 following the file indicates it is not being monitored by auditd

syslog_config_linux:
  regex: 'Logging_Syslog(rsyslogd|syslogd|syslogng)Config::((\s\w*)_status:|/etc/.*?\.conf::\w+)'
  excel_sheet_name: 06-System Logging Config
  sys_filter:
    - attr: os_family
      comp: eq
      value: Linux
  comment: |-
    Syslog, RSysLog and Syslog-ng all perform similar functions -- turn system and application messages into logs.  You should see one but probably not more than one of them listed below.  
    
    RSysLog is used for both RPM- and Debian-based installations, which covers just about the entire Linux landscape.  The others are collected here in the event local conditions have led to their use.
    A common check here is to make sure that logs are shipped to an external, centralized log server.  OSSEC, FluentD, Datadog or another tool might also capture the logs, but if none of those are installed, then SysLog will be responsible shipping the logs to another system.  
    
    Check for:
        - lines with an @ sign (sent remotely)
        - lines with /dev/null (thrown away)
        - lines with file names such as /var/log/auth.log (sent to this file)

logrotate_config_linux:
  regex: 'Logging_SyslogLogrotateConfig::'
  excel_sheet_name: 06-System Logging Archive Config (LogRotate)
  sys_filter:
    - attr: os_family
      comp: eq
      value: Linux
  comment: |-
    LogRotate prunes the logs on the local disk so they don't fill up the drive.  If they're not shipped to another log server or SIEM tool by OSSEC, Syslog or something else then when LogRotate deletes the log, it's gone forever.  See https://www.redhat.com/sysadmin/setting-logrotate for more information on how to read these files.

    Specifically, look for the "rotate" lines as well as "weekly", "daily", etc.

system_logging_logfile_list_linux:
  regex: 'Logging_SamplesVarLogList::'
  excel_sheet_name: 06-Log Files List
  sys_filter:
    - attr: os_family
      comp: eq
      value: Linux
  comment: |-
    This is a full list of the /var/log sub-directory, in case you would like to ask for additional logging samples.  In the "logging_samples" file, we grab samples of some of the common ones.

    Files with an extension such as ".1.gz" identify logs that have been rotated (see "logrotate_config" file).

system_logging_samples_linux:
  regex: 'Logging_Samples-(?P<logfile>[A-Za-z.]+)-(?P<head_tail>head|tail)::(?P<logentry>.*)'
  excel_sheet_name: 06-Logging Samples
  sys_filter:
    - attr: os_family
      comp: eq
      value: Linux
  field_list:
    - 'logfile'
    - 'head_tail'
    - 'logentry'
  only_matching: True
  show_missing: True
  comment: |-
    We collect samples of various logs below.  To save space, we collect only the first ('head') and last ('tail') 25 lines of each file to confirm that events were and continue to be written to the logs.  If you need to see more of some log files, you'll need to ask for those separately.

datadog_config_linux:
  regex: 'Logging_Datadog::'
  excel_sheet_name: 06-Datadog Config
  sys_filter:
    - attr: os_family
      comp: eq
      value: Linux
  comment: |-
    Datadog is a popular log collection agent, especially for application logs.  While these logs are usually more than what we're looking for, we pull the Datadog configurations if they're available.

    https://docs.datadoghq.com/agent/guide/agent-configuration-files/?tab=agentv6v7 for information on how to read this file

fluentd_config_linux:
  regex: 'Logging_FluentD::'
  excel_sheet_name: 06-FluentD Config
  sys_filter:
    - attr: os_family
      comp: eq
      value: Linux
  comment: |-
    FluentD is a common log harvester solution we might see in use by our customers.  We'll grab the contents of the /etc/fluent/fluent.conf file.  
    
    See https://docs.fluentd.org/configuration/config-file for information on how to read this file

windows_auditpol_config:
    regex: 'Logging_AuditEventsConfig::[ ]+((Security System Extension[ ]+(?P<systemSecurityExtension>.*))|(System Integrity[ ]+(?P<systemIntegrity>.*))|(Security State Change[ ]+(?P<securityStateChange>.*))|(Logon[ ]+(?P<logon>.*))|(Logoff[ ]+(?P<logoff>.*))|(Sensitive Privilege Use[ ]+(?P<sensitivePrivUse>.*))|(Process Creation[ ]+(?P<processCreation>.*))|(Process Termination[ ]+(?P<processTermination>.*))|(File System[ ]+(?P<fileSystem>.*))|(Audit Policy Change[ ]+(?P<auditPolicyChange>.*))|(Directory Service Access[ ]+(?P<directoryServiceAccess>.*))|(Directory Service Changes[ ]+(?P<directoryServiceChanges>.*)))'
    excel_sheet_name: 06-Audit Policy Config
    sys_filter:
      - attr: os_family
        comp: eq
        value: Windows
    field_list:
      - 'sensitivePrivUse'
      - 'directoryServiceAccess'
      - 'systemIntegrity'
      - 'securityStateChange'
      - 'systemSecurityExtension'
      - 'logon'
      - 'logoff'
      - 'directoryServiceChanges'
      - 'fileSystem'
      - "processTermination"
      - "auditPolicyChange"
      - 'processCreation'
    multiline: True
    only_matching: True
    comment: |-
      Provides a detailed report of the events that will be captured by the local Windows Event Log service.  NOTE: There are additional settings captured in the raw results, but these are likely the ones you're looking for.
      Reference: https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/advanced-security-auditing-faq

windows_fs_audit_config:
  regex: 'Logging_FSAuditing-(?P<drive>[A-Za-z]):(?P<path>[\w\\. ]+?)::Audit[ ]+:(?P<auditConfig>.*)'
  excel_sheet_name: 06-File System Audit Config
  sys_filter:
    - attr: os_family
      comp: eq
      value: Windows
  only_matching: True
  field_list:
    - 'drive'
    - 'path'
    - 'auditConfig'
  comment: |-
    These results include any local file system auditing that has been enabled.  Be sure to check the auditpol_config to make sure that File System auditing is enabled.  Once that's verified, then these are the files and events that will be logged to Windows Event Log.  No other file system access will be logged.

    The results are difficult to work with as there may be more than one result.  However, if no results are shown on the "audit" line, then there aren't any audit configs.  If you do receive at least one result, you'll need to review the raw text files to see if there are more than one.

    NOTE: Some "light-weight" FIM tools such as those included with Log Event collector tools, rely on Windows Event Log events for file system events.  If this isn't configured per the vendor's manuals, then events are likely not being captured.  You may need to test for this separately if there's any doubt.

windows_event_log_config:
  regex: 'Logging_AuditLogConfig::(?!PrimaryModule)(?!--)\w'
  excel_sheet_name: 06-System Logging Config
  sys_filter:
    - attr: os_family
      comp: eq
      value: Windows
  show_missing: True
  comment: |-
    If logs are being pulled off in real-time by some collector agent (e.g. Splunk, FluentD, etc), then these configs should have no bearing.  If they are not, then that's a worthy recommendation.

    Reference: See https://docs.microsoft.com/en-us/windows/win32/eventlog/eventlog-key for details about what each item means.

windows_event_log_samples:
  regex: 'Logging_EventLogSamples(?P<eventLogSource>[A-Za-z]+)::(?!(Index[ ]+Time)|---)(?P<logMessage>.*)'
  excel_sheet_name: 06-Logging Samples
  sys_filter:
    - attr: os_family
      comp: eq
      value: Windows
  only_matching: True
  field_list:
    - eventLogSource
    - logMessage
  show_missing: True
  comment: |-
    Provides samples of Windows Event Logs (50 newest events).  Use this to test that event logs are being actively written to the Windows Event Log system.
    NOTE:  There are many tools that can collect the logs for centralized storage and analysis, but most -- if not all -- rely on the Event Log system in Windows.
          If Event Log doesn't have the event, then it's unlikely that Splunk, FluentD or other collection agents will have the event.
    Event Logs captured include:
      Application     Contains events logged by applications. For example, a database application might record a file error. The application developer decides which events to record.
      Security        Contains events such as valid and invalid logon attempts, as well as events related to resource use such as creating, opening, or deleting files or other objects.
      System          Contains events logged by system components, such as the failure of a driver or other system component to load during startup.

kernel_logging_status_macos:
  regex: 'Logging_AuditdStatus::(?P<pid>[\d-]+)\s+(?P<exitStatus>\d+)\s+(?P<label>.*)|(Logging_AuditConfig::/etc/security/audit_control::(expire-after:(?P<expireAfter>.*)|flags:(?P<allUserFlags>.*)))'
  excel_sheet_name: 06-Kernel Auditing Status
  sys_filter:
    - attr: os_family
      comp: eq
      value: Darwin
  only_matching: True
  full_scan: True
  field_list:
    - pid
    - exitStatus
    - label
    - expireAfter
    - allUserFlags
  comment: |-
    Apple System Log (ASL, as implemented in AuditD) performs kernel-level logging.  For instance, it's a common way to generate file system access logs and some FIM products (e.g. Rapid7) actually require it as they are only monitoring AuditD events.

    See https://www.scip.ch/en/?labs.20150108 and the MacOS CIS Benchmark item 3.2 for additional background info.

    Fields include:
      - pid/exitStats/Label: Determines if AuditD is running on the system.  According to the CIS benchmarks, the correct response is that we see AuditD listed, even if the PID column is blank ("-")
      - expireAfter: Maximum amount size/retention time for the related log files.  They will be rotated/deleted after this value
      - allUserFlags: Events that will be logged for all users (see user-specific logging configuration in "auditd_user_logging" file)

    Common values for audit events:
      - lo: Login/logout
      - aa: Authentication and authorization
      - ad: Administrative
      - pc: Process-related events
      - fr/fw: File read/write
      - nt: Network
      - no: Invalid class

kernel_logging_user_events_macos:
  regex: 'Logging_AuditConfig::/etc/security/audit_user::(?P<user>\w+):(?P<alwaysAudit>[\w+,-^]+):(?P<neverAudit>[\w+,-^]+)'
  excel_sheet_name: 06-Kernel Auditing User Events
  sys_filter:
    - attr: os_family
      comp: eq
      value: Darwin
  only_matching: True
  field_list:
    - user
    - alwaysAudit
    - neverAudit
  comment: |-
    These results include all of the user-specific logging overrides.  This will be useful specifically in a PCI assessment where all actions taken by a user with root/admin permissions need to be logged.  You might also find it useful in other situations.

    Common values for audit events:
      - lo: Login/logout
      - aa: Authentication and authorization
      - ad: Administrative
      - pc: Process-related events
      - fr/fw: File read/write
      - nt: Network
      - no: Invalid class

install_log_retention:
  regex: 'Logging_InstallLog::/etc/asl/com.apple.install::\*\s+file\s+(?P<destination>[/\w.]+)((.*?file_max=(?P<file_max>\w+).*?all_max=(?P<all_max>\w+))|(.*ttl=(?P<ttl>\d+)))'
  excel_sheet_name: 06-Install Log Retention
  sys_filter:
    - attr: os_family
      comp: eq
      value: Darwin
  only_matching: True
  field_list:
    - destination
    - file_max
    - all_max
    - ttl
  comment: |-
    macOS writes information pertaining to system-related events to the file /var/log/install.log.  The retention period for this log file is set in the /etc/asl/com.apple.install configuration file.
    Specifically, we want to see 'ttl=365' or greater.  We do NOT want to see 'file_max' or 'all_max=' followed by a file size.

install_log_permissions:
  regex: 'Logging_AuditPermissions::d(?P<permissions>[rwx-]+)\s+\d+\s+(?P<owner>\w+)\s+(?P<group>\w+)\s+\d+\s+([A-Z]\w+)\s+\d+\s+[\d:]+\s+(?P<dir>audit|log.?)'
  excel_sheet_name: 06-Logfile Permissions
  sys_filter:
    - attr: os_family
      comp: eq
      value: Darwin
  only_matching: True
  field_list: 
    - dir
    - permissions
    - owner
    - group
  comment: |-
    These results include the file system permissions for the the folders used to write logs (/var/audit and /var/log).  Permissions should be limited to only those with a need to read log files.  Compare the owner and group permissions to expectations (it may be necessary to review group memberships as well).  "Other" should have no permissions to these folders.

    As with all Unix-line file system permissions, each permissions block is really three different fields:
      Owner: The user-owner of the file/directory (rwx, as necessary)
      Group: The group-owner of the file/directory (rwx, as necessary / check system group memberships)
      Other: Anyone else on the system (--- to restrict all access)

    For directories:
      - Read means that users can see the directory contents listed when browsing the file system (files have their own permissions block)
      - Write means that users can create new files in the directory
      - Execute means they can change into the directory

syslog_config_macos:
  regex: 'Logging_SyslogConfig::(?P<configFile>[\w/.]+)::(?!#)(?P<line>[?>\w].*)'
  excel_sheet_name: 06-System Logging Config
  sys_filter:
    - attr: os_family
      comp: eq
      value: Darwin
  comment: |-
    MacOS uses two different logging services:
      1 - Syslog appears to be used only for sending logs to remote destinations (e.g. @...)
      2 - Apple System Log (ASL) appears to be used for any local flat-file logging destinations
        
    Check for:
        - lines with an @ sign (sent remotely)
        - lines with /dev/null (thrown away)
        - lines with file names such as /var/log/auth.log (sent to this file)
        - Retention criteria (e.g. sized-based with file_max=50M or all_max=150M, and time-based such as ttl=365)

firewall_logging_macos:
  regex: 'Logging_Firewall-firewall::(EnableLogging=(?P<fwEnableLogging>.*)|LoggingOption=(?P<fwLoggingOption>.*))|Logging_Firewall-alf::(loggingenabled=(?P<alfEnableLogging>.*)|loggingoption=(?P<alfLoggingOption>.*))'
  excel_sheet_name: 06-Firewall Logging
  sys_filter:
    - attr: os_family
      comp: eq
      value: Darwin
  only_matching: True
  multiline: True
  field_list:
    - fwEnableLogging
    - fwLoggingOption
    - alfEnableLogging
    - alfLoggingOption
  show_missing: True
  comment: |-
    Firewall logging should be enabled to capture events from the MacOS desktop firewall (socketFilter)
    
    We want to see:
      - fwEnableLogging: true
      - fwLoggingOption: detail
      - alfLoggingEnabled: 1
      - alfLoggingOption: 4

logging_samples_macos:
  regex: 'Logging_Samples-(?P<logfile>[A-Za-z.]+)-(?P<head_tail>head|tail)::(?P<logentry>.*)'
  excel_sheet_name: 06-Logging Samples
  sys_filter:
    - attr: os_family
      comp: eq
      value: Darwin
  field_list:
    - 'logfile'
    - 'head_tail'
    - 'logentry'
  only_matching: True
  show_missing: True
  comment: |-
    We collect samples of various logs below.  To save space, we collect only the first ('head') and last ('tail') 25 lines of each file to confirm that events were and continue to be written to the logs.  If you need to see more of some log files, you'll need to ask for those separately.
