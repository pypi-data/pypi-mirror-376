Metadata-Version: 2.4
Name: pyagenity-api
Version: 1.0.0
Summary: A Python API framework with GraphQL support and task management
Author-email: Shudipto Trafder <iamsdt@duck.com>
Maintainer-email: Shudipto Trafder <iamsdt@duck.com>
License: MIT
Project-URL: Homepage, https://github.com/Iamsdt/pyagenity-api
Project-URL: Repository, https://github.com/Iamsdt/pyagenity-api
Project-URL: Issues, https://github.com/Iamsdt/pyagenity-api/issues
Project-URL: Documentation, https://pyagenity-api.readthedocs.io/
Keywords: api,fastapi,graphql,task-management,cli
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Internet :: WWW/HTTP :: HTTP Servers
Classifier: Framework :: FastAPI
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: aerich==0.7.2
Requires-Dist: aiosmtplib==2.0.2
Requires-Dist: aiofiles==24.1.0
Requires-Dist: asyncpg
Requires-Dist: fastapi
Requires-Dist: firebase-admin==6.5.0
Requires-Dist: gunicorn==23.0.0
Requires-Dist: httpx==0.27.0
Requires-Dist: injector==0.22.0
Requires-Dist: lib==4.0.0
Requires-Dist: markdown-it-py==3.0.0
Requires-Dist: mkdocs-gen-files==0.5.0
Requires-Dist: mkdocstrings==0.25.2
Requires-Dist: mypy-extensions==1.0.0
Requires-Dist: oauth2client==4.1.3
Requires-Dist: orjson
Requires-Dist: pre-commit==3.8.0
Requires-Dist: python-multipart==0.0.19
Requires-Dist: pydantic==2.8.2
Requires-Dist: pydantic-settings==2.3.4
Requires-Dist: pytest==8.3.2
Requires-Dist: pytest-env==1.1.3
Requires-Dist: redis==5.0.7
Requires-Dist: requests==2.32.3
Requires-Dist: ruff==0.5.2
Requires-Dist: sentry-sdk==2.10.0
Requires-Dist: snowflakekit
Requires-Dist: starlette==0.40.0
Requires-Dist: strawberry-graphql==0.257.0
Requires-Dist: taskiq==0.11.10
Requires-Dist: taskiq-redis==1.0.0
Requires-Dist: tortoise==0.1.1
Requires-Dist: tortoise-orm==0.22.1
Requires-Dist: uvicorn==0.30.1
Requires-Dist: typer
Requires-Dist: python-dotenv


# Pyagenity API

A Python API framework with GraphQL support, task management, and CLI tools for building scalable web applications.

## Installation

### From PyPI (Recommended)
```bash
pip install pyagenity-api
```

### From Source
```bash
git clone https://github.com/Iamsdt/pyagenity-api.git
cd pyagenity-api
pip install -e .
```

## Quick Start

1. **Initialize a new project:**
```bash
pag init
```

2. **Start the API server with default configuration:**
```bash
pag api
```

3. **Start the API server with custom configuration:**
```bash
pag api --config custom-config.json
```

4. **Start the API server on different host/port:**
```bash
pag api --host 127.0.0.1 --port 9000
```

## CLI Commands

The `pag` command provides the following subcommands:

### `pag api`
Start the Pyagenity API server.

**Options:**
- `--config TEXT`: Path to config file (default: pyagenity.json)
- `--host TEXT`: Host to run the API on (default: 0.0.0.0)
- `--port INTEGER`: Port to run the API on (default: 8000)
- `--reload/--no-reload`: Enable auto-reload (default: enabled)

**Examples:**
```bash
# Start with default configuration
pag api

# Start with custom config file
pag api --config my-config.json

# Start on localhost only, port 9000
pag api --host 127.0.0.1 --port 9000

# Start without auto-reload
pag api --no-reload
```

### `pag init`
Initialize a new config file with default settings.

**Options:**
- `--output TEXT`: Output config file path (default: pyagenity.json)
- `--force`: Overwrite existing config file

**Examples:**
```bash
# Create default config
pag init

# Create config with custom name
pag init --output custom-config.json

# Overwrite existing config
pag init --force
```

### `pag version`
Show the CLI version information.

```bash
pag version
```

## Configuration

The configuration file (`pyagenity.json`) supports the following structure:

```json
{
  "app": {
    "name": "Pyagenity API",
    "version": "1.0.0",
    "debug": true
  },
  "server": {
    "host": "0.0.0.0",
    "port": 8000,
    "workers": 1
  },
  "database": {
    "url": "sqlite://./pyagenity.db"
  },
  "redis": {
    "url": "redis://localhost:6379"
  }
}
```

## File Resolution

The CLI automatically finds your config file in this order:
1. Absolute path (if provided with `--config`)
2. Current working directory
3. Relative to script location (for development)
4. Package installation directory (fallback)

## Project Structure

```
pyagenity-api/
├── pyagenity_api/           # Main package directory
│   ├── __init__.py         # Package initialization
│   ├── cli.py              # CLI module
│   └── src/                # Source code
│       └── app/            # FastAPI application
│           ├── main.py     # FastAPI app entry point
│           ├── core/       # Core functionality
│           ├── routers/    # API routes
│           └── tasks/      # Background tasks
├── graph/                  # Graph implementation
├── migrations/             # Database migrations
├── scripts/               # Utility scripts
├── docs/                  # Documentation
├── pyproject.toml         # Project configuration
├── requirements.txt       # Dependencies
├── Makefile              # Development commands
├── MANIFEST.in           # Package manifest
└── README.md             # This file
```

## Features

- **FastAPI Backend**: High-performance async web framework
- **GraphQL Support**: Built-in GraphQL API with Strawberry
- **Task Management**: Background task processing with Taskiq
- **CLI Tools**: Command-line interface for easy management
- **Database Integration**: Support for multiple databases via Tortoise ORM
- **Redis Integration**: Caching and session management
- **Authentication**: Firebase authentication support
- **Development Tools**: Pre-commit hooks, linting, testing
- **Docker Support**: Container deployment ready

## Setup

### Prerequisites
- Python 3.x
- pip
- [Any other prerequisites]

### Installation
1. Clone the repository:
    ```bash
    git clone https://github.com/10XScale-in/backend-base.git
    ```

2. Create a virtual environment and activate:
    ```bash
    python -m venv venv
    source venv/bin/activate
    ```

3. Install dependencies:
    ```bash
    pip install -r requirements.txt
    ```

## Database

### Database Configuration
The database configuration is located in `src/app/db/setup_database.py`.

### Database Migration
We use Aerich for database migrations. Follow these steps to manage your database:

1. Initialize the database initially:
    ```bash
    aerich init -t src.app.db.setup_database.TORTOISE_ORM
    ```

2. Create initial database schema:
    ```bash
    aerich init-db
    ```

3. Generate migration files:
    ```bash
    aerich migrate
    ```

4. Apply migrations:
    ```bash
    aerich upgrade
    ```

5. Revert migrations (if needed):
    ```bash
    aerich downgrade
    ```

## Running the Application

### Command Line
To run the FastAPI application using Uvicorn:
1. Start the application:
    ```bash
    uvicorn src.app.main:app --reload
    ```

2. You can also run the debugger.

### VS Code
Add the following configuration to your `.vscode/launch.json` file:
```json
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python: FastAPI",
            "type": "python",
            "request": "launch",
            "module": "uvicorn",
            "args": [
                "src.app.main:app",
                "--host",
                "localhost",
                "--port",
                "8880"
            ],
            "jinja": true,
            "justMyCode": true
        }
    ]
}
```
Then you can run and debug the application using the VS Code debugger.
### Run the Broker
1. Run the taskiq worker
```taskiq worker src.app.worker:broker -fsd -tp 'src/**/*_tasks.py' --reload
```
## Development

### Using the Makefile

The project includes a comprehensive Makefile for development tasks:

```bash
# Show all available commands
make help

# Install package in development mode
make dev-install

# Run tests
make test

# Test CLI installation
make test-cli

# Format code
make format

# Run linting
make lint

# Run all checks (lint + test)
make check

# Clean build artifacts
make clean

# Build package
make build

# Publish to TestPyPI
make publish-test

# Publish to PyPI
make publish

# Complete release workflow
make release
```

### Manual Development Setup

If you prefer manual setup:

1. **Clone the repository:**
    ```bash
    git clone https://github.com/Iamsdt/pyagenity-api.git
    cd pyagenity-api
    ```

2. **Create a virtual environment:**
    ```bash
    python -m venv .venv
    source .venv/bin/activate  # On Windows: .venv\Scripts\activate
    ```

3. **Install in development mode:**
    ```bash
    pip install -e .
    ```

4. **Install development dependencies:**
    ```bash
    pip install pytest pytest-cov ruff mypy pre-commit
    ```

5. **Set up pre-commit hooks:**
    ```bash
    pre-commit install
    ```

### Testing

Run tests using pytest:
```bash
pytest src/tests/ -v --cov=pyagenity_api
```

Or use the Makefile:
```bash
make test
```

### Publishing to PyPI

1. **Test your package locally:**
    ```bash
    make test-cli
    ```

2. **Publish to TestPyPI first:**
    ```bash
    make publish-test
    ```

3. **If everything works, publish to PyPI:**
    ```bash
    make publish
    ```


# Resources
https://keda.sh/
Get all the fixers
pytest --fixtures
https://www.tutorialspoint.com/pytest/pytest_run_tests_in_parallel.html

