[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pyagenity-api"
version = "1.0.0"
description = "A Python API framework with GraphQL support and task management"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
authors = [
    {name = "Shudipto Trafder", email = "iamsdt@duck.com"},
]
maintainers = [
    {name = "Shudipto Trafder", email = "iamsdt@duck.com"},
]
keywords = ["api", "fastapi", "graphql", "task-management", "cli"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Framework :: FastAPI",
]
dependencies = [
    "aerich==0.7.2",
    "aiosmtplib==2.0.2",
    "aiofiles==24.1.0",
    "asyncpg",
    "fastapi",
    "firebase-admin==6.5.0",
    "gunicorn==23.0.0",
    "httpx==0.27.0",
    "injector==0.22.0",
    "lib==4.0.0",
    "markdown-it-py==3.0.0",
    "mkdocs-gen-files==0.5.0",
    "mkdocstrings==0.25.2",
    "mypy-extensions==1.0.0",
    "oauth2client==4.1.3",
    "orjson",
    "pre-commit==3.8.0",
    "python-multipart==0.0.19",
    "pydantic==2.8.2",
    "pydantic-settings==2.3.4",
    "pytest==8.3.2",
    "pytest-env==1.1.3",
    "redis==5.0.7",
    "requests==2.32.3",
    "ruff==0.5.2",
    "sentry-sdk==2.10.0",
    "snowflakekit",
    "starlette==0.40.0",
    "strawberry-graphql==0.257.0",
    "taskiq==0.11.10",
    "taskiq-redis==1.0.0",
    "tortoise==0.1.1",
    "tortoise-orm==0.22.1",
    "uvicorn==0.30.1",
    "typer",
    "python-dotenv",
]

[project.urls]
Homepage = "https://github.com/Iamsdt/pyagenity-api"
Repository = "https://github.com/Iamsdt/pyagenity-api"
Issues = "https://github.com/Iamsdt/pyagenity-api/issues"
Documentation = "https://pyagenity-api.readthedocs.io/"

[project.scripts]
pag = "pyagenity_api.cli:main"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["pyagenity_api*", "src*", "graph*", "migrations*", "scripts*"]
exclude = ["tests*", "docs*", "__pycache__*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml", "*.md", "*.txt"]

[tool.ruff]
line-length = 100
target-version = "py312"
lint.fixable = ["ALL"]
lint.select = [
    "E",   # pycodestyle
    "W",   # pycodestyle
    "F",   # Pyflakes
    "PL",  # pylint
    "I",   # isort
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "S",   # flake8-bandit
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "RUF", # Ruff-specific rules
    "YTT", # flake8-2020
    "UP",  # pyupgrade
    "C4",  # flake8-comprehensions
    "PTH", # flake8-use-pathlib
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "T20", # flake8-print
]
lint.ignore = [
    "UP006", # https://github.com/charliermarsh/ruff/pull/4427
    "UP007", # https://github.com/charliermarsh/ruff/pull/4427
    # Mutable class attributes should be annotated with `typing.ClassVar`
    # Too many violations
    "RUF012",
    # Logging statement uses f-string
    "G004",
    #B904 Within an `except` clause, raise exceptions with
    #`raise ... from err` or `raise ... from None` to distinguish
    #them from errors in exception handling
    "B904",
    #Do not perform function call `Injected` in argument defaults
    "B008",
    "ISC001",# flake8-implicit-str-concat
]
exclude = [
    "migrations/*",  # Exclude the migrations folder
    "venv/*",
]
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"bin/*.py" = ["E402", "S603", "T201", "S101"]
"*/tests/*.py" = ["E402", "S603", "T201", "S101"]
"*/test/*.py" = ["E402", "S603", "T201", "S101"]
"scripts/*.py" = ["E402", "S603", "T201", "S101", "INP001"]
"*/__init__.py" = ["E402", "S603", "T201", "S101"]
"*/migrations/*.py" = ["E402", "S603", "T201", "S101"]

[tool.ruff.lint.isort]
lines-after-imports = 2
known-first-party = ["src"]
[tool.ruff.lint.pylint]
max-args = 10
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.bandit]
exclude_dirs = ["*/tests/*", "*/migrations", "*/scripts/*"]
skips = ["B101", "B611", "B601", "B608"]


[tool.ruff.lint.pydocstyle]
convention = "google"


#[tool.mypy]
#plugins = ["strawberry.ext.mypy_plugin"]

[tool.pytest.ini_options]
env = [
    "ENVIRONMENT=pytest",
]
testpaths = [
    "src/tests/*",
]
filterwarnings = [
    "ignore::DeprecationWarning"
]

[tool.pytest-env]
ENVIRONMENT = "pytest"

