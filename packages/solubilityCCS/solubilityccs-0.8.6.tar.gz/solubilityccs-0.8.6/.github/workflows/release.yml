name: Automated Release

on:
  pull_request:
    types: [closed]
    branches: [main, master]

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools-scm

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Determine version bump
      id: version
      run: |
        # Fetch all tags to ensure we have complete tag history
        git fetch --tags

        # Get the latest tag
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $latest_tag"

        # Extract version number (remove 'v' prefix if present)
        current_version=${latest_tag#v}
        echo "Current version: $current_version"

        # Split version into parts
        IFS='.' read -ra VERSION_PARTS <<< "$current_version"
        major=${VERSION_PARTS[0]:-0}
        minor=${VERSION_PARTS[1]:-0}
        patch=${VERSION_PARTS[2]:-0}

        # Check PR labels or title for version bump type
        # Use environment variables to avoid shell injection issues
        echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV
        echo "PR_BODY<<EOF" >> $GITHUB_ENV
        echo "${{ github.event.pull_request.body }}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

        # Determine version bump type based on PR title
        if echo "${{ github.event.pull_request.title }}" | grep -qi -E "(breaking|major)"; then
          new_major=$((major + 1))
          new_minor=0
          new_patch=0
          bump_type="major"
        elif echo "${{ github.event.pull_request.title }}" | grep -qi -E "(feature|minor|feat)"; then
          new_major=$major
          new_minor=$((minor + 1))
          new_patch=0
          bump_type="minor"
        else
          new_major=$major
          new_minor=$minor
          new_patch=$((patch + 1))
          bump_type="patch"
        fi

        new_version="$new_major.$new_minor.$new_patch"
        new_tag="v$new_version"

        echo "New version: $new_version"
        echo "New tag: $new_tag"
        echo "Bump type: $bump_type"

        # Check if tag already exists
        if git rev-parse "$new_tag" >/dev/null 2>&1; then
          echo "ERROR: Tag $new_tag already exists!"
          exit 1
        fi

        echo "version=$new_version" >> $GITHUB_OUTPUT
        echo "tag=$new_tag" >> $GITHUB_OUTPUT
        echo "bump_type=$bump_type" >> $GITHUB_OUTPUT

    - name: Create and push tag
      run: |
        git tag ${{ steps.version.outputs.tag }}
        git push origin ${{ steps.version.outputs.tag }}

    - name: Checkout tag for clean build
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.version.outputs.tag }}
        fetch-depth: 0
        fetch-tags: true
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify clean version
      run: |
        echo "Verifying we're on the correct tag..."
        git describe --tags --exact-match
        echo "SETUPTOOLS_SCM_PRETEND_VERSION=${{ steps.version.outputs.version }}" >> $GITHUB_ENV


    - name: Build package
      run: |
        python -m build

    - name: Create GitHub Release

      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.tag }}

        body: |
          ## Changes in ${{ steps.version.outputs.tag }}

          **Merged PR:** ${{ github.event.pull_request.title }} (#${{ github.event.pull_request.number }})

          **Type:** ${{ steps.version.outputs.bump_type }} release

          **Changes:**
          ${{ github.event.pull_request.body }}

          ---

          ### Installation
          ```bash
          pip install solubilityCCS==${{ steps.version.outputs.version }}
          ```

          ### What's Changed
          * ${{ github.event.pull_request.title }} by @${{ github.event.pull_request.user.login }}

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.version.outputs.tag }}...HEAD

        files: |
          dist/solubilityccs-${{ steps.version.outputs.version }}-py3-none-any.whl
          dist/solubilityccs-${{ steps.version.outputs.version }}.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/*

    # Note: We skip pushing version bump back to main due to branch protection rules
    # The version will be updated in the next release cycle
