name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      release_notes:
        description: 'Release notes'
        required: false
        default: 'Manual release'

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools-scm

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Calculate new version
      id: version
      run: |
        # Get the latest tag
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $latest_tag"

        # Extract version number (remove 'v' prefix if present)
        current_version=${latest_tag#v}
        echo "Current version: $current_version"

        # Split version into parts
        IFS='.' read -ra VERSION_PARTS <<< "$current_version"
        major=${VERSION_PARTS[0]:-0}
        minor=${VERSION_PARTS[1]:-0}
        patch=${VERSION_PARTS[2]:-0}

        # Bump version based on input
        case "${{ github.event.inputs.version_bump }}" in
          major)
            new_major=$((major + 1))
            new_minor=0
            new_patch=0
            ;;
          minor)
            new_major=$major
            new_minor=$((minor + 1))
            new_patch=0
            ;;
          patch)
            new_major=$major
            new_minor=$minor
            new_patch=$((patch + 1))
            ;;
        esac

        new_version="$new_major.$new_minor.$new_patch"
        new_tag="v$new_version"

        echo "New version: $new_version"
        echo "New tag: $new_tag"

        echo "version=$new_version" >> $GITHUB_OUTPUT
        echo "tag=$new_tag" >> $GITHUB_OUTPUT

    - name: Update version in pyproject.toml
      run: |
        sed -i 's/version = ".*"/version = "${{ steps.version.outputs.version }}"/' pyproject.toml
        cat pyproject.toml | grep version

    - name: Commit version bump
      run: |
        git add pyproject.toml
        git commit -m "Bump version to ${{ steps.version.outputs.version }}"

    - name: Create and push tag
      run: |
        git tag ${{ steps.version.outputs.tag }}
        git push origin ${{ steps.version.outputs.tag }}
        git push origin HEAD:main

    - name: Build package
      run: |
        python -m build

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: Release ${{ steps.version.outputs.tag }}
        body: |
          ## Release ${{ steps.version.outputs.tag }}

          **Type:** ${{ github.event.inputs.version_bump }} release

          **Release Notes:**
          ${{ github.event.inputs.release_notes }}

          ---

          ### Installation
          ```bash
          pip install solubilityCCS==${{ steps.version.outputs.version }}
          ```
        draft: false
        prerelease: false

    - name: Upload Wheel to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/solubilityccs-${{ steps.version.outputs.version }}-py3-none-any.whl
        asset_name: solubilityccs-${{ steps.version.outputs.version }}-py3-none-any.whl
        asset_content_type: application/zip

    - name: Upload Source to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/solubilityccs-${{ steps.version.outputs.version }}.tar.gz
        asset_name: solubilityccs-${{ steps.version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/*
