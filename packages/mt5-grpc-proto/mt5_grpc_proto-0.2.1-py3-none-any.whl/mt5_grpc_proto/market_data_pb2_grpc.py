# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import market_data_pb2 as market__data__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in market_data_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MarketDataServiceStub(object):
    """Service definition for Market Data
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CopyRatesFrom = channel.unary_unary(
                '/metatrader.v1.MarketDataService/CopyRatesFrom',
                request_serializer=market__data__pb2.CopyRatesFromRequest.SerializeToString,
                response_deserializer=market__data__pb2.CopyRatesFromResponse.FromString,
                _registered_method=True)
        self.CopyRatesFromPos = channel.unary_unary(
                '/metatrader.v1.MarketDataService/CopyRatesFromPos',
                request_serializer=market__data__pb2.CopyRatesFromPosRequest.SerializeToString,
                response_deserializer=market__data__pb2.CopyRatesFromPosResponse.FromString,
                _registered_method=True)
        self.CopyRatesRange = channel.unary_unary(
                '/metatrader.v1.MarketDataService/CopyRatesRange',
                request_serializer=market__data__pb2.CopyRatesRangeRequest.SerializeToString,
                response_deserializer=market__data__pb2.CopyRatesRangeResponse.FromString,
                _registered_method=True)
        self.CopyTicksFrom = channel.unary_unary(
                '/metatrader.v1.MarketDataService/CopyTicksFrom',
                request_serializer=market__data__pb2.CopyTicksFromRequest.SerializeToString,
                response_deserializer=market__data__pb2.CopyTicksFromResponse.FromString,
                _registered_method=True)
        self.CopyTicksRange = channel.unary_unary(
                '/metatrader.v1.MarketDataService/CopyTicksRange',
                request_serializer=market__data__pb2.CopyTicksRangeRequest.SerializeToString,
                response_deserializer=market__data__pb2.CopyTicksRangeResponse.FromString,
                _registered_method=True)


class MarketDataServiceServicer(object):
    """Service definition for Market Data
    """

    def CopyRatesFrom(self, request, context):
        """Get bars from specified date
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CopyRatesFromPos(self, request, context):
        """Get bars from specified position
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CopyRatesRange(self, request, context):
        """Get bars for specified date range
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CopyTicksFrom(self, request, context):
        """Get ticks from specified date
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CopyTicksRange(self, request, context):
        """Get ticks for specified date range
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarketDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CopyRatesFrom': grpc.unary_unary_rpc_method_handler(
                    servicer.CopyRatesFrom,
                    request_deserializer=market__data__pb2.CopyRatesFromRequest.FromString,
                    response_serializer=market__data__pb2.CopyRatesFromResponse.SerializeToString,
            ),
            'CopyRatesFromPos': grpc.unary_unary_rpc_method_handler(
                    servicer.CopyRatesFromPos,
                    request_deserializer=market__data__pb2.CopyRatesFromPosRequest.FromString,
                    response_serializer=market__data__pb2.CopyRatesFromPosResponse.SerializeToString,
            ),
            'CopyRatesRange': grpc.unary_unary_rpc_method_handler(
                    servicer.CopyRatesRange,
                    request_deserializer=market__data__pb2.CopyRatesRangeRequest.FromString,
                    response_serializer=market__data__pb2.CopyRatesRangeResponse.SerializeToString,
            ),
            'CopyTicksFrom': grpc.unary_unary_rpc_method_handler(
                    servicer.CopyTicksFrom,
                    request_deserializer=market__data__pb2.CopyTicksFromRequest.FromString,
                    response_serializer=market__data__pb2.CopyTicksFromResponse.SerializeToString,
            ),
            'CopyTicksRange': grpc.unary_unary_rpc_method_handler(
                    servicer.CopyTicksRange,
                    request_deserializer=market__data__pb2.CopyTicksRangeRequest.FromString,
                    response_serializer=market__data__pb2.CopyTicksRangeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'metatrader.v1.MarketDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('metatrader.v1.MarketDataService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MarketDataService(object):
    """Service definition for Market Data
    """

    @staticmethod
    def CopyRatesFrom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/metatrader.v1.MarketDataService/CopyRatesFrom',
            market__data__pb2.CopyRatesFromRequest.SerializeToString,
            market__data__pb2.CopyRatesFromResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CopyRatesFromPos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/metatrader.v1.MarketDataService/CopyRatesFromPos',
            market__data__pb2.CopyRatesFromPosRequest.SerializeToString,
            market__data__pb2.CopyRatesFromPosResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CopyRatesRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/metatrader.v1.MarketDataService/CopyRatesRange',
            market__data__pb2.CopyRatesRangeRequest.SerializeToString,
            market__data__pb2.CopyRatesRangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CopyTicksFrom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/metatrader.v1.MarketDataService/CopyTicksFrom',
            market__data__pb2.CopyTicksFromRequest.SerializeToString,
            market__data__pb2.CopyTicksFromResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CopyTicksRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/metatrader.v1.MarketDataService/CopyTicksRange',
            market__data__pb2.CopyTicksRangeRequest.SerializeToString,
            market__data__pb2.CopyTicksRangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
