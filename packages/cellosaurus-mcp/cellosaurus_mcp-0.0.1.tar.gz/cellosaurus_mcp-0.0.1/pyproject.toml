[build-system]
build-backend = "hatchling.build"
requires = [ "hatchling" ]

[project]
name = "cellosaurus_mcp"
version = "0.0.1"
description = "Unofficial MCP server for the SIB Cellosaurus resource."
readme = "README.md"
license = { file = "LICENSE" }
maintainers = [
  { name = "Malte Kuehl", email = "malte.kuehl@clin.au.dk" },
]
authors = [
  { name = "Malte Kuehl" },
]
requires-python = ">=3.11"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dependencies = [
  # for debug logging (referenced from the issue template)
  # "session-info2",
  "click",
  "fastmcp>=0.15.0",
  "httpx>=0.28.0,<=0.29.0",
  "pydantic>=2.0.0",
]
optional-dependencies.dev = [
  "pre-commit",
  "twine>=4.0.2",
]
optional-dependencies.test = [
  "coverage>=7.0.0",
  "pytest>=7.0.0",
  "pytest-asyncio>=0.21.0",
  "pytest-mock>=3.10.0",
  "httpx-sse>=0.3.0",  # Ensure compatible httpx-sse version
]
optional-dependencies.doc = [
  "docutils>=0.8,!=0.18.*,!=0.19.*",
  "ipykernel",
  "ipython",
  "myst-nb>=1.1",
  "pandas",
  # Until pybtex >0.24.0 releases: https://bitbucket.org/pybtex-devs/pybtex/issues/169/
  "setuptools",
  "sphinx>=8.1",
  "sphinx-autodoc-typehints",
  "sphinx-book-theme>=1",
  "sphinx-copybutton",
  "sphinx-tabs",
  # "sphinxcontrib-bibtex>=1",
  "sphinxext-opengraph",
]
# https://docs.pypi.org/project_metadata/#project-urls
urls.Documentation = "https://unofficial-cellosaurus-mcp.readthedocs.io/"
urls.Homepage = "https://github.com/biocontext-ai/unofficial-cellosaurus-mcp"
urls.Source = "https://github.com/biocontext-ai/unofficial-cellosaurus-mcp"

scripts.cellosaurus_mcp = "cellosaurus_mcp.main:run_app"

[tool.hatch.build.targets.wheel]
packages = [ "src/cellosaurus_mcp" ]


[tool.hatch.envs.default]
installer = "uv"
features = [ "dev" ]

[tool.hatch.envs.docs]
features = [ "doc" ]
scripts.build = "sphinx-build -M html docs docs/_build -W {args}"
scripts.open = "python -m webbrowser -t docs/_build/html/index.html"
scripts.clean = "git clean -fdX -- {args:docs}"

# Test the lowest and highest supported Python versions with normal deps
[[tool.hatch.envs.hatch-test.matrix]]
deps = [ "stable" ]
python = [ "3.11", "3.13" ]

# Test the newest supported Python version also with pre-release deps
[[tool.hatch.envs.hatch-test.matrix]]
deps = [ "pre" ]
python = [ "3.13" ]

[tool.hatch.envs.hatch-test]
features = [ "test" ]

[tool.hatch.envs.hatch-test.overrides]
# If the matrix variable `deps` is set to "pre",
# set the environment variable `UV_PRERELEASE` to "allow".
matrix.deps.env-vars = [
  { key = "UV_PRERELEASE", value = "allow", if = [ "pre" ] },
]

[tool.ruff]
line-length = 120
src = [ "src" ]
extend-include = [ "*.ipynb" ]

format.docstring-code-format = true

lint.select = [
  "B",      # flake8-bugbear
  "BLE",    # flake8-blind-except
  "C4",     # flake8-comprehensions
  "D",      # pydocstyle
  "E",      # Error detected by Pycodestyle
  "F",      # Errors detected by Pyflakes
  "I",      # isort
  "RUF100", # Report unused noqa directives
  "TID",    # flake8-tidy-imports
  "UP",     # pyupgrade
  "W",      # Warning detected by Pycodestyle
]
lint.ignore = [
  "B008", # Errors from function calls in argument defaults. These are fine when the result is immutable.
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D105", # __magic__ methods are often self-explanatory, allow missing docstrings
  "D107", # Missing docstring in __init__
  # Disable one in each pair of mutually incompatible rules
  "D203", # We don’t want a blank line before a class docstring
  "D213", # <> We want docstrings to start immediately after the opening triple quote
  "D400", # first line should end with a period [Bug: doesn’t work with single-line docstrings]
  "D401", # First line should be in imperative mood; try rephrasing
  "E501", # line too long -> we accept long comment lines; formatter gets rid of long code lines
  "E731", # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
  "E741", # allow I, O, l as variable names -> I is the identity matrix
]
lint.per-file-ignores."*/__init__.py" = [ "F401" ]
lint.per-file-ignores."docs/*" = [ "I" ]
lint.per-file-ignores."tests/*" = [ "D" ]
lint.pydocstyle.convention = "numpy"

[tool.pytest.ini_options]
testpaths = [ "tests" ]
python_files = "test_*.py"
python_functions = "test_*"
xfail_strict = true
addopts = [
  "--import-mode=importlib", # allow using test files with same name
]

[tool.coverage.run]
source = [ "src/cellosaurus_mcp" ]
omit = [
  "*/tests/test_*.py",
]
