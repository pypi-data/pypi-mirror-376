[tool.poetry]
name = "registerer"
version = "1.0.0" # placeholder, managed by git tags.
description = "Everything you need to implement maintainable and easy to use registry patterns in your project."
authors = ["Danial Keimasi <danialkeimasi@gmail.com>"]
license = "MIT"
homepage = "https://github.com/danialkeimasi/python-registerer"
readme = "README.md"
classifiers = [
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Libraries :: Python Modules"
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/danialkeimasi/python-registerer/issues"

[tool.poetry.dependencies]
python = "^3.9"

[tool.poetry.group.dev.dependencies]
black = "25.1.0"  # If you updated this, also update in .pre-commit-config.yaml
pre-commit = "^4.3.0"
pytest = "^8.4.2"
pytest-cov = "^7.0.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"
mkdocs-material = "^9.6.19"
mkdocstrings = {extras = ["python"], version = "0.30.0"}
markdown-exec = "^1.11.0"
Pillow = "^11.3.0"
CairoSVG = "^2.8.2"

[tool.poetry-dynamic-versioning]
enable = false
vcs = "git"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",

    # Don't complain if tests don't hit defensive assertion code:
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",
    "pass",

    # Don't complain about abstract methods, they aren't run:
    "@(abc.)?abstractmethod",
]
ignore_errors = true

[tool.pytest.ini_options]
norecursedirs = ".git"
pythonpath = ["."]

[tool.black]
line-length = 120
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 120
skip_gitignore = true

[tool.autoflake]
in-place = true
expand-star-imports = true
remove-duplicate-keys = true
remove-unused-variables = true
remove-all-unused-imports = true

[tool.mypy]
warn_return_any = true
warn_unused_configs = true
