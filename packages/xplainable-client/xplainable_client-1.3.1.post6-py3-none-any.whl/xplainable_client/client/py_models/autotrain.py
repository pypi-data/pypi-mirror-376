"""
Autotrain related request and response models.
"""
from typing import Dict, Any, Optional, List, Union
from pydantic import BaseModel, Field


class DatasetSummary(BaseModel):
    """Summary of a dataset."""
    columns: List[str]
    rows: int
    dtypes: Dict[str, str]
    missing_values: Dict[str, int]
    statistics: Optional[Dict[str, Any]] = None
    metadata: Optional[Dict[str, Any]] = None


class TextGenConfig(BaseModel):
    """Configuration for text generation."""
    model: str = "gpt-4"
    temperature: float = Field(default=0.7, ge=0.0, le=2.0)
    max_tokens: int = Field(default=1000, ge=1)
    top_p: float = Field(default=1.0, ge=0.0, le=1.0)


class TrainingGoal(BaseModel):
    """Training goal generated by autotrain."""
    goal_id: str
    description: str
    target_column: Optional[str] = None
    model_type: Optional[str] = None
    metrics: Optional[List[str]] = None


class LabelRecommendation(BaseModel):
    """Label recommendation from autotrain."""
    column: str
    confidence: float
    reasoning: str
    alternatives: Optional[List[str]] = None


class FeatureEngineeringRecommendation(BaseModel):
    """Feature engineering recommendation."""
    feature_name: str
    description: str
    code: str
    expected_impact: str
    complexity: str = Field(default="medium", pattern="^(low|medium|high)$")


class AutotrainRequest(BaseModel):
    """Request to start autotrain."""
    model_name: str
    model_description: str
    summary: DatasetSummary
    team_id: str
    textgen_config: Optional[TextGenConfig] = None


class AutotrainResponse(BaseModel):
    """Response from autotrain start."""
    training_id: str
    status: str
    estimated_time: Optional[int] = None  # in seconds
    message: Optional[str] = None


class TrainingStatus(BaseModel):
    """Training job status."""
    training_id: str
    status: str  # pending, running, completed, failed
    progress: float = Field(ge=0.0, le=100.0)
    current_step: Optional[str] = None
    model_id: Optional[str] = None
    version_id: Optional[str] = None
    error: Optional[str] = None
    elapsed_time: Optional[int] = None  # in seconds
    estimated_remaining: Optional[int] = None  # in seconds


class ManualTrainRequest(BaseModel):
    """Request for manual training."""
    label: str
    model_name: str
    model_description: str
    preprocessor_id: str
    version_id: str
    team_id: str
    drop_columns: Optional[List[str]] = None


class VisualizationRequest(BaseModel):
    """Request for data visualization."""
    summary: DatasetSummary
    goal: Dict[str, Any]
    team_id: str
    library: str = "plotly"
    textgen_config: Optional[TextGenConfig] = None


class VisualizationResponse(BaseModel):
    """Response containing visualization code."""
    code: str
    language: str = "python"
    library: str
    description: Optional[str] = None
    dependencies: Optional[List[str]] = None