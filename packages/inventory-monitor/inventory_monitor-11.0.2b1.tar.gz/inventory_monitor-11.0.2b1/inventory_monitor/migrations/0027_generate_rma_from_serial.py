# Generated by Django 5.1.5 on 2025-03-04 09:02

from django.db import migrations, models


def create_rmas_for_serial_differences(apps, schema_editor):
    """
    For each asset where serial != serial_actual:
    1. Create an RMA record documenting the serial change
    2. Update the asset's serial field to match serial_actual
    """
    Asset = apps.get_model("inventory_monitor", "Asset")
    RMA = apps.get_model("inventory_monitor", "RMA")

    # Find all assets where serial and serial_actual differ
    assets_with_diff = Asset.objects.exclude(serial=models.F("serial_actual"))

    # Create RMA records and update assets
    for asset in assets_with_diff:
        # Skip if either field is empty
        if not asset.serial or not asset.serial_actual:
            continue

        # Create RMA record
        RMA.objects.create(
            asset=asset,
            original_serial=asset.serial,
            replacement_serial=asset.serial_actual,
            status="completed",
            issue_description=f"Automatic RMA created for serial difference: {asset.serial} â†’ {asset.serial_actual}",
        )

        # Update the asset's serial field
        asset.serial = asset.serial_actual
        asset.save(update_fields=["serial"])


def reverse_serial_update(apps, schema_editor):
    """
    No reverse operation is provided as it would be destructive
    """
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("inventory_monitor", "0026_rename_date_shipped_rma_date_replaced_and_more"),
    ]

    operations = [
        migrations.RunPython(
            create_rmas_for_serial_differences,
            reverse_serial_update,
        ),
    ]
