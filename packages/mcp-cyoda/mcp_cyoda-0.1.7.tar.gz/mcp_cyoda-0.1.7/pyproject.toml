[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-cyoda"
version = "0.1.7"
description = "Model Context Protocol server for Cyoda platform - enables AI assistants to interact with Cyoda's entity management, search, workflow, and deployment capabilities"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"

# Runtime dependencies (moved from requirements.txt)
dependencies = [
    "fastmcp>=2.12.0",
    "Quart>=0.19.9",
    "Hypercorn>=0.17.3",
    "quart-cors>=0.7.0",
    "quart-openapi>=1.7.2",
    "jsonschema>=4.23.0",
    "grpcio>=1.64.1",
    "grpcio-tools>=1.64.1",
    "protobuf>=5.27.3",
    "python-dotenv>=1.1.0",
    "requests>=2.32.3",
    "aiofiles>=24.1.0",
    "httpx>=0.28.1",
    "quart-schema[pydantic]>=0.21.0",
    "PyJWT>=2.10.1",
    "Authlib>=1.6.0",
    "dependency_injector>=4.48.1",
    "psutil>=7.0.0"
]

authors = [
    { name = "Cyoda Team", email = "support@cyoda.io" }
]

keywords = ["mcp", "cyoda", "model-context-protocol", "ai", "llm"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]

# This creates the console command `mcp-cyoda`
[project.scripts]
mcp-cyoda = "cyoda_mcp.__main__:main"

[project.urls]
Homepage = "https://ai.cyoda.net"
Documentation = "https://docs.cyoda.net"
Repository = "https://github.com/Cyoda-platform/quart-client-template"
Issues = "https://github.com/Cyoda-platform/quart-client-template/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["cyoda_mcp*", "common*", "application*", "services*"]

[tool.setuptools.package-data]
# Include non-py files shipped with the package
cyoda_mcp = ["*.json", "*.yaml", "*.yml"]
"common.proto" = ["*.proto"]
application = ["*.json", "*.yaml", "*.yml"]

[tool.setuptools]
package-dir = {"" = "."}

# Optional development dependencies
[project.optional-dependencies]
dev = [
    # Testing framework
    "pytest==7.4.0",
    "pytest-asyncio==0.21.0",
    "pytest-cov==4.1.0",
    # Code formatting and quality
    "black==25.1.0",
    "isort==6.0.1",
    "mypy==1.17.1",
    "flake8==7.1.1",  # Latest available version
    "flake8-pyproject>=1.2.0",  # Enables pyproject.toml support for flake8
    "bandit==1.8.6",
    # Type stubs for better mypy support
    "types-aiofiles>=23.0",
    "types-jsonschema>=4.0",
    "types-requests>=2.0",
    # Build and packaging tools
    "build>=0.10",
    "twine>=4.0",
]
# MyPy configuration
[tool.mypy]
python_version = "3.11"
strict = true
namespace_packages = true

# Exclude proto-generated files and other directories that shouldn't be type-checked
exclude = [
    "^proto/.*\\.py$",
    "^proto/.*\\.pyi$",
    "^backup/.*\\.py$",
    "__pycache__",
    "build/",
    "dist/",
]

# Focus on critical bug-catching errors only
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
check_untyped_defs = true
strict_optional = true

# Reduce noise from non-critical issues
warn_return_any = false
warn_unused_ignores = false
ignore_missing_imports = false

# Per-module overrides for proto files (additional safety net)
[[tool.mypy.overrides]]
module = [
    "common.proto.*",
    "common.proto.cloudevents_pb2",
    "common.proto.cloudevents_pb2_grpc",
    "common.proto.cyoda_cloud_api_pb2",
    "common.proto.cyoda_cloud_api_pb2_grpc",
    "tests.*",
]
ignore_errors = true

# Override for external libraries without stubs
[[tool.mypy.overrides]]
module = [
    "authlib.*",
    "grpcio.*",
    "grpc.*",
    "protobuf.*",
    "google.protobuf.*",
    "quart.*",
    "quart_schema.*",
    "hypercorn.*",
    "dependency_injector.*",
    "aiofiles.*",
    "jsonschema.*",
    "fastmcp.*",
    "httpx.*",
    "requests.*",
    "asyncio_mqtt.*",
    "pydantic.*",
]
ignore_missing_imports = true

# Black code formatting
[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | common/proto
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["cyoda_mcp", "common", "application"]
skip_glob = ["common/proto/*"]

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration (if using pytest-cov)
[tool.coverage.run]
source = ["cyoda_mcp", "common", "entity", "service", "workflow", "routes"]
omit = [
    "*/tests/*",
    "*/test_*",
    "proto/*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "E704",  # multiple statements on one line (def) - common in protocol stubs
    "N805",  # first argument should be named 'self' (not applicable to classmethods)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    ".venv",
    ".env",
    "__pycache__",
    "proto",
    "build",
    "dist",
    ".eggs",
    "*.egg",
    ".pytest_cache",
    ".mypy_cache",
    ".coverage",
    "htmlcov",
    ".tox",
    "venv",
    "env",
    "tests",
]

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "proto", "build", "dist", "venv", "env"]
skips = ["B101"]  # Skip assert_used test