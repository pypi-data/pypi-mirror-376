Metadata-Version: 2.4
Name: ia-agent-dotnet
Version: 0.5.3
Summary: IA Agent para Generación de Pruebas Unitarias .NET - Sistema multi-agente inteligente
Home-page: https://github.com/pauloandrade/ia-agent-dotnet
Author: Paulo Andrade
Author-email: Paulo Andrade <paulo_866@hotmail.com>
License: MIT
Project-URL: Homepage, https://github.com/pauloandrade/ia-agent-dotnet
Project-URL: Repository, https://github.com/pauloandrade/ia-agent-dotnet
Project-URL: Documentation, https://github.com/pauloandrade/ia-agent-dotnet/blob/main/docs/USER_GUIDE.md
Project-URL: Bug Tracker, https://github.com/pauloandrade/ia-agent-dotnet/issues
Keywords: ai,agent,dotnet,testing,unit-tests,langchain,openai,deepseek,gemini,automation,code-generation
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Testing
Classifier: Topic :: Software Development :: Quality Assurance
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Operating System :: OS Independent
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: langchain>=0.1.0
Requires-Dist: langchain-openai>=0.0.5
Requires-Dist: langchain-community>=0.0.10
Requires-Dist: pyautogen>=0.2.0
Requires-Dist: openai>=1.3.0
Requires-Dist: anthropic>=0.7.0
Requires-Dist: google-generativeai>=0.3.0
Requires-Dist: chromadb>=0.4.0
Requires-Dist: faiss-cpu>=1.7.4
Requires-Dist: sentence-transformers>=2.2.2
Requires-Dist: numpy>=1.24.0
Requires-Dist: click>=8.0.0
Requires-Dist: rich>=13.0.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: pydantic-settings>=2.0.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: loguru>=0.7.0
Requires-Dist: structlog>=23.2.0
Requires-Dist: psutil>=5.9.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: tqdm>=4.65.0
Requires-Dist: requests>=2.31.0
Requires-Dist: aiohttp>=3.8.0
Requires-Dist: asyncio>=3.4.3
Requires-Dist: typing-extensions>=4.5.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=6.0.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.2.0; extra == "docs"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# IA Agent para Generación de Pruebas Unitarias .NET

[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)
[![.NET 8.0+](https://img.shields.io/badge/.NET-8.0+-purple.svg)](https://dotnet.microsoft.com/download)
[![LangChain](https://img.shields.io/badge/LangChain-0.1.0+-green.svg)](https://langchain.com/)
[![AutoGen](https://img.shields.io/badge/AutoGen-0.2.0+-orange.svg)](https://microsoft.github.io/autogen/)

Un sistema multi-agente de IA avanzado con capacidades de memoria y herramientas externas (ReAct) especializado en la generación automática de pruebas unitarias para APIs REST desarrolladas en .NET.

## 🚀 Características Principales

- **🤖 Sistema Multi-Agente**: Colaboración inteligente entre agentes especializados
- **🧠 Memoria Persistente**: Recuerda conversaciones y contexto entre sesiones
- **🛠️ Herramientas Externas**: Ejecuta código y busca documentación automáticamente
- **🔄 Patrón ReAct**: Razonamiento y actuación iterativa para decisiones autónomas
- **🎯 Especialización**: Agentes especializados en análisis, generación, validación y optimización
- **📊 Soporte Multi-Framework**: xUnit, NUnit, MSTest
- **⚡ Ejecución Windows**: CLI optimizada para terminal de comandos

## 🏗️ Arquitectura

El sistema utiliza **LangChain** para capacidades ReAct individuales y **AutoGen** para colaboración entre agentes especializados:

- **Agente Analista**: Analiza código .NET y extrae información
- **Agente Generador**: Genera código de pruebas y templates
- **Agente Validador**: Valida código y ejecuta pruebas
- **Agente Optimizador**: Optimiza pruebas y sugiere mejoras
- **Agente Coordinador**: Coordina tareas y gestiona flujos de trabajo

## 📦 Instalación Rápida

```bash
# Crear entorno virtual
python -m venv ia-agent-env
ia-agent-env\Scripts\activate

# Instalar dependencias
pip install -r requirements.txt

# Configurar API keys
ia-agent config --setup
```

## 🎯 Uso Básico

### Modo Interactivo (Recomendado)
```bash
ia-agent interactive
```

### Comandos Directos
```bash
# Generar pruebas para un controlador
ia-agent generate --controller "UserController" --output "./Tests"

# Analizar cobertura de pruebas
ia-agent analyze --coverage --report-format html

# Optimizar pruebas existentes
ia-agent optimize --tests "./Tests" --framework xunit
```

### Modo Multi-Agente
```bash
# Activar colaboración entre agentes
ia-agent multi-agent --mode collaborative

# Ver colaboración en tiempo real
ia-agent multi-agent --monitor
```

## 📋 Requisitos del Sistema

- **Sistema Operativo**: Windows 10/11 (64-bit)
- **Python**: 3.11 o superior
- **.NET SDK**: 8.0 o superior
- **Memoria RAM**: 8GB mínimo, 16GB recomendado
- **Conexión a Internet**: Para APIs de IA

## 🔧 Configuración

### Configuración de API Keys
```bash
# Opción 1: Configuración interactiva (RECOMENDADO)
ia-agent config

# Opción 2: Configuración manual
copy env.example .env
# Editar .env con tu API key
```

**Proveedores disponibles:**
- **DeepSeek** (Recomendado) - Especializado en programación, más económico
- **Gemini** - Google AI, bueno para análisis general  
- **OpenAI** - Estándar de la industria, más caro

### Archivo de Configuración
```yaml
# config/agent_configs/default.yaml
agent:
  mode: "multi-agent"
  memory:
    type: "persistent"
    storage_path: "./memory"

ai:
  provider: "deepseek"
  model: "deepseek-coder"
  temperature: 0.1
```

## 📚 Documentación

- [📋 Requisitos Funcionales y Técnicos](docs/requirements.md)
- [🏗️ Arquitectura del Sistema](docs/architecture.md)
- [📖 Guía de Instalación y Uso](plan.MD#guía-de-instalación-y-uso-para-desarrolladores)
- [🎯 Plan de Desarrollo Completo](plan.MD)

## 🛠️ Desarrollo

### Estructura del Proyecto
```
ia-agent-unit-tests/
├── src/
│   ├── agents/                 # Agentes especializados
│   ├── multi_agent/            # Sistema multi-agente
│   ├── langchain_agents/       # Agentes individuales
│   ├── tools/                  # Herramientas del agente
│   └── cli/                    # Interfaz CLI
├── templates/                  # Templates de pruebas
├── memory/                     # Almacenamiento de memoria
├── config/                     # Configuraciones
└── docs/                       # Documentación
```

### Contribuir
1. Fork el repositorio
2. Crear rama de feature (`git checkout -b feature/nueva-funcionalidad`)
3. Commit cambios (`git commit -am 'Agregar nueva funcionalidad'`)
4. Push a la rama (`git push origin feature/nueva-funcionalidad`)
5. Crear Pull Request

## 📊 Estado del Proyecto

### ✅ Fases Completadas

#### Fase 1: Análisis y Diseño ✅
- [x] Estructura del proyecto creada
- [x] Dependencias configuradas
- [x] Repositorio Git inicializado
- [x] Archivos de configuración creados
- [x] Requisitos documentados
- [x] Arquitectura diseñada

#### Fase 2: Desarrollo del Sistema Multi-Agente ✅
- [x] Agentes especializados implementados
- [x] Sistema de memoria vectorial
- [x] Herramientas .NET integradas
- [x] CLI básico funcional
- [x] Sistema de logging implementado

#### Fase 3: Funcionalidades Avanzadas ✅
- [x] Suite de testing completa
- [x] Mejoras de IA implementadas
- [x] Sistema de monitoreo
- [x] Documentación de API
- [x] Optimizaciones de rendimiento

#### Fase 4: Optimización y Despliegue ✅
- [x] Sistema de configuración robusto
- [x] Manager de memoria optimizado
- [x] Optimizador de rendimiento
- [x] Manejador de errores avanzado
- [x] Configuración Docker completa
- [x] Scripts de despliegue automatizado
- [x] Validador de producción

#### Fase 5: Documentación Final y Entrega ✅
- [x] Guía de usuario completa
- [x] Guía de desarrollador
- [x] Guía de despliegue
- [x] Documentación de API
- [x] Guía de solución de problemas
- [x] Changelog del proyecto
- [x] Licencia MIT

### 🎯 Versión Actual: v0.4.0
- **Estado**: ✅ **COMPLETADO Y LISTO PARA PRODUCCIÓN**
- **Funcionalidades**: 25+ características principales
- **Tests**: 100% de componentes cubiertos
- **Documentación**: 5 guías completas
- **Despliegue**: Docker y scripts automatizados

## 🤝 Soporte

- **GitHub Issues**: Para reportar bugs y solicitar features
- **Documentación**: Wiki completa con ejemplos
- **Email**: soporte@ia-agent.com

## 📄 Licencia

Este proyecto está bajo la Licencia MIT. Ver el archivo [LICENSE](LICENSE) para más detalles.

## 🙏 Agradecimientos

- [LangChain](https://langchain.com/) - Framework para agentes con capacidades ReAct
- [AutoGen](https://microsoft.github.io/autogen/) - Framework para colaboración multi-agente
- [OpenAI](https://openai.com/) - APIs de IA para generación de código
- Comunidad .NET por las mejores prácticas de testing

---

**Desarrollado con ❤️ para la comunidad .NET**
