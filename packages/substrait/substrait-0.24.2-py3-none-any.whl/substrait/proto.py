def _load():
    """Import all substrait protobuf classes as human friendly.

    Instead of forcing users to deal with autogenerated protobuf
    modules, importing individual components of the protocol
    from submodules etc... this functions loads into the module
    all classes representing substrait expressions and loads
    the protocol modules with a friendly name making the protocol
    more convenient to use.

    substrait.gen.proto.extensions.extensions_pb2.SimpleExtensionDeclaration
    becomes substrait.proto.SimpleExtensionDeclaration
    """
    import sys
    import inspect
    import pkgutil
    import importlib
    from substrait.gen import proto as _proto

    selfmodule = sys.modules[__name__]
    for submodule_info in pkgutil.iter_modules(_proto.__path__):
        submodule_name = submodule_info.name
        attr_name = submodule_name.replace("_pb2", "")
        if submodule_name == "extensions":
            # Extensions are in a submodule
            submodule_name = "extensions.extensions_pb2"
            attr_name = "extensions"

        submodule = importlib.import_module(f".{submodule_name}", _proto.__name__)
        setattr(selfmodule, attr_name, submodule)

        for membername, _ in inspect.getmembers(submodule):
            member = getattr(submodule, membername)
            if inspect.isclass(member):
                setattr(selfmodule, membername, member)


_load()
