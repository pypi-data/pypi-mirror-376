from kubernetes.client import models as k8s

class K8sSecretManager(SecretManager):
    def __init__(self, namespace: str):
        super().__init__()
        self.namespace = namespace

    def getUserPassword(self, credential_name: str) -> Tuple[Union[k8s.V1EnvVarSource, str], Union[k8s.V1EnvVarSource, str]]:
        user = k8s.V1EnvVarSource(
            secret_key_ref=k8s.V1SecretKeySelector(
                name=credential_name,
                key=credential_name + '_USER'
            )
        )
        password = k8s.V1EnvVarSource(
            secret_key_ref=k8s.V1SecretKeySelector(
                name=credential_name,
                key=credential_name + '_PASSWORD'
            )
        )
        return user, password
        
    def getPATSecret(self, credential_name: str) -> Union[k8s.V1EnvVarSource, str]:
        return k8s.V1EnvVarSource(
            secret_key_ref=k8s.V1SecretKeySelector(
                name=credential_name,
                key='token'
            )
        )

    def getApiKey(self, credential_name: str) -> Tuple[Union[k8s.V1EnvVarSource, str], Union[k8s.V1EnvVarSource, str]]:
        api_key = k8s.V1EnvVarSource(
            secret_key_ref=k8s.V1SecretKeySelector(
                name=credential_name,
                key='api_key'
            )
        )
        api_secret = k8s.V1EnvVarSource(
            secret_key_ref=k8s.V1SecretKeySelector(
                name=credential_name,
                key='api_secret'
            )
        )
        return api_key, api_secret

secret_manager = K8sSecretManager(namespace='{{ namespace_name }}')
