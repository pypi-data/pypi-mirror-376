Metadata-Version: 2.4
Name: pytest-trepan
Version: 3.1.0
Summary: Pytest plugin for trepan debugger.
Home-page: http://github.com/rocky/pytest-trepan
Author: Rocky Bernstein
Author-email: rocky@gnu.org
Keywords: debugger pytest trepan
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Software Development :: Debuggers
Classifier: Framework :: Pytest
License-File: LICENSE
Requires-Dist: pytest>=4.0.0
Requires-Dist: trepan3k>=1.0.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: home-page
Dynamic: keywords
Dynamic: license-file
Dynamic: requires-dist
Dynamic: summary

Abstract
========


A pytest plugin for running the `trepan debugger <https://pypi.python.org/pypi/trepan3k>`_


Using
=====

After installing, to set a breakpoint to enter the trepan debugger::

    import pytest
    def test_function():
        ...
        pytest.trepan()    # get thee into the debugger!
        x = 1
        ...

The above will look like it is stopped at the *pytest.trepan()*
call. This is most useful when this is the last statement of a
scope. If you want to stop instead before ``x = 1`` pass ``immediate=False`` or just ``False``::

    import pytest
    def test_function():
        ...
        pytest.trepan(immediate=False)
	# same as py.trepan(False)
	x = 1
	...

You can also pass as keyword arguments any parameter accepted by *trepan.api.debug()*.

To have the debugger entered on error, use the ``--trepan`` option::

    $ pytest --trepan ...



Project Details
===============

- Project code + issue track on github - https://github.com/rocky/pytest-trepan
- PyPI - https://pypi.python.org/pypi/pytest-trepan
