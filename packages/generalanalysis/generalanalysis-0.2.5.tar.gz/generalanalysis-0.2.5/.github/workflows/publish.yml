name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to Test PyPI instead of production'
        required: false
        type: boolean
        default: false
      version_override:
        description: 'Override version (leave empty to use pyproject.toml version)'
        required: false
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install toml parser
        run: pip install toml
      
      - name: Get version from pyproject.toml
        id: get_version
        run: |
          if [ -n "${{ github.event.inputs.version_override }}" ]; then
            VERSION="${{ github.event.inputs.version_override }}"
            echo "Using override version: $VERSION"
          else
            VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
            echo "Using pyproject.toml version: $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Validate version against tag
        if: github.event_name == 'release'
        run: |
          TAG_VERSION="${{ github.event.release.tag_name }}"
          TAG_VERSION="${TAG_VERSION#v}"  # Remove 'v' prefix if present
          PROJECT_VERSION="${{ steps.get_version.outputs.version }}"
          
          if [ "$TAG_VERSION" != "$PROJECT_VERSION" ]; then
            echo "Error: Tag version ($TAG_VERSION) does not match project version ($PROJECT_VERSION)"
            exit 1
          fi
          echo "âœ… Version validated: $PROJECT_VERSION"

  code-quality:
    name: Pre-publish Quality Checks
    runs-on: ubuntu-latest
    needs: validate-version
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install uv
        run: pip install uv
      
      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-
      
      - name: Create virtual environment
        run: uv venv
      
      - name: Install package with dev dependencies
        run: uv pip install -e .[dev]
      
      - name: Check code formatting
        run: uv run black generalanalysis/ --check
      
      - name: Run linting
        run: uv run ruff check generalanalysis/
      
      - name: Run type checking
        run: uv run mypy generalanalysis/

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: [validate-version, code-quality]
    environment:
      name: ${{ github.event.inputs.test_pypi == 'true' && 'test-pypi' || 'pypi' }}
      url: ${{ github.event.inputs.test_pypi == 'true' && format('https://test.pypi.org/project/generalanalysis/{0}/', needs.validate-version.outputs.version) || format('https://pypi.org/project/generalanalysis/{0}/', needs.validate-version.outputs.version) }}
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build distributions
        run: |
          echo "Building version ${{ needs.validate-version.outputs.version }}"
          python -m build
          
          # List built files
          echo "Built distributions:"
          ls -la dist/
      
      - name: Check distribution metadata
        run: |
          echo "Checking distribution metadata..."
          twine check dist/*
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: Publish to Test PyPI
        if: github.event.inputs.test_pypi == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true
      
      - name: Publish to PyPI
        if: github.event.inputs.test_pypi != 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          verbose: true
      
      - name: Verify installation from Test PyPI
        if: github.event.inputs.test_pypi == 'true'
        run: |
          sleep 30  # Wait for package to be available
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ generalanalysis==${{ needs.validate-version.outputs.version }}
          python -c "import generalanalysis; print(f'Successfully installed version {generalanalysis.__version__}')"
      
      - name: Verify installation from PyPI
        if: github.event.inputs.test_pypi != 'true'
        run: |
          sleep 30  # Wait for package to be available
          pip install generalanalysis==${{ needs.validate-version.outputs.version }}
          python -c "import generalanalysis; print(f'Successfully installed version {generalanalysis.__version__}')"

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-version, build-and-publish]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_pypi != 'true'
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-version.outputs.version }}
          name: Release v${{ needs.validate-version.outputs.version }}
          body: |
            ## ðŸŽ‰ Released to PyPI
            
            Version ${{ needs.validate-version.outputs.version }} has been published to PyPI.
            
            ### Installation
            ```bash
            pip install generalanalysis==${{ needs.validate-version.outputs.version }}
            ```
            
            ### Links
            - [PyPI Package](https://pypi.org/project/generalanalysis/${{ needs.validate-version.outputs.version }}/)
            - [Documentation](https://docs.generalanalysis.com/)
          files: dist/*
          draft: false
          prerelease: false