name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install uv
        run: |
          pip install uv
      
      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-
      
      - name: Create virtual environment
        run: uv venv
      
      - name: Install package with dev dependencies
        run: uv pip install -e .[dev]
      
      - name: Check code formatting
        run: |
          echo "Checking code formatting with Black..."
          uv run black generalanalysis/ --check
      
      - name: Run linting
        run: |
          echo "Running ruff linter..."
          uv run ruff check generalanalysis/
      
      - name: Cache mypy cache
        uses: actions/cache@v4
        with:
          path: .mypy_cache
          key: ${{ runner.os }}-mypy-${{ hashFiles('**/*.py') }}
          restore-keys: |
            ${{ runner.os }}-mypy-
      
      - name: Run type checking
        run: |
          echo "Running mypy type checking..."
          uv run mypy generalanalysis/ --incremental

  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install uv
        run: |
          pip install uv
      
      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-
      
      - name: Create virtual environment
        run: uv venv
      
      - name: Install package with dev dependencies
        run: uv pip install -e .[dev]
      
      - name: Run tests with coverage
        run: |
          echo "Running test suite with coverage..."
          uv run pytest tests/ -v --tb=short --cov=generalanalysis --cov-report=term-missing --cov-report=html
          
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: htmlcov/
          
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install uv
        run: |
          pip install uv
      
      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-
      
      - name: Create virtual environment
        run: uv venv
      
      - name: Install package
        run: uv pip install -e .
      
      - name: Run basic_usage.py integration test
        env:
          GA_API_KEY: ${{ secrets.GA_API_KEY }}
        timeout-minutes: 5
        run: |
          echo "Running integration test with real API..."
          uv run python examples/basic_usage.py | tee integration_test.log
          
          # Check for errors or warnings immediately
          if grep -q "Warning:" integration_test.log; then
            echo "⚠️ Warning detected in integration test"
            cat integration_test.log
            exit 1
          fi
          
          if grep -q "Error:" integration_test.log; then
            echo "❌ Error detected in integration test"
            cat integration_test.log
            exit 1
          fi
          
          # Check that guards are listed
          if grep -q "Guard\[" integration_test.log; then
            echo "✅ Guards listed successfully"
            # Count guards to ensure we have at least one
            guard_count=$(grep -c "Guard\[" integration_test.log)
            echo "Found ${guard_count} guard(s)"
            if [ "$guard_count" -eq 0 ]; then
              echo "❌ No guards found, cannot test invocation"
              exit 1
            fi
          else
            echo "❌ Failed to list guards"
            exit 1
          fi
          
          # Check that result contains block status (allow whitespace variations)
          if grep -E '"block"\s*:\s*(true|false)' integration_test.log; then
            echo "✅ Guard invoke result received"
          else
            echo "❌ Guard invoke failed"
            exit 1
          fi
          
          # Check that policies are evaluated (allow whitespace variations)
          if grep -E '"policies"\s*:' integration_test.log && grep -E '"passed"\s*:\s*(true|false)' integration_test.log; then
            echo "✅ Policies evaluated successfully"
          else
            echo "❌ Policy evaluation missing"
            exit 1
          fi
          
          # Check async result
          if grep -q "Async result (JSON):" integration_test.log; then
            echo "✅ Async invocation completed"
          else
            echo "❌ Async invocation failed"
            exit 1
          fi
          
          # Check logs contain expected fields (allow whitespace variations)
          if grep -E '"items"\s*:' integration_test.log && grep -E '"user_id"\s*:' integration_test.log && grep -E '"guard_id"\s*:' integration_test.log; then
            echo "✅ Guard logs retrieved successfully"
          else
            echo "❌ Guard logs retrieval failed"
            exit 1
          fi
          
          # Check pagination info (allow whitespace variations)
          if grep -E '"total"\s*:\s*[0-9]+' integration_test.log && grep -E '"page"\s*:\s*[0-9]+' integration_test.log && grep -E '"page_size"\s*:\s*[0-9]+' integration_test.log; then
            echo "✅ Pagination info present"
          else
            echo "❌ Pagination info missing"
            exit 1
          fi
          
          echo "✅ Integration test completed successfully"