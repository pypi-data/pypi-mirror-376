# .github/workflows/pypi-publish.yml
name: Build, and Publish MongoDesu Python Package
on:
    push:
        branches:
            - master
permissions:
  contents: write
jobs:
  build:
    name: Build distribution üì¶
    runs-on: ubuntu-latest
    outputs:
        exists: ${{ steps.check_version.outputs.exists }}
        version: ${{ steps.get_version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Get version from setup.py
      id: get_version
      run: |
          python3 -m pip install tomli
          VERSION=$(python3 - <<'PYCODE'
          import sys
          if sys.version_info >= (3, 11):
              import tomllib as tomli
          else:
              import tomli
          with open("pyproject.toml", "rb") as f:
              data = tomli.load(f)
          print(data["project"]["version"])
          PYCODE
          )
          echo "version=$VERSION" >> $GITHUB_OUTPUT
    - name: Check if version already exist
      id: check_version
      run: >-
            if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
                echo "exists=true" >> $GITHUB_OUTPUT
            else
                echo "exists=false" >> $GITHUB_OUTPUT
            fi
    - name: Upgrade pip, setuptools, wheel
      run: python3 -m pip install --upgrade pip setuptools wheel

    - name: Install pypa/build & twine
      run: >-
        python3 -m
        pip install --upgrade build twine
        
    - name: Build a binary wheel and a source tarball
      run: python3 -m build

    - name: Verify packages
      run: python3 -m twine check dist/*

    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    

  publish-to-pypi:
    name: >-
      Publish Python üêç distribution üì¶ to PyPI
    needs: build
    if: needs.build.outputs.exists == 'false'
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/mongodesu  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write
    steps:
    - uses: actions/checkout@v4
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution üì¶ to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
    - name: Copy the exist variable
      run: >-
        echo "tagexists=${{needs.build.outputs.exists}}" >> $GITHUB_OUTPUT

  create-publish-tag:
    name: Create Tag and Release on GitHub
    needs: publish-to-pypi
    if: needs.publish-to-pypi.outputs.tagexists == 'false'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Get version from setup.py
      id: get_version
      run: |
        python3 -m pip install tomli || true
        VERSION=$(python3 - <<'PYCODE'
        import sys
        if sys.version_info >= (3, 11):
            import tomllib as tomli
        else:
            import tomli
        with open("pyproject.toml", "rb") as f:
            data = tomli.load(f)
        print(data["project"]["version"])
        PYCODE
        )
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    - name: Create tag
      run: |
        git config user.name anikSD
        git config user.email anikd141@gmail.com
        git remote set-url origin https://x-access-token:${{ secrets.PERSONAL_TOKEN }}@github.com/${{ github.repository }}.git
        if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag already exists, skipping."
        else
            git tag v${{ steps.get_version.outputs.version }}
            git push origin v${{ steps.get_version.outputs.version }}
        fi
    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: Release v${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        body: |
          Automatically generated release for version v${{ steps.get_version.outputs.version }}