---
name: plan
description: "Plan how to implement the specified feature. This is the second step in the Spec-Driven Development lifecycle."
---

Plan how to implement the specified feature.

This is the second step in the Spec-Driven Development lifecycle.

Given the implementation details provided as an argument, do this:

1. Run `specifyx run setup-plan setup --json` (or `uvx specifyx run setup-plan setup --json` if specifyx not found) from the repo root and parse JSON for FEATURE_SPEC, IMPL_PLAN, SPECS_DIR, BRANCH. All future file paths must be absolute.
   - If you need to check current status first, use: `specifyx run setup-plan check`
   - If the command is unclear, run: `specifyx run setup-plan --help`
2. Read and analyze the feature specification to understand:
   - The feature requirements and user stories
   - Functional and non-functional requirements
   - Success criteria and acceptance criteria
   - Any technical constraints or dependencies mentioned

3. Read the constitution at `.specify/memory/constitution.md` to understand constitutional requirements.

4. Execute the implementation plan template:
   - Load `.specify/templates/plan-template.j2` (already copied to IMPL_PLAN path)
   - Set Input path to FEATURE_SPEC
   - Run the Execution Flow (main) function steps 1-10
   - The template is self-contained and executable
   - Follow error handling and gate checks as specified
   - Let the template guide artifact generation in $SPECS_DIR:
     * Phase 0 generates research.md
     * Phase 1 generates data-model.md, contracts/, quickstart.md
     * Phase 2 generates tasks.md
   - Incorporate user-provided details from arguments into Technical Context: {ARGS}
   - Update Progress Tracking as you complete each phase

5. Verify execution completed:
   - Check Progress Tracking shows all phases complete
   - Ensure all required artifacts were generated
   - Confirm no ERROR states in execution

6. Report results with branch name, file paths, and generated artifacts.

Use absolute paths with the repository root for all file operations to avoid path issues.

{% if ai_assistant == 'claude' -%}

**Claude Code Integration:**
- Use `/plan` command after creating a specification
- `specifyx run` provides reliable cross-platform script execution
- Templates are stored in `.specify/templates/` for user customization
{% elif ai_assistant == 'gemini' -%}

**Gemini Integration:**
- Use this command after specification is complete
- `specifyx run` command replaces bash dependencies
- All templates use Jinja2 for consistent variable substitution
{% elif ai_assistant == 'copilot' -%}

**GitHub Copilot Integration:**
- Execute planning after specification phase
- `specifyx run` workflow ensures IDE compatibility
- Templates support project-specific configuration
{% else -%}

**Generic AI Assistant:**
- Execute planning phase after creating specifications
- Cross-platform `specifyx run` implementation
- Customizable templates in `.specify/templates/`
{% endif -%}