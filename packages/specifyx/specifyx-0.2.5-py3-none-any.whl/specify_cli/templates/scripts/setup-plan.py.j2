#!/usr/bin/env python3
"""
Setup implementation plan structure for current branch.

Automates creation of plan directories and files for feature branches.
Supports multiple branch patterns and provides JSON output for scripting.

Generated by SpecifyX init command for {{ ai_assistant }}.
"""

import sys
from pathlib import Path
from typing import Dict, Tuple

import typer
from rich.console import Console

from specify_cli.utils.script_helpers import ScriptHelpers, echo_info, echo_debug, echo_success, echo_error

app = typer.Typer(add_completion=False)
console = Console()


def get_feature_paths(helpers: ScriptHelpers) -> Tuple[bool, Dict[str, str]]:
    """Get all feature-related paths using ScriptHelpers."""
    try:
        current_branch = helpers.get_current_branch()
        
    except Exception as e:
        return False, {"error": f"Git error: {str(e)}"}
    
    if not current_branch:
        return False, {"error": f"No current branch detected"}
    
    if not helpers.is_feature_branch(current_branch):
        return False, {"error": f"Not on a feature branch: {current_branch}"}
    
    # Find feature directory using ScriptHelpers
    feature_dir = helpers.find_feature_directory(current_branch)
    
    if not feature_dir:
        return False, {"error": f"Cannot find feature directory for branch: {current_branch}"}
    
    feature_spec = feature_dir / "spec.md"
    impl_plan = feature_dir / "plan.md"
    
    return True, {
        "FEATURE_SPEC": str(feature_spec.absolute()),
        "IMPL_PLAN": str(impl_plan.absolute()),
        "SPECS_DIR": str(feature_dir.absolute()),
        "BRANCH": current_branch
    }


def setup_plan_structure(helpers: ScriptHelpers, force: bool = False, quiet: bool = False, json_mode: bool = False, debug: bool = False) -> Tuple[bool, Dict[str, str]]:
    """Setup implementation plan structure."""
    success, result = get_feature_paths(helpers)
    if not success:
        return False, result
    
    repo_root = helpers.get_repo_root()
    feature_dir = Path(result["SPECS_DIR"])
    impl_plan = Path(result["IMPL_PLAN"])
    feature_spec = Path(result["FEATURE_SPEC"])
    
    echo_debug(f"Setting up structure in: {feature_dir}", debug)
    
    try:
        # Create feature directory
        if not feature_dir.exists():
            echo_info(f"Creating feature directory: {feature_dir.relative_to(Path.cwd())}", quiet)
            feature_dir.mkdir(parents=True, exist_ok=True)
        
        # Handle implementation plan
        if not impl_plan.exists() or force:
            template_path = repo_root / ".specify" / "templates" / "plan-template.md.j2"
            if template_path.exists():
                echo_info("Creating plan from template", quiet)
                success, error = helpers.render_template_standalone(
                    template_path=template_path,
                    context_dict={
                        "feature_name": result['BRANCH'],
                        "branch_name": result['BRANCH'],
                        "author_name": "{{ author_name }}",
                        "creation_date": "{{ creation_date }}",
                        "project_name": "{{ project_name }}"
                    },
                    output_path=impl_plan
                )
                if not success:
                    echo_error(f"Failed to render plan template: {error}", json_mode=json_mode, quiet=quiet)
                    return False, {"error": f"Template rendering failed: {error}"}
            else:
                echo_error(f"Plan template not found at {template_path}", json_mode=json_mode, quiet=quiet)
                return False, {"error": f"Plan template not found: {template_path}"}
        
        # Ensure spec.md exists
        if not feature_spec.exists():
            template_path = repo_root / ".specify" / "templates" / "spec-template.md.j2"
            if template_path.exists():
                echo_info("Creating spec from template", quiet)
                success, error = helpers.render_template_standalone(
                    template_path=template_path,
                    context_dict={
                        "feature_name": result['BRANCH'],
                        "branch_name": result['BRANCH'],
                        "author_name": "{{ author_name }}",
                        "creation_date": "{{ creation_date }}",
                        "project_name": "{{ project_name }}"
                    },
                    output_path=feature_spec
                )
                if not success:
                    echo_error(f"Failed to render spec template: {error}", json_mode=json_mode, quiet=quiet)
                    return False, {"error": f"Template rendering failed: {error}"}
            else:
                echo_error(f"Spec template not found at {template_path}", json_mode=json_mode, quiet=quiet)
                return False, {"error": f"Spec template not found: {template_path}"}
        
        return True, result
        
    except Exception as e:
        echo_debug(f"Exception: {type(e).__name__}: {e}", debug)
        return False, {"error": f"Failed to setup plan structure: {str(e)}"}


@app.command()
def check(
    json_mode: bool = typer.Option(False, "--json", help="Output results in JSON format"),
    quiet: bool = typer.Option(False, "--quiet", "-q", help="Suppress informational messages"),
    debug: bool = typer.Option(False, "--debug", help="Enable debug output")
):
    """Check current status without creating files."""
    helpers = ScriptHelpers()
    echo_debug("Running in check-only mode", debug)
    
    success, result = get_feature_paths(helpers)
    
    if not success:
        helpers.output_result(result, success=False, json_mode=json_mode)
        if not json_mode and "Not on a feature branch" in result.get('error', ''):
            echo_info("\nSuggested actions:", quiet)
            echo_info("1. Switch to feature branch: git checkout 001-your-feature", quiet)
            echo_info("2. Create new branch: git checkout -b 002-new-feature", quiet)
        raise typer.Exit(1)
    
    # Check file status
    feature_spec = Path(result["FEATURE_SPEC"])
    impl_plan = Path(result["IMPL_PLAN"])
    specs_dir = Path(result["SPECS_DIR"])
    
    if json_mode:
        status = {
            **result,
            "status": "READY" if all(p.exists() for p in [specs_dir, feature_spec, impl_plan]) else "NEEDS_SETUP"
        }
        helpers.output_result(status, json_mode=True)
    else:
        echo_info(f"Feature branch detected: {result['BRANCH']}", quiet)
        echo_info(f"Status: {'READY' if all(p.exists() for p in [specs_dir, feature_spec, impl_plan]) else 'NEEDS_SETUP'}", quiet)


@app.command()
def setup(
    json_mode: bool = typer.Option(False, "--json", help="Output results in JSON format"),
    quiet: bool = typer.Option(False, "--quiet", "-q", help="Suppress informational messages"),
    debug: bool = typer.Option(False, "--debug", help="Enable debug output"),
    force: bool = typer.Option(False, "--force", help="Force creation even if files exist")
):
    """Setup implementation plan structure for current branch.
    
    Detects current feature branch and creates necessary directory structure,
    spec files, and plan templates. Supports multiple branch naming patterns.
    
    Examples:
        specifyx run setup-plan setup
        specifyx run setup-plan setup --json
        specifyx run setup-plan setup --force
        
    Note: If 'specifyx' is not found, try: uvx specifyx run setup-plan setup
    """
    helpers = ScriptHelpers()
    
    # Main operation
    success, result = setup_plan_structure(helpers, force, quiet, json_mode, debug)
    
    if success:
        echo_success("Successfully setup implementation plan structure", quiet, json_mode)
        helpers.output_result(result, success=True, json_mode=json_mode)
        echo_debug("Setup completed successfully", debug)
    else:
        helpers.output_result(result, success=False, json_mode=json_mode)
        if not json_mode and "Not on a feature branch" in result.get('error', ''):
            echo_info("\nTo fix this issue:", quiet)
            echo_info("1. Switch to feature branch: git checkout 001-your-feature", quiet)
            echo_info("2. Create new branch: git checkout -b 002-new-feature", quiet)
        raise typer.Exit(1)


if __name__ == "__main__":
    # Default to setup command if no subcommand provided
    import sys
    if len(sys.argv) == 1:
        sys.argv.append("setup")
    app()