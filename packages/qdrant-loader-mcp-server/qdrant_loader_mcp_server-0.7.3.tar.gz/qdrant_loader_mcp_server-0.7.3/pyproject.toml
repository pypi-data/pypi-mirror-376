[build-system]
requires = [
    "setuptools>=61.0",
    "wheel",
]
build-backend = "setuptools.build_meta"

[project]
name = "qdrant-loader-mcp-server"
version = "0.7.3"
description = "A Model Context Protocol (MCP) server that provides RAG capabilities to Cursor using Qdrant."
readme = "README.md"
requires-python = ">=3.12"
license = "GPL-3.0"
keywords = [
    "qdrant",
    "vector-database",
    "mcp",
    "cursor",
    "rag",
    "embeddings",
    "multi-project",
    "semantic-search",
]
authors = [
    { name = "Martin Papy", email = "martin.papy@cbtw.tech" },
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "qdrant-client>=1.6.0",
    "openai>=1.3.0",
    "pydantic>=2.4.2",
    "python-dotenv>=1.0.0",
    "jsonrpcclient>=4.0.3",
    "jsonrpcserver>=5.0.7",
    "structlog>=23.0.0",
    "PyYAML>=6.0.0",
    "rank-bm25>=0.2.2",
    "numpy>=1.26.0",
    "click>=8.0.0",
    "tomli>=2.0.0",
    "networkx>=3.0.0",
    "qdrant-loader-core==0.7.3",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Indexing",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Environment :: Console",
    "Framework :: FastAPI",
    "Typing :: Typed",
]

[project.urls]
Homepage = "https://qdrant-loader.net"
Documentation = "https://qdrant-loader.net/docs/packages/mcp-server/README.html"
Repository = "https://github.com/martin-papy/qdrant-loader"
Issues = "https://github.com/martin-papy/qdrant-loader/issues"

[project.scripts]
mcp-qdrant-loader = "qdrant_loader_mcp_server.main:main"

[tool.setuptools.packages.find]
where = [
    "src",
]

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
addopts = [
    "--strict-markers",
    "--strict-config",
    "-v",
    "-W",
    "ignore::RuntimeWarning",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
    "ignore::RuntimeWarning",
    "ignore:coroutine.*was never awaited:RuntimeWarning",
    "ignore:coroutine.*AsyncMockMixin.*was never awaited:RuntimeWarning",
    "ignore:.*AsyncMockMixin.*was never awaited:RuntimeWarning",
    "ignore:.*AsyncMockMixin._execute_mock_call.*was never awaited:RuntimeWarning",
    "ignore:unclosed transport.*:ResourceWarning",
    "ignore:unclosed event loop.*:ResourceWarning",
]
markers = [
    "asyncio: marks tests as async",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow running",
]
