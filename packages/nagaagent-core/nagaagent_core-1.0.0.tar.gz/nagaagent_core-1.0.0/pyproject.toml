[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nagaagent-core"
version = "1.0.0"
description = "娜迦AI助手核心功能包 - 基础框架，包含API服务器、Agent框架、日志管理等核心组件"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "NagaAgent Team", email = "naga@example.com"}
]
maintainers = [
    {name = "NagaAgent Team", email = "naga@example.com"}
]
keywords = ["ai", "assistant", "mcp", "streaming", "tool-calling", "chat", "api", "framework", "core"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = [
    "pydantic>=2.0.0",
    "asyncio-mqtt>=0.11.0",
    "aiohttp>=3.8.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "websockets>=11.0.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
api = [
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "websockets>=11.0.0",
]
framework = [
    "aiohttp>=3.8.0",
    "pydantic>=2.0.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "coverage>=7.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/Xxiii8322766509/NagaAgent"
Documentation = "https://github.com/Xxiii8322766509/NagaAgent"
Repository = "https://github.com/Xxiii8322766509/NagaAgent.git"
"Bug Tracker" = "https://github.com/Xxiii8322766509/NagaAgent/issues"

[project.scripts]
nagaagent-core = "NagaAgent_core.cli:main"
naga-api = "NagaAgent_core.api.server:run_api_server"

[tool.setuptools.packages.find]
where = ["."]
include = ["NagaAgent_core*", "streaming*", "mcp*", "messages*", "tools*", "api*", "agents*", "logs*"]
exclude = ["tests*", "examples*", "docs*"]

[tool.setuptools.package-data]
NagaAgent_core = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["NagaAgent_core"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]