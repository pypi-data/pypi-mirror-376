@echo off
REM {{ parser_name }} - Universal Windows Installer
REM Generated by UnrealOn Universal Installer v2.0.0

title {{ parser_name }} Parser

echo.
echo {{ parser_name }} Parser - Windows Edition
echo {{ "=" * (parser_name|length + 25) }}
echo UnrealOn Driver-based parser with universal installer
echo Browsers: {{ browsers_list }}
echo Proxy Support: {% if has_proxy %}Yes{% else %}No{% endif %}
echo.

REM Setup environment variables
set PYTHONIOENCODING=utf-8
set PLAYWRIGHT_BROWSERS_PATH=0
set PYTHONUNBUFFERED=1
set UNREALON_PARSER_NAME={{ parser_name }}

REM Apply UnrealOn platform fixes
python -c "from unrealon_installer.platform import apply_platform_fixes; apply_platform_fixes()" 2>nul

:main_menu
echo Main Menu:
echo.
echo [1] RUN PARSER (Quick Start)
echo [2] SETUP SYSTEM (First Time Setup)
echo [3] MANAGE BROWSERS (Install/Fix Browsers)
echo [4] MANAGE DEPENDENCIES (Install/Update Packages)
echo [5] SYSTEM STATUS (Check Installation)
echo [6] TROUBLESHOOTING (Fix Issues)
echo [7] HELP and INFO
echo [8] EXIT
echo.
set /p choice="Enter your choice (1-8): "

if "%choice%"=="1" goto run_parser
if "%choice%"=="2" goto setup_system
if "%choice%"=="3" goto manage_browsers
if "%choice%"=="4" goto manage_dependencies
if "%choice%"=="5" goto system_status
if "%choice%"=="6" goto troubleshooting
if "%choice%"=="7" goto help_info
if "%choice%"=="8" goto exit_script
goto main_menu

:run_parser
cls
echo.
echo {{ parser_name }} Parser - Run Mode
echo {{ "=" * (parser_name|length + 25) }}
echo.

echo Choose parsing mode:
echo [1] ONE-TIME mode (50 requests, 5 concurrent)
{% if has_persistent %}echo [2] PERSISTENT mode (continuous monitoring){% else %}REM [2] PERSISTENT mode not supported{% endif %}
echo [3] QUICK TEST (5 requests, 2 concurrent)
echo [4] PERFORMANCE TEST (100 requests, 10 concurrent)
echo [5] CUSTOM mode
echo.
set /p mode="Enter mode (1-5): "

if "%mode%"=="1" (
    echo Starting ONE-TIME mode: 50 requests, 5 concurrent
    python main.py 50 5
)
{% if has_persistent %}
if "%mode%"=="2" (
    echo Starting PERSISTENT mode: continuous monitoring
    python main.py 5 --persistent
)
{% endif %}
if "%mode%"=="3" (
    echo Starting QUICK TEST: 5 requests, 2 concurrent
    python main.py 5 2
)
if "%mode%"=="4" (
    echo Starting PERFORMANCE TEST: 100 requests, 10 concurrent
    set /p confirm="This will run 100 requests. Continue? (Y/N): "
    if /i "%confirm%"=="Y" python main.py 100 10
)
if "%mode%"=="5" (
    set /p args="Enter custom arguments: "
    python main.py %args%
)

echo.
echo Press any key to return to main menu...
pause >nul
goto main_menu

:setup_system
cls
echo.
echo System Setup
echo =============
echo.
echo Installing Python dependencies...
pip install -r requirements.txt
echo.
echo Installing browsers...
playwright install chromium
echo.
echo Setup complete!
echo.
pause
goto main_menu

:manage_browsers
cls
echo.
echo Browser Management
echo ==================
echo.
echo [1] Install all browsers
echo [2] Install Chromium only
echo [3] Install Firefox only
echo [4] Check browser status
echo [5] Back to main menu
echo.
set /p browser_choice="Enter choice (1-5): "

if "%browser_choice%"=="1" playwright install
if "%browser_choice%"=="2" playwright install chromium
if "%browser_choice%"=="3" playwright install firefox
if "%browser_choice%"=="4" (
    echo Checking browser status...
    playwright --version
    python -c "from playwright.sync_api import sync_playwright; print('Browsers OK')" 2>nul || echo "Browser check failed"
)
if "%browser_choice%"=="5" goto main_menu

echo.
pause
goto main_menu

:manage_dependencies
cls
echo.
echo Dependency Management
echo =====================
echo.
echo [1] Install/Update all dependencies
echo [2] Install production dependencies only
echo [3] Check dependency status
echo [4] Back to main menu
echo.
set /p dep_choice="Enter choice (1-4): "

if "%dep_choice%"=="1" (
    pip install -r requirements.txt
    pip install --upgrade unrealon
)
if "%dep_choice%"=="2" pip install -r requirements.txt
if "%dep_choice%"=="3" (
    echo Checking dependencies...
    pip list | findstr unrealon
    python -c "import unrealon_driver; print('UnrealOn Driver:', unrealon_driver.__version__)" 2>nul || echo "UnrealOn Driver not found"
)
if "%dep_choice%"=="4" goto main_menu

echo.
pause
goto main_menu

:system_status
cls
echo.
echo System Status Check
echo ===================
echo.

echo Python Version:
python --version

echo.
echo Platform Information:
python -c "from unrealon_installer.platform import get_platform_info; import json; print(json.dumps(get_platform_info(), indent=2))" 2>nul || echo "Platform info not available"

echo.
echo UnrealOn Driver Status:
python -c "import unrealon_driver; print('Version:', unrealon_driver.__version__)" 2>nul || echo "UnrealOn Driver not installed"

echo.
echo Browser Status:
playwright --version 2>nul || echo "Playwright not installed"

echo.
echo Dependencies:
pip list | findstr -i "unrealon playwright requests"

echo.
pause
goto main_menu

:troubleshooting
cls
echo.
echo Troubleshooting Guide
echo =====================
echo.
echo Common issues and solutions:
echo.
echo 1. "ModuleNotFoundError: No module named 'unrealon_driver'"
echo    Solution: Run "pip install -r requirements.txt"
echo.
echo 2. "Browser not found" errors
echo    Solution: Run "playwright install chromium"
echo.
echo 3. "Permission denied" errors
echo    Solution: Run as Administrator
echo.
echo 4. Proxy connection issues
echo    Solution: Check proxy configuration in proxy_config.py
echo.
echo 5. SSL certificate errors
echo    Solution: Platform fixes are applied automatically
echo.
echo Press any key to return to main menu...
pause >nul
goto main_menu

:help_info
cls
echo.
echo {{ parser_name }} Parser - Help and Information
echo {{ "=" * (parser_name|length + 25) }}
echo.
echo This is a UnrealOn Driver-based parser with the following features:
echo.
echo - Multi-concurrent API processing
echo - Browser automation with Playwright
echo - Proxy support (if configured)
echo - Cross-platform compatibility
{% if has_persistent %}echo - Persistent monitoring mode{% endif %}
echo - Automatic dependency management
echo.
echo Configuration:
echo {{ config_json }}
echo.
echo For more information, visit: https://github.com/unrealon
echo.
echo Press any key to return to main menu...
pause >nul
goto main_menu

:exit_script
echo.
echo Thank you for using {{ parser_name }} Parser!
echo.
exit /b 0
