Metadata-Version: 2.4
Name: classic-signals
Version: 0.1.1
Summary: Simple signals and handlers
Author-email: Sergey Variasov <variasov@gmail.com>
Project-URL: Homepage, https://github.com/variasov/classic-signals
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: readerwriterlock~=1.0.9
Requires-Dist: classic-components~=1.3
Provides-Extra: dev
Requires-Dist: build~=1.2.2.post1; extra == "dev"
Requires-Dist: pytest==8.3.4; extra == "dev"
Requires-Dist: pytest-cov==6.0.0; extra == "dev"
Requires-Dist: twine~=4.0; extra == "dev"
Dynamic: license-file

# Classic Signals

Библиотека предоставляет способ инверсии контроля через сигналы и реакции.

По сути, это паттерн Observer и немного сахара сверху. 
В одном месте программы мы объявляем сигналы, пользуясь декоратором 
signal, в других местах приложения пишем реакции на этих сигналов.
Реакции - это любой вызываемый объект, принимающий один аргумент - инстанс 
сигнала. Это может быть и просто функция или метод, для удобства завернутый
в декоратор reaction. Последнее, что нужно, это инстанс класса Hub. В Hub 
перед началом работы можно зарегистрировать реакции, потом можно вызвать у него
метод notify, передав в него инстанс сигнала, и Hub вызовет все реакции, 
относящиеся к сигналу.

Реакции исполняются последовательно в единственном текущем потоке.
Не рекомендуется создавать новые потоки из сигналов. Этот механизм
предназначается для связки разных частей кода с инверсией зависимости, не для 
распараллеливания задач.

Пример:

```python
from classic.components import component
from classic.signals import reaction, Hub, signal


@signal
class SomethingHappened:
    """Под капотом сигналы - на самом деле датаклассы"""
    some_field: int


@signal
class SomethingAnotherHappened:
    some_field: int


@component
class SomeHandlers:

    @reaction
    def on_something_happened(self, signal: SomethingHappened):
        print(f'Что-то произошло: {signal}')

    @reaction
    def on_something_another_happened(self, signal: SomethingAnotherHappened):
        print(f'Что-то еще произошло: {signal}')


hub = Hub()
SomeHandlers(signals=hub)


signal_1 = SomethingHappened(some_field=0)
signal_2 = SomethingAnotherHappened(some_field=0)

hub.notify(signal_1, signal_2)
```
