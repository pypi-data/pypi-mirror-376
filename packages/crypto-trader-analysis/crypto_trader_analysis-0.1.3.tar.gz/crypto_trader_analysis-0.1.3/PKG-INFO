Metadata-Version: 2.4
Name: crypto-trader-analysis
Version: 0.1.3
Summary: Analysis and ML components for the Crypto Trader platform (news sentiment, training, utilities).
Author-email: Oliver Lear Sigwarth <sigwarthsoftware@gmail.com>
License-Expression: LicenseRef-Proprietary
Project-URL: Homepage, https://github.com/theoliverlear/Crypto-Trader
Project-URL: Repository, https://github.com/theoliverlear/Crypto-Trader
Project-URL: Issues, https://github.com/theoliverlear/Crypto-Trader/issues
Keywords: crypto,trading,machine-learning,tensorflow,django,analysis,sentiment
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Office/Business :: Financial :: Investment
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.10
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: attrs>=23.0.0
Requires-Dist: requests>=2.31.0
Requires-Dist: beautifulsoup4>=4.12.0
Provides-Extra: web
Requires-Dist: Django>=5.1; extra == "web"
Provides-Extra: data
Requires-Dist: numpy>=1.23; extra == "data"
Requires-Dist: pandas>=2.0; extra == "data"
Provides-Extra: ml
Requires-Dist: numpy>=1.23; extra == "ml"
Requires-Dist: pandas>=2.0; extra == "ml"
Requires-Dist: tensorflow>=2.14; extra == "ml"
Provides-Extra: all
Requires-Dist: Django>=5.1; extra == "all"
Requires-Dist: numpy>=1.23; extra == "all"
Requires-Dist: pandas>=2.0; extra == "all"
Requires-Dist: tensorflow>=2.14; extra == "all"

# Crypto Trader ‚Äî Analysis Module
## Machine learning and market analytics engine

---

The Analysis module powers Crypto Trader‚Äôs price prediction and model 
training. It ingests market data from PostgreSQL, engineers features, trains
LSTM‚Äëbased models (including multi‚Äëlayer variants), generates predictions, and
reports results back to the platform.

Important: Past results and backtests do not guarantee future performance.
Always start in paper mode. Liability is your own.

## ‚≠êÔ∏è What this module is
- A Python analytics service used by Crypto Trader‚Äôs core platform.
- Strategic ML engine: LSTM, complex LSTM, and multi‚Äëlayer LSTM variants.
- Feature engineering pipeline with robust scaling and time‚Äëwindowed sequences.
- Training, prediction, and reporting utilities that integrate with the Django
  API.

## üß≠ Key capabilities
- Data access
  - Pulls market snapshots from PostgreSQL via SQLAlchemy; bulk `COPY` for
    speed.
  - Supports multiple query modes: `current_price`, `historical`,
    `historical_spaced`.
- Feature engineering
  - Sliding time windows (configurable `sequence_length`).
  - Engineered channels: past trends, key timestamps, correlation with target 
    returns.
  - Multi‚Äëscale preprocessing for multi‚Äëlayer models (short/medium/long
    horizons).
- Models and training
  - LSTM models with Keras/TensorFlow; early stopping, LR scheduling,
    checkpoints.
  - Multi‚Äëlayer models combine short, medium, and long sequences.
  - GPU execution when available; CPU fallback supported.
- Predictions and reporting
  - Generates next‚Äëstep price predictions for a target currency.
  - Posts predictions and training session summaries to the platform API.
  - TensorBoard logs for model inspection.

## üîó How it fits into Crypto Trader
- Input: Market snapshot data from the platform database (PostgreSQL).
- Output: Trained model artifacts under `models/...`, predicted prices,
  metrics.
- Integration: Sends structured payloads to the Django API.

## üß∞ Operation
This module is operated by project owners alongside the Django API and two
GPUs for training.

- Environment and data
  - Database: PostgreSQL
  - Market snapshots table must be populated; `currencies.json` is used for
    price column discovery.
- GPU setup
  - Two‚ÄëGPU operation is supported. Utilities in the codebase and the scripts
    under `gpu/` demonstrate splitting currency workloads across devices.
  - Example GPU launcher scripts live under `gpu/` (e.g.,
    `gpu/run_gpu_zero.py`).
- Common operator actions
  - Train a single‚Äëcurrency LSTM model
    - Entry: `src/apps/learning/models/training/training_session.py`
  - Train a multi‚Äëlayer model (short/medium/long sequences)
    - Entry: `src/apps/learning/models/training/training_session.py`
  - Make a one‚Äëoff prediction for a currency
    - Entry: `src/apps/learning/models/training/training_session.py`
  - Prediction and reporting lifecycle
    - Entry: `src/apps/learning/models/training/training_session.py`
    - Note: `TrainingSession.train()` will compute a prediction after training
      and report it via the platform integration.
    - Standalone utilities for sending predictions also exist under 
      `apps/learning/models/prediction/predictions.py` if needed.
  - Run a GPU‚Äëoriented launcher
    - Scripts under `gpu/` (e.g., `gpu/run_gpu_zero.py`, 
     `gpu/run_gpu_one.py`).

Notes:
- Training hyperparameters can be chosen via `TrainingType` 
  (`src/apps/learning/models/training/training_type.py`) or by building a 
  `TrainingModel`.
- Multi‚Äëlayer models live under `src/apps/learning/models/ai/lstm/layered/...`.

## üîí Safety, privacy, and control
- This module does not manage exchange API keys directly; it trains/predicts 
  from database data.
- Start with small datasets and paper trading.
- Guardrails (e.g., position sizing, stop loss) are enforced by the trading
  engine, not this module.

## üõ†Ô∏è Technology in this module
- Python 3
- TensorFlow + Keras
- NumPy, Pandas, scikit‚Äëlearn
- SQLAlchemy (COPY to CSV optimization)
- Requests (HTTP)
- `attrs` / `typing_extensions`

## ‚ùì Questions or help
Email Oliver Lear Sigwarth (@theoliverlear): sigwarthsoftware@gmail.com

## üìÑ License
See `LICENSE.md` in the repository root.
