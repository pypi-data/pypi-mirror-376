# coding: utf-8

"""
    ENPICOM Platform Public API

    The ENPICOM Platform Public API is a powerful tool that enables a wide variety of use cases.                 The architecture of the ENPICOM Platform centers around files, collections, tags and analyses,                 securely managed through cloud-based access.                 The Public API can be used to easily import data, annotate metadata, run analyses and export results.

    The version of the OpenAPI document: 1.0.0
    Contact: info@enpicom.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class EnrichmentExportPayload(BaseModel):
    """
    EnrichmentExportPayload
    """ # noqa: E501
    enrichment_run_id: Optional[StrictInt] = Field(description="The identifier of an Enrichment Run.")
    operation_name: StrictStr
    mode: StrictStr
    limit: Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]] = None
    tag_ids: List[Optional[StrictInt]]
    __properties: ClassVar[List[str]] = ["enrichment_run_id", "operation_name", "mode", "limit", "tag_ids"]

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['clones', 'consensus', 'representatives']):
            raise ValueError("must be one of enum values ('clones', 'consensus', 'representatives')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnrichmentExportPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if enrichment_run_id (nullable) is None
        # and model_fields_set contains the field
        if self.enrichment_run_id is None and "enrichment_run_id" in self.model_fields_set:
            _dict['enrichment_run_id'] = None

        # set to None if limit (nullable) is None
        # and model_fields_set contains the field
        if self.limit is None and "limit" in self.model_fields_set:
            _dict['limit'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnrichmentExportPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enrichment_run_id": obj.get("enrichment_run_id"),
            "operation_name": obj.get("operation_name"),
            "mode": obj.get("mode"),
            "limit": obj.get("limit"),
            "tag_ids": obj.get("tag_ids")
        })
        return _obj


