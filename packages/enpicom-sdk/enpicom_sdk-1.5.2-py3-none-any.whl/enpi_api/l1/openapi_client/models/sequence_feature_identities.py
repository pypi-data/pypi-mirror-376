# coding: utf-8

"""
    ENPICOM Platform Public API

    The ENPICOM Platform Public API is a powerful tool that enables a wide variety of use cases.                 The architecture of the ENPICOM Platform centers around files, collections, tags and analyses,                 securely managed through cloud-based access.                 The Public API can be used to easily import data, annotate metadata, run analyses and export results.

    The version of the OpenAPI document: 1.0.0
    Contact: info@enpicom.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SequenceFeatureIdentities(BaseModel):
    """
    Sequence identity is measured by edit distance (%).  Clones are clustered together when all selected chains meet the threshold. ``` { heavy: 80, kappa: 70 } ``` means clusters will be formed from clones having 80% similarity on Heavy Sequences and 70% similarity on Kappa sequences. Specifying values for both `kappa` and `lambda` means that clones will be clustered on either one of those chains.
    """ # noqa: E501
    heavy: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = None
    var_lambda: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(default=None, alias="lambda")
    kappa: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = None
    alpha: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = None
    beta: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = None
    gamma: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = None
    delta: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = None
    __properties: ClassVar[List[str]] = ["heavy", "lambda", "kappa", "alpha", "beta", "gamma", "delta"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SequenceFeatureIdentities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if heavy (nullable) is None
        # and model_fields_set contains the field
        if self.heavy is None and "heavy" in self.model_fields_set:
            _dict['heavy'] = None

        # set to None if var_lambda (nullable) is None
        # and model_fields_set contains the field
        if self.var_lambda is None and "var_lambda" in self.model_fields_set:
            _dict['lambda'] = None

        # set to None if kappa (nullable) is None
        # and model_fields_set contains the field
        if self.kappa is None and "kappa" in self.model_fields_set:
            _dict['kappa'] = None

        # set to None if alpha (nullable) is None
        # and model_fields_set contains the field
        if self.alpha is None and "alpha" in self.model_fields_set:
            _dict['alpha'] = None

        # set to None if beta (nullable) is None
        # and model_fields_set contains the field
        if self.beta is None and "beta" in self.model_fields_set:
            _dict['beta'] = None

        # set to None if gamma (nullable) is None
        # and model_fields_set contains the field
        if self.gamma is None and "gamma" in self.model_fields_set:
            _dict['gamma'] = None

        # set to None if delta (nullable) is None
        # and model_fields_set contains the field
        if self.delta is None and "delta" in self.model_fields_set:
            _dict['delta'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SequenceFeatureIdentities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "heavy": obj.get("heavy"),
            "lambda": obj.get("lambda"),
            "kappa": obj.get("kappa"),
            "alpha": obj.get("alpha"),
            "beta": obj.get("beta"),
            "gamma": obj.get("gamma"),
            "delta": obj.get("delta")
        })
        return _obj


