# coding: utf-8

"""
    ENPICOM Platform Public API

    The ENPICOM Platform Public API is a powerful tool that enables a wide variety of use cases.                 The architecture of the ENPICOM Platform centers around files, collections, tags and analyses,                 securely managed through cloud-based access.                 The Public API can be used to easily import data, annotate metadata, run analyses and export results.

    The version of the OpenAPI document: 1.0.0
    Contact: info@enpicom.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from enpi_api.l1.openapi_client.models.ml_aws_endpoint_config import MlAwsEndpointConfig
from enpi_api.l1.openapi_client.models.ml_endpoint_signature import MlEndpointSignature
from enpi_api.l1.openapi_client.models.ml_input_map_item import MlInputMapItem
from enpi_api.l1.openapi_client.models.ml_output_intent import MlOutputIntent
from enpi_api.l1.openapi_client.models.ml_parameter_map_item import MlParameterMapItem
from typing import Optional, Set
from typing_extensions import Self

class RegisterMlEndpointRequest(BaseModel):
    """
    RegisterMlEndpointRequest
    """ # noqa: E501
    display_name: StrictStr
    input_mapping: List[MlInputMapItem]
    parameter_mapping: Optional[List[MlParameterMapItem]] = None
    signatures: List[MlEndpointSignature]
    vendor_config: MlAwsEndpointConfig
    output_intents: List[MlOutputIntent]
    __properties: ClassVar[List[str]] = ["display_name", "input_mapping", "parameter_mapping", "signatures", "vendor_config", "output_intents"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RegisterMlEndpointRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in input_mapping (list)
        _items = []
        if self.input_mapping:
            for _item in self.input_mapping:
                if _item:
                    _items.append(_item.to_dict())
            _dict['input_mapping'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parameter_mapping (list)
        _items = []
        if self.parameter_mapping:
            for _item in self.parameter_mapping:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parameter_mapping'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in signatures (list)
        _items = []
        if self.signatures:
            for _item in self.signatures:
                if _item:
                    _items.append(_item.to_dict())
            _dict['signatures'] = _items
        # override the default output from pydantic by calling `to_dict()` of vendor_config
        if self.vendor_config:
            _dict['vendor_config'] = self.vendor_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in output_intents (list)
        _items = []
        if self.output_intents:
            for _item in self.output_intents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['output_intents'] = _items
        # set to None if parameter_mapping (nullable) is None
        # and model_fields_set contains the field
        if self.parameter_mapping is None and "parameter_mapping" in self.model_fields_set:
            _dict['parameter_mapping'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RegisterMlEndpointRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "display_name": obj.get("display_name"),
            "input_mapping": [MlInputMapItem.from_dict(_item) for _item in obj["input_mapping"]] if obj.get("input_mapping") is not None else None,
            "parameter_mapping": [MlParameterMapItem.from_dict(_item) for _item in obj["parameter_mapping"]] if obj.get("parameter_mapping") is not None else None,
            "signatures": [MlEndpointSignature.from_dict(_item) for _item in obj["signatures"]] if obj.get("signatures") is not None else None,
            "vendor_config": MlAwsEndpointConfig.from_dict(obj["vendor_config"]) if obj.get("vendor_config") is not None else None,
            "output_intents": [MlOutputIntent.from_dict(_item) for _item in obj["output_intents"]] if obj.get("output_intents") is not None else None
        })
        return _obj


