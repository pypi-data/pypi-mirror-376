# coding: utf-8

"""
    ENPICOM Platform Public API

    The ENPICOM Platform Public API is a powerful tool that enables a wide variety of use cases.                 The architecture of the ENPICOM Platform centers around files, collections, tags and analyses,                 securely managed through cloud-based access.                 The Public API can be used to easily import data, annotate metadata, run analyses and export results.

    The version of the OpenAPI document: 1.0.0
    Contact: info@enpicom.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetTagsSuccessResponseTagArchetypesInner(BaseModel):
    """
    GetTagsSuccessResponseTagArchetypesInner
    """ # noqa: E501
    key: StrictStr = Field(description="The name of the tag archetype (the \"key\" in the \"key-value\" pair).")
    data_type: StrictStr
    level: StrictStr = Field(description="The level of a tag archetype")
    id: Optional[StrictInt] = Field(description="The id of the tag archetype.")
    access_type: StrictStr = Field(description="The access type of the tag, which determines which operations are allowed on the tag that is applied to an item, for example, a collection. - **mutable**: The value of the tag can be modified and removed. - **mutable_non_deletable**: The value of the tag can be modified, but the tag can not be removed. - **immutable**: The value of the tag can not be modified or removed.")
    __properties: ClassVar[List[str]] = ["key", "data_type", "level", "id", "access_type"]

    @field_validator('data_type')
    def data_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['amino_acid_sequence', 'nucleotide_sequence', 'quality_sequence', 'boolean', 'decimal', 'integer', 'text']):
            raise ValueError("must be one of enum values ('amino_acid_sequence', 'nucleotide_sequence', 'quality_sequence', 'boolean', 'decimal', 'integer', 'text')")
        return value

    @field_validator('level')
    def level_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['collection', 'clone', 'sequence', 'file', 'clone_contextual']):
            raise ValueError("must be one of enum values ('collection', 'clone', 'sequence', 'file', 'clone_contextual')")
        return value

    @field_validator('access_type')
    def access_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['mutable', 'mutable_non_deletable', 'immutable']):
            raise ValueError("must be one of enum values ('mutable', 'mutable_non_deletable', 'immutable')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetTagsSuccessResponseTagArchetypesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetTagsSuccessResponseTagArchetypesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key": obj.get("key"),
            "data_type": obj.get("data_type"),
            "level": obj.get("level"),
            "id": obj.get("id"),
            "access_type": obj.get("access_type")
        })
        return _obj


