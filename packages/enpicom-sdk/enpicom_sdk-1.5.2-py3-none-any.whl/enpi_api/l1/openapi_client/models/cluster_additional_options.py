# coding: utf-8

"""
    ENPICOM Platform Public API

    The ENPICOM Platform Public API is a powerful tool that enables a wide variety of use cases.                 The architecture of the ENPICOM Platform centers around files, collections, tags and analyses,                 securely managed through cloud-based access.                 The Public API can be used to easily import data, annotate metadata, run analyses and export results.

    The version of the OpenAPI document: 1.0.0
    Contact: info@enpicom.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ClusterAdditionalOptions(BaseModel):
    """
    Additional Options for clustering configuration. Includes: * Ignoring special chars (* and _) * Discarding Singletons * Discarding Non-Productive sequences * Discarding Sequences with incomplete VDJ
    """ # noqa: E501
    should_strip_special_chars: Optional[StrictBool] = Field(default=False, description="Asterisk (*) and underscore (_) characters will be removed from the amino acid sequence during clustering only.  The original sequence is not modified.")
    should_remove_singletons: Optional[StrictBool] = Field(default=False, description="Sequences observed only once will be discarded. Only applied to single-chain data")
    should_remove_non_productive_vdj: Optional[StrictBool] = Field(default=False, description="Sequences than contain Frameshifts or Stop Codons will be discarded")
    should_remove_non_productive_cdr3: Optional[StrictBool] = Field(default=False, description="Sequences than contain Frameshifts or Stop Codons will be discared")
    should_remove_incomplete_vdj: Optional[StrictBool] = Field(default=False, description="Sequences that do not cover the full-length VDJ will be discarded")
    __properties: ClassVar[List[str]] = ["should_strip_special_chars", "should_remove_singletons", "should_remove_non_productive_vdj", "should_remove_non_productive_cdr3", "should_remove_incomplete_vdj"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterAdditionalOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if should_strip_special_chars (nullable) is None
        # and model_fields_set contains the field
        if self.should_strip_special_chars is None and "should_strip_special_chars" in self.model_fields_set:
            _dict['should_strip_special_chars'] = None

        # set to None if should_remove_singletons (nullable) is None
        # and model_fields_set contains the field
        if self.should_remove_singletons is None and "should_remove_singletons" in self.model_fields_set:
            _dict['should_remove_singletons'] = None

        # set to None if should_remove_non_productive_vdj (nullable) is None
        # and model_fields_set contains the field
        if self.should_remove_non_productive_vdj is None and "should_remove_non_productive_vdj" in self.model_fields_set:
            _dict['should_remove_non_productive_vdj'] = None

        # set to None if should_remove_non_productive_cdr3 (nullable) is None
        # and model_fields_set contains the field
        if self.should_remove_non_productive_cdr3 is None and "should_remove_non_productive_cdr3" in self.model_fields_set:
            _dict['should_remove_non_productive_cdr3'] = None

        # set to None if should_remove_incomplete_vdj (nullable) is None
        # and model_fields_set contains the field
        if self.should_remove_incomplete_vdj is None and "should_remove_incomplete_vdj" in self.model_fields_set:
            _dict['should_remove_incomplete_vdj'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterAdditionalOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "should_strip_special_chars": obj.get("should_strip_special_chars") if obj.get("should_strip_special_chars") is not None else False,
            "should_remove_singletons": obj.get("should_remove_singletons") if obj.get("should_remove_singletons") is not None else False,
            "should_remove_non_productive_vdj": obj.get("should_remove_non_productive_vdj") if obj.get("should_remove_non_productive_vdj") is not None else False,
            "should_remove_non_productive_cdr3": obj.get("should_remove_non_productive_cdr3") if obj.get("should_remove_non_productive_cdr3") is not None else False,
            "should_remove_incomplete_vdj": obj.get("should_remove_incomplete_vdj") if obj.get("should_remove_incomplete_vdj") is not None else False
        })
        return _obj


