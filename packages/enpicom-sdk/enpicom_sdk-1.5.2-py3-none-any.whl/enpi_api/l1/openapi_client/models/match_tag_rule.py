# coding: utf-8

"""
    ENPICOM Platform Public API

    The ENPICOM Platform Public API is a powerful tool that enables a wide variety of use cases.                 The architecture of the ENPICOM Platform centers around files, collections, tags and analyses,                 securely managed through cloud-based access.                 The Public API can be used to easily import data, annotate metadata, run analyses and export results.

    The version of the OpenAPI document: 1.0.0
    Contact: info@enpicom.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from enpi_api.l1.openapi_client.models.contains import Contains
from enpi_api.l1.openapi_client.models.ends_with import EndsWith
from enpi_api.l1.openapi_client.models.equals import Equals
from enpi_api.l1.openapi_client.models.greater_than import GreaterThan
from enpi_api.l1.openapi_client.models.is_blank import IsBlank
from enpi_api.l1.openapi_client.models.is_finite import IsFinite
from enpi_api.l1.openapi_client.models.is_infinite import IsInfinite
from enpi_api.l1.openapi_client.models.less_than import LessThan
from enpi_api.l1.openapi_client.models.not_contains import NotContains
from enpi_api.l1.openapi_client.models.not_equals import NotEquals
from enpi_api.l1.openapi_client.models.not_is_blank import NotIsBlank
from enpi_api.l1.openapi_client.models.starts_with import StartsWith
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

MATCHTAGRULE_ONE_OF_SCHEMAS = ["Contains", "EndsWith", "Equals", "GreaterThan", "IsBlank", "IsFinite", "IsInfinite", "LessThan", "NotContains", "NotEquals", "NotIsBlank", "StartsWith"]

class MatchTagRule(BaseModel):
    """
    MatchTagRule
    """
    # data type: Equals
    oneof_schema_1_validator: Optional[Equals] = None
    # data type: NotEquals
    oneof_schema_2_validator: Optional[NotEquals] = None
    # data type: Contains
    oneof_schema_3_validator: Optional[Contains] = None
    # data type: NotContains
    oneof_schema_4_validator: Optional[NotContains] = None
    # data type: StartsWith
    oneof_schema_5_validator: Optional[StartsWith] = None
    # data type: EndsWith
    oneof_schema_6_validator: Optional[EndsWith] = None
    # data type: GreaterThan
    oneof_schema_7_validator: Optional[GreaterThan] = None
    # data type: LessThan
    oneof_schema_8_validator: Optional[LessThan] = None
    # data type: IsBlank
    oneof_schema_9_validator: Optional[IsBlank] = None
    # data type: NotIsBlank
    oneof_schema_10_validator: Optional[NotIsBlank] = None
    # data type: IsFinite
    oneof_schema_11_validator: Optional[IsFinite] = None
    # data type: IsInfinite
    oneof_schema_12_validator: Optional[IsInfinite] = None
    actual_instance: Optional[Union[Contains, EndsWith, Equals, GreaterThan, IsBlank, IsFinite, IsInfinite, LessThan, NotContains, NotEquals, NotIsBlank, StartsWith]] = None
    one_of_schemas: Set[str] = { "Contains", "EndsWith", "Equals", "GreaterThan", "IsBlank", "IsFinite", "IsInfinite", "LessThan", "NotContains", "NotEquals", "NotIsBlank", "StartsWith" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = MatchTagRule.model_construct()
        error_messages = []
        match = 0
        # validate data type: Equals
        if not isinstance(v, Equals):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Equals`")
        else:
            match += 1
        # validate data type: NotEquals
        if not isinstance(v, NotEquals):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotEquals`")
        else:
            match += 1
        # validate data type: Contains
        if not isinstance(v, Contains):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Contains`")
        else:
            match += 1
        # validate data type: NotContains
        if not isinstance(v, NotContains):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotContains`")
        else:
            match += 1
        # validate data type: StartsWith
        if not isinstance(v, StartsWith):
            error_messages.append(f"Error! Input type `{type(v)}` is not `StartsWith`")
        else:
            match += 1
        # validate data type: EndsWith
        if not isinstance(v, EndsWith):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EndsWith`")
        else:
            match += 1
        # validate data type: GreaterThan
        if not isinstance(v, GreaterThan):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GreaterThan`")
        else:
            match += 1
        # validate data type: LessThan
        if not isinstance(v, LessThan):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LessThan`")
        else:
            match += 1
        # validate data type: IsBlank
        if not isinstance(v, IsBlank):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IsBlank`")
        else:
            match += 1
        # validate data type: NotIsBlank
        if not isinstance(v, NotIsBlank):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotIsBlank`")
        else:
            match += 1
        # validate data type: IsFinite
        if not isinstance(v, IsFinite):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IsFinite`")
        else:
            match += 1
        # validate data type: IsInfinite
        if not isinstance(v, IsInfinite):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IsInfinite`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in MatchTagRule with oneOf schemas: Contains, EndsWith, Equals, GreaterThan, IsBlank, IsFinite, IsInfinite, LessThan, NotContains, NotEquals, NotIsBlank, StartsWith. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in MatchTagRule with oneOf schemas: Contains, EndsWith, Equals, GreaterThan, IsBlank, IsFinite, IsInfinite, LessThan, NotContains, NotEquals, NotIsBlank, StartsWith. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into Equals
        try:
            instance.actual_instance = Equals.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotEquals
        try:
            instance.actual_instance = NotEquals.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Contains
        try:
            instance.actual_instance = Contains.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotContains
        try:
            instance.actual_instance = NotContains.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into StartsWith
        try:
            instance.actual_instance = StartsWith.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EndsWith
        try:
            instance.actual_instance = EndsWith.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GreaterThan
        try:
            instance.actual_instance = GreaterThan.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LessThan
        try:
            instance.actual_instance = LessThan.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IsBlank
        try:
            instance.actual_instance = IsBlank.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotIsBlank
        try:
            instance.actual_instance = NotIsBlank.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IsFinite
        try:
            instance.actual_instance = IsFinite.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IsInfinite
        try:
            instance.actual_instance = IsInfinite.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into MatchTagRule with oneOf schemas: Contains, EndsWith, Equals, GreaterThan, IsBlank, IsFinite, IsInfinite, LessThan, NotContains, NotEquals, NotIsBlank, StartsWith. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into MatchTagRule with oneOf schemas: Contains, EndsWith, Equals, GreaterThan, IsBlank, IsFinite, IsInfinite, LessThan, NotContains, NotEquals, NotIsBlank, StartsWith. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], Contains, EndsWith, Equals, GreaterThan, IsBlank, IsFinite, IsInfinite, LessThan, NotContains, NotEquals, NotIsBlank, StartsWith]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


