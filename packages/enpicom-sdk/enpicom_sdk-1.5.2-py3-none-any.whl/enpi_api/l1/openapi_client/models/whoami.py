# coding: utf-8

"""
    ENPICOM Platform Public API

    The ENPICOM Platform Public API is a powerful tool that enables a wide variety of use cases.                 The architecture of the ENPICOM Platform centers around files, collections, tags and analyses,                 securely managed through cloud-based access.                 The Public API can be used to easily import data, annotate metadata, run analyses and export results.

    The version of the OpenAPI document: 1.0.0
    Contact: info@enpicom.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from enpi_api.l1.openapi_client.models.key import Key
from enpi_api.l1.openapi_client.models.organization import Organization
from enpi_api.l1.openapi_client.models.spaces_inner import SpacesInner
from enpi_api.l1.openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class Whoami(BaseModel):
    """
    Information about the current key and who it is assigned to
    """ # noqa: E501
    key: Key
    organization: Organization
    spaces: List[SpacesInner] = Field(description="Information about the spaces that can be accessed with this key")
    user: User
    __properties: ClassVar[List[str]] = ["key", "organization", "spaces", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Whoami from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of key
        if self.key:
            _dict['key'] = self.key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in spaces (list)
        _items = []
        if self.spaces:
            for _item in self.spaces:
                if _item:
                    _items.append(_item.to_dict())
            _dict['spaces'] = _items
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Whoami from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key": Key.from_dict(obj["key"]) if obj.get("key") is not None else None,
            "organization": Organization.from_dict(obj["organization"]) if obj.get("organization") is not None else None,
            "spaces": [SpacesInner.from_dict(_item) for _item in obj["spaces"]] if obj.get("spaces") is not None else None,
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj


