# coding: utf-8

"""
    ENPICOM Platform Public API

    The ENPICOM Platform Public API is a powerful tool that enables a wide variety of use cases.                 The architecture of the ENPICOM Platform centers around files, collections, tags and analyses,                 securely managed through cloud-based access.                 The Public API can be used to easily import data, annotate metadata, run analyses and export results.

    The version of the OpenAPI document: 1.0.0
    Contact: info@enpicom.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Union
from enpi_api.l1.openapi_client.models.start_fasta_clones_export_request_body_fasta_config_headers import StartFastaClonesExportRequestBodyFastaConfigHeaders
from typing import Optional, Set
from typing_extensions import Self

class StartFastaClonesExportRequestBodyFastaConfig(BaseModel):
    """
    Configuration of the Basket FASTA export.
    """ # noqa: E501
    headers: StartFastaClonesExportRequestBodyFastaConfigHeaders
    chains: List[StrictStr] = Field(description="Chains to be exported. Note that different chains will be exported to separate lines")
    sequence: List[Union[StrictFloat, StrictInt]] = Field(description="Configuration of the sequences in the exported FASTA file. In case of multiple                         tags being specified here, sequence values will be concatenated without any separators")
    __properties: ClassVar[List[str]] = ["headers", "chains", "sequence"]

    @field_validator('chains')
    def chains_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['alpha', 'beta', 'delta', 'gamma', 'heavy', 'iota', 'kappa', 'lambda']):
                raise ValueError("each list item must be one of ('alpha', 'beta', 'delta', 'gamma', 'heavy', 'iota', 'kappa', 'lambda')")
        return value

    @field_validator('sequence')
    def sequence_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set([67, 75, 83, 91, 8, 18, 29, 135, 64, 72, 80, 88, 4, 14, 24, 130]):
                raise ValueError("each list item must be one of (67, 75, 83, 91, 8, 18, 29, 135, 64, 72, 80, 88, 4, 14, 24, 130)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StartFastaClonesExportRequestBodyFastaConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of headers
        if self.headers:
            _dict['headers'] = self.headers.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StartFastaClonesExportRequestBodyFastaConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "headers": StartFastaClonesExportRequestBodyFastaConfigHeaders.from_dict(obj["headers"]) if obj.get("headers") is not None else None,
            "chains": obj.get("chains"),
            "sequence": obj.get("sequence")
        })
        return _obj


