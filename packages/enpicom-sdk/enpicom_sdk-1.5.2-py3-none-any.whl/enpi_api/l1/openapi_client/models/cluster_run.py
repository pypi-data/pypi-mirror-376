# coding: utf-8

"""
    ENPICOM Platform Public API

    The ENPICOM Platform Public API is a powerful tool that enables a wide variety of use cases.                 The architecture of the ENPICOM Platform centers around files, collections, tags and analyses,                 securely managed through cloud-based access.                 The Public API can be used to easily import data, annotate metadata, run analyses and export results.

    The version of the OpenAPI document: 1.0.0
    Contact: info@enpicom.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from enpi_api.l1.openapi_client.models.cluster_additional_options import ClusterAdditionalOptions
from enpi_api.l1.openapi_client.models.sequence_feature_identities import SequenceFeatureIdentities
from typing import Optional, Set
from typing_extensions import Self

class ClusterRun(BaseModel):
    """
    Successful Cluster Run configuration
    """ # noqa: E501
    name: StrictStr
    collection_ids: Annotated[List[StrictInt], Field(min_length=1)] = Field(description="Collections to use for clustering, all collections should have the same receptor")
    identities: SequenceFeatureIdentities
    sequence_features: Annotated[List[Optional[StrictInt]], Field(min_length=1)] = Field(description="Tag ids of sequence features to cluster on")
    match_tags: Optional[List[Optional[StrictInt]]] = Field(default=None, description="Tag ids that when matched will cluster together, adding more than one tag id will require all to match")
    additional_options: Optional[ClusterAdditionalOptions] = None
    created_at: Optional[datetime]
    id: StrictStr = Field(description="The identifier of a Cluster run.")
    receptor: StrictStr = Field(description="The receptor of the clones contained in the collection.")
    __properties: ClassVar[List[str]] = ["name", "collection_ids", "identities", "sequence_features", "match_tags", "additional_options", "created_at", "id", "receptor"]

    @field_validator('receptor')
    def receptor_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ig', 'tr']):
            raise ValueError("must be one of enum values ('ig', 'tr')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of identities
        if self.identities:
            _dict['identities'] = self.identities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of additional_options
        if self.additional_options:
            _dict['additional_options'] = self.additional_options.to_dict()
        # set to None if match_tags (nullable) is None
        # and model_fields_set contains the field
        if self.match_tags is None and "match_tags" in self.model_fields_set:
            _dict['match_tags'] = None

        # set to None if additional_options (nullable) is None
        # and model_fields_set contains the field
        if self.additional_options is None and "additional_options" in self.model_fields_set:
            _dict['additional_options'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "collection_ids": obj.get("collection_ids"),
            "identities": SequenceFeatureIdentities.from_dict(obj["identities"]) if obj.get("identities") is not None else None,
            "sequence_features": obj.get("sequence_features"),
            "match_tags": obj.get("match_tags"),
            "additional_options": ClusterAdditionalOptions.from_dict(obj["additional_options"]) if obj.get("additional_options") is not None else None,
            "created_at": obj.get("created_at"),
            "id": obj.get("id"),
            "receptor": obj.get("receptor")
        })
        return _obj


