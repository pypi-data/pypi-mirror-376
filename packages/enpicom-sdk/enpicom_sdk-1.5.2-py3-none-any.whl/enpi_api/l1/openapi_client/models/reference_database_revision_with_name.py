# coding: utf-8

"""
    ENPICOM Platform Public API

    The ENPICOM Platform Public API is a powerful tool that enables a wide variety of use cases.                 The architecture of the ENPICOM Platform centers around files, collections, tags and analyses,                 securely managed through cloud-based access.                 The Public API can be used to easily import data, annotate metadata, run analyses and export results.

    The version of the OpenAPI document: 1.0.0
    Contact: info@enpicom.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ReferenceDatabaseRevisionWithName(BaseModel):
    """
    A single reference database revision with reference database name included.
    """ # noqa: E501
    reference_database_id: StrictStr = Field(description="The identifier of a reference database.")
    reference_database_version: StrictInt = Field(description="The version of a reference database revision.")
    label: StrictStr = Field(description="Version of a reference database revision.")
    created_at: Optional[datetime] = Field(description="Date on which a reference database revision was created.")
    name: StrictStr = Field(description="Name of a reference database.")
    public: Optional[StrictBool] = Field(default=None, description="Determines if a reference database is visible and available to all users and organizations.")
    species: StrictStr = Field(description="Name of the species linked to a reference database.")
    __properties: ClassVar[List[str]] = ["reference_database_id", "reference_database_version", "label", "created_at", "name", "public", "species"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReferenceDatabaseRevisionWithName from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if public (nullable) is None
        # and model_fields_set contains the field
        if self.public is None and "public" in self.model_fields_set:
            _dict['public'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReferenceDatabaseRevisionWithName from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reference_database_id": obj.get("reference_database_id"),
            "reference_database_version": obj.get("reference_database_version"),
            "label": obj.get("label"),
            "created_at": obj.get("created_at"),
            "name": obj.get("name"),
            "public": obj.get("public"),
            "species": obj.get("species")
        })
        return _obj


