# coding: utf-8

"""
    ENPICOM Platform Public API

    The ENPICOM Platform Public API is a powerful tool that enables a wide variety of use cases.                 The architecture of the ENPICOM Platform centers around files, collections, tags and analyses,                 securely managed through cloud-based access.                 The Public API can be used to easily import data, annotate metadata, run analyses and export results.

    The version of the OpenAPI document: 1.0.0
    Contact: info@enpicom.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from enpi_api.l1.openapi_client.models.enrichment_template_fold_change_annotation_inputs import EnrichmentTemplateFoldChangeAnnotationInputs
from typing import Optional, Set
from typing_extensions import Self

class EnrichmentTemplateFoldChangeAnnotation(BaseModel):
    """
    Annotates operation results with a Fold Change of given inputs
    """ # noqa: E501
    name: StrictStr = Field(description="The name of an Enrichment annotation. Has to be unique within a template.")
    type: StrictStr
    inputs: EnrichmentTemplateFoldChangeAnnotationInputs
    position: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["name", "type", "inputs", "position"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['fold_change']):
            raise ValueError("must be one of enum values ('fold_change')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnrichmentTemplateFoldChangeAnnotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of inputs
        if self.inputs:
            _dict['inputs'] = self.inputs.to_dict()
        # set to None if position (nullable) is None
        # and model_fields_set contains the field
        if self.position is None and "position" in self.model_fields_set:
            _dict['position'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnrichmentTemplateFoldChangeAnnotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "type": obj.get("type"),
            "inputs": EnrichmentTemplateFoldChangeAnnotationInputs.from_dict(obj["inputs"]) if obj.get("inputs") is not None else None,
            "position": obj.get("position")
        })
        return _obj


