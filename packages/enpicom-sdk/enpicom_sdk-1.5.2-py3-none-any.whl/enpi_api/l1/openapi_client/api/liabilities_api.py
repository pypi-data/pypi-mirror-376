# coding: utf-8

"""
    ENPICOM Platform Public API

    The ENPICOM Platform Public API is a powerful tool that enables a wide variety of use cases.                 The architecture of the ENPICOM Platform centers around files, collections, tags and analyses,                 securely managed through cloud-based access.                 The Public API can be used to easily import data, annotate metadata, run analyses and export results.

    The version of the OpenAPI document: 1.0.0
    Contact: info@enpicom.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from enpi_api.l1.openapi_client.models.liabilities_work import LiabilitiesWork
from enpi_api.l1.openapi_client.models.workflow_started_response import WorkflowStartedResponse

from enpi_api.l1.openapi_client.api_client import ApiClient, RequestSerialized
from enpi_api.l1.openapi_client.api_response import ApiResponse
from enpi_api.l1.openapi_client.rest import RESTResponseType


class LiabilitiesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def start_liabilities(
        self,
        liabilities_work: Annotated[LiabilitiesWork, Field(description="Body")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WorkflowStartedResponse:
        """Start Liabilities Task

        <!-- theme: info --> > #### Starts a job > > This endpoint starts a job. A response will be returned with the job ID, while works will be done in the background. > For more information on jobs, see the [get job](getJob) endpoint. <!-- theme: info --> > #### Clone resolving > > This endpoint uses passed clone and sequence IDs in order to resolve clones. For each > clone a maximum of one big chain sequence and one small chain sequence will be picked, > resulting in a set of maximally two sequences per clone. Sequences matched > with passed sequence IDs have priority over internally resolved sequences, meaning that > if possible, they will be picked as sequences for the resolved clones. Use this endpoint to initialize a liabilities computation on a given clone or set of clones.  Liabilities computation will result in a set of new tags being added to the existing sequences matching the clone and sequence IDs sent in the payload. If liabilities computation was already performed on a given clone or set of clones, their tag values will get updated if needed.  In order to modify the settings of liabilities computation run, which directly affect the achieved liabilities computation results, please visit the Developability Assessment configuration on the ENPICOM Platform.

        :param liabilities_work: Body (required)
        :type liabilities_work: LiabilitiesWork
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_liabilities_serialize(
            liabilities_work=liabilities_work,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "WorkflowStartedResponse",
            '400': "StartLiabilities400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def start_liabilities_with_http_info(
        self,
        liabilities_work: Annotated[LiabilitiesWork, Field(description="Body")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WorkflowStartedResponse]:
        """Start Liabilities Task

        <!-- theme: info --> > #### Starts a job > > This endpoint starts a job. A response will be returned with the job ID, while works will be done in the background. > For more information on jobs, see the [get job](getJob) endpoint. <!-- theme: info --> > #### Clone resolving > > This endpoint uses passed clone and sequence IDs in order to resolve clones. For each > clone a maximum of one big chain sequence and one small chain sequence will be picked, > resulting in a set of maximally two sequences per clone. Sequences matched > with passed sequence IDs have priority over internally resolved sequences, meaning that > if possible, they will be picked as sequences for the resolved clones. Use this endpoint to initialize a liabilities computation on a given clone or set of clones.  Liabilities computation will result in a set of new tags being added to the existing sequences matching the clone and sequence IDs sent in the payload. If liabilities computation was already performed on a given clone or set of clones, their tag values will get updated if needed.  In order to modify the settings of liabilities computation run, which directly affect the achieved liabilities computation results, please visit the Developability Assessment configuration on the ENPICOM Platform.

        :param liabilities_work: Body (required)
        :type liabilities_work: LiabilitiesWork
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_liabilities_serialize(
            liabilities_work=liabilities_work,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "WorkflowStartedResponse",
            '400': "StartLiabilities400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def start_liabilities_without_preload_content(
        self,
        liabilities_work: Annotated[LiabilitiesWork, Field(description="Body")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Start Liabilities Task

        <!-- theme: info --> > #### Starts a job > > This endpoint starts a job. A response will be returned with the job ID, while works will be done in the background. > For more information on jobs, see the [get job](getJob) endpoint. <!-- theme: info --> > #### Clone resolving > > This endpoint uses passed clone and sequence IDs in order to resolve clones. For each > clone a maximum of one big chain sequence and one small chain sequence will be picked, > resulting in a set of maximally two sequences per clone. Sequences matched > with passed sequence IDs have priority over internally resolved sequences, meaning that > if possible, they will be picked as sequences for the resolved clones. Use this endpoint to initialize a liabilities computation on a given clone or set of clones.  Liabilities computation will result in a set of new tags being added to the existing sequences matching the clone and sequence IDs sent in the payload. If liabilities computation was already performed on a given clone or set of clones, their tag values will get updated if needed.  In order to modify the settings of liabilities computation run, which directly affect the achieved liabilities computation results, please visit the Developability Assessment configuration on the ENPICOM Platform.

        :param liabilities_work: Body (required)
        :type liabilities_work: LiabilitiesWork
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_liabilities_serialize(
            liabilities_work=liabilities_work,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "WorkflowStartedResponse",
            '400': "StartLiabilities400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _start_liabilities_serialize(
        self,
        liabilities_work,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if liabilities_work is not None:
            _body_params = liabilities_work


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'enpiApiKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/liabilities/start',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


