Metadata-Version: 2.4
Name: pars_hitmotop
Version: 1.0.4
Home-page: https://github.com/JoyHubN/pars_hitmos
Download-URL: https://github.com/JoyHubN/pars_hitmos/arhive/v1.0.4.zip
Author: JoyHubN
Author-email: Prufu@yandex.ru
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: Implementation :: PyPy
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: beautifulsoup4==4.13.4
Requires-Dist: fake-useragent==2.2.0
Requires-Dist: requests==2.32.4
Requires-Dist: tenacity==9.1.2
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: download-url
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-dist

# Оглавление
1. [Что именно парсит?](https://github.com/PY079/pars_hitmotop/blob/main/README.md#что-именно-парсит)
2. [Как использовать модуль entered_tracks](https://github.com/PY079/pars_hitmotop/blob/main/README.md#как-использовать-модуль-entered_tracks)
3. [Как использовать модуль rating_tracks_count](https://github.com/PY079/pars_hitmotop/blob/main/README.md#как-использовать-модуль-rating_tracks_count)
4. [Как использовать модуль rating_tracks_page](https://github.com/PY079/pars_hitmotop/blob/main/README.md#как-использовать-модуль-rating_tracks_page)
5. [Что можно достать при запросе?](https://github.com/PY079/pars_hitmotop/blob/main/README.md#что-можно-достать-при-запросе)
6. [Сколько времени понадобиться для запросов?](https://github.com/PY079/pars_hitmotop/blob/main/README.md#сколько-времени-понадобиться-для-получения-всех-нужных-данных-с-сайта)
    * [Рейтинговые треки (по страницам)](https://github.com/JoyHubN/pars_hitmos/blob/main/README.md#рейтинговые-треки-по-страницам)
    * [Рейтинговые треки и введенные треки (по трекам)](https://github.com/JoyHubN/pars_hitmos/blob/main/README.md#рейтинговые-треки-и-введенные-треки-по-трекам)
____
Этот проект парсит [музыкальный сайт](https://hitmos.me/)
____
# Что именно парсит?
1. [Рейтинговые треки](https://hitmos.me/songs/top-rated) от 1 до 48;
2. Тоже [рейтинговые треки](https://hitmos.me/songs/top-rated) но можно выбрать количество страниц, с которых будет произведен парсинг;
3. Треки введенные пользователем. Парсит от 1 трека до конечной страницы (на одной странице 48 треков)
____
## Как использовать модуль *entered_tracks*
```
from parse_hitmos.entered_tracks import EnteredTrack
result = EnteredTrack('linkin park',10)
```
1 аргументом (music_name) передается название песни или автора. 2 Аргументом (count) передается количество треков
____
## Как использовать модуль *rating_tracks_count*
```
from parse_hitmos.rating_tracks_count import RatingCount
result = RatingCount(10)
```
1 аргументом (count) передается количество песен
____
## Как использовать модуль *rating_tracks_page*
```
from parse_hitmos.rating_tracks_page import RatingPage
result = RatingPage(10)
```
1 аргументом (count) передается количество страниц (max 11)
____
# Что можно достать при запросе?
Все возвращается в виде list
| Метод | Описание |
|----------------|:---------|
| result.get_author | Получить автора трека|
|result.get_title| Получить название трека|
|result.get_url_down|Получить ссылку на скачивание трека|
|result.direct_download_link|Получить прямую ссылку на скачивание трека|
|result.get_duration|Получить продолжительность трека|
|result.get_picture_url|Получить ссылку на обложку трека|
|result.get_url_track|Получить ссылку трек|
|result.get_all|Получить все данные в виде словаря|
|result.get_author_title|Получить лист в виде автор — название|

____
# Сколько времени понадобиться для получения всех нужных данных с сайта
## Рейтинговые треки (по страницам)

| Время | Прямые ссылки | Кол-во треков |
|:---------|:---------|:---------|
| 5с — 6с | `False` | 11 страниц (~528) |
| 5с — 6с | `False` | 10 страниц (~480) | 
| 4с — 6с | `False` | 9 страниц (~432) | 
| 4с — 6с | `False` | 8 страниц (~384) | 
| 4с — 5с | `False` | 7 страниц (~336) | 
| 3с — 4с | `False` | 6 страниц (~288) | 
| 3с — 4с | `False` | 5 страниц (~240) | 
| 2с — 4с | `False` | 4 страниц (~192) | 
| 2с — 3с | `False` | 3 страниц (~144) | 
| 1с — 2с | `False` | 2 страниц (~96) | 
| 1с — 2c | `False` | 1 страниц (~48) | 
| 126с — 223с (~2.1м — ~4м) | `True` | 11 страниц (~528) | 
| 116с — 139с (~2м) | `True` | 10 страниц (~480) | 
| 106с — 131с (~1.6м — 2м) | `True` | 9 страниц (~432) | 
| 97с — 185с (~1.6м — 2м) | `True` | 8 страниц (~384) | 
| 76с — 94с (~1.2м — ~1.5м) | `True` | 7 страниц (~336) | 
| 66с — 74с (~1м — ~1.23) | `True` | 6 страниц (~288) | 
| 54с — 61с | `True` | 5 страниц (~240) | 
| 43с — 49с | `True` | 4 страниц (~192) | 
| 32с — 49с | `True` | 3 страниц (~144) | 
| 25с — 27с | `True` | 2 страниц (~96) | 
| 14с — 20с | `True` | 1 страниц (~48) | 


## Рейтинговые треки и введенные треки (по трекам)
| Время | Прямые ссылки | Кол-во треков |
|:---------|:---------|:---------|
| 1с — ~3с | `False` | 48 |
| 1с — 2с | `False` | 1 |
| 23с — 28с | `True` | 48 |
| 3с — 4с | `True` | 1 |

____
