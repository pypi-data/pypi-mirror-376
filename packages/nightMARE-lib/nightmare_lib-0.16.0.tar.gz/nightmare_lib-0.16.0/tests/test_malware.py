# coding: utf-8

import pytest
import zipfile
import pathlib
import hashlib

CORPUS_PATH = (
    pathlib.Path(__file__).resolve().parent / pathlib.Path("corpus.zip")
).absolute()

CORPUS_PASSWORD = b"infected"


@pytest.fixture
def corpus() -> dict[str, bytes]:
    if not CORPUS_PATH.exists():
        raise pytest.fail("Please provide corpus archive")

    result = {}
    with zipfile.ZipFile(CORPUS_PATH, "r") as z:
        z.setpassword(CORPUS_PASSWORD)
        for x in z.filelist:
            if x.external_attr & 0x10:
                continue
            result[x.filename] = z.read(x.filename)

        return result


def get_malware(corpus: dict[str, bytes], name: str) -> bytes:
    if not (m := corpus.get(name, None)):
        raise pytest.skip("Malware not found in the corpus")
    return m


def test_blister_0(corpus: dict[str, bytes]) -> None:
    from nightMARE.malware.blister import configuration

    c = configuration.extract_configuration(
        get_malware(
            corpus,
            "blister/cba30fb1731e165acc256d99d32f3c9e5abfa27d152419d24a91d8b79c5c5cb0",
        )
    )

    assert c.flag == 1578304
    assert c.domain_hash == 1740165323
    assert c.payload_export_hash == 3521509683


def test_ghostpulse_0(corpus: dict[str, bytes]) -> None:
    from nightMARE.malware.ghostpulse import payload_idat

    p = payload_idat.extract_payload(
        get_malware(
            corpus,
            "ghostpulse/c91da7c04528647320e3572f9ad64f71d394c812baab7ca8ae2fe4d16d210b63",
        )
    )

    assert (
        hashlib.sha256(p).hexdigest()
        == "e8828e39dea69dbd791a58526af64439ae6ac3e356a706a7db701718bb3dff4d"
    )


def test_ghostpulse_1(corpus: dict[str, bytes]) -> None:
    from nightMARE.malware.ghostpulse import payload_pixels

    p = payload_pixels.extract_payload(
        get_malware(
            corpus,
            "ghostpulse/7e5732d3bb5e6a2d580cde8efe88476068d6f5c863a3a6d5357116055b0fdf05",
        )
    )

    assert (
        hashlib.sha256(p).hexdigest()
        == "2432a84df33e7ae5deac262a490bbe1444e8090e9eed1c6fe3d3abfdb7236bd4"
    )


def test_latrodectus_0(corpus: dict[str, bytes]) -> None:
    from nightMARE.malware.latrodectus.v1_9 import configuration

    c = configuration.extract_configuration(
        get_malware(
            corpus,
            "latrodectus/013a92ea6df2995a8cdef11527dc4bda0b4a2e8dc642f7461c1cedb42297cadb",
        )
    )

    assert c.campaign_hash == 3078948156
    assert (
        c.rc4_key == b"8zM0v1h7eHi6ymke7QBRDZn9EXdAQ2BHePQRXBdsn56vC6645Erd2HwMvbaM423i"
    )
    assert c.version == b"2.0.6"


def test_lobshot_0(corpus: dict[str, bytes]) -> None:
    from nightMARE.malware.lobshot import configuration

    c = configuration.extract_configuration(
        get_malware(
            corpus,
            "lobshot/e4ea88887753a936eaf3361dcc00380b88b0c210dcbde24f8f7ce27991856bf6",
        )
    )

    assert c.ip == b"95.217.125.200"
    assert c.port == 443


def test_lumma_0(corpus: dict[str, bytes]) -> None:
    from nightMARE.malware.lumma import configuration

    c = configuration.extract_configuration(
        get_malware(
            corpus,
            "lumma/22e09230e7ede76d35386be738e8ec9869a609bcc4519e5e1b174ed0f2546148",
        )
    )

    assert c.c2 == [
        b"https://togomwd.top/reiu",
        b"https://mastwin.in/qsaz",
        b"https://tiltyufaz.ru/tlxa",
        b"https://runmgov.ru/tixd",
        b"https://semipervaz.ru/xued",
        b"https://capitalior.ru/akts",
        b"https://retrofik.ru/jgur",
        b"https://shagkeg.ru/xkzd",
        b"https://copulardi.ru/xhza",
    ]


def test_lumma_1(corpus: dict[str, bytes]) -> None:
    from nightMARE.malware.lumma import configuration

    c = configuration.extract_configuration(
        get_malware(
            corpus,
            "lumma/26803ff0e079e43c413e10d9a62d344504a134d20ad37af9fd3eaf5c54848122",
        )
    )

    assert c.c2 == [
        b"https://mocadia.com/iuew",
        b"https://mastwin.in/qsaz",
        b"https://ordinarniyvrach.ru/xiur",
        b"https://yamakrug.ru/lzka",
        b"https://vishneviyjazz.ru/neco",
        b"https://yrokistorii.ru/uqya",
        b"https://stolewnica.ru/xjuf",
        b"https://visokiywkaf.ru/mmtn",
        b"https://kletkamozga.ru/iwyq",
    ]


def test_netwire_0(corpus: dict[str, bytes]) -> None:
    from nightMARE.malware.netwire import configuration

    c = configuration.extract_configuration(
        get_malware(
            corpus,
            "netwire/a430e43fc6c063e668f3f98dc529e296c3b8c168e857d5b72a95966d7eb219c6",
        )
    )

    assert c.c2_list[0] == b"184.75.221.211:5614"
    assert c.c2_list[1] == b"213.152.162.5:5614"
    assert c.mutex == b"QuFDTHWH"


def test_redlinestealer_0(corpus: dict[str, bytes]) -> None:
    from nightMARE.malware.redlinestealer import configuration

    c = configuration.extract_configuration(
        get_malware(
            corpus,
            "redlinestealer/b78615662c8c362d920c3f9273352d0da085610774f1fa5a96cda4ec50ca0507",
        )
    )

    assert c.ip == b"185.215.113.121"
    assert c.port == 15386
    assert c.id == b"jan3top"


def test_remcos_0(corpus: dict[str, bytes]) -> None:
    from nightMARE.malware.remcos import configuration

    c = configuration.extract_configuration(
        get_malware(
            corpus,
            "remcos/0af76f2897158bf752b5ee258053215a6de198e8910458c02282c2d4d284add5",
        )
    )

    assert c["c2_list"][0]["host"] == "remchukwugixiemu4.duckdns.org"
    assert c["c2_list"][0]["port"] == 57844
    assert c["botnet"] == "ZYNOVA"


def test_smokeloader_0(corpus: dict[str, bytes]) -> None:
    from nightMARE.malware.smokeloader import configuration

    c = configuration.extract_configuration(
        get_malware(
            corpus,
            "smokeloader/3a189a736cfdfbb1e3789326c35cecfa901a2adccc08c66c5de1cac8e4c1791b",
        )
    )

    assert c["c2"] == b"http://77.91.68.29/fks/"


def test_smokeloader_1(corpus: dict[str, bytes]) -> None:
    from nightMARE.malware.smokeloader import configuration

    c = configuration.extract_configuration(
        get_malware(
            corpus,
            "smokeloader/fe2489230d024f5e0e7d0da0210f93e70248dc282192c092cbb5e0eddc7bd528",
        )
    )

    assert c["c2"] == b"http://100xmargin.com/tmp/index.php"


def test_stealc_0(corpus: dict[str, bytes]) -> None:
    from nightMARE.malware.stealc import configuration

    c = configuration.extract_configuration(
        get_malware(
            corpus,
            "stealc/03b8702195788a3d8a4aedb5a056c69deac86b2dfeddc234ee013098ded69799",
        )
    )

    assert c.c2 == b"http://109.107.181.33/de4846fc29f26952.php"
    assert c.key == b"8559933940585986044472116266"


def test_strelastealer_0(corpus: dict[str, bytes]) -> None:
    from nightMARE.malware.strelastealer import payload

    p = payload.extract_payload(
        get_malware(
            corpus,
            "strelastealer/d134b70b19e80cd1c2f1cc9ba01b09b68d1e33c7d255157303918da85753d99a",
        )
    )

    assert (
        hashlib.sha256(p).hexdigest()
        == "0f0d78a8071fb951e0506435fca5554251e95e0d6c8aab27432aba7c03323eec"
    )


def test_warmcookie(corpus: dict[str, bytes]) -> None:
    from nightMARE.malware.warmcookie import configuration

    c = configuration.extract_configuration(
        get_malware(
            corpus,
            "warmcookie/5bca7f1942e07e8c12ecd9c802ecdb96570dfaaa1f44a6753ebb9ffda0604cb4",
        )
    )

    assert c.c2[0] == b'https://170.130.165.112'
    assert c.rc4_key == b"416590bdc875e4474a4d"
    assert c.campaign == b"traffic2"


def test_xorddos_0(corpus: dict[str, bytes]) -> None:
    from nightMARE.malware.xorddos import configuration

    c = configuration.extract_configuration(get_malware(corpus, "xorddos/413_vt"))

    assert c["key"] == b"BE2FA46ABA9541F2"
    assert c["c2"][0] == b"api.markerbio.com:112"
    assert c["c2"][1] == b"api.enoan2107.com:112"
    assert c["urls"][0] == b"http://qq.com/lib.xlsx"
    assert c["urls"][1] == b"http://qq.com/lib.asp"


if __name__ == "__main__":
    pytest.main(["-s", "-v", __file__])
