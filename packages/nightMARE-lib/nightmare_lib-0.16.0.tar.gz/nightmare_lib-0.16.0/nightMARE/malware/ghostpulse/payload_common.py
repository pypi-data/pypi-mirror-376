# coding: "utf-8"

from nightMARE.analysis import reversing
from nightMARE.core import bits

STAGE_2_SIZE_OFFSET = 8
STAGE2_CONFIGURATION_SIZE = 0x3DD

STAGE_3_SIZE_OFFSET = 0xEEC
STAGE3_CONFIGURATION_SIZE = 0xEE4

STAGE_3_KEY_SIZE = 200

PAYLOAD_SIZE_OFFSET = 0xCA8


def get_decrypted_payload(third_stage: bytes) -> bytes:
    """
    Decrypt the payload from the third stage of GhostPulse malware using XOR with a key.

    :param third_stage: The raw bytes of the third stage binary.
    :return: The decrypted payload as a byte sequence.
    """

    rz = reversing.Rizin.load(third_stage)
    return bits.xor(rz.get_data(STAGE_3_KEY_SIZE), rz.get_data(0, STAGE_3_KEY_SIZE))


def get_second_stage(first_stage: bytes) -> bytes:
    """
    Extract the second stage binary from the first stage of GhostPulse malware.

    :param first_stage: The raw bytes of the first stage binary.
    :return: The second stage binary as a byte sequence.
    """

    rz = reversing.Rizin.load(first_stage)
    return rz.get_data(rz.get_u32(STAGE_2_SIZE_OFFSET) + STAGE2_CONFIGURATION_SIZE)


def get_third_stage(second_stage: bytes) -> bytes:
    """
    Extract the third stage binary from the second stage of GhostPulse malware.

    :param second_stage: The raw bytes of the second stage binary.
    :return: The third stage binary as a byte sequence.
    """

    rz = reversing.Rizin.load(second_stage)
    return rz.get_data(
        rz.get_u32(STAGE_3_SIZE_OFFSET) + STAGE3_CONFIGURATION_SIZE,
        rz.get_u32(PAYLOAD_SIZE_OFFSET),
    )
