# coding: utf-8


def decrypt_string(string: bytes, key: bytes) -> bytes:
    """
    Implements the custom RC4 decryption algorithm used in Stealc.

    This function performs a modified version of the RC4 encryption algorithm, where the decryption
    process only XORs the byte with the keystream byte if the byte and the keystream byte are not equal.
    It operates on a byte string (`string`) using a `key` to generate a keystream for the XOR operation.

    :param string: The encrypted byte string that needs to be decrypted.
    :param key: The key (in bytes) used to generate the keystream for decryption.
    :return: The decrypted byte string.
    """

    # Initial S-Box setup
    SBOX = list(range(256))
    key_length = len(key)
    plaintext = bytearray(string)
    j = 0

    # Key scheduling algorithm (KSA)
    for i in range(256):
        j = (j + SBOX[i] + key[i % key_length]) % 256
        SBOX[i], SBOX[j] = SBOX[j], SBOX[i]

    # Pseudo-Random Generation Algorithm (PRGA) with custom XOR condition
    i = j = 0
    for idx, byte in enumerate(string):
        i = (i + 1) % 256
        j = (j + SBOX[i]) % 256
        SBOX[i], SBOX[j] = SBOX[j], SBOX[i]
        keystream_byte = SBOX[(SBOX[i] + SBOX[j]) % 256]
        if byte != keystream_byte:  # Only XOR if byte and keystream_byte are not equal
            plaintext[idx] = byte ^ keystream_byte

    return bytes(plaintext)
