# coding: utf-8

import dataclasses

from nightMARE.analysis import emulation
from nightMARE.analysis import reversing
from nightMARE.core import regex


C2_LIST_MAX_LENGTH = 0xFF
C2_SIZE = 0x80

CHACHA20_CTX_SIZE = 0x40
CHACHA20_INITIAL_COUNTER = 2
CHACHA20_KEY_SIZE = 0x20
CHACHA20_NONCE_SIZE = 8

CRYPTO_SETUP_PATTERN = "b838?24?00b???????00b???????0096f3a5"
DECRYPTION_FUNCTION_PATTERN = "5553575681ec1?0100008b??243?01000085??0f84??080000"
C2_DECRYPTION_BRANCH_PATTERN = "8d8?e0?24?008d7424??ff3?565?68????4500e8????ffff"


@dataclasses.dataclass
class Configuration(object):
    """
    Stores the extracted malware configuration.
    """

    c2: list[bytes]


def build_crypto_context(key: bytes, nonce: bytes, initial_counter: int) -> bytes:
    """
    Constructs a ChaCha20 crypto context from a key, nonce, and counter.

    :param key: The ChaCha20 key.
    :param nonce: The ChaCha20 nonce.
    :param initial_counter: The initial counter value for the ChaCha20 stream.
    :return: A bytes object representing the initialized crypto context.
    """

    crypto_context = bytearray(0x40)
    crypto_context[0x10:0x30] = key
    crypto_context[0x30] = initial_counter
    crypto_context[0x38:0x40] = nonce
    return bytes(crypto_context)


def decrypt_c2_list(
    binary: bytes, encrypted_c2_list: list[bytes], key: bytes, nonce: bytes
) -> list[bytes]:
    """
    Decrypts a list of C2 server addresses using emulation.

    :param binary: The malware binary content.
    :param encrypted_c2_list: A list of encrypted C2 address buffers.
    :param key: The ChaCha20 decryption key.
    :param nonce: The ChaCha20 decryption nonce.
    :return: A list of decrypted C2 server addresses.
    """

    decryption_function_address = get_decryption_function_address(binary)

    emu = emulation.WindowsEmulator(True)
    emu.load_pe(binary, 0x10000)

    chacha_ctx_address = emu.allocate_memory(CHACHA20_CTX_SIZE)
    emu.unicorn.mem_write(
        chacha_ctx_address,
        build_crypto_context(
            key,
            nonce,
            CHACHA20_INITIAL_COUNTER,
        ),
    )

    decrypted_c2_list = []
    for encrypted_c2 in encrypted_c2_list:
        encrypted_buffer_address = emu.allocate_memory(C2_SIZE)
        decrypted_buffer_address = emu.allocate_memory(C2_SIZE)
        emu.unicorn.mem_write(encrypted_buffer_address, encrypted_c2)

        emu.push(C2_SIZE)
        emu.push(decrypted_buffer_address)
        emu.push(encrypted_buffer_address)
        emu.push(chacha_ctx_address)

        emu.do_call(decryption_function_address, emu.image_base)
        emu.unicorn.emu_start(decryption_function_address, emu.image_base)

        decrypted_c2 = bytes(
            emu.unicorn.mem_read(decrypted_buffer_address, C2_SIZE)
        ).split(b"\x00")[0]

        if not regex.get_regex(regex.RegexOptions.PRINTABLE_STRING_REGEX, True).match(
            decrypted_c2
        ):
            break

        decrypted_c2_list.append(b"https://" + decrypted_c2)

        emu.pop()
        emu.pop()
        emu.pop()
        emu.pop()

        emu.free_memory(encrypted_buffer_address, C2_SIZE)
        emu.free_memory(decrypted_buffer_address, C2_SIZE)

    return decrypted_c2_list


def get_decryption_function_address(binary: bytes) -> int:
    """
    Finds the address of the decryption function within the binary.

    :param binary: The malware binary content.
    :return: The virtual address of the decryption function.
    :exception RuntimeError: If the decryption function pattern is not found.
    """

    if x := reversing.Rizin.load(binary).find_pattern(
        DECRYPTION_FUNCTION_PATTERN, reversing.Rizin.PatternType.HEX_PATTERN
    ):
        return x[0]["address"]

    raise RuntimeError("Failed to find decryption function address")


def get_decryption_key_and_nonce(binary: bytes) -> tuple[bytes, bytes]:
    """
    Extracts the decryption key and nonce from the binary.

    :param binary: The malware binary content.
    :return: A tuple containing the key and nonce as bytes objects.
    :exception RuntimeError: If the crypto setup pattern is not found.
    """

    rz = reversing.Rizin.load(binary)

    if not (
        x := rz.find_pattern(
            CRYPTO_SETUP_PATTERN, reversing.Rizin.PatternType.HEX_PATTERN
        )
    ):
        raise RuntimeError("Failed to find crypto setup pattern virtual address")

    crypto_setup_va = x[0]["address"]
    key_and_nonce_address = rz.disassemble(crypto_setup_va, 1)[0]["opex"]["operands"][
        1
    ]["value"]

    return rz.get_data(key_and_nonce_address, CHACHA20_KEY_SIZE), rz.get_data(
        key_and_nonce_address + CHACHA20_KEY_SIZE, CHACHA20_NONCE_SIZE
    )


def get_encrypted_c2_list(binary: bytes) -> list[bytes]:
    """
    Reads the list of encrypted C2 server blocks from the binary.

    :param binary: The malware binary content.
    :return: A list of bytes, where each item is an encrypted C2 block.
    """

    rz = reversing.Rizin.load(binary)

    address = get_encrypted_c2_list_address(binary)
    encrypted_c2 = []
    for ea in range(address, address + (C2_LIST_MAX_LENGTH * C2_SIZE), C2_SIZE):
        encrypted_c2.append(rz.get_data(ea, C2_SIZE))

    return encrypted_c2


def get_encrypted_c2_list_address(binary: bytes) -> int:
    """
    Finds the start address of the encrypted C2 list in the binary.

    :param binary: The malware binary content.
    :return: The virtual address of the encrypted C2 list.
    :exception RuntimeError: If the C2 decryption branch pattern is not found.
    """

    rz = reversing.Rizin.load(binary)

    if not len(
        x := rz.find_pattern(
            C2_DECRYPTION_BRANCH_PATTERN, reversing.Rizin.PatternType.HEX_PATTERN
        )
    ):
        raise RuntimeError("Failed to find c2 decryption pattern")

    c2_decryption_va = x[0]["address"]
    return rz.disassemble(c2_decryption_va, 1)[0]["opex"]["operands"][1]["disp"]


def extract_configuration(binary: bytes) -> Configuration:
    """
    Extracts the full malware configuration by orchestrating the decryption process.

    :param binary: The malware binary content.
    :return: A `Configuration` object containing the extracted data.
    """

    return Configuration(
        decrypt_c2_list(
            binary, get_encrypted_c2_list(binary), *get_decryption_key_and_nonce(binary)
        )
    )
