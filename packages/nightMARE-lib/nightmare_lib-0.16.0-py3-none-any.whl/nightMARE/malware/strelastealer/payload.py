# coding: "utf-8"

from nightMARE.core import bits
from nightMARE.core import cast
from nightMARE.analysis import reversing

KEY_OFFSET = 4
KEY_SIZE = 1024


def extract_payload(binary: bytes) -> bytes:
    """
    Extracts the StrelaStealer executable from packed code and returns the decrypted executable.

    This function loads a binary using Rizin, searches for the `.data` section, and extracts
    the payload and decryption key. The payload is then decrypted using an XOR operation with
    the extracted key.

    :param binary: The byte data of the packed binary (StrelaStealer).
    :return: The decrypted StrelaStealer executable as bytes.
    :raises RuntimeError: If the `.data` section cannot be found or there are issues extracting the payload.
    """

    rz = reversing.Rizin.load(binary)
    if not (data_section := rz.get_section(".data")):
        raise RuntimeError(".data section not found")

    payload_size = cast.u32(data_section[:KEY_OFFSET])
    key = data_section[KEY_OFFSET : KEY_OFFSET + KEY_SIZE]
    payload = data_section[KEY_OFFSET + KEY_SIZE : KEY_OFFSET + KEY_SIZE + payload_size]

    return bits.xor(payload, key)
