# coding: "utf-8"

import base64
import re
import json

from nightMARE.malware.stealc import crypto
from nightMARE.core import utils
from nightMARE.analysis import reversing


KEY_REGEX = re.compile(b"[0-9]{28}")
URI_TLD_REGEX = re.compile(b"/\\b[\\w.-]+\\.[a-zA-Z]{2,}\\b")


class Configuration(object):
    def __init__(self, c2: bytes, key: bytes):
        """
        Initializes the Configuration object.

        :param c2: The C2 configuration (as bytes).
        :param key: The key used for decryption (as bytes).
        """

        self.c2 = c2
        self.key = key

    def __repr__(self) -> str:
        """
        Provides a string representation of the Configuration object.

        :return: A JSON-formatted string containing the `c2` and `key` attributes.
        """

        return json.dumps(
            {"c2": self.c2.decode("utf-8"), "key": self.key.decode("utf-8")}
        )


def get_decrypted_strings(key: bytes, candidate_strings: list[bytes]) -> list[bytes]:
    """
    Decrypts the candidate strings using the provided key.

    This function identifies the strings that are base64-encoded and attempts to decrypt
    them using the specified `key`. If no strings are successfully decrypted, an error is raised.

    :param key: The decryption key used to decrypt the strings.
    :param candidate_strings: A list of candidate strings (in bytes) to be decrypted.

    :return: A list of decrypted strings (as bytes).
    :raises RuntimeError: If no base64-encoded strings are successfully decrypted.
    """

    decrypted_strings = [
        crypto.decrypt_string(base64.b64decode(x), key)
        for x in filter(utils.is_base64, candidate_strings)
    ]

    if not decrypted_strings:
        raise RuntimeError("Failed to decrypt strings")

    return decrypted_strings


def get_key(candidate_strings: list[bytes]) -> bytes:
    """
    Extracts the encryption key from a list of candidate strings.

    This function searches through the list of candidate strings to find a match
    for the encryption key, which is expected to be a 28-digit number.

    :param candidate_strings: A list of strings (in bytes) from which the key is to be extracted.

    :return: The encryption key (as bytes).
    :raises RuntimeError: If no key is found.
    """

    for string in candidate_strings:
        if match := re.search(KEY_REGEX, string):
            return match.group(0)
    else:
        raise RuntimeError("Failed to find key")


def get_candidate_strings(binary: bytes) -> list[bytes]:
    """
    Extracts candidate strings from a binary file.

    This function uses Rizin to analyze the binary file and retrieve ASCII strings from the data section.

    :param binary: The binary file data to analyze.

    :return: A list of candidate strings (in bytes) extracted from the binary.
    :raises RuntimeError: If no ASCII strings are found in the data section.
    """

    rz = reversing.Rizin.load(binary)
    candidate_strings = [
        entry["string"].encode("utf-8")
        for entry in rz.get_strings()
        if entry.get("type") == "ascii"
    ]

    if not candidate_strings:
        raise RuntimeError("Failed to find ASCII strings in data section")

    return candidate_strings


def get_c2(decrypted_strings: list[bytes]) -> bytes:
    """
    Retrieves the C2 URL from a list of decrypted strings.

    This function searches through the list of decrypted strings to find a URL and its corresponding
    URI path with a valid TLD (top-level domain). The first valid URL found is returned.

    :param decrypted_strings: A list of decrypted strings (in bytes), which may contain URLs.

    :return: The full C2 URL (as bytes) constructed from the base URL and URI.
    :raises RuntimeError: If no valid URL is found.
    """

    url = None
    uri = b""
    for string in decrypted_strings:
        if url is None and utils.is_url(string):
            url = string
        elif match := re.search(URI_TLD_REGEX, string):
            uri = match.group(0)
            if url:
                break

    if url is None:
        raise RuntimeError("Failed to find URL string")

    return url + uri


def extract_configuration(binary: bytes) -> Configuration:
    """
    Extracts the configuration from the given binary data.

    This function retrieves candidate strings from the binary, identifies the encryption key,
    decrypts the strings, and then extracts the C2 URL. The configuration is returned as a
    `Configuration` object containing both the C2 URL and the key.

    :param binary: The binary data from which to extract the configuration.

    :return: A `Configuration` object containing the C2 URL and the key.
    """

    candidate_strings = get_candidate_strings(binary)
    key = get_key(candidate_strings)
    return Configuration(get_c2(get_decrypted_strings(key, candidate_strings)), key)
