# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import MessageReactionSchemaOptions
    from . import mms, rcs, send
    from .send import SendMmsResponse, SendMmsSchemaOptions, SendRcsResponse, SendSmsResponse, SendSmsSchemaOptions
_dynamic_imports: typing.Dict[str, str] = {
    "MessageReactionSchemaOptions": ".types",
    "SendMmsResponse": ".send",
    "SendMmsSchemaOptions": ".send",
    "SendRcsResponse": ".send",
    "SendSmsResponse": ".send",
    "SendSmsSchemaOptions": ".send",
    "mms": ".",
    "rcs": ".",
    "send": ".",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "MessageReactionSchemaOptions",
    "SendMmsResponse",
    "SendMmsSchemaOptions",
    "SendRcsResponse",
    "SendSmsResponse",
    "SendSmsSchemaOptions",
    "mms",
    "rcs",
    "send",
]
