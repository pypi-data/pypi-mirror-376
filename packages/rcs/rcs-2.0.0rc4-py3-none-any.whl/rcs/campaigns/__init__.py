# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from . import dlc, rcs, toll_free
    from .dlc import (
        UpsertDlcCampaignHelpKeyword,
        UpsertDlcCampaignKeywords,
        UpsertDlcCampaignLinks,
        UpsertDlcCampaignOptInKeyword,
        UpsertDlcCampaignOptOutKeyword,
        UpsertDlcCampaignUseCase,
        UpsertDlcSchemaOptions,
    )
    from .rcs import (
        RcsAutofillResponse,
        UpsertRcsAgent,
        UpsertRcsAgentEmail,
        UpsertRcsAgentPhone,
        UpsertRcsAgentWebsite,
        UpsertRcsLinks,
        UpsertRcsOptIn,
        UpsertRcsOptOut,
        UpsertRcsUseCase,
    )
    from .toll_free import TollFreeAutofillResponse, UpsertTollFreeSchemaOptIn, UpsertTollFreeSchemaUseCase
_dynamic_imports: typing.Dict[str, str] = {
    "RcsAutofillResponse": ".rcs",
    "TollFreeAutofillResponse": ".toll_free",
    "UpsertDlcCampaignHelpKeyword": ".dlc",
    "UpsertDlcCampaignKeywords": ".dlc",
    "UpsertDlcCampaignLinks": ".dlc",
    "UpsertDlcCampaignOptInKeyword": ".dlc",
    "UpsertDlcCampaignOptOutKeyword": ".dlc",
    "UpsertDlcCampaignUseCase": ".dlc",
    "UpsertDlcSchemaOptions": ".dlc",
    "UpsertRcsAgent": ".rcs",
    "UpsertRcsAgentEmail": ".rcs",
    "UpsertRcsAgentPhone": ".rcs",
    "UpsertRcsAgentWebsite": ".rcs",
    "UpsertRcsLinks": ".rcs",
    "UpsertRcsOptIn": ".rcs",
    "UpsertRcsOptOut": ".rcs",
    "UpsertRcsUseCase": ".rcs",
    "UpsertTollFreeSchemaOptIn": ".toll_free",
    "UpsertTollFreeSchemaUseCase": ".toll_free",
    "dlc": ".",
    "rcs": ".",
    "toll_free": ".",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "RcsAutofillResponse",
    "TollFreeAutofillResponse",
    "UpsertDlcCampaignHelpKeyword",
    "UpsertDlcCampaignKeywords",
    "UpsertDlcCampaignLinks",
    "UpsertDlcCampaignOptInKeyword",
    "UpsertDlcCampaignOptOutKeyword",
    "UpsertDlcCampaignUseCase",
    "UpsertDlcSchemaOptions",
    "UpsertRcsAgent",
    "UpsertRcsAgentEmail",
    "UpsertRcsAgentPhone",
    "UpsertRcsAgentWebsite",
    "UpsertRcsLinks",
    "UpsertRcsOptIn",
    "UpsertRcsOptOut",
    "UpsertRcsUseCase",
    "UpsertTollFreeSchemaOptIn",
    "UpsertTollFreeSchemaUseCase",
    "dlc",
    "rcs",
    "toll_free",
]
