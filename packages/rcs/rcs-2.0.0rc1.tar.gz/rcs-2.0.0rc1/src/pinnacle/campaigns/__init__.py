# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from . import dlc, rcs, toll_free
    from .dlc import (
        UpsertDlcSchemaKeywords,
        UpsertDlcSchemaKeywordsHelp,
        UpsertDlcSchemaKeywordsOptIn,
        UpsertDlcSchemaKeywordsOptOut,
        UpsertDlcSchemaLinks,
        UpsertDlcSchemaOptions,
        UpsertDlcSchemaUseCase,
    )
    from .rcs import (
        RcsAutofillResponse,
        UpsertRcsSchemaAgent,
        UpsertRcsSchemaAgentEmailsItem,
        UpsertRcsSchemaAgentPhonesItem,
        UpsertRcsSchemaAgentWebsitesItem,
        UpsertRcsSchemaLinks,
        UpsertRcsSchemaOptIn,
        UpsertRcsSchemaOptOut,
        UpsertRcsSchemaUseCase,
    )
    from .toll_free import TollFreeAutofillResponse, UpsertTollFreeSchemaOptIn, UpsertTollFreeSchemaUseCase
_dynamic_imports: typing.Dict[str, str] = {
    "RcsAutofillResponse": ".rcs",
    "TollFreeAutofillResponse": ".toll_free",
    "UpsertDlcSchemaKeywords": ".dlc",
    "UpsertDlcSchemaKeywordsHelp": ".dlc",
    "UpsertDlcSchemaKeywordsOptIn": ".dlc",
    "UpsertDlcSchemaKeywordsOptOut": ".dlc",
    "UpsertDlcSchemaLinks": ".dlc",
    "UpsertDlcSchemaOptions": ".dlc",
    "UpsertDlcSchemaUseCase": ".dlc",
    "UpsertRcsSchemaAgent": ".rcs",
    "UpsertRcsSchemaAgentEmailsItem": ".rcs",
    "UpsertRcsSchemaAgentPhonesItem": ".rcs",
    "UpsertRcsSchemaAgentWebsitesItem": ".rcs",
    "UpsertRcsSchemaLinks": ".rcs",
    "UpsertRcsSchemaOptIn": ".rcs",
    "UpsertRcsSchemaOptOut": ".rcs",
    "UpsertRcsSchemaUseCase": ".rcs",
    "UpsertTollFreeSchemaOptIn": ".toll_free",
    "UpsertTollFreeSchemaUseCase": ".toll_free",
    "dlc": ".",
    "rcs": ".",
    "toll_free": ".",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "RcsAutofillResponse",
    "TollFreeAutofillResponse",
    "UpsertDlcSchemaKeywords",
    "UpsertDlcSchemaKeywordsHelp",
    "UpsertDlcSchemaKeywordsOptIn",
    "UpsertDlcSchemaKeywordsOptOut",
    "UpsertDlcSchemaLinks",
    "UpsertDlcSchemaOptions",
    "UpsertDlcSchemaUseCase",
    "UpsertRcsSchemaAgent",
    "UpsertRcsSchemaAgentEmailsItem",
    "UpsertRcsSchemaAgentPhonesItem",
    "UpsertRcsSchemaAgentWebsitesItem",
    "UpsertRcsSchemaLinks",
    "UpsertRcsSchemaOptIn",
    "UpsertRcsSchemaOptOut",
    "UpsertRcsSchemaUseCase",
    "UpsertTollFreeSchemaOptIn",
    "UpsertTollFreeSchemaUseCase",
    "dlc",
    "rcs",
    "toll_free",
]
