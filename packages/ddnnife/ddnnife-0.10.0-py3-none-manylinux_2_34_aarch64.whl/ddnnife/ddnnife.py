

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import platform

# Used for default argument values
_DEFAULT = object() # type: typing.Any


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _uniffi_rust_call(_UniffiLib.ffi_ddnnife_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _uniffi_rust_call(_UniffiLib.ffi_ddnnife_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _uniffi_rust_call(_UniffiLib.ffi_ddnnife_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _uniffi_rust_call(fn, *args):
    # Call a rust function
    return _uniffi_rust_call_with_error(None, fn, *args)

def _uniffi_rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_uniffi_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))
class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("_UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("_UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("ddnnife")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 29
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_ddnnife_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_ddnnife_checksum_method_cnf_clauses() != 31970:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_cnf_num_variables() != 12245:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_cnf_serialize() != 49794:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnf_as_mut() != 59735:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnf_get_core() != 44998:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnf_rc() != 40257:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnf_sample_t_wise() != 58101:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnf_save() != 3203:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnf_serialize() != 48534:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnf_statistics() != 22214:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnf_to_cnf() != 28967:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnfmut_as_ddnnf() != 51152:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnfmut_atomic_sets() != 2652:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnfmut_core() != 53681:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnfmut_core_multiple() != 25688:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnfmut_count() != 33767:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnfmut_count_multiple() != 13429:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnfmut_dead() != 5744:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnfmut_dead_multiple() != 4799:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnfmut_enumerate() != 5378:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnfmut_is_sat() != 57898:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_method_ddnnfmut_random() != 42831:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_ddnnife_checksum_constructor_ddnnf_from_file() != 61437:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
_UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
_UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class _UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", _UNIFFI_FOREIGN_FUTURE_FREE),
    ]
class _UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU8,
)
class _UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI8,
)
class _UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU16,
)
class _UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI16,
)
class _UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU32,
)
class _UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI32,
)
class _UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU64,
)
class _UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI64,
)
class _UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF32,
)
class _UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF64,
)
class _UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructPointer,
)
class _UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructRustBuffer,
)
class _UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructVoid,
)
_UniffiLib.uniffi_ddnnife_fn_clone_cnf.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_clone_cnf.restype = ctypes.c_void_p
_UniffiLib.uniffi_ddnnife_fn_free_cnf.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_free_cnf.restype = None
_UniffiLib.uniffi_ddnnife_fn_method_cnf_clauses.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_cnf_clauses.restype = _UniffiRustBuffer
_UniffiLib.uniffi_ddnnife_fn_method_cnf_num_variables.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_cnf_num_variables.restype = ctypes.c_uint64
_UniffiLib.uniffi_ddnnife_fn_method_cnf_serialize.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_cnf_serialize.restype = _UniffiRustBuffer
_UniffiLib.uniffi_ddnnife_fn_clone_ddnnf.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_clone_ddnnf.restype = ctypes.c_void_p
_UniffiLib.uniffi_ddnnife_fn_free_ddnnf.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_free_ddnnf.restype = None
_UniffiLib.uniffi_ddnnife_fn_constructor_ddnnf_from_file.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_constructor_ddnnf_from_file.restype = ctypes.c_void_p
_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_as_mut.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_as_mut.restype = ctypes.c_void_p
_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_get_core.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_get_core.restype = _UniffiRustBuffer
_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_rc.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_rc.restype = _UniffiRustBuffer
_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_sample_t_wise.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_sample_t_wise.restype = _UniffiRustBuffer
_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_save.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_save.restype = None
_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_serialize.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_serialize.restype = _UniffiRustBuffer
_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_statistics.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_statistics.restype = _UniffiRustBuffer
_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_to_cnf.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_to_cnf.restype = ctypes.c_void_p
_UniffiLib.uniffi_ddnnife_fn_clone_ddnnfmut.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_clone_ddnnfmut.restype = ctypes.c_void_p
_UniffiLib.uniffi_ddnnife_fn_free_ddnnfmut.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_free_ddnnfmut.restype = None
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_as_ddnnf.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_as_ddnnf.restype = ctypes.c_void_p
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_atomic_sets.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_atomic_sets.restype = _UniffiRustBuffer
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_core.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_core.restype = _UniffiRustBuffer
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_core_multiple.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_core_multiple.restype = _UniffiRustBuffer
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_count.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_count.restype = _UniffiRustBuffer
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_count_multiple.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_count_multiple.restype = _UniffiRustBuffer
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_dead.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_dead.restype = _UniffiRustBuffer
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_dead_multiple.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_dead_multiple.restype = _UniffiRustBuffer
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_enumerate.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_enumerate.restype = _UniffiRustBuffer
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_is_sat.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_is_sat.restype = ctypes.c_int8
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_random.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_random.restype = _UniffiRustBuffer
_UniffiLib.ffi_ddnnife_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ddnnife_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_ddnnife_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ddnnife_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_ddnnife_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ddnnife_rustbuffer_free.restype = None
_UniffiLib.ffi_ddnnife_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ddnnife_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_ddnnife_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_poll_u8.restype = None
_UniffiLib.ffi_ddnnife_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_ddnnife_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_free_u8.restype = None
_UniffiLib.ffi_ddnnife_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ddnnife_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_ddnnife_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_poll_i8.restype = None
_UniffiLib.ffi_ddnnife_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_ddnnife_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_free_i8.restype = None
_UniffiLib.ffi_ddnnife_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ddnnife_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_ddnnife_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_poll_u16.restype = None
_UniffiLib.ffi_ddnnife_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_ddnnife_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_free_u16.restype = None
_UniffiLib.ffi_ddnnife_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ddnnife_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_ddnnife_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_poll_i16.restype = None
_UniffiLib.ffi_ddnnife_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_ddnnife_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_free_i16.restype = None
_UniffiLib.ffi_ddnnife_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ddnnife_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_ddnnife_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_poll_u32.restype = None
_UniffiLib.ffi_ddnnife_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_ddnnife_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_free_u32.restype = None
_UniffiLib.ffi_ddnnife_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ddnnife_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_ddnnife_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_poll_i32.restype = None
_UniffiLib.ffi_ddnnife_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_ddnnife_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_free_i32.restype = None
_UniffiLib.ffi_ddnnife_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ddnnife_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_ddnnife_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_poll_u64.restype = None
_UniffiLib.ffi_ddnnife_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_ddnnife_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_free_u64.restype = None
_UniffiLib.ffi_ddnnife_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ddnnife_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_ddnnife_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_poll_i64.restype = None
_UniffiLib.ffi_ddnnife_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_ddnnife_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_free_i64.restype = None
_UniffiLib.ffi_ddnnife_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ddnnife_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_ddnnife_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_poll_f32.restype = None
_UniffiLib.ffi_ddnnife_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_ddnnife_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_free_f32.restype = None
_UniffiLib.ffi_ddnnife_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ddnnife_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_ddnnife_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_poll_f64.restype = None
_UniffiLib.ffi_ddnnife_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_ddnnife_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_free_f64.restype = None
_UniffiLib.ffi_ddnnife_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ddnnife_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_ddnnife_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_ddnnife_rust_future_cancel_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_ddnnife_rust_future_free_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_free_pointer.restype = None
_UniffiLib.ffi_ddnnife_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ddnnife_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_ddnnife_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_ddnnife_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_ddnnife_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_ddnnife_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ddnnife_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_ddnnife_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_poll_void.restype = None
_UniffiLib.ffi_ddnnife_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_cancel_void.restype = None
_UniffiLib.ffi_ddnnife_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_ddnnife_rust_future_free_void.restype = None
_UniffiLib.ffi_ddnnife_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_ddnnife_rust_future_complete_void.restype = None
_UniffiLib.uniffi_ddnnife_checksum_method_cnf_clauses.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_cnf_clauses.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_cnf_num_variables.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_cnf_num_variables.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_cnf_serialize.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_cnf_serialize.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnf_as_mut.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnf_as_mut.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnf_get_core.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnf_get_core.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnf_rc.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnf_rc.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnf_sample_t_wise.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnf_sample_t_wise.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnf_save.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnf_save.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnf_serialize.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnf_serialize.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnf_statistics.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnf_statistics.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnf_to_cnf.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnf_to_cnf.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_as_ddnnf.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_as_ddnnf.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_atomic_sets.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_atomic_sets.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_core.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_core.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_core_multiple.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_core_multiple.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_count.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_count.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_count_multiple.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_count_multiple.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_dead.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_dead.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_dead_multiple.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_dead_multiple.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_enumerate.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_enumerate.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_is_sat.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_is_sat.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_random.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_method_ddnnfmut_random.restype = ctypes.c_uint16
_UniffiLib.uniffi_ddnnife_checksum_constructor_ddnnf_from_file.argtypes = (
)
_UniffiLib.uniffi_ddnnife_checksum_constructor_ddnnf_from_file.restype = ctypes.c_uint16
_UniffiLib.ffi_ddnnife_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_ddnnife_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
# _uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.


class _UniffiConverterInt16(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "i16"
    VALUE_MIN = -2**15
    VALUE_MAX = 2**15

    @staticmethod
    def read(buf):
        return buf.read_i16()

    @staticmethod
    def write(value, buf):
        buf.write_i16(value)

class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write(value, buf):
        buf.write_u32(value)

class _UniffiConverterInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "i32"
    VALUE_MIN = -2**31
    VALUE_MAX = 2**31

    @staticmethod
    def read(buf):
        return buf.read_i32()

    @staticmethod
    def write(value, buf):
        buf.write_i32(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write(value, buf):
        buf.write_u64(value)

class _UniffiConverterInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "i64"
    VALUE_MIN = -2**63
    VALUE_MAX = 2**63

    @staticmethod
    def read(buf):
        return buf.read_i64()

    @staticmethod
    def write(value, buf):
        buf.write_i64(value)

class _UniffiConverterDouble(_UniffiConverterPrimitiveFloat):
    @staticmethod
    def read(buf):
        return buf.read_double()

    @staticmethod
    def write(value, buf):
        buf.write_double(value)

class _UniffiConverterBool:
    @classmethod
    def check_lower(cls, value):
        return not not value

    @classmethod
    def lower(cls, value):
        return 1 if value else 0

    @staticmethod
    def lift(value):
        return value != 0

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write(cls, value, buf):
        buf.write_u8(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

class _UniffiConverterBytes(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative byte string length")
        return buf.read(size)

    @staticmethod
    def check_lower(value):
        try:
            memoryview(value)
        except TypeError:
            raise TypeError("a bytes-like object is required, not {!r}".format(type(value).__name__))

    @staticmethod
    def write(value, buf):
        buf.write_i32(len(value))
        buf.write(value)








class ChildConnections:
    total: "Usize"
    """
    The total amount of child connection.
    """

    _and: "Usize"
    """
    The number of child connections from AND nodes.
    """

    _or: "Usize"
    """
    The number of child connections from OR nodes.
    """

    def __init__(self, *, total: "Usize", _and: "Usize", _or: "Usize"):
        self.total = total
        self._and = _and
        self._or = _or

    def __str__(self):
        return "ChildConnections(total={}, _and={}, _or={})".format(self.total, self._and, self._or)

    def __eq__(self, other):
        if self.total != other.total:
            return False
        if self._and != other._and:
            return False
        if self._or != other._or:
            return False
        return True

class _UniffiConverterTypeChildConnections(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ChildConnections(
            total=_UniffiConverterTypeUsize.read(buf),
            _and=_UniffiConverterTypeUsize.read(buf),
            _or=_UniffiConverterTypeUsize.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeUsize.check_lower(value.total)
        _UniffiConverterTypeUsize.check_lower(value._and)
        _UniffiConverterTypeUsize.check_lower(value._or)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeUsize.write(value.total, buf)
        _UniffiConverterTypeUsize.write(value._and, buf)
        _UniffiConverterTypeUsize.write(value._or, buf)


class NodeCount:
    total: "Usize"
    _and: "Usize"
    _or: "Usize"
    literal: "Usize"
    true: "Usize"
    false: "Usize"
    def __init__(self, *, total: "Usize", _and: "Usize", _or: "Usize", literal: "Usize", true: "Usize", false: "Usize"):
        self.total = total
        self._and = _and
        self._or = _or
        self.literal = literal
        self.true = true
        self.false = false

    def __str__(self):
        return "NodeCount(total={}, _and={}, _or={}, literal={}, true={}, false={})".format(self.total, self._and, self._or, self.literal, self.true, self.false)

    def __eq__(self, other):
        if self.total != other.total:
            return False
        if self._and != other._and:
            return False
        if self._or != other._or:
            return False
        if self.literal != other.literal:
            return False
        if self.true != other.true:
            return False
        if self.false != other.false:
            return False
        return True

class _UniffiConverterTypeNodeCount(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return NodeCount(
            total=_UniffiConverterTypeUsize.read(buf),
            _and=_UniffiConverterTypeUsize.read(buf),
            _or=_UniffiConverterTypeUsize.read(buf),
            literal=_UniffiConverterTypeUsize.read(buf),
            true=_UniffiConverterTypeUsize.read(buf),
            false=_UniffiConverterTypeUsize.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeUsize.check_lower(value.total)
        _UniffiConverterTypeUsize.check_lower(value._and)
        _UniffiConverterTypeUsize.check_lower(value._or)
        _UniffiConverterTypeUsize.check_lower(value.literal)
        _UniffiConverterTypeUsize.check_lower(value.true)
        _UniffiConverterTypeUsize.check_lower(value.false)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeUsize.write(value.total, buf)
        _UniffiConverterTypeUsize.write(value._and, buf)
        _UniffiConverterTypeUsize.write(value._or, buf)
        _UniffiConverterTypeUsize.write(value.literal, buf)
        _UniffiConverterTypeUsize.write(value.true, buf)
        _UniffiConverterTypeUsize.write(value.false, buf)


class Paths:
    amount: "Usize"
    """
    The total amount of paths.
    """

    shortest: "Usize"
    """
    The length of the shortest path.
    """

    longest: "Usize"
    """
    The length of the longest path.
    """

    mean: "float"
    """
    The mean path length.
    """

    deviation: "float"
    """
    The standard deviation of the path lengths.
    """

    def __init__(self, *, amount: "Usize", shortest: "Usize", longest: "Usize", mean: "float", deviation: "float"):
        self.amount = amount
        self.shortest = shortest
        self.longest = longest
        self.mean = mean
        self.deviation = deviation

    def __str__(self):
        return "Paths(amount={}, shortest={}, longest={}, mean={}, deviation={})".format(self.amount, self.shortest, self.longest, self.mean, self.deviation)

    def __eq__(self, other):
        if self.amount != other.amount:
            return False
        if self.shortest != other.shortest:
            return False
        if self.longest != other.longest:
            return False
        if self.mean != other.mean:
            return False
        if self.deviation != other.deviation:
            return False
        return True

class _UniffiConverterTypePaths(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Paths(
            amount=_UniffiConverterTypeUsize.read(buf),
            shortest=_UniffiConverterTypeUsize.read(buf),
            longest=_UniffiConverterTypeUsize.read(buf),
            mean=_UniffiConverterDouble.read(buf),
            deviation=_UniffiConverterDouble.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeUsize.check_lower(value.amount)
        _UniffiConverterTypeUsize.check_lower(value.shortest)
        _UniffiConverterTypeUsize.check_lower(value.longest)
        _UniffiConverterDouble.check_lower(value.mean)
        _UniffiConverterDouble.check_lower(value.deviation)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeUsize.write(value.amount, buf)
        _UniffiConverterTypeUsize.write(value.shortest, buf)
        _UniffiConverterTypeUsize.write(value.longest, buf)
        _UniffiConverterDouble.write(value.mean, buf)
        _UniffiConverterDouble.write(value.deviation, buf)


class Sample:
    complete_configs: "typing.List[Config]"
    """
    Configs that contain all variables of this sample
    """

    partial_configs: "typing.List[Config]"
    """
    Configs that do not contain all variables of this sample
    """

    vars: "HashSetu32"
    """
    The variables that Configs of this sample may contain
    """

    literals: "typing.List[int]"
    """
    The literals that actually occur in this sample
    """

    def __init__(self, *, complete_configs: "typing.List[Config]", partial_configs: "typing.List[Config]", vars: "HashSetu32", literals: "typing.List[int]"):
        self.complete_configs = complete_configs
        self.partial_configs = partial_configs
        self.vars = vars
        self.literals = literals

    def __str__(self):
        return "Sample(complete_configs={}, partial_configs={}, vars={}, literals={})".format(self.complete_configs, self.partial_configs, self.vars, self.literals)

    def __eq__(self, other):
        if self.complete_configs != other.complete_configs:
            return False
        if self.partial_configs != other.partial_configs:
            return False
        if self.vars != other.vars:
            return False
        if self.literals != other.literals:
            return False
        return True

class _UniffiConverterTypeSample(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Sample(
            complete_configs=_UniffiConverterSequenceTypeConfig.read(buf),
            partial_configs=_UniffiConverterSequenceTypeConfig.read(buf),
            vars=_UniffiConverterTypeHashSetu32.read(buf),
            literals=_UniffiConverterSequenceInt32.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterSequenceTypeConfig.check_lower(value.complete_configs)
        _UniffiConverterSequenceTypeConfig.check_lower(value.partial_configs)
        _UniffiConverterTypeHashSetu32.check_lower(value.vars)
        _UniffiConverterSequenceInt32.check_lower(value.literals)

    @staticmethod
    def write(value, buf):
        _UniffiConverterSequenceTypeConfig.write(value.complete_configs, buf)
        _UniffiConverterSequenceTypeConfig.write(value.partial_configs, buf)
        _UniffiConverterTypeHashSetu32.write(value.vars, buf)
        _UniffiConverterSequenceInt32.write(value.literals, buf)


class Statistics:
    nodes: "NodeCount"
    """
    The amount of nodes in the d-DNNF per node type.
    """

    child_connections: "ChildConnections"
    """
    The amount of child connections in a d-DNNF.
    """

    paths: "Paths"
    """
    Path length information.
    """

    def __init__(self, *, nodes: "NodeCount", child_connections: "ChildConnections", paths: "Paths"):
        self.nodes = nodes
        self.child_connections = child_connections
        self.paths = paths

    def __str__(self):
        return "Statistics(nodes={}, child_connections={}, paths={})".format(self.nodes, self.child_connections, self.paths)

    def __eq__(self, other):
        if self.nodes != other.nodes:
            return False
        if self.child_connections != other.child_connections:
            return False
        if self.paths != other.paths:
            return False
        return True

class _UniffiConverterTypeStatistics(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Statistics(
            nodes=_UniffiConverterTypeNodeCount.read(buf),
            child_connections=_UniffiConverterTypeChildConnections.read(buf),
            paths=_UniffiConverterTypePaths.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeNodeCount.check_lower(value.nodes)
        _UniffiConverterTypeChildConnections.check_lower(value.child_connections)
        _UniffiConverterTypePaths.check_lower(value.paths)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeNodeCount.write(value.nodes, buf)
        _UniffiConverterTypeChildConnections.write(value.child_connections, buf)
        _UniffiConverterTypePaths.write(value.paths, buf)





class SamplingResult:
    def __init__(self):
        raise RuntimeError("SamplingResult cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class EMPTY:
        """
        An empty result that is *valid* (a regular sample containing 0 configurations).
        This is used to indicate that a subgraph evaluates to true.
        """


        def __init__(self,):
            pass

        def __str__(self):
            return "SamplingResult.EMPTY()".format()

        def __eq__(self, other):
            if not other.is_EMPTY():
                return False
            return True
    
    class VOID:
        """
        An empty result that is *invalid*.
        This is used to indicate that a subgraph evaluates to false.
        """


        def __init__(self,):
            pass

        def __str__(self):
            return "SamplingResult.VOID()".format()

        def __eq__(self, other):
            if not other.is_VOID():
                return False
            return True
    
    class RESULT_WITH_SAMPLE:
        """
        A *valid* result having a regular sample.
        """

        def __init__(self, *values):
            if len(values) != 1:
                raise TypeError(f"Expected 1 arguments, found {len(values)}")
            self._values = values

        def __getitem__(self, index):
            return self._values[index]

        def __str__(self):
            return f"SamplingResult.RESULT_WITH_SAMPLE{self._values!r}"

        def __eq__(self, other):
            if not other.is_RESULT_WITH_SAMPLE():
                return False
            return self._values == other._values
    

    # For each variant, we have `is_NAME` and `is_name` methods for easily checking
    # whether an instance is that variant.
    def is_EMPTY(self) -> bool:
        return isinstance(self, SamplingResult.EMPTY)
    def is_empty(self) -> bool:
        return isinstance(self, SamplingResult.EMPTY)
    def is_VOID(self) -> bool:
        return isinstance(self, SamplingResult.VOID)
    def is_void(self) -> bool:
        return isinstance(self, SamplingResult.VOID)
    def is_RESULT_WITH_SAMPLE(self) -> bool:
        return isinstance(self, SamplingResult.RESULT_WITH_SAMPLE)
    def is_result_with_sample(self) -> bool:
        return isinstance(self, SamplingResult.RESULT_WITH_SAMPLE)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
SamplingResult.EMPTY = type("SamplingResult.EMPTY", (SamplingResult.EMPTY, SamplingResult,), {})  # type: ignore
SamplingResult.VOID = type("SamplingResult.VOID", (SamplingResult.VOID, SamplingResult,), {})  # type: ignore
SamplingResult.RESULT_WITH_SAMPLE = type("SamplingResult.RESULT_WITH_SAMPLE", (SamplingResult.RESULT_WITH_SAMPLE, SamplingResult,), {})  # type: ignore




class _UniffiConverterTypeSamplingResult(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return SamplingResult.EMPTY(
            )
        if variant == 2:
            return SamplingResult.VOID(
            )
        if variant == 3:
            return SamplingResult.RESULT_WITH_SAMPLE(
                _UniffiConverterTypeSample.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value.is_EMPTY():
            return
        if value.is_VOID():
            return
        if value.is_RESULT_WITH_SAMPLE():
            _UniffiConverterTypeSample.check_lower(value._values[0])
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value.is_EMPTY():
            buf.write_i32(1)
        if value.is_VOID():
            buf.write_i32(2)
        if value.is_RESULT_WITH_SAMPLE():
            buf.write_i32(3)
            _UniffiConverterTypeSample.write(value._values[0], buf)





class _UniffiConverterOptionalUInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterUInt32.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt32.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceUInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterSequenceUInt32.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceUInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceUInt32.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceInt16(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterInt16.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterInt16.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterInt16.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceUInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterUInt32.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterUInt32.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterUInt32.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterInt32.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterInt32.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterInt32.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceSequenceInt16(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterSequenceInt16.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterSequenceInt16.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterSequenceInt16.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceSequenceInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterSequenceInt32.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterSequenceInt32.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterSequenceInt32.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceSequenceTypeIsize(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterSequenceTypeIsize.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterSequenceTypeIsize.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterSequenceTypeIsize.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeBigInt(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeBigInt.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeBigInt.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeBigInt.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeConfig(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeConfig.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeConfig.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeConfig.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeIsize(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeIsize.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeIsize.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeIsize.read(buf) for i in range(count)
        ]


class _UniffiConverterTypeBigInt:
    @staticmethod
    def write(value, buf):
        builtin_value = value.to_bytes()
        _UniffiConverterBytes.write(builtin_value, buf)

    @staticmethod
    def read(buf):
        builtin_value = _UniffiConverterBytes.read(buf)
        return int.from_bytes(builtin_value, 'big')

    @staticmethod
    def lift(value):
        builtin_value = _UniffiConverterBytes.lift(value)
        return int.from_bytes(builtin_value, 'big')

    @staticmethod
    def check_lower(value):
        builtin_value = value.to_bytes()
        return _UniffiConverterBytes.check_lower(builtin_value)

    @staticmethod
    def lower(value):
        builtin_value = value.to_bytes()
        return _UniffiConverterBytes.lower(builtin_value)


class _UniffiConverterTypeConfig:
    @staticmethod
    def write(value, buf):
        _UniffiConverterSequenceInt32.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterSequenceInt32.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterSequenceInt32.lift(value)

    @staticmethod
    def check_lower(value):
        return _UniffiConverterSequenceInt32.check_lower(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterSequenceInt32.lower(value)


class _UniffiConverterTypeHashSeti32:
    @staticmethod
    def write(value, buf):
        _UniffiConverterSequenceInt32.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterSequenceInt32.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterSequenceInt32.lift(value)

    @staticmethod
    def check_lower(value):
        return _UniffiConverterSequenceInt32.check_lower(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterSequenceInt32.lower(value)


class _UniffiConverterTypeHashSetu32:
    @staticmethod
    def write(value, buf):
        _UniffiConverterSequenceUInt32.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterSequenceUInt32.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterSequenceUInt32.lift(value)

    @staticmethod
    def check_lower(value):
        return _UniffiConverterSequenceUInt32.check_lower(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterSequenceUInt32.lower(value)


class _UniffiConverterTypeIsize:
    @staticmethod
    def write(value, buf):
        _UniffiConverterInt64.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterInt64.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterInt64.lift(value)

    @staticmethod
    def check_lower(value):
        return _UniffiConverterInt64.check_lower(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterInt64.lower(value)


class _UniffiConverterTypeUsize:
    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterUInt64.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterUInt64.lift(value)

    @staticmethod
    def check_lower(value):
        return _UniffiConverterUInt64.check_lower(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterUInt64.lower(value)

# objects.
class CnfProtocol(typing.Protocol):
    def clauses(self, ):
        """
        Returns a copy of the clause set.
        """

        raise NotImplementedError
    def num_variables(self, ):
        """
        Returns the number of variables in the CNF.
        """

        raise NotImplementedError
    def serialize(self, ):
        """
        Generates the DIMACS representation.
        """

        raise NotImplementedError
# Cnf is a Rust-only trait - it's a wrapper around a Rust implementation.
class Cnf():
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_free_cnf, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_clone_cnf, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def clauses(self, ) -> "typing.List[typing.List[Isize]]":
        """
        Returns a copy of the clause set.
        """

        return _UniffiConverterSequenceSequenceTypeIsize.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_cnf_clauses,self._uniffi_clone_pointer(),)
        )





    def num_variables(self, ) -> "Usize":
        """
        Returns the number of variables in the CNF.
        """

        return _UniffiConverterTypeUsize.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_cnf_num_variables,self._uniffi_clone_pointer(),)
        )





    def serialize(self, ) -> "str":
        """
        Generates the DIMACS representation.
        """

        return _UniffiConverterString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_cnf_serialize,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeCnf:

    @staticmethod
    def lift(value: int):
        return Cnf._make_instance_(value)

    @staticmethod
    def check_lower(value: Cnf):
        if not isinstance(value, Cnf):
            raise TypeError("Expected Cnf instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: CnfProtocol):
        if not isinstance(value, Cnf):
            raise TypeError("Expected Cnf instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: CnfProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class DdnnfProtocol(typing.Protocol):
    """
    A wrapped version of a d-DNNF.
    """

    def as_mut(self, ):
        """
        Creates a mutable copy of this d-DNNF.
        """

        raise NotImplementedError
    def get_core(self, ):
        """
        Returns the core features of this d-DNNF.

        This is only calculated once at creation of the d-DNNF.
        """

        raise NotImplementedError
    def rc(self, ):
        """
        Returns the current count of the root node in the d-DNNF.

        This value is the same during all computations.
        """

        raise NotImplementedError
    def sample_t_wise(self, t: "Usize"):
        """
        Generates various statistics about this d-DNNF.
        """

        raise NotImplementedError
    def save(self, path: "str"):
        """
        Saves this d-DNNF to the given file.
        """

        raise NotImplementedError
    def serialize(self, ):
        """
        Generates the c2d format representation of this d-DNNF.
        """

        raise NotImplementedError
    def statistics(self, ):
        """
        Generates various statistics about this d-DNNF.
        """

        raise NotImplementedError
    def to_cnf(self, ):
        """
        Generates an equi-countable CNF representation via Tseitin transformation.
        """

        raise NotImplementedError
# Ddnnf is a Rust-only trait - it's a wrapper around a Rust implementation.
class Ddnnf():
    """
    A wrapped version of a d-DNNF.
    """

    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_free_ddnnf, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_clone_ddnnf, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst
    @classmethod
    def from_file(cls, path: "str",features: "typing.Optional[int]"):
        """
        Loads a d-DNNF from file.
        """

        _UniffiConverterString.check_lower(path)
        
        _UniffiConverterOptionalUInt32.check_lower(features)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_constructor_ddnnf_from_file,
        _UniffiConverterString.lower(path),
        _UniffiConverterOptionalUInt32.lower(features))
        return cls._make_instance_(pointer)



    def as_mut(self, ) -> "DdnnfMut":
        """
        Creates a mutable copy of this d-DNNF.
        """

        return _UniffiConverterTypeDdnnfMut.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_as_mut,self._uniffi_clone_pointer(),)
        )





    def get_core(self, ) -> "HashSeti32":
        """
        Returns the core features of this d-DNNF.

        This is only calculated once at creation of the d-DNNF.
        """

        return _UniffiConverterTypeHashSeti32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_get_core,self._uniffi_clone_pointer(),)
        )





    def rc(self, ) -> "BigInt":
        """
        Returns the current count of the root node in the d-DNNF.

        This value is the same during all computations.
        """

        return _UniffiConverterTypeBigInt.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_rc,self._uniffi_clone_pointer(),)
        )





    def sample_t_wise(self, t: "Usize") -> "SamplingResult":
        """
        Generates various statistics about this d-DNNF.
        """

        _UniffiConverterTypeUsize.check_lower(t)
        
        return _UniffiConverterTypeSamplingResult.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_sample_t_wise,self._uniffi_clone_pointer(),
        _UniffiConverterTypeUsize.lower(t))
        )





    def save(self, path: "str") -> None:
        """
        Saves this d-DNNF to the given file.
        """

        _UniffiConverterString.check_lower(path)
        
        _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_save,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(path))






    def serialize(self, ) -> "str":
        """
        Generates the c2d format representation of this d-DNNF.
        """

        return _UniffiConverterString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_serialize,self._uniffi_clone_pointer(),)
        )





    def statistics(self, ) -> "Statistics":
        """
        Generates various statistics about this d-DNNF.
        """

        return _UniffiConverterTypeStatistics.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_statistics,self._uniffi_clone_pointer(),)
        )





    def to_cnf(self, ) -> "Cnf":
        """
        Generates an equi-countable CNF representation via Tseitin transformation.
        """

        return _UniffiConverterTypeCnf.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnf_to_cnf,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeDdnnf:

    @staticmethod
    def lift(value: int):
        return Ddnnf._make_instance_(value)

    @staticmethod
    def check_lower(value: Ddnnf):
        if not isinstance(value, Ddnnf):
            raise TypeError("Expected Ddnnf instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: DdnnfProtocol):
        if not isinstance(value, Ddnnf):
            raise TypeError("Expected Ddnnf instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: DdnnfProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class DdnnfMutProtocol(typing.Protocol):
    """
    A mutable version of a d-DNNF, required for some computations.

    This version has thread-safe access to computations requiring mutability.
    A lock will be managed directly by the library.
    Converting into and out from the mutable version will create new instances.
    """

    def as_ddnnf(self, ):
        """
        Creates a non-mutable copy of this d-DNNF.
        """

        raise NotImplementedError
    def atomic_sets(self, candidates: "typing.Optional[typing.List[int]]",assumptions: "typing.List[int]",cross: "bool"):
        """
        Compute all atomic sets.

        A group forms an atomic set iff every valid configuration either includes
        or excludes all members of that atomic set.
        """

        raise NotImplementedError
    def core(self, assumptions: "typing.List[int]"):
        """
        Computes the core features of this d-DNNF.
        """

        raise NotImplementedError
    def core_multiple(self, assumptions: "typing.List[int]",variables: "typing.List[int]"):
        """
        Computes the core features of this d-DNNF for multiple variables.
        """

        raise NotImplementedError
    def count(self, assumptions: "typing.List[int]"):
        """
        Computes the cardinality of this d-DNNF.
        """

        raise NotImplementedError
    def count_multiple(self, assumptions: "typing.List[int]",variables: "typing.List[int]"):
        """
        Computes the cardinality of this d-DNNF for multiple variables.
        """

        raise NotImplementedError
    def dead(self, assumptions: "typing.List[int]"):
        """
        Computes the dead features of this d-DNNF.
        """

        raise NotImplementedError
    def dead_multiple(self, assumptions: "typing.List[int]",variables: "typing.List[int]"):
        """
        Computes the dead features of this d-DNNF for multiple variables.
        """

        raise NotImplementedError
    def enumerate(self, assumptions: "typing.List[int]",amount: "Usize"):
        """
        Generates satisfiable configurations for this d-DNNF.
        """

        raise NotImplementedError
    def is_sat(self, assumptions: "typing.List[int]"):
        """
        Computes whether this d-DNNF is satisfiable.
        """

        raise NotImplementedError
    def random(self, assumptions: "typing.List[int]",amount: "Usize",seed: "int"):
        """
        Generates random satisfiable configurations for this d-DNNF.
        """

        raise NotImplementedError
# DdnnfMut is a Rust-only trait - it's a wrapper around a Rust implementation.
class DdnnfMut():
    """
    A mutable version of a d-DNNF, required for some computations.

    This version has thread-safe access to computations requiring mutability.
    A lock will be managed directly by the library.
    Converting into and out from the mutable version will create new instances.
    """

    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_free_ddnnfmut, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_clone_ddnnfmut, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def as_ddnnf(self, ) -> "Ddnnf":
        """
        Creates a non-mutable copy of this d-DNNF.
        """

        return _UniffiConverterTypeDdnnf.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_as_ddnnf,self._uniffi_clone_pointer(),)
        )





    def atomic_sets(self, candidates: "typing.Optional[typing.List[int]]",assumptions: "typing.List[int]",cross: "bool") -> "typing.List[typing.List[int]]":
        """
        Compute all atomic sets.

        A group forms an atomic set iff every valid configuration either includes
        or excludes all members of that atomic set.
        """

        _UniffiConverterOptionalSequenceUInt32.check_lower(candidates)
        
        _UniffiConverterSequenceInt32.check_lower(assumptions)
        
        _UniffiConverterBool.check_lower(cross)
        
        return _UniffiConverterSequenceSequenceInt16.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_atomic_sets,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalSequenceUInt32.lower(candidates),
        _UniffiConverterSequenceInt32.lower(assumptions),
        _UniffiConverterBool.lower(cross))
        )





    def core(self, assumptions: "typing.List[int]") -> "typing.List[int]":
        """
        Computes the core features of this d-DNNF.
        """

        _UniffiConverterSequenceInt32.check_lower(assumptions)
        
        return _UniffiConverterSequenceInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_core,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceInt32.lower(assumptions))
        )





    def core_multiple(self, assumptions: "typing.List[int]",variables: "typing.List[int]") -> "typing.List[int]":
        """
        Computes the core features of this d-DNNF for multiple variables.
        """

        _UniffiConverterSequenceInt32.check_lower(assumptions)
        
        _UniffiConverterSequenceInt32.check_lower(variables)
        
        return _UniffiConverterSequenceInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_core_multiple,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceInt32.lower(assumptions),
        _UniffiConverterSequenceInt32.lower(variables))
        )





    def count(self, assumptions: "typing.List[int]") -> "BigInt":
        """
        Computes the cardinality of this d-DNNF.
        """

        _UniffiConverterSequenceInt32.check_lower(assumptions)
        
        return _UniffiConverterTypeBigInt.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_count,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceInt32.lower(assumptions))
        )





    def count_multiple(self, assumptions: "typing.List[int]",variables: "typing.List[int]") -> "typing.List[BigInt]":
        """
        Computes the cardinality of this d-DNNF for multiple variables.
        """

        _UniffiConverterSequenceInt32.check_lower(assumptions)
        
        _UniffiConverterSequenceInt32.check_lower(variables)
        
        return _UniffiConverterSequenceTypeBigInt.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_count_multiple,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceInt32.lower(assumptions),
        _UniffiConverterSequenceInt32.lower(variables))
        )





    def dead(self, assumptions: "typing.List[int]") -> "typing.List[int]":
        """
        Computes the dead features of this d-DNNF.
        """

        _UniffiConverterSequenceInt32.check_lower(assumptions)
        
        return _UniffiConverterSequenceInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_dead,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceInt32.lower(assumptions))
        )





    def dead_multiple(self, assumptions: "typing.List[int]",variables: "typing.List[int]") -> "typing.List[int]":
        """
        Computes the dead features of this d-DNNF for multiple variables.
        """

        _UniffiConverterSequenceInt32.check_lower(assumptions)
        
        _UniffiConverterSequenceInt32.check_lower(variables)
        
        return _UniffiConverterSequenceInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_dead_multiple,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceInt32.lower(assumptions),
        _UniffiConverterSequenceInt32.lower(variables))
        )





    def enumerate(self, assumptions: "typing.List[int]",amount: "Usize") -> "typing.List[typing.List[int]]":
        """
        Generates satisfiable configurations for this d-DNNF.
        """

        _UniffiConverterSequenceInt32.check_lower(assumptions)
        
        _UniffiConverterTypeUsize.check_lower(amount)
        
        return _UniffiConverterSequenceSequenceInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_enumerate,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceInt32.lower(assumptions),
        _UniffiConverterTypeUsize.lower(amount))
        )





    def is_sat(self, assumptions: "typing.List[int]") -> "bool":
        """
        Computes whether this d-DNNF is satisfiable.
        """

        _UniffiConverterSequenceInt32.check_lower(assumptions)
        
        return _UniffiConverterBool.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_is_sat,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceInt32.lower(assumptions))
        )





    def random(self, assumptions: "typing.List[int]",amount: "Usize",seed: "int") -> "typing.List[typing.List[int]]":
        """
        Generates random satisfiable configurations for this d-DNNF.
        """

        _UniffiConverterSequenceInt32.check_lower(assumptions)
        
        _UniffiConverterTypeUsize.check_lower(amount)
        
        _UniffiConverterUInt64.check_lower(seed)
        
        return _UniffiConverterSequenceSequenceInt32.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_ddnnife_fn_method_ddnnfmut_random,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceInt32.lower(assumptions),
        _UniffiConverterTypeUsize.lower(amount),
        _UniffiConverterUInt64.lower(seed))
        )






class _UniffiConverterTypeDdnnfMut:

    @staticmethod
    def lift(value: int):
        return DdnnfMut._make_instance_(value)

    @staticmethod
    def check_lower(value: DdnnfMut):
        if not isinstance(value, DdnnfMut):
            raise TypeError("Expected DdnnfMut instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: DdnnfMutProtocol):
        if not isinstance(value, DdnnfMut):
            raise TypeError("Expected DdnnfMut instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: DdnnfMutProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
BigInt = bytes
Config = typing.List[int]
HashSeti32 = typing.List[int]
HashSetu32 = typing.List[int]
Isize = int
Usize = int

# Async support

__all__ = [
    "InternalError",
    "SamplingResult",
    "ChildConnections",
    "NodeCount",
    "Paths",
    "Sample",
    "Statistics",
    "Cnf",
    "Ddnnf",
    "DdnnfMut",
]

