# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from .....core.pydantic_utilities import UniversalBaseModel
import typing
from .lambda_reference import LambdaReference
import pydantic
from .....core.pydantic_utilities import IS_PYDANTIC_V2
from .resource_reference import ResourceReference
from ....common.resources.resources.load_balancer_reference import LoadBalancerReference


class Integration_AwsProxy(UniversalBaseModel):
    type: typing.Literal["aws_proxy"] = "aws_proxy"
    arn: str
    lambda_: typing.Optional[LambdaReference] = pydantic.Field(alias="lambda", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class Integration_Aws(UniversalBaseModel):
    type: typing.Literal["aws"] = "aws"
    arn: str
    resource_reference: typing.Optional[ResourceReference] = pydantic.Field(alias="resourceReference", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class Integration_Mock(UniversalBaseModel):
    type: typing.Literal["mock"] = "mock"
    response_templates: typing.Optional[typing.Dict[str, str]] = pydantic.Field(alias="responseTemplates", default=None)
    status_code: typing.Optional[str] = pydantic.Field(alias="statusCode", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class Integration_Http(UniversalBaseModel):
    type: typing.Literal["http"] = "http"
    uri: str
    load_balancer: typing.Optional[LoadBalancerReference] = pydantic.Field(alias="loadBalancer", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class Integration_HttpProxy(UniversalBaseModel):
    type: typing.Literal["http_proxy"] = "http_proxy"
    uri: str
    resource_reference: typing.Optional[ResourceReference] = pydantic.Field(alias="resourceReference", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


Integration = typing.Union[
    Integration_AwsProxy, Integration_Aws, Integration_Mock, Integration_Http, Integration_HttpProxy
]
