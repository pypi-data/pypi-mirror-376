# This file was auto-generated by Fern from our API Definition.

from .....core.pydantic_utilities import UniversalBaseModel
import typing
from .certificate import Certificate
from .route import Route
import pydantic
from ....common.resources.resources.vpc_reference import VpcReference
from .lambda_reference import LambdaReference
from ....common.resources.resources.cloud_watch_log_reference import CloudWatchLogReference
from ....common.resources.resources.iam_role_reference import IamRoleReference
from ....common.resources.resources.load_balancer_reference import LoadBalancerReference
from ....common.resources.resources.security_group_reference import SecurityGroupReference
from .api_gateway_security import ApiGatewaySecurity
from .....core.pydantic_utilities import IS_PYDANTIC_V2


class ApiGatewayResourceInfo(UniversalBaseModel):
    certificates: typing.Optional[typing.List[Certificate]] = None
    paths: typing.Optional[typing.List[Route]] = None
    api_keys: typing.Optional[typing.List[str]] = pydantic.Field(alias="apiKeys", default=None)
    routes: typing.Optional[typing.List[Route]] = None
    vpc: typing.Optional[VpcReference] = None
    lambda_functions: typing.Optional[typing.List[LambdaReference]] = pydantic.Field(
        alias="lambdaFunctions", default=None
    )
    cloud_watch_logs: typing.Optional[typing.List[CloudWatchLogReference]] = pydantic.Field(
        alias="cloudWatchLogs", default=None
    )
    iam_roles: typing.Optional[typing.List[IamRoleReference]] = pydantic.Field(alias="iamRoles", default=None)
    load_balancers: typing.Optional[typing.List[LoadBalancerReference]] = pydantic.Field(
        alias="loadBalancers", default=None
    )
    security_groups: typing.Optional[typing.List[SecurityGroupReference]] = pydantic.Field(
        alias="securityGroups", default=None
    )
    security_analysis: typing.Optional[ApiGatewaySecurity] = pydantic.Field(alias="securityAnalysis", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
