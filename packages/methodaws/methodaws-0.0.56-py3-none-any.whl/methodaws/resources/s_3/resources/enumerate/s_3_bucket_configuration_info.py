# This file was auto-generated by Fern from our API Definition.

from .....core.pydantic_utilities import UniversalBaseModel
import datetime as dt
import pydantic
import typing
from .s_3_public_access_block_configuration import S3PublicAccessBlockConfiguration
from .bucket_versioning_status import BucketVersioningStatus
from .s_3_mfa_delete_status import S3MfaDeleteStatus
from .encryption_rule import EncryptionRule
from .s_3_bucket_acl import S3BucketAcl
from .....core.pydantic_utilities import IS_PYDANTIC_V2


class S3BucketConfigurationInfo(UniversalBaseModel):
    creation_date: dt.datetime = pydantic.Field(alias="creationDate")
    owner_id: str = pydantic.Field(alias="ownerID")
    owner_name: str = pydantic.Field(alias="ownerName")
    public_access_config: typing.Optional[S3PublicAccessBlockConfiguration] = pydantic.Field(
        alias="publicAccessConfig", default=None
    )
    policy: typing.Optional[str] = None
    bucket_versioning: typing.Optional[BucketVersioningStatus] = pydantic.Field(alias="bucketVersioning", default=None)
    mfa_delete: typing.Optional[S3MfaDeleteStatus] = pydantic.Field(alias="mfaDelete", default=None)
    encryption_rules: typing.Optional[typing.List[EncryptionRule]] = pydantic.Field(
        alias="encryptionRules", default=None
    )
    acls: typing.Optional[typing.List[S3BucketAcl]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
