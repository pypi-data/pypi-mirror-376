# This file was auto-generated by Fern from our API Definition.

from .....core.pydantic_utilities import UniversalBaseModel
import typing
from .certificate import Certificate
from .access_log_settings import AccessLogSettings
import pydantic
from .route import Route
from .cors_configuration import CorsConfiguration
from .mutual_tls_authentication import MutualTlsAuthentication
from .authorizer import Authorizer
from .resource_reference import ResourceReference
from .api_gateway_security import ApiGatewaySecurity
from .....core.pydantic_utilities import IS_PYDANTIC_V2


class ApiGatewayResourceInfo(UniversalBaseModel):
    certificates: typing.Optional[typing.List[Certificate]] = None
    access_log_settings: typing.Optional[AccessLogSettings] = pydantic.Field(alias="accessLogSettings", default=None)
    paths: typing.Optional[typing.List[Route]] = None
    api_keys: typing.Optional[typing.List[str]] = pydantic.Field(alias="apiKeys", default=None)
    usage_plans: typing.Optional[typing.List[str]] = pydantic.Field(alias="usagePlans", default=None)
    routes: typing.Optional[typing.List[Route]] = None
    cors_configuration: typing.Optional[CorsConfiguration] = pydantic.Field(alias="corsConfiguration", default=None)
    mutual_tls_authentication: typing.Optional[MutualTlsAuthentication] = pydantic.Field(
        alias="mutualTlsAuthentication", default=None
    )
    authorizers: typing.Optional[typing.List[Authorizer]] = None
    related_resources: typing.Optional[typing.List[ResourceReference]] = pydantic.Field(
        alias="relatedResources", default=None
    )
    lambda_functions: typing.Optional[typing.List[ResourceReference]] = pydantic.Field(
        alias="lambdaFunctions", default=None
    )
    cloudwatch_logs: typing.Optional[typing.List[ResourceReference]] = pydantic.Field(
        alias="cloudwatchLogs", default=None
    )
    iam_roles: typing.Optional[typing.List[ResourceReference]] = pydantic.Field(alias="iamRoles", default=None)
    security_analysis: typing.Optional[ApiGatewaySecurity] = pydantic.Field(alias="securityAnalysis", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
