# This file was auto-generated by Fern from our API Definition.

from .....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .availability_zone import AvailabilityZone
from .vpc_cidr_block_association import VpcCidrBlockAssociation
from .subnet_state import SubnetState
from .tag import Tag
from .....core.pydantic_utilities import IS_PYDANTIC_V2


class SubnetConfigurationInfo(UniversalBaseModel):
    assign_ipv_6_address_on_creation: typing.Optional[bool] = pydantic.Field(
        alias="assignIpv6AddressOnCreation", default=None
    )
    availability_zone: typing.Optional[AvailabilityZone] = pydantic.Field(alias="availabilityZone", default=None)
    available_ip_address_count: typing.Optional[int] = pydantic.Field(alias="availableIpAddressCount", default=None)
    customer_owned_ipv_4_pool: typing.Optional[str] = pydantic.Field(alias="customerOwnedIpv4Pool", default=None)
    default_for_az: typing.Optional[bool] = pydantic.Field(alias="defaultForAz", default=None)
    enable_dns_64: typing.Optional[bool] = pydantic.Field(alias="enableDns64", default=None)
    enable_lni_at_device_index: typing.Optional[int] = pydantic.Field(alias="enableLniAtDeviceIndex", default=None)
    ipv_6_cidr_block_association_set: typing.Optional[typing.List[VpcCidrBlockAssociation]] = pydantic.Field(
        alias="ipv6CidrBlockAssociationSet", default=None
    )
    ipv_6_native: typing.Optional[bool] = pydantic.Field(alias="ipv6Native", default=None)
    map_customer_owned_ip_on_launch: typing.Optional[bool] = pydantic.Field(
        alias="mapCustomerOwnedIpOnLaunch", default=None
    )
    map_public_ip_on_launch: typing.Optional[bool] = pydantic.Field(alias="mapPublicIpOnLaunch", default=None)
    name: typing.Optional[str] = None
    outpost_arn: typing.Optional[str] = pydantic.Field(alias="outpostArn", default=None)
    owner_id: typing.Optional[str] = pydantic.Field(alias="ownerId", default=None)
    private_dns_name_options_on_launch: typing.Optional[str] = pydantic.Field(
        alias="privateDnsNameOptionsOnLaunch", default=None
    )
    state: typing.Optional[SubnetState] = None
    tags: typing.Optional[typing.List[Tag]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
