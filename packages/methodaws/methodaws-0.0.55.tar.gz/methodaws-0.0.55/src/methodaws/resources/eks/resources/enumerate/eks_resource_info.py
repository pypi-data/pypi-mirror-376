# This file was auto-generated by Fern from our API Definition.

from .....core.pydantic_utilities import UniversalBaseModel
import typing
from .eks_vpc_config import EksVpcConfig
import pydantic
from .node_group import NodeGroup
from .eks_kubernetes_network_config import EksKubernetesNetworkConfig
from .eks_logging import EksLogging
from .eks_identity import EksIdentity
from .eks_encryption_config import EksEncryptionConfig
from .eks_connector_config import EksConnectorConfig
from .eks_cluster_health import EksClusterHealth
from .eks_outpost_config import EksOutpostConfig
from .....core.pydantic_utilities import IS_PYDANTIC_V2


class EksResourceInfo(UniversalBaseModel):
    resources_vpc_config: typing.Optional[EksVpcConfig] = pydantic.Field(alias="resourcesVpcConfig", default=None)
    node_groups: typing.Optional[typing.List[NodeGroup]] = pydantic.Field(alias="nodeGroups", default=None)
    kubernetes_network_config: typing.Optional[EksKubernetesNetworkConfig] = pydantic.Field(
        alias="kubernetesNetworkConfig", default=None
    )
    logging: typing.Optional[EksLogging] = None
    identity: typing.Optional[EksIdentity] = None
    encryption_config: typing.Optional[typing.List[EksEncryptionConfig]] = pydantic.Field(
        alias="encryptionConfig", default=None
    )
    connector_config: typing.Optional[EksConnectorConfig] = pydantic.Field(alias="connectorConfig", default=None)
    health: typing.Optional[EksClusterHealth] = None
    outpost_config: typing.Optional[EksOutpostConfig] = pydantic.Field(alias="outpostConfig", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
