# -*- coding: utf-8 -*-

"""
aviationstack

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Pagination(object):

    """Implementation of the 'Pagination' model.

    Attributes:
        limit (int): Number of results per page
        offset (int): Number of results skipped
        count (int): Total number of results
        total (int): Total number of available results

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "limit": 'limit',
        "offset": 'offset',
        "count": 'count',
        "total": 'total'
    }

    def __init__(self,
                 limit=None,
                 offset=None,
                 count=None,
                 total=None):
        """Constructor for the Pagination class"""

        # Initialize members of the class
        self.limit = limit 
        self.offset = offset 
        self.count = count 
        self.total = total 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        limit = dictionary.get("limit") if dictionary.get("limit") else None
        offset = dictionary.get("offset") if dictionary.get("offset") else None
        count = dictionary.get("count") if dictionary.get("count") else None
        total = dictionary.get("total") if dictionary.get("total") else None
        # Return an object of this model
        return cls(limit,
                   offset,
                   count,
                   total)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'limit={self.limit!r}, '
                f'offset={self.offset!r}, '
                f'count={self.count!r}, '
                f'total={self.total!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'limit={self.limit!s}, '
                f'offset={self.offset!s}, '
                f'count={self.count!s}, '
                f'total={self.total!s})')
