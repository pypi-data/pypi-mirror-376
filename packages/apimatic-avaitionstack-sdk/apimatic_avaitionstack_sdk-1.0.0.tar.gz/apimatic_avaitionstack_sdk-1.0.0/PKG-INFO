Metadata-Version: 2.4
Name: apimatic-avaitionstack-sdk
Version: 1.0.0
Summary: The Aviation Stack API is a real-time and historical flight data API that provides details on flights, airlines, airports, routes, schedules, and aircraft worldwide, enabling easy integration of aviation data into applications and services.
Author-email: Muhammad Hamza Shahzad <muhammad.hamza@apimatic.io>
Project-URL: Documentation, https://www.apimatic.io/
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: apimatic-core>=0.2.22,~=0.2.0
Requires-Dist: apimatic-core-interfaces>=0.1.5,~=0.1.0
Requires-Dist: apimatic-requests-client-adapter>=0.1.8,~=0.1.0
Provides-Extra: testutils
Requires-Dist: pytest>=7.2.2; extra == "testutils"
Dynamic: license-file


# Getting Started with Aviationstack

## Introduction

AviationStack API provides real-time and historical aviation data including flights, airports, airlines, and more.
This API allows you to access comprehensive aviation information for various use cases.

## Install the Package

The package is compatible with Python versions `3.7+`.
Install the package from PyPi using the following pip command:

```bash
pip install apimatic-avaitionstack-sdk==1.0.0
```

You can also view the package at:
https://pypi.python.org/pypi/apimatic-avaitionstack-sdk/1.0.0

## Test the SDK

You can test the generated SDK and the server with test cases. `unittest` is used as the testing framework and `pytest` is used as the test runner. You can run the tests as follows:

Navigate to the root directory of the SDK and run the following commands


pip install -r test-requirements.txt
pytest


## Initialize the API Client

**_Note:_** Documentation for the client can be found [here.](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/client.md)

The following parameters are configurable for the API Client:

| Parameter | Type | Description |
|  --- | --- | --- |
| http_client_instance | `HttpClient` | The Http Client passed from the sdk user for making requests |
| override_http_client_configuration | `bool` | The value which determines to override properties of the passed Http Client from the sdk user |
| http_call_back | `HttpCallBack` | The callback value that is invoked before and after an HTTP call is made to an endpoint |
| timeout | `float` | The value to use for connection timeout. <br> **Default: 60** |
| max_retries | `int` | The number of times to retry an endpoint call if it fails. <br> **Default: 0** |
| backoff_factor | `float` | A backoff factor to apply between attempts after the second try. <br> **Default: 2** |
| retry_statuses | `Array of int` | The http statuses on which retry is to be done. <br> **Default: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524]** |
| retry_methods | `Array of string` | The http methods on which retry is to be done. <br> **Default: ['GET', 'PUT']** |
| proxy_settings | [`ProxySettings`](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/proxy-settings.md) | Optional proxy configuration to route HTTP requests through a proxy server. |
| custom_query_authentication_credentials | [`CustomQueryAuthenticationCredentials`](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/auth/custom-query-parameter.md) | The credential object for Custom Query Parameter |

The API client can be initialized as follows:

```python
from aviationstack.aviationstack_client import AviationstackClient
from aviationstack.configuration import Environment
from aviationstack.http.auth.custom_query_authentication import CustomQueryAuthenticationCredentials

client = AviationstackClient(
    custom_query_authentication_credentials=CustomQueryAuthenticationCredentials(
        access_key='access_key'
    ),
    environment=Environment.PRODUCTION
)
```

## Authorization

This API uses the following authentication schemes.

* [`ApiKeyAuth (Custom Query Parameter)`](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/auth/custom-query-parameter.md)

## List of APIs

* [Aircraft Types](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/controllers/aircraft-types.md)
* [Flights](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/controllers/flights.md)
* [Routes](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/controllers/routes.md)
* [Airports](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/controllers/airports.md)
* [Airlines](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/controllers/airlines.md)
* [Airplanes](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/controllers/airplanes.md)
* [Taxes](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/controllers/taxes.md)
* [Cities](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/controllers/cities.md)
* [Countries](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/controllers/countries.md)

## SDK Infrastructure

### Configuration

* [ProxySettings](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/proxy-settings.md)

### HTTP

* [HttpResponse](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/http-response.md)
* [HttpRequest](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/http-request.md)

### Utilities

* [ApiHelper](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/api-helper.md)
* [HttpDateTime](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/http-date-time.md)
* [RFC3339DateTime](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/rfc3339-date-time.md)
* [UnixDateTime](https://www.github.com/MuHamza30/apimatic-avaitionstack-python-sdk/tree/1.0.0/doc/unix-date-time.md)

