[project]
name = "pytest-drill-sergeant"
dynamic = ["version"]
description = "A pytest plugin that enforces test quality standards through automatic marker detection and AAA structure validation"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Jeff Richley", email = "jeffrichley@gmail.com" }
]
requires-python = ">=3.12"
dependencies = [
    "pytest>=7.0.0",
]
keywords = ["pytest", "testing", "quality", "standards", "AAA", "markers"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Pytest",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
]

[project.urls]
Homepage = "https://github.com/jeffrichley/pytest-drill-sergeant"
Repository = "https://github.com/jeffrichley/pytest-drill-sergeant.git"
Issues = "https://github.com/jeffrichley/pytest-drill-sergeant/issues"

[project.entry-points.pytest11]
drill_sergeant = "pytest_drill_sergeant.plugin"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "hypothesis>=6.136.6",
    "pytest-benchmark>=4.0.0",
    "psutil>=5.9.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.6.17",
    "mkdocstrings[python]>=0.30.0",
    "mike>=2.1.3",
    "mkdocs-git-revision-date-localized-plugin>=1.4.7",
    "mkdocs-mermaid2-plugin>=1.2.1",
]
typecheck = [
    "mypy",
]
security = [
    "pip-audit",
]

[tool.setuptools.dynamic]
version = {attr = "pytest_drill_sergeant.__version__"}

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 88
target-version = ["py312"]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.report]
fail_under = 50
show_missing = true

[tool.ruff]
line-length = 88
target-version = "py312"
src = ["src"]
exclude = [
    "stubs",
    "examples",
    "scripts",
    "tools",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "B",    # flake8-bugbear
    "Q",    # flake8-quotes
    "SIM",  # flake8-simplify
    "C90",  # mccabe
    "ARG",  # flake8-unused-arguments
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
    "PL",   # pylint
    "PERF", # perflint
    "D",    # pydocstyle
    "RUF",  # ruff-specific rules
    "A",    # flake8-builtins
    "G",    # flake8-logging-format
    "BLE",  # flake8-blind-except
    "TRY",  # tryceratops
    "EM",   # flake8-errmsg
    "PIE",  # flake8-pie
    "TCH",  # flake8-type-checking
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "PGH",  # pygrep-hooks
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PLR",  # pylint refactor
    "PLW",  # pylint warnings
    "PLE",  # pylint errors
]
ignore = [
    "E501",    # Line too long (Black handles this)
    "PLR2004", # Magic value used in comparison
    "RUF001",  # Allow emoji characters (we love emojis! ðŸŽ‰)
    "TC001",   # Type-checking imports (temporarily disabled)
    "BLE001",  # Blind exception handling (temporarily disabled)
    "T201",    # Print statements (temporarily disabled)
    "SLF001",  # Private member access (temporarily disabled)
    "PT018",   # Assertion breakdown (temporarily disabled)
    "PT013",   # Pytest import style (temporarily disabled)
    "PTH123",  # Pathlib usage (temporarily disabled)
    "ERA001",  # Commented code (temporarily disabled)
    "TRY300",  # Try/except patterns (temporarily disabled)
]

fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ARG001",  # Unused function argument
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D106",    # Missing docstring in public nested class
    "D107",    # Missing docstring in __init__
    "D200",    # One-line docstring should fit on one line
    "D205",    # 1 blank line required between summary line and description
    "D400",    # First line should end with a period
    "D401",    # First line should be in imperative mood
    "D415",    # First line should end with a period, question mark, or exclamation point
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.Any" = { msg = "Any is banned in this codebase. Use concrete types or TypeVars." }

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
allow-star-arg-any = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
files = ["src", "tests"]
python_version = "3.12"
# Basic safety
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_equality = true
# Any-type restrictions
disallow_any_unimported = true
disallow_any_expr = false
disallow_any_decorated = false  # Allow decorators like @patch
disallow_any_generics = true
disallow_subclassing_any = true

# Per-module configuration for tests
[[tool.mypy.overrides]]
module = "tests.*"
# Allow more relaxed typing in tests for mocking and fixtures
# Warning enforcement
warn_return_any = true
warn_unused_ignores = true
warn_unused_configs = true
warn_redundant_casts = true
warn_no_return = true
warn_unreachable = true
# Coverage enforcement
implicit_reexport = false
# Import type-checking
ignore_missing_imports = false
follow_imports = "normal"
show_error_codes = true
# Clean output formatting
pretty = true
color_output = true
show_column_numbers = true
exclude = []

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
pytest_drill_sergeant = ["py.typed"]

[tool.xenon]
max-absolute = "B"
max-modules = "A"
max-average = "A"
exclude = ["tests", "examples", "scripts", "tools"]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "build>=1.3.0",
    "mypy>=1.17.1",
    "pip-audit>=2.9.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "twine>=6.2.0",
    "validate-pyproject>=0.24.1",
    "xenon>=0.9.3",
]

# Example drill sergeant configuration
[tool.drill_sergeant]
# Custom marker mappings (directory_name = marker_name)
[tool.drill_sergeant.marker_mappings]
contract = "api"
smoke = "integration"
acceptance = "e2e"
benchmarks = "performance"
