
//----------------------------------------------------------------------------------------
//! \fn void MeshBlockTree::Refine(int &nnew)
//! \brief make finer leaves

void MeshBlockTree::Refine(int &nnew) {
  if (pleaf_ != nullptr) return;

  pleaf_ = new MeshBlockTree *[nleaf_];
  for (int n = 0; n < nleaf_; n++) pleaf_[n] = nullptr;

  for (int n = 0; n < nleaf_; n++) {
    int i = n & 1, j = (n >> 1) & 1, k = (n >> 2) & 1;
    pleaf_[n] = new MeshBlockTree(this, i, j, k);
  }

  std::int64_t nxmax, nymax, nzmax;
  std::int64_t ox, oy, oz, oxmin, oxmax, oymin, oymax, ozmin, ozmax;
  LogicalLocation nloc;
  nloc.level = loc_.level;

  oxmin = -1, oxmax = 1,
  nxmax = (pmesh_->nrbx1 << (loc_.level - pmesh_->root_level));
  if (pmesh_->f2)
    oymin = -1, oymax = 1,
    nymax = (pmesh_->nrbx2 << (loc_.level - pmesh_->root_level));
  else
    oymin = 0, oymax = 0, nymax = 1;
  if (pmesh_->f3)  // 3D
    ozmin = -1, ozmax = 1,
    nzmax = (pmesh_->nrbx3 << (loc_.level - pmesh_->root_level));
  else
    ozmin = 0, ozmax = 0, nzmax = 1;

  for (oz = ozmin; oz <= ozmax; oz++) {
    nloc.lx3 = loc_.lx3 + oz;
    if (nloc.lx3 < 0) {
      if (pmesh_->mesh_bcs[BoundaryFace::inner_x3] != BoundaryFlag::periodic)
        continue;
      else
        nloc.lx3 = nzmax - 1;
    }
    if (nloc.lx3 >= nzmax) {
      if (pmesh_->mesh_bcs[BoundaryFace::outer_x3] != BoundaryFlag::periodic)
        continue;
      else
        nloc.lx3 = 0;
    }
    for (oy = oymin; oy <= oymax; oy++) {
      nloc.lx2 = loc_.lx2 + oy;
      bool polar = false;
      if (nloc.lx2 < 0) {
        if (pmesh_->mesh_bcs[BoundaryFace::inner_x2] ==
            BoundaryFlag::periodic) {
          nloc.lx2 = nymax - 1;
        } else if (pmesh_->mesh_bcs[BoundaryFace::inner_x2] ==
                   BoundaryFlag::polar) {
          nloc.lx2 = 0;
          polar = true;
        } else {
          continue;
        }
      }
      if (nloc.lx2 >= nymax) {
        if (pmesh_->mesh_bcs[BoundaryFace::outer_x2] ==
            BoundaryFlag::periodic) {
          nloc.lx2 = 0;
        } else if (pmesh_->mesh_bcs[BoundaryFace::outer_x2] ==
                   BoundaryFlag::polar) {
          nloc.lx2 = nymax - 1;
          polar = true;
        } else {
          continue;
        }
      }
      if (polar) nloc.lx3 = (nloc.lx3 + nzmax / 2) % nzmax;
      for (ox = oxmin; ox <= oxmax; ox++) {
        if (ox == 0 && oy == 0 && oz == 0) continue;
        nloc.lx1 = loc_.lx1 + ox;
        if (nloc.lx1 < 0) {
          if (pmesh_->mesh_bcs[BoundaryFace::inner_x1] !=
              BoundaryFlag::periodic)
            continue;
          else
            nloc.lx1 = nxmax - 1;
        }
        if (nloc.lx1 >= nxmax) {
          if (pmesh_->mesh_bcs[BoundaryFace::outer_x1] !=
              BoundaryFlag::periodic)
            continue;
          else
            nloc.lx1 = 0;
        }
        proot_->AddMeshBlock(nloc, nnew);
      }
    }
  }
  // this block is not a leaf anymore
  gid_ = -1;

  nnew += nleaf_ - 1;
  return;
}

//----------------------------------------------------------------------------------------
//! \fn void MeshBlockTree::Derefine(int &ndel)
//! \brief destroy leaves and make this block a leaf

void MeshBlockTree::Derefine(int &ndel) {
  int s2 = 0, e2 = 0, s3 = 0, e3 = 0;
  if (pmesh_->f2) s2 = -1, e2 = 1;
  if (pmesh_->f3) s3 = -1, e3 = 1;
  for (int ox3 = s3; ox3 <= e3; ox3++) {
    for (int ox2 = s2; ox2 <= e2; ox2++) {
      for (int ox1 = -1; ox1 <= 1; ox1++) {
        MeshBlockTree *bt =
            proot_->FindNeighbor(loc_, ox1, ox2, ox3, pmesh_->mesh_bcs, true);
        if (bt != nullptr) {
          if (bt->pleaf_ != nullptr) {
            int lis, lie, ljs, lje, lks, lke;
            if (ox1 == -1)
              lis = lie = 1;
            else if (ox1 == 1)
              lis = lie = 0;
            else
              lis = 0, lie = 1;
            if (pmesh_->f2) {
              if (ox2 == -1)
                ljs = lje = 1;
              else if (ox2 == 1)
                ljs = lje = 0;
              else
                ljs = 0, lje = 1;
            } else {
              ljs = lje = 0;
            }
            if (pmesh_->f3) {
              if (ox3 == -1)
                lks = lke = 1;
              else if (ox3 == 1)
                lks = lke = 0;
              else
                lks = 0, lke = 1;
            } else {
              lks = lke = 0;
            }
            for (int lk = lks; lk <= lke; lk++) {
              for (int lj = ljs; lj <= lje; lj++) {
                for (int li = lis; li <= lie; li++) {
                  int n = li + (lj << 1) + (lk << 2);
                  if (bt->pleaf_[n]->pleaf_ != nullptr) return;
                }
              }
            }
          }
        }
      }
    }
  }

  gid_ = pleaf_[0]->gid_;  // now this is a leaf; inherit the first leaf's GID
  for (int n = 0; n < nleaf_; n++) delete pleaf_[n];
  delete[] pleaf_;
  pleaf_ = nullptr;
  ndel += nleaf_ - 1;
  return;
}
