
void OutputType::CalculateCartesianVector(AthenaArray<Real> &src, AthenaArray<Real> &dst,
                                          Coordinates *pco) {
  Real n1x, n1y, n1z, n2x, n2y, n2z, n3x, n3y, n3z;
  if (std::strcmp(COORDINATE_SYSTEM, "spherical_polar") == 0) {
    if (out_ks == out_ke) { // 2D
      for (int k=out_ks; k<=out_ke; k++) {
        for (int j=out_js; j<=out_je; j++) {
          n1x = std::sin(pco->x2v(j));
          n1z = std::cos(pco->x2v(j));
          n2x = std::cos(pco->x2v(j));
          n2z = -std::sin(pco->x2v(j));
          for (int i=out_is; i<=out_ie; i++) {
            dst(0,k,j,i) = src(0,k,j,i)*n1x + src(1,k,j,i)*n2x;
            dst(1,k,j,i) = src(2,k,j,i);
            dst(2,k,j,i) = src(0,k,j,i)*n1z + src(1,k,j,i)*n2z;
          }
        }
      }
    } else { // 3D
      for (int k=out_ks; k<=out_ke; k++) {
        n3x = -std::sin(pco->x3v(k));
        n3y = std::cos(pco->x3v(k));
        n3z = 0.0;
        for (int j=out_js; j<=out_je; j++) {
          n1x = std::sin(pco->x2v(j))*std::cos(pco->x3v(k));
          n1y = std::sin(pco->x2v(j))*std::sin(pco->x3v(k));
          n1z = std::cos(pco->x2v(j));
          n2x = std::cos(pco->x2v(j))*std::cos(pco->x3v(k));
          n2y = std::cos(pco->x2v(j))*std::sin(pco->x3v(k));
          n2z = -std::sin(pco->x2v(j));
          for (int i=out_is; i<=out_ie; i++) {
            dst(0,k,j,i) = src(0,k,j,i)*n1x + src(1,k,j,i)*n2x + src(2,k,j,i)*n3x;
            dst(1,k,j,i) = src(0,k,j,i)*n1y + src(1,k,j,i)*n2y + src(2,k,j,i)*n3y;
            dst(2,k,j,i) = src(0,k,j,i)*n1z + src(1,k,j,i)*n2z + src(2,k,j,i)*n3z;
          }
        }
      }
    }
  }
  if (std::strcmp(COORDINATE_SYSTEM, "cylindrical") == 0) {
    for (int k=out_ks; k<=out_ke; k++) {
      for (int j=out_js; j<=out_je; j++) {
        n1x = std::cos(pco->x2v(j));
        n1y = std::sin(pco->x2v(j));
        n2x =-std::sin(pco->x2v(j));
        n2y = std::cos(pco->x2v(j));
        for (int i=out_is; i<=out_ie; i++) {
          dst(0,k,j,i) = src(0,k,j,i)*n1x + src(1,k,j,i)*n2x;
          dst(1,k,j,i) = src(0,k,j,i)*n1y + src(1,k,j,i)*n2y;
          dst(2,k,j,i) = src(2,k,j,i);
        }
      }
    }
  }
  return;
}
