
if (SELF_GRAVITY_ENABLED) {
  if (ContainVariable(output_params.variable, "phi") ||
      ContainVariable(output_params.variable, "prim") ||
      ContainVariable(output_params.variable, "cons")) {
    pod = new OutputData;
    pod->type = "SCALARS";
    pod->name = "phi";
    pod->data.InitWithShallowSlice(pgrav->phi, 4, 0, 1);
    AppendOutputDataNode(pod);
    num_vars_++;
    if (pgrav->output_defect) {
      pod = new OutputData;
      pod->type = "SCALARS";
      pod->name = "defect-phi";
      pod->data.InitWithShallowSlice(pgrav->def, 4, 0, 1);
      AppendOutputDataNode(pod);
      num_vars_++;
    }
  }
}  // endif (SELF_GRAVITY_ENABLED)

if (NSCALARS > 0) {
}

if (CHEMRADIATION_ENABLED) {
  if (ContainVariable(output_params.variable, "rad") ||
      ContainVariable(output_params.variable, "prim") ||
      ContainVariable(output_params.variable, "cons")) {
    std::string name_ir_avg = "ir_avg";
    for (int i = 0; i < pchemrad->nfreq; i++) {
      std::string vi = name_ir_avg + std::to_string(i);
      pod = new OutputData;
      pod->type = "SCALARS";
      pod->name = vi;
      pod->data.InitWithShallowSlice(pchemrad->ir_avg, 4, i, 1);
      AppendOutputDataNode(pod);
      num_vars_++;
    }
    if (CHEMISTRY_ENABLED) {
      if (DEBUG) {
        // for testing six-ray. Not implemented in HDF5 output yet
        if (std::strcmp(CHEMRADIATION_INTEGRATOR, "six_ray") == 0) {
          // average column density
          std::string name_col_avg = "col_avg";
          for (int i = 0; i < pchemrad->pchemradintegrator->ncol; i++) {
            std::string vi = name_col_avg + std::to_string(i);
            pod = new OutputData;
            pod->type = "SCALARS";
            pod->name = vi;
            pod->data.InitWithShallowSlice(
                pchemrad->pchemradintegrator->col_avg, 4, i, 1);
            AppendOutputDataNode(pod);
            num_vars_++;
          }
          // column density components
          pod = new OutputData;
          pod->type = "VECTORS";
          pod->name = "col_Htot_p";
          pod->data.InitWithShallowSlice(pchemrad->pchemradintegrator->col_Htot,
                                         4, 0, 3);
          AppendOutputDataNode(pod);
          num_vars_ += 3;
          pod = new OutputData;
          pod->type = "VECTORS";
          pod->name = "col_H2_p";
          pod->data.InitWithShallowSlice(pchemrad->pchemradintegrator->col_H2,
                                         4, 0, 3);
          AppendOutputDataNode(pod);
          num_vars_ += 3;
          pod = new OutputData;
          pod->type = "VECTORS";
          pod->name = "col_CO_p";
          pod->data.InitWithShallowSlice(pchemrad->pchemradintegrator->col_CO,
                                         4, 0, 3);
          AppendOutputDataNode(pod);
          num_vars_ += 3;
          pod = new OutputData;
          pod->type = "VECTORS";
          pod->name = "col_C_p";
          pod->data.InitWithShallowSlice(pchemrad->pchemradintegrator->col_C, 4,
                                         0, 3);
          AppendOutputDataNode(pod);
          num_vars_ += 3;
          pod = new OutputData;
          pod->type = "VECTORS";
          pod->name = "col_Htot_m";
          pod->data.InitWithShallowSlice(pchemrad->pchemradintegrator->col_Htot,
                                         4, 3, 3);
          AppendOutputDataNode(pod);
          num_vars_ += 3;
          pod = new OutputData;
          pod->type = "VECTORS";
          pod->name = "col_H2_m";
          pod->data.InitWithShallowSlice(pchemrad->pchemradintegrator->col_H2,
                                         4, 3, 3);
          AppendOutputDataNode(pod);
          num_vars_ += 3;
          pod = new OutputData;
          pod->type = "VECTORS";
          pod->name = "col_CO_m";
          pod->data.InitWithShallowSlice(pchemrad->pchemradintegrator->col_CO,
                                         4, 3, 3);
          AppendOutputDataNode(pod);
          num_vars_ += 3;
          pod = new OutputData;
          pod->type = "VECTORS";
          pod->name = "col_C_m";
          pod->data.InitWithShallowSlice(pchemrad->pchemradintegrator->col_C, 4,
                                         3, 3);
          AppendOutputDataNode(pod);
          num_vars_ += 3;
        }
      }
    }
  }
}
// The following radiation/cosmic ray/thermal conduction are all
// cell centered variable
if (NR_RADIATION_ENABLED || IM_RADIATION_ENABLED) {
  if (prad->nfreq == 1) {
    // (lab-frame) radiation energy density
    if (ContainVariable(output_params.variable, "Er") ||
        ContainVariable(output_params.variable, "prim") ||
        ContainVariable(output_params.variable, "cons")) {
      pod = new OutputData;
      pod->type = "SCALARS";
      pod->name = "Er";
      pod->data.InitWithShallowSlice(prad->rad_mom, 4, IER, 1);
      AppendOutputDataNode(pod);
      num_vars_++;
    }

    // comoving frame fram radiation flux vector
    if (ContainVariable(output_params.variable, "Fr") ||
        ContainVariable(output_params.variable, "prim") ||
        ContainVariable(output_params.variable, "cons")) {
      pod = new OutputData;
      pod->type = "VECTORS";
      pod->name = "Fr";
      pod->data.InitWithShallowSlice(prad->rad_mom, 4, IFR1, 3);
      AppendOutputDataNode(pod);
      num_vars_ += 3;
      if (output_params.cartesian_vector) {
        AthenaArray<Real> src;
        src.InitWithShallowSlice(prad->rad_mom, 4, IFR1, 3);
        pod = new OutputData;
        pod->type = "VECTORS";
        pod->name = "Fr_xyz";
        pod->data.NewAthenaArray(3, prad->rad_mom.GetDim3(),
                                 prad->rad_mom.GetDim2(),
                                 prad->rad_mom.GetDim1());
        CalculateCartesianVector(src, pod->data, pmb->pcoord);
        AppendOutputDataNode(pod);
        num_vars_ += 3;
      }
    }

    // each component of radiation flux
    if (ContainVariable(output_params.variable, "Frx") ||
        ContainVariable(output_params.variable, "Fr1")) {
      pod = new OutputData;
      pod->type = "SCALARS";
      pod->name = "Fr1";
      pod->data.InitWithShallowSlice(prad->rad_mom, 4, IFR1, 1);
      AppendOutputDataNode(pod);
      num_vars_++;
    }

    if (ContainVariable(output_params.variable, "Fry") ||
        ContainVariable(output_params.variable, "Fr2")) {
      pod = new OutputData;
      pod->type = "SCALARS";
      pod->name = "Fr2";
      pod->data.InitWithShallowSlice(prad->rad_mom, 4, IFR2, 1);
      AppendOutputDataNode(pod);
      num_vars_++;
    }

    if (ContainVariable(output_params.variable, "Frz") ||
        ContainVariable(output_params.variable, "Fr3")) {
      pod = new OutputData;
      pod->type = "SCALARS";
      pod->name = "Fr3";
      pod->data.InitWithShallowSlice(prad->rad_mom, 4, IFR3, 1);
      AppendOutputDataNode(pod);
      num_vars_++;
    }

    // lab frame radiation pressure
    if (ContainVariable(output_params.variable, "Pr") ||
        ContainVariable(output_params.variable, "prim") ||
        ContainVariable(output_params.variable, "cons")) {
      pod = new OutputData;
      pod->type = "TENSORS";
      pod->name = "Pr";
      pod->data.InitWithShallowSlice(prad->rad_mom, 4, IPR11, 9);
      AppendOutputDataNode(pod);
      num_vars_ += 9;
    }

    // (comoving-frame) radiation energy density
    if (ContainVariable(output_params.variable, "Er0") ||
        ContainVariable(output_params.variable, "prim") ||
        ContainVariable(output_params.variable, "cons")) {
      pod = new OutputData;
      pod->type = "SCALARS";
      pod->name = "Er0";
      pod->data.InitWithShallowSlice(prad->rad_mom_cm, 4, IER, 1);
      AppendOutputDataNode(pod);
      num_vars_++;
    }

    // comoving frame fram radiation flux vector
    if (ContainVariable(output_params.variable, "Fr0") ||
        ContainVariable(output_params.variable, "prim") ||
        ContainVariable(output_params.variable, "cons")) {
      pod = new OutputData;
      pod->type = "VECTORS";
      pod->name = "Fr0";
      pod->data.InitWithShallowSlice(prad->rad_mom_cm, 4, IFR1, 3);
      AppendOutputDataNode(pod);
      num_vars_ += 3;
      if (output_params.cartesian_vector) {
        AthenaArray<Real> src;
        src.InitWithShallowSlice(prad->rad_mom_cm, 4, IFR1, 3);
        pod = new OutputData;
        pod->type = "VECTORS";
        pod->name = "Fr0_xyz";
        pod->data.NewAthenaArray(3, prad->rad_mom_cm.GetDim3(),
                                 prad->rad_mom_cm.GetDim2(),
                                 prad->rad_mom_cm.GetDim1());
        CalculateCartesianVector(src, pod->data, pmb->pcoord);
        AppendOutputDataNode(pod);
        num_vars_ += 3;
      }
    }

    if (ContainVariable(output_params.variable, "Fr0x") ||
        ContainVariable(output_params.variable, "Fr01")) {
      pod = new OutputData;
      pod->type = "SCALARS";
      pod->name = "Fr01";
      pod->data.InitWithShallowSlice(prad->rad_mom_cm, 4, IFR1, 1);
      AppendOutputDataNode(pod);
      num_vars_++;
    }

    if (ContainVariable(output_params.variable, "Fr0y") ||
        ContainVariable(output_params.variable, "Fr02")) {
      pod = new OutputData;
      pod->type = "SCALARS";
      pod->name = "Fr02";
      pod->data.InitWithShallowSlice(prad->rad_mom_cm, 4, IFR2, 1);
      AppendOutputDataNode(pod);
      num_vars_++;
    }

    if (ContainVariable(output_params.variable, "Fr0z") ||
        ContainVariable(output_params.variable, "Fr03")) {
      pod = new OutputData;
      pod->type = "SCALARS";
      pod->name = "Fr03";
      pod->data.InitWithShallowSlice(prad->rad_mom_cm, 4, IFR3, 1);
      AppendOutputDataNode(pod);
      num_vars_++;
    }
  } else {
    //--------/--------/--------/--------/--------/--------/--------
    for (int ifr = 0; ifr < prad->nfreq; ++ifr) {
      std::string er_ifr = "Er_" + std::to_string(ifr);
      std::string fr_ifr = "Fr_" + std::to_string(ifr) + "_";
      std::string frxyz_ifr = "Frxyz_" + std::to_string(ifr) + "_";
      std::string frx_ifr = "Frx_" + std::to_string(ifr) + "_";
      std::string fry_ifr = "Fry_" + std::to_string(ifr) + "_";
      std::string frz_ifr = "Frz_" + std::to_string(ifr) + "_";
      std::string pr_ifr = "Pr_" + std::to_string(ifr) + "_";
      std::string er0_ifr = "Er0_" + std::to_string(ifr);
      std::string fr0_ifr = "Fr0_" + std::to_string(ifr) + "_";
      std::string fr0xyz_ifr = "Fr0xyz_" + std::to_string(ifr) + "_";
      std::string fr0x_ifr = "Fr0x_" + std::to_string(ifr) + "_";
      std::string fr0y_ifr = "Fr0y_" + std::to_string(ifr) + "_";
      std::string fr0z_ifr = "Fr0z_" + std::to_string(ifr) + "_";

      if (ContainVariable(output_params.variable, er_ifr) ||
          ContainVariable(output_params.variable, "prim") ||
          ContainVariable(output_params.variable, "cons")) {
        pod = new OutputData;
        pod->type = "SCALARS";
        pod->name = er_ifr;
        pod->data.InitWithShallowSlice(prad->rad_mom_nu, 4, ifr * 13 + IER, 1);
        AppendOutputDataNode(pod);
        num_vars_++;
      }

      // comoving frame fram radiation flux vector
      if (ContainVariable(output_params.variable, fr_ifr) ||
          ContainVariable(output_params.variable, "prim") ||
          ContainVariable(output_params.variable, "cons")) {
        pod = new OutputData;
        pod->type = "VECTORS";
        pod->name = fr_ifr;
        pod->data.InitWithShallowSlice(prad->rad_mom_nu, 4, ifr * 13 + IFR1, 3);
        AppendOutputDataNode(pod);
        num_vars_ += 3;
        if (output_params.cartesian_vector) {
          AthenaArray<Real> src;
          src.InitWithShallowSlice(prad->rad_mom_nu, 4, ifr * 13 + IFR1, 3);
          pod = new OutputData;
          pod->type = "VECTORS";
          pod->name = frxyz_ifr;
          pod->data.NewAthenaArray(3, prad->rad_mom_nu.GetDim3(),
                                   prad->rad_mom_nu.GetDim2(),
                                   prad->rad_mom_nu.GetDim1());
          CalculateCartesianVector(src, pod->data, pmb->pcoord);
          AppendOutputDataNode(pod);
          num_vars_ += 3;
        }
      }

      if (ContainVariable(output_params.variable, frx_ifr)) {
        pod = new OutputData;
        pod->type = "SCALARS";
        pod->name = frx_ifr;
        pod->data.InitWithShallowSlice(prad->rad_mom_nu, 4, ifr * 13 + IFR1, 1);
        AppendOutputDataNode(pod);
        num_vars_++;
      }

      if (ContainVariable(output_params.variable, fry_ifr)) {
        pod = new OutputData;
        pod->type = "SCALARS";
        pod->name = fry_ifr;
        pod->data.InitWithShallowSlice(prad->rad_mom_nu, 4, ifr * 13 + IFR2, 1);
        AppendOutputDataNode(pod);
        num_vars_++;
      }

      if (ContainVariable(output_params.variable, frz_ifr)) {
        pod = new OutputData;
        pod->type = "SCALARS";
        pod->name = frz_ifr;
        pod->data.InitWithShallowSlice(prad->rad_mom_nu, 4, ifr * 13 + IFR3, 1);
        AppendOutputDataNode(pod);
        num_vars_++;
      }

      if (ContainVariable(output_params.variable, pr_ifr) ||
          ContainVariable(output_params.variable, "prim") ||
          ContainVariable(output_params.variable, "cons")) {
        pod = new OutputData;
        pod->type = "TENSORS";
        pod->name = pr_ifr;
        pod->data.InitWithShallowSlice(prad->rad_mom_nu, 4, ifr * 13 + IPR11,
                                       9);
        AppendOutputDataNode(pod);
        num_vars_ += 9;
      }

      if (ContainVariable(output_params.variable, er0_ifr) ||
          ContainVariable(output_params.variable, "prim") ||
          ContainVariable(output_params.variable, "cons")) {
        pod = new OutputData;
        pod->type = "SCALARS";
        pod->name = er0_ifr;
        pod->data.InitWithShallowSlice(prad->rad_mom_cm_nu, 4, ifr * 4 + IER,
                                       1);
        AppendOutputDataNode(pod);
        num_vars_++;
      }

      if (ContainVariable(output_params.variable, fr0_ifr) ||
          ContainVariable(output_params.variable, "prim") ||
          ContainVariable(output_params.variable, "cons")) {
        pod = new OutputData;
        pod->type = "VECTORS";
        pod->name = fr0_ifr;
        pod->data.InitWithShallowSlice(prad->rad_mom_cm_nu, 4, ifr * 4 + IFR1,
                                       3);
        AppendOutputDataNode(pod);
        num_vars_ += 3;
        if (output_params.cartesian_vector) {
          AthenaArray<Real> src;
          src.InitWithShallowSlice(prad->rad_mom_cm_nu, 4, ifr * 4 + IFR1, 3);
          pod = new OutputData;
          pod->type = "VECTORS";
          pod->name = fr0xyz_ifr;
          pod->data.NewAthenaArray(3, prad->rad_mom_cm_nu.GetDim3(),
                                   prad->rad_mom_cm_nu.GetDim2(),
                                   prad->rad_mom_cm_nu.GetDim1());
          CalculateCartesianVector(src, pod->data, pmb->pcoord);
          AppendOutputDataNode(pod);
          num_vars_ += 3;
        }
      }

      if (ContainVariable(output_params.variable, fr0x_ifr)) {
        pod = new OutputData;
        pod->type = "SCALARS";
        pod->name = fr0x_ifr;
        pod->data.InitWithShallowSlice(prad->rad_mom_cm_nu, 4, ifr * 4 + IFR1,
                                       1);
        AppendOutputDataNode(pod);
        num_vars_++;
      }

      if (ContainVariable(output_params.variable, fr0y_ifr)) {
        pod = new OutputData;
        pod->type = "SCALARS";
        pod->name = fr0y_ifr;
        pod->data.InitWithShallowSlice(prad->rad_mom_cm_nu, 4, ifr * 4 + IFR2,
                                       1);
        AppendOutputDataNode(pod);
        num_vars_++;
      }

      if (ContainVariable(output_params.variable, fr0z_ifr)) {
        pod = new OutputData;
        pod->type = "SCALARS";
        pod->name = fr0z_ifr;
        pod->data.InitWithShallowSlice(prad->rad_mom_cm_nu, 4, ifr * 4 + IFR3,
                                       1);
        AppendOutputDataNode(pod);
        num_vars_++;
      }
    }
  }
  //-------------------------------------------------------
  for (int ifr = 0; ifr < prad->nfreq; ++ifr) {
    std::string sigmaa_ifr = "Sigma_a_" + std::to_string(ifr);
    std::string sigmas_ifr = "Sigma_s_" + std::to_string(ifr);
    std::string sigmap_ifr = "Sigma_p_" + std::to_string(ifr);
    if (ContainVariable(output_params.variable, sigmas_ifr) ||
        ContainVariable(output_params.variable, "prim") ||
        ContainVariable(output_params.variable, "cons")) {
      pod = new OutputData;
      pod->type = "SCALARS";
      pod->name = sigmas_ifr;
      pod->data.InitWithShallowSlice(prad->output_sigma, 4, 3 * ifr + OPAS, 1);
      AppendOutputDataNode(pod);
      num_vars_ += 1;
    }

    if (ContainVariable(output_params.variable, sigmaa_ifr) ||
        ContainVariable(output_params.variable, "prim") ||
        ContainVariable(output_params.variable, "cons")) {
      pod = new OutputData;
      pod->type = "SCALARS";
      pod->name = sigmaa_ifr;
      pod->data.InitWithShallowSlice(prad->output_sigma, 4, 3 * ifr + OPAA, 1);
      AppendOutputDataNode(pod);
      num_vars_ += 1;
    }

    if (ContainVariable(output_params.variable, sigmap_ifr) ||
        ContainVariable(output_params.variable, "prim") ||
        ContainVariable(output_params.variable, "cons")) {
      pod = new OutputData;
      pod->type = "SCALARS";
      pod->name = sigmap_ifr;
      pod->data.InitWithShallowSlice(prad->output_sigma, 4, 3 * ifr + OPAP, 1);
      AppendOutputDataNode(pod);
      num_vars_ += 1;
    }
  }  // end ifr loop
}  // End (RADIATION_ENABLED)

if (CR_ENABLED) {
  if (ContainVariable(output_params.variable, "Ec") ||
      ContainVariable(output_params.variable, "prim") ||
      ContainVariable(output_params.variable, "cons")) {
    pod = new OutputData;
    pod->type = "SCALARS";
    pod->name = "Ec";
    pod->data.InitWithShallowSlice(pcr->u_cr, 4, CRE, 1);
    AppendOutputDataNode(pod);
    num_vars_++;
  }

  // comoving frame fram radiation flux vector
  if (ContainVariable(output_params.variable, "Fc") ||
      ContainVariable(output_params.variable, "prim") ||
      ContainVariable(output_params.variable, "cons")) {
    pod = new OutputData;
    pod->type = "VECTORS";
    pod->name = "Fc";
    pod->data.InitWithShallowSlice(pcr->u_cr, 4, CRF1, 3);
    AppendOutputDataNode(pod);
    num_vars_ += 3;
    if (output_params.cartesian_vector) {
      AthenaArray<Real> src;
      src.InitWithShallowSlice(pcr->u_cr, 4, CRF1, 3);
      pod = new OutputData;
      pod->type = "VECTORS";
      pod->name = "Fr_xyz";
      pod->data.NewAthenaArray(3, pcr->u_cr.GetDim3(), pcr->u_cr.GetDim2(),
                               pcr->u_cr.GetDim1());
      CalculateCartesianVector(src, pod->data, pmb->pcoord);
      AppendOutputDataNode(pod);
      num_vars_ += 3;
    }
  }

  if (ContainVariable(output_params.variable, "Sigma_diff") ||
      ContainVariable(output_params.variable, "prim") ||
      ContainVariable(output_params.variable, "cons")) {
    pod = new OutputData;
    pod->type = "VECTORS";
    pod->name = "Sigma_diff";
    pod->data.InitWithShallowSlice(pcr->sigma_diff, 4, 0, 3);
    AppendOutputDataNode(pod);
    num_vars_ += 3;
  }

  if (ContainVariable(output_params.variable, "Sigma_adv") ||
      ContainVariable(output_params.variable, "prim") ||
      ContainVariable(output_params.variable, "cons")) {
    pod = new OutputData;
    pod->type = "VECTORS";
    pod->name = "Sigma_adv";
    pod->data.InitWithShallowSlice(pcr->sigma_adv, 4, 0, 3);
    AppendOutputDataNode(pod);
    num_vars_ += 3;
  }

  // The streaming velocity
  if (ContainVariable(output_params.variable, "Vc") ||
      ContainVariable(output_params.variable, "prim") ||
      ContainVariable(output_params.variable, "cons")) {
    pod = new OutputData;
    pod->type = "VECTORS";
    pod->name = "Vc";
    pod->data.InitWithShallowSlice(pcr->v_adv, 4, 0, 3);
    AppendOutputDataNode(pod);
    num_vars_ += 3;
    if (output_params.cartesian_vector) {
      AthenaArray<Real> src;
      src.InitWithShallowSlice(pcr->v_adv, 4, 0, 3);
      pod = new OutputData;
      pod->type = "VECTORS";
      pod->name = "Vc_xyz";
      pod->data.NewAthenaArray(3, pcr->v_adv.GetDim3(), pcr->v_adv.GetDim2(),
                               pcr->v_adv.GetDim1());
      CalculateCartesianVector(src, pod->data, pmb->pcoord);
      AppendOutputDataNode(pod);
      num_vars_ += 3;
    }
  }
}  // end Cosmic Rays

if (CRDIFFUSION_ENABLED) {
  if (ContainVariable(output_params.variable, "ecr") ||
      ContainVariable(output_params.variable, "prim") ||
      ContainVariable(output_params.variable, "cons")) {
    pod = new OutputData;
    pod->type = "SCALARS";
    pod->name = "ecr";
    pod->data.InitWithShallowSlice(pcrdiff->ecr, 4, 0, 1);
    AppendOutputDataNode(pod);
    num_vars_++;
    if (pcrdiff->output_defect) {
      pod = new OutputData;
      pod->type = "SCALARS";
      pod->name = "defect-ecr";
      pod->data.InitWithShallowSlice(pcrdiff->def, 4, 0, 1);
      AppendOutputDataNode(pod);
      num_vars_++;
    }
  }
  if (ContainVariable(output_params.variable, "zeta") ||
      ContainVariable(output_params.variable, "prim") ||
      ContainVariable(output_params.variable, "cons")) {
    pod = new OutputData;
    pod->type = "SCALARS";
    pod->name = "zeta";
    pod->data.InitWithShallowSlice(pcrdiff->zeta, 4, 0, 1);
    AppendOutputDataNode(pod);
    num_vars_++;
  }
}

// note, the Bcc variables are stored in a separate HDF5 dataset from the above
// Output nodes, and it must come after those nodes in the linked list
if (MAGNETIC_FIELDS_ENABLED) {
}  // endif (MAGNETIC_FIELDS_ENABLED)
