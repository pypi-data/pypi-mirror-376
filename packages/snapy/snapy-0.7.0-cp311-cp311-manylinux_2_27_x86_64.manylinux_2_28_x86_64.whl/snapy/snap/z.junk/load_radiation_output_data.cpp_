
void OutputType::loadRadiationOutputData(MeshBlock *pmb) {
  if (output_params.variable.compare("rad") == 0 ||
      output_params.variable.compare("radtau") == 0) {
    for (int b = 0; b < prad->GetNumBands(); ++b) {
      auto pband = prad->GetBand(b);
      // tau
      pod = new OutputData;
      pod->type = "SCALARS";
      pod->name = pband->GetName() + "-tau";
      pod->data.InitWithShallowSlice(pband->btau, 4, 0, 1);
      AppendOutputDataNode(pod);
      num_vars_ += 1;
    }
  }

  if (output_params.variable.compare("rad") == 0 ||
      output_params.variable.compare("radtime") == 0) {
    // rad time
    pod = new OutputData;
    pod->type = "SCALARS";
    pod->name = "radtime";
    pod->data.InitWithShallowSlice(prad->rtime, 4, 0, 1);
    AppendOutputDataNode(pod);
    num_vars_ += 1;
  }

  if (output_params.variable.compare("rad") == 0 ||
      output_params.variable.compare("radflux") == 0) {
    for (int b = 0; b < prad->GetNumBands(); ++b) {
      auto pband = prad->GetBand(b);
      // flux up
      pod = new OutputData;
      pod->type = "SCALARS";
      pod->name = pband->GetName() + "-flxup";
      pod->data.InitWithShallowSlice(pband->bflxup, 4, 0, 1);
      AppendOutputDataNode(pod);
      num_vars_ += 1;
    }

    for (int b = 0; b < prad->GetNumBands(); ++b) {
      auto pband = prad->GetBand(b);
      // flux down
      pod = new OutputData;
      pod->type = "SCALARS";
      pod->name = pband->GetName() + "-flxdn";
      pod->data.InitWithShallowSlice(pband->bflxdn, 4, 0, 1);
      AppendOutputDataNode(pod);
      num_vars_ += 1;
    }
  }

  if (output_params.variable.compare("rad") == 0 ||
      output_params.variable.compare("radtoa") == 0) {
    if (prad->radiance.GetDim3() > 0) {
      pod = new OutputData;
      pod->type = "SCALARS";
      pod->name = "radiance";
      pod->data.InitWithShallowSlice(prad->radiance, 4, 0, 1);
      AppendOutputDataNode(pod);
      num_vars_ += 1;

      // for (auto p : prad->bands) p->writeBinRadiance(&output_params);
    }
  }
}
