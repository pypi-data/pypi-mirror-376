# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the Veeroute Studio.  ## Reserved attributes  These attribute keys are reserved for specific business logic:  | Attribute key        | Parent entity | Purpose                                                                                                                                                                                      | |:---------------------|:--------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | `ICON_NAME`          | location      | The attribute value is written to the `web_location_geopoint.icon_name` field                                                                                                                | | `FORCED_GEOPROVIDER` | geo_settings  | The attribute value determines the geodata provider for rendering flights on the map, which will be used instead of the one specified in the `plan_settings.geo_settings.geo_provider` field |  ## Entity relationship diagram  ![erd](../uml/studio.svg) 

    The version of the OpenAPI document: 7.23.2924
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class TableTransportColumnType(str, Enum):
    """
    Column name in the transport table:   * `ESSENCE_KEY` - entity key   * `ENABLED` - participation in calculation   * `PRISTINE` - data change flag 
    """

    """
    allowed enum values
    """
    ESSENCE_KEY = 'ESSENCE_KEY'
    ENABLED = 'ENABLED'
    PRISTINE = 'PRISTINE'
    AVAILABILITY_TIME = 'AVAILABILITY_TIME'
    TRANSPORT_TYPE = 'TRANSPORT_TYPE'
    TRIP_KEY = 'TRIP_KEY'
    TRIP_NAME = 'TRIP_NAME'
    LOCATION_KEYS = 'LOCATION_KEYS'
    MASS = 'MASS'
    VOLUME = 'VOLUME'
    CAPACITY_A = 'CAPACITY_A'
    CAPACITY_B = 'CAPACITY_B'
    CAPACITY_C = 'CAPACITY_C'
    TRANSPORT_FEATURES = 'TRANSPORT_FEATURES'
    PERFORMER_RESTRICTIONS = 'PERFORMER_RESTRICTIONS'
    TRIPS_COUNT = 'TRIPS_COUNT'
    SHIFTS_COUNT = 'SHIFTS_COUNT'
    NAME = 'NAME'
    ATTRIBUTES = 'ATTRIBUTES'
    CUSTOMFIELDS = 'CUSTOMFIELDS'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TableTransportColumnType from a JSON string"""
        return cls(json.loads(json_str))


