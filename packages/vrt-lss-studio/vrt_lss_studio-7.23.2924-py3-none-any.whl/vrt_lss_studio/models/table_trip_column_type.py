# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the Veeroute Studio.  ## Reserved attributes  These attribute keys are reserved for specific business logic:  | Attribute key        | Parent entity | Purpose                                                                                                                                                                                      | |:---------------------|:--------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | `ICON_NAME`          | location      | The attribute value is written to the `web_location_geopoint.icon_name` field                                                                                                                | | `FORCED_GEOPROVIDER` | geo_settings  | The attribute value determines the geodata provider for rendering flights on the map, which will be used instead of the one specified in the `plan_settings.geo_settings.geo_provider` field |  ## Entity relationship diagram  ![erd](../uml/studio.svg) 

    The version of the OpenAPI document: 7.23.2924
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class TableTripColumnType(str, Enum):
    """
    Column name in the table with trips:   * `ESSENCE_KEY` - entity key   * `ENABLED` - participation in the calculation   * `PRISTINE` - data change flag 
    """

    """
    allowed enum values
    """
    ESSENCE_KEY = 'ESSENCE_KEY'
    ENABLED = 'ENABLED'
    PRISTINE = 'PRISTINE'
    TRIP_NAME = 'TRIP_NAME'
    COST = 'COST'
    REWARD = 'REWARD'
    PROFIT = 'PROFIT'
    DRIVING_TIME = 'DRIVING_TIME'
    WAITING_TIME = 'WAITING_TIME'
    BREAK_TIME = 'BREAK_TIME'
    REST_TIME = 'REST_TIME'
    WORKING_TIME = 'WORKING_TIME'
    ARRIVING_TIME = 'ARRIVING_TIME'
    DEPARTURE_TIME = 'DEPARTURE_TIME'
    TOTAL_TIME = 'TOTAL_TIME'
    DISTANCE = 'DISTANCE'
    TIME_WINDOW = 'TIME_WINDOW'
    ORDERS_COUNT = 'ORDERS_COUNT'
    PLAN_ORDERS_COUNT = 'PLAN_ORDERS_COUNT'
    WAITLIST_ORDERS_COUNT = 'WAITLIST_ORDERS_COUNT'
    STOPS_COUNT = 'STOPS_COUNT'
    LOCATIONS_COUNT = 'LOCATIONS_COUNT'
    CARGO_CAPACITY_RATIO_MASS = 'CARGO_CAPACITY_RATIO_MASS'
    CARGO_CAPACITY_RATIO_VOLUME = 'CARGO_CAPACITY_RATIO_VOLUME'
    CARGO_CAPACITY_RATIO_CAPACITY_A = 'CARGO_CAPACITY_RATIO_CAPACITY_A'
    CARGO_CAPACITY_RATIO_CAPACITY_B = 'CARGO_CAPACITY_RATIO_CAPACITY_B'
    CARGO_CAPACITY_RATIO_CAPACITY_C = 'CARGO_CAPACITY_RATIO_CAPACITY_C'
    MAX_TRANSPORT_LOAD_MASS = 'MAX_TRANSPORT_LOAD_MASS'
    MAX_TRANSPORT_LOAD_VOLUME = 'MAX_TRANSPORT_LOAD_VOLUME'
    MAX_TRANSPORT_LOAD_CAPACITY_A = 'MAX_TRANSPORT_LOAD_CAPACITY_A'
    MAX_TRANSPORT_LOAD_CAPACITY_B = 'MAX_TRANSPORT_LOAD_CAPACITY_B'
    MAX_TRANSPORT_LOAD_CAPACITY_C = 'MAX_TRANSPORT_LOAD_CAPACITY_C'
    ATTRIBUTES = 'ATTRIBUTES'
    CUSTOMFIELDS = 'CUSTOMFIELDS'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TableTripColumnType from a JSON string"""
        return cls(json.loads(json_str))


