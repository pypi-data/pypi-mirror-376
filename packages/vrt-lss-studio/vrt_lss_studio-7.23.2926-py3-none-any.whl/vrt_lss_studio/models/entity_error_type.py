# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the Veeroute Studio.  ## Reserved attributes  These attribute keys are reserved for specific business logic:  | Attribute key        | Parent entity | Purpose                                                                                                                                                                                      | |:---------------------|:--------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | `ICON_NAME`          | location      | The attribute value is written to the `web_location_geopoint.icon_name` field                                                                                                                | | `FORCED_GEOPROVIDER` | geo_settings  | The attribute value determines the geodata provider for rendering flights on the map, which will be used instead of the one specified in the `plan_settings.geo_settings.geo_provider` field |  ## Entity relationship diagram  ![erd](../uml/studio.svg) 

    The version of the OpenAPI document: 7.23.2926
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class EntityErrorType(str, Enum):
    """
    Error type:   * `INCONSISTENT_REFERENCE` - bad reference key    * `UNIQUE_IDS_VIOLATION` - all keys must be unique   * `INVALID_ROUTING_MATRIX` - bad routing matrix dimension   * `INVALID_GEO_PROVIDER` - bad geo provider   * `COMPATIBILITY_CARGO_BOX` - no cargo is compatible with any box   * `COMPATIBILITY_TRANSPORT_PERFORMER` - no transport is compatible with any performer   * `COMPATIBILITY_TRANSPORT_LOCATION` - no transport is compatible with any location   * `COMPATIBILITY_ORDER_PERFORMER` - no order is compatible with any performer   * `INCONSISTENT_HARDLINK` - essence key must be only in one hardlink   * `PLANNING_HORIZON_EXCEEDED` -  planning horizon exceeded (difference between earliest and latest timestamp in dataset)   * `MEANINGLESS_RESTRICTIONS` - the specified restrictions do not make sense   * `LOCATION_LIMITS_VIOLATION` - the time windows of the limitation must not overlap and their union must match the location availability window `work_window`; if the `min_cargos`/`min_transports` limitation is set, then the `max_cargos`/`max_transports` limitation must be set; the `min_cargos`/`min_transports` limits must be less than all the `max_cargos`/`max_transports` limits   * `TOO_MANY_WARNINGS` - the number of warnings is greater than 15001 
    """

    """
    allowed enum values
    """
    INCONSISTENT_REFERENCE = 'INCONSISTENT_REFERENCE'
    UNIQUE_IDS_VIOLATION = 'UNIQUE_IDS_VIOLATION'
    INVALID_ROUTING_MATRIX = 'INVALID_ROUTING_MATRIX'
    INVALID_GEO_PROVIDER = 'INVALID_GEO_PROVIDER'
    COMPATIBILITY_CARGO_BOX = 'COMPATIBILITY_CARGO_BOX'
    COMPATIBILITY_TRANSPORT_PERFORMER = 'COMPATIBILITY_TRANSPORT_PERFORMER'
    COMPATIBILITY_TRANSPORT_LOCATION = 'COMPATIBILITY_TRANSPORT_LOCATION'
    COMPATIBILITY_ORDER_PERFORMER = 'COMPATIBILITY_ORDER_PERFORMER'
    INCONSISTENT_HARDLINK = 'INCONSISTENT_HARDLINK'
    PLANNING_HORIZON_EXCEEDED = 'PLANNING_HORIZON_EXCEEDED'
    MEANINGLESS_RESTRICTIONS = 'MEANINGLESS_RESTRICTIONS'
    LOCATION_LIMITS_VIOLATION = 'LOCATION_LIMITS_VIOLATION'
    TOO_MANY_WARNINGS = 'TOO_MANY_WARNINGS'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EntityErrorType from a JSON string"""
        return cls(json.loads(json_str))


