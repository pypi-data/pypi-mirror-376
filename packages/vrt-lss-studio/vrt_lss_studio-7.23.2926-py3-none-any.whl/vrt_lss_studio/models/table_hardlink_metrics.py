# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the Veeroute Studio.  ## Reserved attributes  These attribute keys are reserved for specific business logic:  | Attribute key        | Parent entity | Purpose                                                                                                                                                                                      | |:---------------------|:--------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | `ICON_NAME`          | location      | The attribute value is written to the `web_location_geopoint.icon_name` field                                                                                                                | | `FORCED_GEOPROVIDER` | geo_settings  | The attribute value determines the geodata provider for rendering flights on the map, which will be used instead of the one specified in the `plan_settings.geo_settings.geo_provider` field |  ## Entity relationship diagram  ![erd](../uml/studio.svg) 

    The version of the OpenAPI document: 7.23.2926
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from vrt_lss_studio.models.table_hardlink_fields import TableHardlinkFields
from vrt_lss_studio.models.table_list_counters import TableListCounters
from typing import Optional, Set
from typing_extensions import Self

class TableHardlinkMetrics(BaseModel):
    """
    General metrics for selected hardlinks.
    """ # noqa: E501
    fields_sum: Optional[TableHardlinkFields] = Field(default=None, description="Total values for fields of types int, double, duration. ")
    fields_avg: Optional[TableHardlinkFields] = Field(default=None, description="Average values for fields of types int, double, duration. Only fields that have a value are taken into account to calculate the average. ")
    counters: TableListCounters
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["fields_sum", "fields_avg", "counters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableHardlinkMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fields_sum
        if self.fields_sum:
            _dict['fields_sum'] = self.fields_sum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fields_avg
        if self.fields_avg:
            _dict['fields_avg'] = self.fields_avg.to_dict()
        # override the default output from pydantic by calling `to_dict()` of counters
        if self.counters:
            _dict['counters'] = self.counters.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableHardlinkMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fields_sum": TableHardlinkFields.from_dict(obj["fields_sum"]) if obj.get("fields_sum") is not None else None,
            "fields_avg": TableHardlinkFields.from_dict(obj["fields_avg"]) if obj.get("fields_avg") is not None else None,
            "counters": TableListCounters.from_dict(obj["counters"]) if obj.get("counters") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


