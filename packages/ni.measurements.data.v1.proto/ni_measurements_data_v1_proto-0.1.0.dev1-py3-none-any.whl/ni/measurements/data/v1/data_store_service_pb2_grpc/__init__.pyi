"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import ni.measurements.data.v1.data_store_service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class DataStoreServiceStub:
    """This service provides endpoints for the publishing of measurements.
    This includes associating measurements with the conditions associated with the measurement and
    querying for the published measurements with OData queries.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    CreateTestResult: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.CreateTestResultRequest,
        ni.measurements.data.v1.data_store_service_pb2.CreateTestResultResponse,
    ]
    """Creates a test result object for publishing measurements.  Once a test result is created,
    you can publish an arbitrary number of measurements to the test result.  The measurements
    will be associated with each of the metadata types specified in the test result.  For instance,
    if you specify an operator when creating a test result, all measurements published to the test result
    will be associated with that operator.  The response will include the test result id,
    which can be used to reference the test result in subsequent requests, and to get the test result
    metadata via the GetTestResult method.
    """

    GetTestResult: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.GetTestResultRequest,
        ni.measurements.data.v1.data_store_service_pb2.GetTestResultResponse,
    ]
    """Gets the test result associated with the identifier given in the request."""

    CreateStep: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.CreateStepRequest,
        ni.measurements.data.v1.data_store_service_pb2.CreateStepResponse,
    ]
    """Creates a new step in the data store.  A step is owned by a test result,
    and is a logical grouping of published measurements.  All published measurements must be associated
    with a step.
    """

    GetStep: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.GetStepRequest,
        ni.measurements.data.v1.data_store_service_pb2.GetStepResponse,
    ]
    """Gets the step associated with the identifier given in the request."""

    QuerySteps: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.QueryStepsRequest,
        ni.measurements.data.v1.data_store_service_pb2.QueryStepsResponse,
    ]
    """Query for steps matching the given OData query.  For information about the OData query syntax,
    see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
    """

    PublishCondition: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.PublishConditionRequest,
        ni.measurements.data.v1.data_store_service_pb2.PublishConditionResponse,
    ]
    """Publishes a single condition value for a test step. Conditions are contextual values
    like input voltage, temperature, or humidity present during measurement.
    """

    PublishConditionBatch: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.PublishConditionBatchRequest,
        ni.measurements.data.v1.data_store_service_pb2.PublishConditionBatchResponse,
    ]
    """Publishes multiple condition values at once for parametric sweeps."""

    PublishMeasurement: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.PublishMeasurementRequest,
        ni.measurements.data.v1.data_store_service_pb2.PublishMeasurementResponse,
    ]
    """Publishes a single measurement value associated with a test step."""

    PublishMeasurementBatch: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.PublishMeasurementBatchRequest,
        ni.measurements.data.v1.data_store_service_pb2.PublishMeasurementBatchResponse,
    ]
    """Publishes multiple scalar measurements at once for parametric sweeps."""

    QueryConditions: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.QueryConditionsRequest,
        ni.measurements.data.v1.data_store_service_pb2.QueryConditionsResponse,
    ]
    """Queries conditions using OData query syntax.
    See https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
    """

    QueryMeasurements: grpc.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.QueryMeasurementsRequest,
        ni.measurements.data.v1.data_store_service_pb2.QueryMeasurementsResponse,
    ]
    """Queries measurements using OData query syntax.
    See https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
    """

class DataStoreServiceAsyncStub:
    """This service provides endpoints for the publishing of measurements.
    This includes associating measurements with the conditions associated with the measurement and
    querying for the published measurements with OData queries.
    """

    CreateTestResult: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.CreateTestResultRequest,
        ni.measurements.data.v1.data_store_service_pb2.CreateTestResultResponse,
    ]
    """Creates a test result object for publishing measurements.  Once a test result is created,
    you can publish an arbitrary number of measurements to the test result.  The measurements
    will be associated with each of the metadata types specified in the test result.  For instance,
    if you specify an operator when creating a test result, all measurements published to the test result
    will be associated with that operator.  The response will include the test result id,
    which can be used to reference the test result in subsequent requests, and to get the test result
    metadata via the GetTestResult method.
    """

    GetTestResult: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.GetTestResultRequest,
        ni.measurements.data.v1.data_store_service_pb2.GetTestResultResponse,
    ]
    """Gets the test result associated with the identifier given in the request."""

    CreateStep: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.CreateStepRequest,
        ni.measurements.data.v1.data_store_service_pb2.CreateStepResponse,
    ]
    """Creates a new step in the data store.  A step is owned by a test result,
    and is a logical grouping of published measurements.  All published measurements must be associated
    with a step.
    """

    GetStep: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.GetStepRequest,
        ni.measurements.data.v1.data_store_service_pb2.GetStepResponse,
    ]
    """Gets the step associated with the identifier given in the request."""

    QuerySteps: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.QueryStepsRequest,
        ni.measurements.data.v1.data_store_service_pb2.QueryStepsResponse,
    ]
    """Query for steps matching the given OData query.  For information about the OData query syntax,
    see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
    """

    PublishCondition: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.PublishConditionRequest,
        ni.measurements.data.v1.data_store_service_pb2.PublishConditionResponse,
    ]
    """Publishes a single condition value for a test step. Conditions are contextual values
    like input voltage, temperature, or humidity present during measurement.
    """

    PublishConditionBatch: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.PublishConditionBatchRequest,
        ni.measurements.data.v1.data_store_service_pb2.PublishConditionBatchResponse,
    ]
    """Publishes multiple condition values at once for parametric sweeps."""

    PublishMeasurement: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.PublishMeasurementRequest,
        ni.measurements.data.v1.data_store_service_pb2.PublishMeasurementResponse,
    ]
    """Publishes a single measurement value associated with a test step."""

    PublishMeasurementBatch: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.PublishMeasurementBatchRequest,
        ni.measurements.data.v1.data_store_service_pb2.PublishMeasurementBatchResponse,
    ]
    """Publishes multiple scalar measurements at once for parametric sweeps."""

    QueryConditions: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.QueryConditionsRequest,
        ni.measurements.data.v1.data_store_service_pb2.QueryConditionsResponse,
    ]
    """Queries conditions using OData query syntax.
    See https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
    """

    QueryMeasurements: grpc.aio.UnaryUnaryMultiCallable[
        ni.measurements.data.v1.data_store_service_pb2.QueryMeasurementsRequest,
        ni.measurements.data.v1.data_store_service_pb2.QueryMeasurementsResponse,
    ]
    """Queries measurements using OData query syntax.
    See https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
    """

class DataStoreServiceServicer(metaclass=abc.ABCMeta):
    """This service provides endpoints for the publishing of measurements.
    This includes associating measurements with the conditions associated with the measurement and
    querying for the published measurements with OData queries.
    """

    @abc.abstractmethod
    def CreateTestResult(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.CreateTestResultRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.CreateTestResultResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.CreateTestResultResponse]]:
        """Creates a test result object for publishing measurements.  Once a test result is created,
        you can publish an arbitrary number of measurements to the test result.  The measurements
        will be associated with each of the metadata types specified in the test result.  For instance,
        if you specify an operator when creating a test result, all measurements published to the test result
        will be associated with that operator.  The response will include the test result id,
        which can be used to reference the test result in subsequent requests, and to get the test result
        metadata via the GetTestResult method.
        """

    @abc.abstractmethod
    def GetTestResult(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.GetTestResultRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.GetTestResultResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.GetTestResultResponse]]:
        """Gets the test result associated with the identifier given in the request."""

    @abc.abstractmethod
    def CreateStep(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.CreateStepRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.CreateStepResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.CreateStepResponse]]:
        """Creates a new step in the data store.  A step is owned by a test result,
        and is a logical grouping of published measurements.  All published measurements must be associated
        with a step.
        """

    @abc.abstractmethod
    def GetStep(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.GetStepRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.GetStepResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.GetStepResponse]]:
        """Gets the step associated with the identifier given in the request."""

    @abc.abstractmethod
    def QuerySteps(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.QueryStepsRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.QueryStepsResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.QueryStepsResponse]]:
        """Query for steps matching the given OData query.  For information about the OData query syntax,
        see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
        """

    @abc.abstractmethod
    def PublishCondition(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.PublishConditionRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.PublishConditionResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.PublishConditionResponse]]:
        """Publishes a single condition value for a test step. Conditions are contextual values
        like input voltage, temperature, or humidity present during measurement.
        """

    @abc.abstractmethod
    def PublishConditionBatch(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.PublishConditionBatchRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.PublishConditionBatchResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.PublishConditionBatchResponse]]:
        """Publishes multiple condition values at once for parametric sweeps."""

    @abc.abstractmethod
    def PublishMeasurement(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.PublishMeasurementRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.PublishMeasurementResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.PublishMeasurementResponse]]:
        """Publishes a single measurement value associated with a test step."""

    @abc.abstractmethod
    def PublishMeasurementBatch(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.PublishMeasurementBatchRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.PublishMeasurementBatchResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.PublishMeasurementBatchResponse]]:
        """Publishes multiple scalar measurements at once for parametric sweeps."""

    @abc.abstractmethod
    def QueryConditions(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.QueryConditionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.QueryConditionsResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.QueryConditionsResponse]]:
        """Queries conditions using OData query syntax.
        See https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
        """

    @abc.abstractmethod
    def QueryMeasurements(
        self,
        request: ni.measurements.data.v1.data_store_service_pb2.QueryMeasurementsRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni.measurements.data.v1.data_store_service_pb2.QueryMeasurementsResponse, collections.abc.Awaitable[ni.measurements.data.v1.data_store_service_pb2.QueryMeasurementsResponse]]:
        """Queries measurements using OData query syntax.
        See https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
        """

def add_DataStoreServiceServicer_to_server(servicer: DataStoreServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
