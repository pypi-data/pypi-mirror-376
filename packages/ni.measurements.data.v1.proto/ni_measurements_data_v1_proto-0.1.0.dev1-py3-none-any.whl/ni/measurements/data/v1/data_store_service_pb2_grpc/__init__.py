# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ni.measurements.data.v1 import data_store_service_pb2 as ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2


class DataStoreServiceStub(object):
    """This service provides endpoints for the publishing of measurements.
    This includes associating measurements with the conditions associated with the measurement and
    querying for the published measurements with OData queries.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTestResult = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/CreateTestResult',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateTestResultRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateTestResultResponse.FromString,
                )
        self.GetTestResult = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/GetTestResult',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetTestResultRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetTestResultResponse.FromString,
                )
        self.CreateStep = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/CreateStep',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateStepRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateStepResponse.FromString,
                )
        self.GetStep = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/GetStep',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetStepRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetStepResponse.FromString,
                )
        self.QuerySteps = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/QuerySteps',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryStepsRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryStepsResponse.FromString,
                )
        self.PublishCondition = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/PublishCondition',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionResponse.FromString,
                )
        self.PublishConditionBatch = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/PublishConditionBatch',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionBatchRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionBatchResponse.FromString,
                )
        self.PublishMeasurement = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/PublishMeasurement',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishMeasurementRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishMeasurementResponse.FromString,
                )
        self.PublishMeasurementBatch = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/PublishMeasurementBatch',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishMeasurementBatchRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishMeasurementBatchResponse.FromString,
                )
        self.QueryConditions = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/QueryConditions',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryConditionsRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryConditionsResponse.FromString,
                )
        self.QueryMeasurements = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/QueryMeasurements',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryMeasurementsRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryMeasurementsResponse.FromString,
                )


class DataStoreServiceServicer(object):
    """This service provides endpoints for the publishing of measurements.
    This includes associating measurements with the conditions associated with the measurement and
    querying for the published measurements with OData queries.
    """

    def CreateTestResult(self, request, context):
        """Creates a test result object for publishing measurements.  Once a test result is created,
        you can publish an arbitrary number of measurements to the test result.  The measurements
        will be associated with each of the metadata types specified in the test result.  For instance,
        if you specify an operator when creating a test result, all measurements published to the test result
        will be associated with that operator.  The response will include the test result id,
        which can be used to reference the test result in subsequent requests, and to get the test result
        metadata via the GetTestResult method.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTestResult(self, request, context):
        """Gets the test result associated with the identifier given in the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateStep(self, request, context):
        """Creates a new step in the data store.  A step is owned by a test result,
        and is a logical grouping of published measurements.  All published measurements must be associated
        with a step.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStep(self, request, context):
        """Gets the step associated with the identifier given in the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuerySteps(self, request, context):
        """Query for steps matching the given OData query.  For information about the OData query syntax,
        see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishCondition(self, request, context):
        """Publishes a single condition value for a test step. Conditions are contextual values
        like input voltage, temperature, or humidity present during measurement.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishConditionBatch(self, request, context):
        """Publishes multiple condition values at once for parametric sweeps.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishMeasurement(self, request, context):
        """Publishes a single measurement value associated with a test step.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishMeasurementBatch(self, request, context):
        """Publishes multiple scalar measurements at once for parametric sweeps.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryConditions(self, request, context):
        """Queries conditions using OData query syntax.
        See https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryMeasurements(self, request, context):
        """Queries measurements using OData query syntax.
        See https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataStoreServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTestResult': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTestResult,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateTestResultRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateTestResultResponse.SerializeToString,
            ),
            'GetTestResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTestResult,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetTestResultRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetTestResultResponse.SerializeToString,
            ),
            'CreateStep': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateStep,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateStepRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateStepResponse.SerializeToString,
            ),
            'GetStep': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStep,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetStepRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetStepResponse.SerializeToString,
            ),
            'QuerySteps': grpc.unary_unary_rpc_method_handler(
                    servicer.QuerySteps,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryStepsRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryStepsResponse.SerializeToString,
            ),
            'PublishCondition': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishCondition,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionResponse.SerializeToString,
            ),
            'PublishConditionBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishConditionBatch,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionBatchRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionBatchResponse.SerializeToString,
            ),
            'PublishMeasurement': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishMeasurement,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishMeasurementRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishMeasurementResponse.SerializeToString,
            ),
            'PublishMeasurementBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishMeasurementBatch,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishMeasurementBatchRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishMeasurementBatchResponse.SerializeToString,
            ),
            'QueryConditions': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryConditions,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryConditionsRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryConditionsResponse.SerializeToString,
            ),
            'QueryMeasurements': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryMeasurements,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryMeasurementsRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryMeasurementsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ni.measurements.data.v1.DataStoreService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataStoreService(object):
    """This service provides endpoints for the publishing of measurements.
    This includes associating measurements with the conditions associated with the measurement and
    querying for the published measurements with OData queries.
    """

    @staticmethod
    def CreateTestResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/CreateTestResult',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateTestResultRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateTestResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTestResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/GetTestResult',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetTestResultRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetTestResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateStep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/CreateStep',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateStepRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateStepResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/GetStep',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetStepRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetStepResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QuerySteps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/QuerySteps',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryStepsRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryStepsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishCondition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/PublishCondition',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishConditionBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/PublishConditionBatch',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionBatchRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishMeasurement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/PublishMeasurement',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishMeasurementRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishMeasurementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishMeasurementBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/PublishMeasurementBatch',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishMeasurementBatchRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishMeasurementBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryConditions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/QueryConditions',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryConditionsRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryConditionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryMeasurements(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/QueryMeasurements',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryMeasurementsRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryMeasurementsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
