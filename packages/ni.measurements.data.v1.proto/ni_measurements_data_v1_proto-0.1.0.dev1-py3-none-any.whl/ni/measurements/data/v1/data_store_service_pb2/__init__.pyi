"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import ni.measurements.data.v1.data_store_pb2
import ni.protobuf.types.precision_timestamp_pb2
import ni.protobuf.types.scalar_pb2
import ni.protobuf.types.vector_pb2
import ni.protobuf.types.waveform_pb2
import ni.protobuf.types.xydata_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class CreateTestResultRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TEST_RESULT_FIELD_NUMBER: builtins.int
    @property
    def test_result(self) -> ni.measurements.data.v1.data_store_pb2.TestResult:
        """The metadata of the test result to be created."""

    def __init__(
        self,
        *,
        test_result: ni.measurements.data.v1.data_store_pb2.TestResult | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["test_result", b"test_result"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["test_result", b"test_result"]) -> None: ...

global___CreateTestResultRequest = CreateTestResultRequest

@typing.final
class CreateTestResultResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TEST_RESULT_ID_FIELD_NUMBER: builtins.int
    test_result_id: builtins.str
    """The test result id. Generated if not specified in the request."""
    def __init__(
        self,
        *,
        test_result_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["test_result_id", b"test_result_id"]) -> None: ...

global___CreateTestResultResponse = CreateTestResultResponse

@typing.final
class GetTestResultRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TEST_RESULT_ID_FIELD_NUMBER: builtins.int
    test_result_id: builtins.str
    """The id of the desired test result.
    This value is expected to be a parsable GUID.
    """
    def __init__(
        self,
        *,
        test_result_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["test_result_id", b"test_result_id"]) -> None: ...

global___GetTestResultRequest = GetTestResultRequest

@typing.final
class GetTestResultResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TEST_RESULT_FIELD_NUMBER: builtins.int
    @property
    def test_result(self) -> ni.measurements.data.v1.data_store_pb2.TestResult:
        """The TestResult object that corresponds to the requested id."""

    def __init__(
        self,
        *,
        test_result: ni.measurements.data.v1.data_store_pb2.TestResult | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["test_result", b"test_result"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["test_result", b"test_result"]) -> None: ...

global___GetTestResultResponse = GetTestResultResponse

@typing.final
class CreateStepRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STEP_FIELD_NUMBER: builtins.int
    @property
    def step(self) -> ni.measurements.data.v1.data_store_pb2.Step:
        """Required. The metadata of the step to be created."""

    def __init__(
        self,
        *,
        step: ni.measurements.data.v1.data_store_pb2.Step | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["step", b"step"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["step", b"step"]) -> None: ...

global___CreateStepRequest = CreateStepRequest

@typing.final
class CreateStepResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STEP_ID_FIELD_NUMBER: builtins.int
    step_id: builtins.str
    """The identifier of the created step."""
    def __init__(
        self,
        *,
        step_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["step_id", b"step_id"]) -> None: ...

global___CreateStepResponse = CreateStepResponse

@typing.final
class GetStepRequest(google.protobuf.message.Message):
    """Message sent to get the step associated with the given identifier."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STEP_ID_FIELD_NUMBER: builtins.int
    step_id: builtins.str
    """Required. The identifier of the desired step."""
    def __init__(
        self,
        *,
        step_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["step_id", b"step_id"]) -> None: ...

global___GetStepRequest = GetStepRequest

@typing.final
class GetStepResponse(google.protobuf.message.Message):
    """Message returned when getting a step associated with the given identifier."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STEP_FIELD_NUMBER: builtins.int
    @property
    def step(self) -> ni.measurements.data.v1.data_store_pb2.Step:
        """The metadata of the requested step."""

    def __init__(
        self,
        *,
        step: ni.measurements.data.v1.data_store_pb2.Step | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["step", b"step"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["step", b"step"]) -> None: ...

global___GetStepResponse = GetStepResponse

@typing.final
class QueryStepsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ODATA_QUERY_FIELD_NUMBER: builtins.int
    odata_query: builtins.str
    """an OData query string.  example "$filter=name eq 'Value'"
    An empty string will return all steps.
    $expand, $count, and $select are not supported. For more information,
    see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
    """
    def __init__(
        self,
        *,
        odata_query: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["odata_query", b"odata_query"]) -> None: ...

global___QueryStepsRequest = QueryStepsRequest

@typing.final
class QueryStepsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STEPS_FIELD_NUMBER: builtins.int
    @property
    def steps(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[ni.measurements.data.v1.data_store_pb2.Step]:
        """The list of steps that match the query."""

    def __init__(
        self,
        *,
        steps: collections.abc.Iterable[ni.measurements.data.v1.data_store_pb2.Step] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["steps", b"steps"]) -> None: ...

global___QueryStepsResponse = QueryStepsResponse

@typing.final
class PublishConditionRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONDITION_NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    SCALAR_FIELD_NUMBER: builtins.int
    STEP_ID_FIELD_NUMBER: builtins.int
    condition_name: builtins.str
    """Required. Identifier describing the condition value. For example, "Voltage"."""
    type: builtins.str
    """Required. The type of this condition. For example, "Upper Limit" or "Environment"."""
    step_id: builtins.str
    """Required.
    The id of the step associated with this condition.
    This value is expected to be a parsable GUID.
    """
    @property
    def scalar(self) -> ni.protobuf.types.scalar_pb2.Scalar: ...
    def __init__(
        self,
        *,
        condition_name: builtins.str = ...,
        type: builtins.str = ...,
        scalar: ni.protobuf.types.scalar_pb2.Scalar | None = ...,
        step_id: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["scalar", b"scalar", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["condition_name", b"condition_name", "scalar", b"scalar", "step_id", b"step_id", "type", b"type", "value", b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["value", b"value"]) -> typing.Literal["scalar"] | None: ...

global___PublishConditionRequest = PublishConditionRequest

@typing.final
class PublishConditionResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PUBLISHED_CONDITION_FIELD_NUMBER: builtins.int
    @property
    def published_condition(self) -> ni.measurements.data.v1.data_store_pb2.PublishedCondition:
        """A single condition present for the specified step."""

    def __init__(
        self,
        *,
        published_condition: ni.measurements.data.v1.data_store_pb2.PublishedCondition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["published_condition", b"published_condition"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["published_condition", b"published_condition"]) -> None: ...

global___PublishConditionResponse = PublishConditionResponse

@typing.final
class PublishConditionBatchRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONDITION_NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    SCALAR_VALUES_FIELD_NUMBER: builtins.int
    STEP_ID_FIELD_NUMBER: builtins.int
    condition_name: builtins.str
    """Required. Identifier describing the condition values. For example, "Voltage"."""
    type: builtins.str
    """Required. The type of this condition. For example, "Upper Limit" or "Environment"."""
    step_id: builtins.str
    """Required.
    The id of the step associated with this batch of condition values.
    This value is expected to be a parsable GUID.
    """
    @property
    def scalar_values(self) -> ni.protobuf.types.vector_pb2.Vector: ...
    def __init__(
        self,
        *,
        condition_name: builtins.str = ...,
        type: builtins.str = ...,
        scalar_values: ni.protobuf.types.vector_pb2.Vector | None = ...,
        step_id: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["scalar_values", b"scalar_values", "values", b"values"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["condition_name", b"condition_name", "scalar_values", b"scalar_values", "step_id", b"step_id", "type", b"type", "values", b"values"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["values", b"values"]) -> typing.Literal["scalar_values"] | None: ...

global___PublishConditionBatchRequest = PublishConditionBatchRequest

@typing.final
class PublishConditionBatchResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PUBLISHED_CONDITION_FIELD_NUMBER: builtins.int
    @property
    def published_condition(self) -> ni.measurements.data.v1.data_store_pb2.PublishedCondition:
        """A shared value for *all* condition measurements present for the specified step."""

    def __init__(
        self,
        *,
        published_condition: ni.measurements.data.v1.data_store_pb2.PublishedCondition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["published_condition", b"published_condition"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["published_condition", b"published_condition"]) -> None: ...

global___PublishConditionBatchResponse = PublishConditionBatchResponse

@typing.final
class PublishMeasurementRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MEASUREMENT_NAME_FIELD_NUMBER: builtins.int
    SCALAR_FIELD_NUMBER: builtins.int
    VECTOR_FIELD_NUMBER: builtins.int
    DOUBLE_ANALOG_WAVEFORM_FIELD_NUMBER: builtins.int
    X_Y_DATA_FIELD_NUMBER: builtins.int
    I16_ANALOG_WAVEFORM_FIELD_NUMBER: builtins.int
    DOUBLE_COMPLEX_WAVEFORM_FIELD_NUMBER: builtins.int
    I16_COMPLEX_WAVEFORM_FIELD_NUMBER: builtins.int
    DOUBLE_SPECTRUM_FIELD_NUMBER: builtins.int
    DIGITAL_WAVEFORM_FIELD_NUMBER: builtins.int
    NOTES_FIELD_NUMBER: builtins.int
    TIMESTAMP_FIELD_NUMBER: builtins.int
    OUTCOME_FIELD_NUMBER: builtins.int
    ERROR_INFORMATION_FIELD_NUMBER: builtins.int
    STEP_ID_FIELD_NUMBER: builtins.int
    HARDWARE_ITEM_IDS_FIELD_NUMBER: builtins.int
    TEST_ADAPTER_IDS_FIELD_NUMBER: builtins.int
    SOFTWARE_ITEM_IDS_FIELD_NUMBER: builtins.int
    measurement_name: builtins.str
    """Required for measurement. This name is used for associating/grouping conceptually alike measurements across multiple publish iterations.
    For example, a shared name of "Temperature" can be used for associating temperature readings across multiple iterations of publishing.
    """
    notes: builtins.str
    """Optional. Any notes to be associated with the captured measurement."""
    outcome: ni.measurements.data.v1.data_store_pb2.Outcome.ValueType
    """Optional. The outcome of the measurement."""
    step_id: builtins.str
    """Required.
    The id of the step associated with this measurement.
    This value is expected to be a parsable GUID.
    """
    @property
    def scalar(self) -> ni.protobuf.types.scalar_pb2.Scalar: ...
    @property
    def vector(self) -> ni.protobuf.types.vector_pb2.Vector: ...
    @property
    def double_analog_waveform(self) -> ni.protobuf.types.waveform_pb2.DoubleAnalogWaveform: ...
    @property
    def x_y_data(self) -> ni.protobuf.types.xydata_pb2.DoubleXYData: ...
    @property
    def i16_analog_waveform(self) -> ni.protobuf.types.waveform_pb2.I16AnalogWaveform: ...
    @property
    def double_complex_waveform(self) -> ni.protobuf.types.waveform_pb2.DoubleComplexWaveform: ...
    @property
    def i16_complex_waveform(self) -> ni.protobuf.types.waveform_pb2.I16ComplexWaveform: ...
    @property
    def double_spectrum(self) -> ni.protobuf.types.waveform_pb2.DoubleSpectrum: ...
    @property
    def digital_waveform(self) -> ni.protobuf.types.waveform_pb2.DigitalWaveform: ...
    @property
    def timestamp(self) -> ni.protobuf.types.precision_timestamp_pb2.PrecisionTimestamp:
        """Required. The timestamp of the measurement."""

    @property
    def error_information(self) -> ni.measurements.data.v1.data_store_pb2.ErrorInformation:
        """Optional. Error or exception information in JSON format."""

    @property
    def hardware_item_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Optional. The ids of the hardware items associated with this measurement. These values are expected
        to be parsable GUIDs or aliases.
        """

    @property
    def test_adapter_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Optional. The ids of the test adapters associated with this measurement. These values are expected
        to be parsable GUIDs or aliases.
        """

    @property
    def software_item_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Optional. The ids of the software items associated with this measurement. These values are expected
        to be parsable GUIDs or aliases.
        """

    def __init__(
        self,
        *,
        measurement_name: builtins.str = ...,
        scalar: ni.protobuf.types.scalar_pb2.Scalar | None = ...,
        vector: ni.protobuf.types.vector_pb2.Vector | None = ...,
        double_analog_waveform: ni.protobuf.types.waveform_pb2.DoubleAnalogWaveform | None = ...,
        x_y_data: ni.protobuf.types.xydata_pb2.DoubleXYData | None = ...,
        i16_analog_waveform: ni.protobuf.types.waveform_pb2.I16AnalogWaveform | None = ...,
        double_complex_waveform: ni.protobuf.types.waveform_pb2.DoubleComplexWaveform | None = ...,
        i16_complex_waveform: ni.protobuf.types.waveform_pb2.I16ComplexWaveform | None = ...,
        double_spectrum: ni.protobuf.types.waveform_pb2.DoubleSpectrum | None = ...,
        digital_waveform: ni.protobuf.types.waveform_pb2.DigitalWaveform | None = ...,
        notes: builtins.str = ...,
        timestamp: ni.protobuf.types.precision_timestamp_pb2.PrecisionTimestamp | None = ...,
        outcome: ni.measurements.data.v1.data_store_pb2.Outcome.ValueType = ...,
        error_information: ni.measurements.data.v1.data_store_pb2.ErrorInformation | None = ...,
        step_id: builtins.str = ...,
        hardware_item_ids: collections.abc.Iterable[builtins.str] | None = ...,
        test_adapter_ids: collections.abc.Iterable[builtins.str] | None = ...,
        software_item_ids: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["digital_waveform", b"digital_waveform", "double_analog_waveform", b"double_analog_waveform", "double_complex_waveform", b"double_complex_waveform", "double_spectrum", b"double_spectrum", "error_information", b"error_information", "i16_analog_waveform", b"i16_analog_waveform", "i16_complex_waveform", b"i16_complex_waveform", "scalar", b"scalar", "timestamp", b"timestamp", "value", b"value", "vector", b"vector", "x_y_data", b"x_y_data"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["digital_waveform", b"digital_waveform", "double_analog_waveform", b"double_analog_waveform", "double_complex_waveform", b"double_complex_waveform", "double_spectrum", b"double_spectrum", "error_information", b"error_information", "hardware_item_ids", b"hardware_item_ids", "i16_analog_waveform", b"i16_analog_waveform", "i16_complex_waveform", b"i16_complex_waveform", "measurement_name", b"measurement_name", "notes", b"notes", "outcome", b"outcome", "scalar", b"scalar", "software_item_ids", b"software_item_ids", "step_id", b"step_id", "test_adapter_ids", b"test_adapter_ids", "timestamp", b"timestamp", "value", b"value", "vector", b"vector", "x_y_data", b"x_y_data"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["value", b"value"]) -> typing.Literal["scalar", "vector", "double_analog_waveform", "x_y_data", "i16_analog_waveform", "double_complex_waveform", "i16_complex_waveform", "double_spectrum", "digital_waveform"] | None: ...

global___PublishMeasurementRequest = PublishMeasurementRequest

@typing.final
class PublishMeasurementResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PUBLISHED_MEASUREMENT_FIELD_NUMBER: builtins.int
    @property
    def published_measurement(self) -> ni.measurements.data.v1.data_store_pb2.PublishedMeasurement:
        """The moniker of the published measurement and its metadata."""

    def __init__(
        self,
        *,
        published_measurement: ni.measurements.data.v1.data_store_pb2.PublishedMeasurement | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["published_measurement", b"published_measurement"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["published_measurement", b"published_measurement"]) -> None: ...

global___PublishMeasurementResponse = PublishMeasurementResponse

@typing.final
class PublishMeasurementBatchRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MEASUREMENT_NAME_FIELD_NUMBER: builtins.int
    SCALAR_VALUES_FIELD_NUMBER: builtins.int
    TIMESTAMP_FIELD_NUMBER: builtins.int
    OUTCOME_FIELD_NUMBER: builtins.int
    ERROR_INFORMATION_FIELD_NUMBER: builtins.int
    STEP_ID_FIELD_NUMBER: builtins.int
    HARDWARE_ITEM_IDS_FIELD_NUMBER: builtins.int
    TEST_ADAPTER_IDS_FIELD_NUMBER: builtins.int
    SOFTWARE_ITEM_IDS_FIELD_NUMBER: builtins.int
    measurement_name: builtins.str
    """Required for measurement. This name is used for associating/grouping conceptually alike measurements across multiple publish iterations.
    For example, a shared name of "Temperature" can be used for associating temperature readings across multiple iterations of publishing.
    """
    step_id: builtins.str
    """Required.
    The id of the step associated with this measurement.
    This value is expected to be a parsable GUID.
    """
    @property
    def scalar_values(self) -> ni.protobuf.types.vector_pb2.Vector: ...
    @property
    def timestamp(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[ni.protobuf.types.precision_timestamp_pb2.PrecisionTimestamp]:
        """Optional. The timestamps corresponding to the N iterations of batched measurement being published.
        This field must meet one of the following requirements:

          1. The field may be empty. (No timestamp information is recorded for the measurement.)
          2. The field may contain a single value. This value will be associated with each value of the batched measurement.
          3. The field may contain N values, where N is the number of individual batched measurements being published.
             In this case, each timestamp aligns with the scalar value at the corresponding index within the vector.
        """

    @property
    def outcome(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[ni.measurements.data.v1.data_store_pb2.Outcome.ValueType]:
        """Optional. The outcomes corresponding to the N iterations of batched measurement being published.
        This field must meet one of the following requirements:

          1. The field may be empty. (No outcome information is recorded for the measurement.)
          2. The field may contain a single value. This value will be associated with each value of the batched measurement.
          3. The field may contain N values, where N is the number of individual batched measurements being published.
             In this case, each outcome aligns with the scalar value at the corresponding index within the vector.
        """

    @property
    def error_information(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[ni.measurements.data.v1.data_store_pb2.ErrorInformation]:
        """Optional. The error information corresponding to the N iterations of batched measurement being published.
        This field must meet one of the following requirements:

          1. The field may be empty. (No error information is recorded for the measurement.)
          2. The field may contain a single value. This value will be associated with each value of the batched measurement.
          3. The field may contain N values, where N is the number of individual batched measurements being published.
             In this case, each error information aligns with the scalar value at the corresponding index within the vector.
        """

    @property
    def hardware_item_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Optional. The ids of the hardware items associated with this measurement. These values are expected
        to be parsable GUIDs or aliases.
        """

    @property
    def test_adapter_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Optional. The ids of the test adapters associated with this measurement. These values are expected
        to be parsable GUIDs or aliases.
        """

    @property
    def software_item_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Optional. The ids of the software items associated with this measurement. These values are expected
        to be parsable GUIDs or aliases.
        """

    def __init__(
        self,
        *,
        measurement_name: builtins.str = ...,
        scalar_values: ni.protobuf.types.vector_pb2.Vector | None = ...,
        timestamp: collections.abc.Iterable[ni.protobuf.types.precision_timestamp_pb2.PrecisionTimestamp] | None = ...,
        outcome: collections.abc.Iterable[ni.measurements.data.v1.data_store_pb2.Outcome.ValueType] | None = ...,
        error_information: collections.abc.Iterable[ni.measurements.data.v1.data_store_pb2.ErrorInformation] | None = ...,
        step_id: builtins.str = ...,
        hardware_item_ids: collections.abc.Iterable[builtins.str] | None = ...,
        test_adapter_ids: collections.abc.Iterable[builtins.str] | None = ...,
        software_item_ids: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["scalar_values", b"scalar_values", "values", b"values"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error_information", b"error_information", "hardware_item_ids", b"hardware_item_ids", "measurement_name", b"measurement_name", "outcome", b"outcome", "scalar_values", b"scalar_values", "software_item_ids", b"software_item_ids", "step_id", b"step_id", "test_adapter_ids", b"test_adapter_ids", "timestamp", b"timestamp", "values", b"values"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["values", b"values"]) -> typing.Literal["scalar_values"] | None: ...

global___PublishMeasurementBatchRequest = PublishMeasurementBatchRequest

@typing.final
class PublishMeasurementBatchResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PUBLISHED_MEASUREMENTS_FIELD_NUMBER: builtins.int
    @property
    def published_measurements(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[ni.measurements.data.v1.data_store_pb2.PublishedMeasurement]:
        """The monikers of the published measurements and their corresponding metadata."""

    def __init__(
        self,
        *,
        published_measurements: collections.abc.Iterable[ni.measurements.data.v1.data_store_pb2.PublishedMeasurement] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["published_measurements", b"published_measurements"]) -> None: ...

global___PublishMeasurementBatchResponse = PublishMeasurementBatchResponse

@typing.final
class QueryConditionsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ODATA_QUERY_FIELD_NUMBER: builtins.int
    odata_query: builtins.str
    """an OData query string.  example "$filter=name eq 'Value'"
    An empty string will return all conditions.
    $expand, $count, and $select are not supported. For more information,
    see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
    """
    def __init__(
        self,
        *,
        odata_query: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["odata_query", b"odata_query"]) -> None: ...

global___QueryConditionsRequest = QueryConditionsRequest

@typing.final
class QueryConditionsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PUBLISHED_CONDITIONS_FIELD_NUMBER: builtins.int
    @property
    def published_conditions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[ni.measurements.data.v1.data_store_pb2.PublishedCondition]:
        """The list of matching conditions. Each item contains a moniker for
        retrieving the condition measurements, as well as the metadata associated
        with the condition.
        """

    def __init__(
        self,
        *,
        published_conditions: collections.abc.Iterable[ni.measurements.data.v1.data_store_pb2.PublishedCondition] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["published_conditions", b"published_conditions"]) -> None: ...

global___QueryConditionsResponse = QueryConditionsResponse

@typing.final
class QueryMeasurementsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ODATA_QUERY_FIELD_NUMBER: builtins.int
    odata_query: builtins.str
    """an OData query string.  example "$filter=name eq 'Value'"
    An empty string will return all measurements.
    $expand, $count, and $select are not supported. For more information,
    see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
    """
    def __init__(
        self,
        *,
        odata_query: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["odata_query", b"odata_query"]) -> None: ...

global___QueryMeasurementsRequest = QueryMeasurementsRequest

@typing.final
class QueryMeasurementsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PUBLISHED_MEASUREMENTS_FIELD_NUMBER: builtins.int
    @property
    def published_measurements(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[ni.measurements.data.v1.data_store_pb2.PublishedMeasurement]:
        """The list of matching measurements. Each item contains a moniker for
        retrieving the measurement, as well as the metadata associated with the measurement.
        """

    def __init__(
        self,
        *,
        published_measurements: collections.abc.Iterable[ni.measurements.data.v1.data_store_pb2.PublishedMeasurement] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["published_measurements", b"published_measurements"]) -> None: ...

global___QueryMeasurementsResponse = QueryMeasurementsResponse
