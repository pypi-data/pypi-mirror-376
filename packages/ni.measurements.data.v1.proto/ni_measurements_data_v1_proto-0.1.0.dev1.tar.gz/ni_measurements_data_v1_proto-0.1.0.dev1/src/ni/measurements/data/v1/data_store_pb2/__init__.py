# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ni/measurements/data/v1/data_store.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from ni.protobuf.types import precision_timestamp_pb2 as ni_dot_protobuf_dot_types_dot_precision__timestamp__pb2
from ni.datamonikers.v1 import data_moniker_pb2 as ni_dot_datamonikers_dot_v1_dot_data__moniker__pb2
from ni.measurements.metadata.v1 import metadata_store_pb2 as ni_dot_measurements_dot_metadata_dot_v1_dot_metadata__store__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n(ni/measurements/data/v1/data_store.proto\x12\x17ni.measurements.data.v1\x1a+ni/protobuf/types/precision_timestamp.proto\x1a%ni/datamonikers/v1/data_moniker.proto\x1a\x30ni/measurements/metadata/v1/metadata_store.proto\"\xbb\x01\n\x12PublishedCondition\x12,\n\x07moniker\x18\x01 \x01(\x0b\x32\x1b.ni.datamonikers.v1.Moniker\x12\x1e\n\x16published_condition_id\x18\x02 \x01(\t\x12\x16\n\x0e\x63ondition_name\x18\x03 \x01(\t\x12\x16\n\x0e\x63ondition_type\x18\x04 \x01(\t\x12\x0f\n\x07step_id\x18\x05 \x01(\t\x12\x16\n\x0etest_result_id\x18\x06 \x01(\t\"\x83\x05\n\x14PublishedMeasurement\x12,\n\x07moniker\x18\x01 \x01(\x0b\x32\x1b.ni.datamonikers.v1.Moniker\x12I\n\x14published_conditions\x18\x02 \x03(\x0b\x32+.ni.measurements.data.v1.PublishedCondition\x12 \n\x18published_measurement_id\x18\x03 \x01(\t\x12\x16\n\x0etest_result_id\x18\x04 \x01(\t\x12\x0f\n\x07step_id\x18\x05 \x01(\t\x12\x19\n\x11software_item_ids\x18\x06 \x03(\t\x12\x19\n\x11hardware_item_ids\x18\x07 \x03(\t\x12\x18\n\x10test_adapter_ids\x18\x08 \x03(\t\x12\x18\n\x10measurement_name\x18\t \x01(\t\x12\x11\n\tdata_type\x18\n \x01(\t\x12\x19\n\x11measurement_notes\x18\x0b \x01(\t\x12>\n\x0fstart_date_time\x18\x0c \x01(\x0b\x32%.ni.protobuf.types.PrecisionTimestamp\x12<\n\rend_date_time\x18\r \x01(\x0b\x32%.ni.protobuf.types.PrecisionTimestamp\x12\x31\n\x07outcome\x18\x0e \x01(\x0e\x32 .ni.measurements.data.v1.Outcome\x12\x18\n\x10parametric_index\x18\x0f \x01(\x05\x12\x44\n\x11\x65rror_information\x18\x10 \x01(\x0b\x32).ni.measurements.data.v1.ErrorInformation\"\xed\x04\n\nTestResult\x12\x16\n\x0etest_result_id\x18\x01 \x01(\t\x12\x17\n\x0fuut_instance_id\x18\x02 \x01(\t\x12\x13\n\x0boperator_id\x18\x03 \x01(\t\x12\x17\n\x0ftest_station_id\x18\x04 \x01(\t\x12\x1b\n\x13test_description_id\x18\x05 \x01(\t\x12\x19\n\x11software_item_ids\x18\x06 \x03(\t\x12\x19\n\x11hardware_item_ids\x18\x07 \x03(\t\x12\x18\n\x10test_adapter_ids\x18\x08 \x03(\t\x12\x18\n\x10test_result_name\x18\t \x01(\t\x12>\n\x0fstart_date_time\x18\n \x01(\x0b\x32%.ni.protobuf.types.PrecisionTimestamp\x12<\n\rend_date_time\x18\x0b \x01(\x0b\x32%.ni.protobuf.types.PrecisionTimestamp\x12\x31\n\x07outcome\x18\x0c \x01(\x0e\x32 .ni.measurements.data.v1.Outcome\x12\x0c\n\x04link\x18\r \x01(\t\x12G\n\nextensions\x18\x0e \x03(\x0b\x32\x33.ni.measurements.data.v1.TestResult.ExtensionsEntry\x12\x11\n\tschema_id\x18\x0f \x01(\t\x1a^\n\x0f\x45xtensionsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12:\n\x05value\x18\x02 \x01(\x0b\x32+.ni.measurements.metadata.v1.ExtensionValue:\x02\x38\x01\"\xcf\x03\n\x04Step\x12\x0f\n\x07step_id\x18\x01 \x01(\t\x12\x16\n\x0eparent_step_id\x18\x02 \x01(\t\x12\x16\n\x0etest_result_id\x18\x03 \x01(\t\x12\x0f\n\x07test_id\x18\x04 \x01(\t\x12\x11\n\tstep_name\x18\x05 \x01(\t\x12\x11\n\tstep_type\x18\x06 \x01(\t\x12\r\n\x05notes\x18\x07 \x01(\t\x12>\n\x0fstart_date_time\x18\x08 \x01(\x0b\x32%.ni.protobuf.types.PrecisionTimestamp\x12<\n\rend_date_time\x18\t \x01(\x0b\x32%.ni.protobuf.types.PrecisionTimestamp\x12\x0c\n\x04link\x18\n \x01(\t\x12\x41\n\nextensions\x18\x0b \x03(\x0b\x32-.ni.measurements.data.v1.Step.ExtensionsEntry\x12\x11\n\tschema_id\x18\x0c \x01(\t\x1a^\n\x0f\x45xtensionsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12:\n\x05value\x18\x02 \x01(\x0b\x32+.ni.measurements.metadata.v1.ExtensionValue:\x02\x38\x01\"G\n\x10\x45rrorInformation\x12\x12\n\nerror_code\x18\x01 \x01(\x05\x12\x0f\n\x07message\x18\x02 \x01(\t\x12\x0e\n\x06source\x18\x03 \x01(\t*e\n\x07Outcome\x12\x17\n\x13OUTCOME_UNSPECIFIED\x10\x00\x12\x12\n\x0eOUTCOME_PASSED\x10\x01\x12\x12\n\x0eOUTCOME_FAILED\x10\x02\x12\x19\n\x15OUTCOME_INDETERMINATE\x10\x03\x42\xa0\x01\n\x1b\x63om.ni.measurements.data.v1B\x0e\x44\x61taStoreProtoP\x01Z\x06\x64\x61tav1\xa2\x02\x04NIMD\xaa\x02(NationalInstruments.Measurements.Data.V1\xca\x02\x17NI\\Measurements\\Data\\V1\xea\x02\x1aNI::Measurements::Data::V1b\x06proto3')

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'ni.measurements.data.v1.data_store_pb2', globals())
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\033com.ni.measurements.data.v1B\016DataStoreProtoP\001Z\006datav1\242\002\004NIMD\252\002(NationalInstruments.Measurements.Data.V1\312\002\027NI\\Measurements\\Data\\V1\352\002\032NI::Measurements::Data::V1'
  _TESTRESULT_EXTENSIONSENTRY._options = None
  _TESTRESULT_EXTENSIONSENTRY._serialized_options = b'8\001'
  _STEP_EXTENSIONSENTRY._options = None
  _STEP_EXTENSIONSENTRY._serialized_options = b'8\001'
  _OUTCOME._serialized_start=2202
  _OUTCOME._serialized_end=2303
  _PUBLISHEDCONDITION._serialized_start=204
  _PUBLISHEDCONDITION._serialized_end=391
  _PUBLISHEDMEASUREMENT._serialized_start=394
  _PUBLISHEDMEASUREMENT._serialized_end=1037
  _TESTRESULT._serialized_start=1040
  _TESTRESULT._serialized_end=1661
  _TESTRESULT_EXTENSIONSENTRY._serialized_start=1567
  _TESTRESULT_EXTENSIONSENTRY._serialized_end=1661
  _STEP._serialized_start=1664
  _STEP._serialized_end=2127
  _STEP_EXTENSIONSENTRY._serialized_start=1567
  _STEP_EXTENSIONSENTRY._serialized_end=1661
  _ERRORINFORMATION._serialized_start=2129
  _ERRORINFORMATION._serialized_end=2200
# @@protoc_insertion_point(module_scope)
