name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode to run'
        required: false
        default: 'full'
        type: choice
        options:
        - full
        - smoke
        - lint
      python_version:
        description: 'Python version for single-version testing'
        required: false
        default: '3.11'
        type: choice
        options:
        - '3.10'
        - '3.11'
        - '3.12'

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || inputs.test_mode == 'full' || inputs.test_mode == 'smoke'
    strategy:
      matrix:
        python-version: ${{ github.event_name == 'workflow_dispatch' && inputs.test_mode == 'smoke' && fromJSON(format('["{0}"]', inputs.python_version)) || fromJSON('["3.10", "3.11", "3.12"]') }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
    
    - name: Run tests
      if: github.event_name != 'workflow_dispatch' || inputs.test_mode == 'full'
      run: |
        if [ -d tests ]; then uv run pytest tests/ -v; else echo "No tests directory; skipping pytest"; fi
    
    - name: Test package build
      if: github.event_name != 'workflow_dispatch' || inputs.test_mode == 'full'
      run: |
        uv build
    
    - name: Smoke test core MCP tools
      env:
        REDMINE_URL: "https://demo.redmine.org"
        REDMINE_API_KEY: "dummy-key-for-testing"
      run: |
        # Test that the server can start and tools are available
        timeout 10s uv run python -c "
        import sys
        import asyncio
        sys.path.insert(0, '.')
        
        async def test_tools():
            try:
                from mcp_redmine.server import mcp
                tools_list = await mcp.list_tools()
                tools = [tool.name for tool in tools_list]
                required_tools = ['redmine_request', 'redmine_paths_list', 'redmine_upload', 'redmine_download']
                missing = [t for t in required_tools if t not in tools]
                if missing:
                    print(f'Missing required tools: {missing}')
                    sys.exit(1)
                print(f'All required tools available: {required_tools}')
                print(f'Available tools: {tools}')
            except Exception as e:
                print(f'Error testing tools: {e}')
                sys.exit(1)
        
        asyncio.run(test_tools())
        "
        status=$?
        if [ "$status" -eq 124 ]; then
          echo "Smoke test timed out; ignoring timeout for CI"
          exit 0
        fi
        exit "$status"

  lint:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || inputs.test_mode == 'full' || inputs.test_mode == 'lint'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Check code formatting
      run: |
        # Basic syntax check
        uv run python -m py_compile mcp_redmine/*.py
        if [ -d tests ]; then uv run python -m py_compile tests/*.py; else echo "No tests to compile"; fi
    
    - name: Check version consistency
      run: |
        # Ensure pyproject.toml and server.py versions match
        PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        SERVER_VERSION=$(grep '^VERSION = ' mcp_redmine/server.py | sed 's/VERSION = "\(.*\)"/\1/')
        echo "pyproject.toml version: $PYPROJECT_VERSION"
        echo "server.py version: $SERVER_VERSION"
        if [ "$PYPROJECT_VERSION" != "$SERVER_VERSION" ]; then
          echo "Version mismatch between pyproject.toml and server.py"
          exit 1
        fi
        echo "Version consistency check passed"