# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PullRequestResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'html_url': 'str',
        'title': 'str',
        'number': 'str',
        'state': 'str',
        'user': 'GithubUser',
        'labels': 'list[GithubLabel]',
        'created_at': 'datetime',
        'merged_at': 'datetime'
    }

    attribute_map = {
        'html_url': 'htmlUrl',
        'title': 'title',
        'number': 'number',
        'state': 'state',
        'user': 'user',
        'labels': 'labels',
        'created_at': 'createdAt',
        'merged_at': 'mergedAt'
    }

    def __init__(self, html_url=None, title=None, number=None, state=None, user=None, labels=None, created_at=None, merged_at=None):  # noqa: E501
        """PullRequestResponse - a model defined in Swagger"""  # noqa: E501
        self._html_url = None
        self._title = None
        self._number = None
        self._state = None
        self._user = None
        self._labels = None
        self._created_at = None
        self._merged_at = None
        self.discriminator = None
        if html_url is not None:
            self.html_url = html_url
        if title is not None:
            self.title = title
        if number is not None:
            self.number = number
        if state is not None:
            self.state = state
        if user is not None:
            self.user = user
        if labels is not None:
            self.labels = labels
        if created_at is not None:
            self.created_at = created_at
        if merged_at is not None:
            self.merged_at = merged_at

    @property
    def html_url(self):
        """Gets the html_url of this PullRequestResponse.  # noqa: E501


        :return: The html_url of this PullRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this PullRequestResponse.


        :param html_url: The html_url of this PullRequestResponse.  # noqa: E501
        :type: str
        """

        self._html_url = html_url

    @property
    def title(self):
        """Gets the title of this PullRequestResponse.  # noqa: E501


        :return: The title of this PullRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PullRequestResponse.


        :param title: The title of this PullRequestResponse.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def number(self):
        """Gets the number of this PullRequestResponse.  # noqa: E501


        :return: The number of this PullRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PullRequestResponse.


        :param number: The number of this PullRequestResponse.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def state(self):
        """Gets the state of this PullRequestResponse.  # noqa: E501


        :return: The state of this PullRequestResponse.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PullRequestResponse.


        :param state: The state of this PullRequestResponse.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def user(self):
        """Gets the user of this PullRequestResponse.  # noqa: E501


        :return: The user of this PullRequestResponse.  # noqa: E501
        :rtype: GithubUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PullRequestResponse.


        :param user: The user of this PullRequestResponse.  # noqa: E501
        :type: GithubUser
        """

        self._user = user

    @property
    def labels(self):
        """Gets the labels of this PullRequestResponse.  # noqa: E501


        :return: The labels of this PullRequestResponse.  # noqa: E501
        :rtype: list[GithubLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PullRequestResponse.


        :param labels: The labels of this PullRequestResponse.  # noqa: E501
        :type: list[GithubLabel]
        """

        self._labels = labels

    @property
    def created_at(self):
        """Gets the created_at of this PullRequestResponse.  # noqa: E501


        :return: The created_at of this PullRequestResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PullRequestResponse.


        :param created_at: The created_at of this PullRequestResponse.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def merged_at(self):
        """Gets the merged_at of this PullRequestResponse.  # noqa: E501


        :return: The merged_at of this PullRequestResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._merged_at

    @merged_at.setter
    def merged_at(self, merged_at):
        """Sets the merged_at of this PullRequestResponse.


        :param merged_at: The merged_at of this PullRequestResponse.  # noqa: E501
        :type: datetime
        """

        self._merged_at = merged_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PullRequestResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PullRequestResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
