# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddOnDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'intent': 'str',
        'flavor': 'str',
        'inputs': 'dict(str, Input)',
        'added': 'bool',
        'resource_name': 'str'
    }

    attribute_map = {
        'intent': 'intent',
        'flavor': 'flavor',
        'inputs': 'inputs',
        'added': 'added',
        'resource_name': 'resourceName'
    }

    def __init__(self, intent=None, flavor=None, inputs=None, added=None, resource_name=None):  # noqa: E501
        """AddOnDTO - a model defined in Swagger"""  # noqa: E501
        self._intent = None
        self._flavor = None
        self._inputs = None
        self._added = None
        self._resource_name = None
        self.discriminator = None
        if intent is not None:
            self.intent = intent
        if flavor is not None:
            self.flavor = flavor
        if inputs is not None:
            self.inputs = inputs
        if added is not None:
            self.added = added
        if resource_name is not None:
            self.resource_name = resource_name

    @property
    def intent(self):
        """Gets the intent of this AddOnDTO.  # noqa: E501


        :return: The intent of this AddOnDTO.  # noqa: E501
        :rtype: str
        """
        return self._intent

    @intent.setter
    def intent(self, intent):
        """Sets the intent of this AddOnDTO.


        :param intent: The intent of this AddOnDTO.  # noqa: E501
        :type: str
        """

        self._intent = intent

    @property
    def flavor(self):
        """Gets the flavor of this AddOnDTO.  # noqa: E501


        :return: The flavor of this AddOnDTO.  # noqa: E501
        :rtype: str
        """
        return self._flavor

    @flavor.setter
    def flavor(self, flavor):
        """Sets the flavor of this AddOnDTO.


        :param flavor: The flavor of this AddOnDTO.  # noqa: E501
        :type: str
        """

        self._flavor = flavor

    @property
    def inputs(self):
        """Gets the inputs of this AddOnDTO.  # noqa: E501


        :return: The inputs of this AddOnDTO.  # noqa: E501
        :rtype: dict(str, Input)
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this AddOnDTO.


        :param inputs: The inputs of this AddOnDTO.  # noqa: E501
        :type: dict(str, Input)
        """

        self._inputs = inputs

    @property
    def added(self):
        """Gets the added of this AddOnDTO.  # noqa: E501


        :return: The added of this AddOnDTO.  # noqa: E501
        :rtype: bool
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this AddOnDTO.


        :param added: The added of this AddOnDTO.  # noqa: E501
        :type: bool
        """

        self._added = added

    @property
    def resource_name(self):
        """Gets the resource_name of this AddOnDTO.  # noqa: E501


        :return: The resource_name of this AddOnDTO.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this AddOnDTO.


        :param resource_name: The resource_name of this AddOnDTO.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddOnDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddOnDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
