# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ListPullRequestResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page_size': 'int',
        'page_number': 'int',
        'total_pages': 'int',
        'total_count': 'int',
        'pull_requests': 'list[PullRequestResponse]'
    }

    attribute_map = {
        'page_size': 'pageSize',
        'page_number': 'pageNumber',
        'total_pages': 'totalPages',
        'total_count': 'totalCount',
        'pull_requests': 'pullRequests'
    }

    def __init__(self, page_size=None, page_number=None, total_pages=None, total_count=None, pull_requests=None):  # noqa: E501
        """ListPullRequestResponse - a model defined in Swagger"""  # noqa: E501
        self._page_size = None
        self._page_number = None
        self._total_pages = None
        self._total_count = None
        self._pull_requests = None
        self.discriminator = None
        if page_size is not None:
            self.page_size = page_size
        if page_number is not None:
            self.page_number = page_number
        if total_pages is not None:
            self.total_pages = total_pages
        if total_count is not None:
            self.total_count = total_count
        if pull_requests is not None:
            self.pull_requests = pull_requests

    @property
    def page_size(self):
        """Gets the page_size of this ListPullRequestResponse.  # noqa: E501


        :return: The page_size of this ListPullRequestResponse.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ListPullRequestResponse.


        :param page_size: The page_size of this ListPullRequestResponse.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def page_number(self):
        """Gets the page_number of this ListPullRequestResponse.  # noqa: E501


        :return: The page_number of this ListPullRequestResponse.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this ListPullRequestResponse.


        :param page_number: The page_number of this ListPullRequestResponse.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    @property
    def total_pages(self):
        """Gets the total_pages of this ListPullRequestResponse.  # noqa: E501


        :return: The total_pages of this ListPullRequestResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this ListPullRequestResponse.


        :param total_pages: The total_pages of this ListPullRequestResponse.  # noqa: E501
        :type: int
        """

        self._total_pages = total_pages

    @property
    def total_count(self):
        """Gets the total_count of this ListPullRequestResponse.  # noqa: E501


        :return: The total_count of this ListPullRequestResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ListPullRequestResponse.


        :param total_count: The total_count of this ListPullRequestResponse.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def pull_requests(self):
        """Gets the pull_requests of this ListPullRequestResponse.  # noqa: E501


        :return: The pull_requests of this ListPullRequestResponse.  # noqa: E501
        :rtype: list[PullRequestResponse]
        """
        return self._pull_requests

    @pull_requests.setter
    def pull_requests(self, pull_requests):
        """Sets the pull_requests of this ListPullRequestResponse.


        :param pull_requests: The pull_requests of this ListPullRequestResponse.  # noqa: E501
        :type: list[PullRequestResponse]
        """

        self._pull_requests = pull_requests

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListPullRequestResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListPullRequestResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
