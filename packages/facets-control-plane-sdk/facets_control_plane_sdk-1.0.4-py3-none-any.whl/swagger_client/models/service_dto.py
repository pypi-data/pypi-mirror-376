# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'cluster_ip': 'str',
        'external_ip': 'str',
        'ip_families': 'list[str]',
        'port': 'list[ServicePortDTO]',
        'age': 'int'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'cluster_ip': 'clusterIp',
        'external_ip': 'externalIp',
        'ip_families': 'ipFamilies',
        'port': 'port',
        'age': 'age'
    }

    def __init__(self, name=None, type=None, cluster_ip=None, external_ip=None, ip_families=None, port=None, age=None):  # noqa: E501
        """ServiceDTO - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._cluster_ip = None
        self._external_ip = None
        self._ip_families = None
        self._port = None
        self._age = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if cluster_ip is not None:
            self.cluster_ip = cluster_ip
        if external_ip is not None:
            self.external_ip = external_ip
        if ip_families is not None:
            self.ip_families = ip_families
        if port is not None:
            self.port = port
        if age is not None:
            self.age = age

    @property
    def name(self):
        """Gets the name of this ServiceDTO.  # noqa: E501


        :return: The name of this ServiceDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceDTO.


        :param name: The name of this ServiceDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ServiceDTO.  # noqa: E501


        :return: The type of this ServiceDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServiceDTO.


        :param type: The type of this ServiceDTO.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def cluster_ip(self):
        """Gets the cluster_ip of this ServiceDTO.  # noqa: E501


        :return: The cluster_ip of this ServiceDTO.  # noqa: E501
        :rtype: str
        """
        return self._cluster_ip

    @cluster_ip.setter
    def cluster_ip(self, cluster_ip):
        """Sets the cluster_ip of this ServiceDTO.


        :param cluster_ip: The cluster_ip of this ServiceDTO.  # noqa: E501
        :type: str
        """

        self._cluster_ip = cluster_ip

    @property
    def external_ip(self):
        """Gets the external_ip of this ServiceDTO.  # noqa: E501


        :return: The external_ip of this ServiceDTO.  # noqa: E501
        :rtype: str
        """
        return self._external_ip

    @external_ip.setter
    def external_ip(self, external_ip):
        """Sets the external_ip of this ServiceDTO.


        :param external_ip: The external_ip of this ServiceDTO.  # noqa: E501
        :type: str
        """

        self._external_ip = external_ip

    @property
    def ip_families(self):
        """Gets the ip_families of this ServiceDTO.  # noqa: E501


        :return: The ip_families of this ServiceDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_families

    @ip_families.setter
    def ip_families(self, ip_families):
        """Sets the ip_families of this ServiceDTO.


        :param ip_families: The ip_families of this ServiceDTO.  # noqa: E501
        :type: list[str]
        """

        self._ip_families = ip_families

    @property
    def port(self):
        """Gets the port of this ServiceDTO.  # noqa: E501


        :return: The port of this ServiceDTO.  # noqa: E501
        :rtype: list[ServicePortDTO]
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ServiceDTO.


        :param port: The port of this ServiceDTO.  # noqa: E501
        :type: list[ServicePortDTO]
        """

        self._port = port

    @property
    def age(self):
        """Gets the age of this ServiceDTO.  # noqa: E501


        :return: The age of this ServiceDTO.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this ServiceDTO.


        :param age: The age of this ServiceDTO.  # noqa: E501
        :type: int
        """

        self._age = age

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
