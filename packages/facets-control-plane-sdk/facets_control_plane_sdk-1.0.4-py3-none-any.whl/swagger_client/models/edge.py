# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Edge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'resource_type': 'str',
        'resource_name': 'str',
        'is_input': 'bool',
        'input_name': 'str',
        'block_edits': 'bool',
        'output_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'resource_type': 'resourceType',
        'resource_name': 'resourceName',
        'is_input': 'isInput',
        'input_name': 'inputName',
        'block_edits': 'blockEdits',
        'output_name': 'outputName'
    }

    def __init__(self, id=None, resource_type=None, resource_name=None, is_input=None, input_name=None, block_edits=None, output_name=None):  # noqa: E501
        """Edge - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._resource_type = None
        self._resource_name = None
        self._is_input = None
        self._input_name = None
        self._block_edits = None
        self._output_name = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if resource_type is not None:
            self.resource_type = resource_type
        if resource_name is not None:
            self.resource_name = resource_name
        if is_input is not None:
            self.is_input = is_input
        if input_name is not None:
            self.input_name = input_name
        if block_edits is not None:
            self.block_edits = block_edits
        if output_name is not None:
            self.output_name = output_name

    @property
    def id(self):
        """Gets the id of this Edge.  # noqa: E501


        :return: The id of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Edge.


        :param id: The id of this Edge.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource_type(self):
        """Gets the resource_type of this Edge.  # noqa: E501


        :return: The resource_type of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Edge.


        :param resource_type: The resource_type of this Edge.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def resource_name(self):
        """Gets the resource_name of this Edge.  # noqa: E501


        :return: The resource_name of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this Edge.


        :param resource_name: The resource_name of this Edge.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def is_input(self):
        """Gets the is_input of this Edge.  # noqa: E501


        :return: The is_input of this Edge.  # noqa: E501
        :rtype: bool
        """
        return self._is_input

    @is_input.setter
    def is_input(self, is_input):
        """Sets the is_input of this Edge.


        :param is_input: The is_input of this Edge.  # noqa: E501
        :type: bool
        """

        self._is_input = is_input

    @property
    def input_name(self):
        """Gets the input_name of this Edge.  # noqa: E501


        :return: The input_name of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._input_name

    @input_name.setter
    def input_name(self, input_name):
        """Sets the input_name of this Edge.


        :param input_name: The input_name of this Edge.  # noqa: E501
        :type: str
        """

        self._input_name = input_name

    @property
    def block_edits(self):
        """Gets the block_edits of this Edge.  # noqa: E501


        :return: The block_edits of this Edge.  # noqa: E501
        :rtype: bool
        """
        return self._block_edits

    @block_edits.setter
    def block_edits(self, block_edits):
        """Sets the block_edits of this Edge.


        :param block_edits: The block_edits of this Edge.  # noqa: E501
        :type: bool
        """

        self._block_edits = block_edits

    @property
    def output_name(self):
        """Gets the output_name of this Edge.  # noqa: E501


        :return: The output_name of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._output_name

    @output_name.setter
    def output_name(self, output_name):
        """Sets the output_name of this Edge.


        :param output_name: The output_name of this Edge.  # noqa: E501
        :type: str
        """

        self._output_name = output_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Edge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Edge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
