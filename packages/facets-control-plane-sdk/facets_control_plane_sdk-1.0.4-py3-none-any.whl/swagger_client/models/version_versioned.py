# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VersionVersioned(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'versioning_key': 'str',
        'entity': 'Versioned',
        'version': 'int',
        'archive_date': 'datetime',
        'sequence_key': 'str',
        'sequence': 'int'
    }

    attribute_map = {
        'id': 'id',
        'versioning_key': 'versioningKey',
        'entity': 'entity',
        'version': 'version',
        'archive_date': 'archiveDate',
        'sequence_key': 'sequenceKey',
        'sequence': 'sequence'
    }

    def __init__(self, id=None, versioning_key=None, entity=None, version=None, archive_date=None, sequence_key=None, sequence=None):  # noqa: E501
        """VersionVersioned - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._versioning_key = None
        self._entity = None
        self._version = None
        self._archive_date = None
        self._sequence_key = None
        self._sequence = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if versioning_key is not None:
            self.versioning_key = versioning_key
        if entity is not None:
            self.entity = entity
        if version is not None:
            self.version = version
        if archive_date is not None:
            self.archive_date = archive_date
        if sequence_key is not None:
            self.sequence_key = sequence_key
        if sequence is not None:
            self.sequence = sequence

    @property
    def id(self):
        """Gets the id of this VersionVersioned.  # noqa: E501


        :return: The id of this VersionVersioned.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VersionVersioned.


        :param id: The id of this VersionVersioned.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def versioning_key(self):
        """Gets the versioning_key of this VersionVersioned.  # noqa: E501


        :return: The versioning_key of this VersionVersioned.  # noqa: E501
        :rtype: str
        """
        return self._versioning_key

    @versioning_key.setter
    def versioning_key(self, versioning_key):
        """Sets the versioning_key of this VersionVersioned.


        :param versioning_key: The versioning_key of this VersionVersioned.  # noqa: E501
        :type: str
        """

        self._versioning_key = versioning_key

    @property
    def entity(self):
        """Gets the entity of this VersionVersioned.  # noqa: E501


        :return: The entity of this VersionVersioned.  # noqa: E501
        :rtype: Versioned
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this VersionVersioned.


        :param entity: The entity of this VersionVersioned.  # noqa: E501
        :type: Versioned
        """

        self._entity = entity

    @property
    def version(self):
        """Gets the version of this VersionVersioned.  # noqa: E501


        :return: The version of this VersionVersioned.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VersionVersioned.


        :param version: The version of this VersionVersioned.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def archive_date(self):
        """Gets the archive_date of this VersionVersioned.  # noqa: E501


        :return: The archive_date of this VersionVersioned.  # noqa: E501
        :rtype: datetime
        """
        return self._archive_date

    @archive_date.setter
    def archive_date(self, archive_date):
        """Sets the archive_date of this VersionVersioned.


        :param archive_date: The archive_date of this VersionVersioned.  # noqa: E501
        :type: datetime
        """

        self._archive_date = archive_date

    @property
    def sequence_key(self):
        """Gets the sequence_key of this VersionVersioned.  # noqa: E501


        :return: The sequence_key of this VersionVersioned.  # noqa: E501
        :rtype: str
        """
        return self._sequence_key

    @sequence_key.setter
    def sequence_key(self, sequence_key):
        """Sets the sequence_key of this VersionVersioned.


        :param sequence_key: The sequence_key of this VersionVersioned.  # noqa: E501
        :type: str
        """

        self._sequence_key = sequence_key

    @property
    def sequence(self):
        """Gets the sequence of this VersionVersioned.  # noqa: E501


        :return: The sequence of this VersionVersioned.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this VersionVersioned.


        :param sequence: The sequence of this VersionVersioned.  # noqa: E501
        :type: int
        """

        self._sequence = sequence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VersionVersioned, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VersionVersioned):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
