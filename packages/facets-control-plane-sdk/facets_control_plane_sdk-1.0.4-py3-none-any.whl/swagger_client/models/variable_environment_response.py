# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VariableEnvironmentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'variable_name': 'str',
        'is_secret': 'bool',
        'description': 'str',
        '_global': 'bool',
        'stack_default': 'str',
        'environment_values': 'list[EnvironmentVariableValue]'
    }

    attribute_map = {
        'variable_name': 'variableName',
        'is_secret': 'isSecret',
        'description': 'description',
        '_global': 'global',
        'stack_default': 'stackDefault',
        'environment_values': 'environmentValues'
    }

    def __init__(self, variable_name=None, is_secret=None, description=None, _global=None, stack_default=None, environment_values=None):  # noqa: E501
        """VariableEnvironmentResponse - a model defined in Swagger"""  # noqa: E501
        self._variable_name = None
        self._is_secret = None
        self._description = None
        self.__global = None
        self._stack_default = None
        self._environment_values = None
        self.discriminator = None
        if variable_name is not None:
            self.variable_name = variable_name
        if is_secret is not None:
            self.is_secret = is_secret
        if description is not None:
            self.description = description
        if _global is not None:
            self._global = _global
        if stack_default is not None:
            self.stack_default = stack_default
        if environment_values is not None:
            self.environment_values = environment_values

    @property
    def variable_name(self):
        """Gets the variable_name of this VariableEnvironmentResponse.  # noqa: E501

        Name of the variable/secret  # noqa: E501

        :return: The variable_name of this VariableEnvironmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._variable_name

    @variable_name.setter
    def variable_name(self, variable_name):
        """Sets the variable_name of this VariableEnvironmentResponse.

        Name of the variable/secret  # noqa: E501

        :param variable_name: The variable_name of this VariableEnvironmentResponse.  # noqa: E501
        :type: str
        """

        self._variable_name = variable_name

    @property
    def is_secret(self):
        """Gets the is_secret of this VariableEnvironmentResponse.  # noqa: E501

        Whether this is a secret or regular variable  # noqa: E501

        :return: The is_secret of this VariableEnvironmentResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_secret

    @is_secret.setter
    def is_secret(self, is_secret):
        """Sets the is_secret of this VariableEnvironmentResponse.

        Whether this is a secret or regular variable  # noqa: E501

        :param is_secret: The is_secret of this VariableEnvironmentResponse.  # noqa: E501
        :type: bool
        """

        self._is_secret = is_secret

    @property
    def description(self):
        """Gets the description of this VariableEnvironmentResponse.  # noqa: E501

        Description of the variable/secret  # noqa: E501

        :return: The description of this VariableEnvironmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VariableEnvironmentResponse.

        Description of the variable/secret  # noqa: E501

        :param description: The description of this VariableEnvironmentResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def _global(self):
        """Gets the _global of this VariableEnvironmentResponse.  # noqa: E501

        Whether this is a global variable  # noqa: E501

        :return: The _global of this VariableEnvironmentResponse.  # noqa: E501
        :rtype: bool
        """
        return self.__global

    @_global.setter
    def _global(self, _global):
        """Sets the _global of this VariableEnvironmentResponse.

        Whether this is a global variable  # noqa: E501

        :param _global: The _global of this VariableEnvironmentResponse.  # noqa: E501
        :type: bool
        """

        self.__global = _global

    @property
    def stack_default(self):
        """Gets the stack_default of this VariableEnvironmentResponse.  # noqa: E501

        Default value defined at stack level  # noqa: E501

        :return: The stack_default of this VariableEnvironmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._stack_default

    @stack_default.setter
    def stack_default(self, stack_default):
        """Sets the stack_default of this VariableEnvironmentResponse.

        Default value defined at stack level  # noqa: E501

        :param stack_default: The stack_default of this VariableEnvironmentResponse.  # noqa: E501
        :type: str
        """

        self._stack_default = stack_default

    @property
    def environment_values(self):
        """Gets the environment_values of this VariableEnvironmentResponse.  # noqa: E501

        Values across different environments  # noqa: E501

        :return: The environment_values of this VariableEnvironmentResponse.  # noqa: E501
        :rtype: list[EnvironmentVariableValue]
        """
        return self._environment_values

    @environment_values.setter
    def environment_values(self, environment_values):
        """Sets the environment_values of this VariableEnvironmentResponse.

        Values across different environments  # noqa: E501

        :param environment_values: The environment_values of this VariableEnvironmentResponse.  # noqa: E501
        :type: list[EnvironmentVariableValue]
        """

        self._environment_values = environment_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VariableEnvironmentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VariableEnvironmentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
