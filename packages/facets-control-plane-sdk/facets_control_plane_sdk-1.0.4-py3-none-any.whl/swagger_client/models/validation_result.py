# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValidationResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'valid': 'bool',
        'errors': 'list[ValidationError]'
    }

    attribute_map = {
        'valid': 'valid',
        'errors': 'errors'
    }

    def __init__(self, valid=None, errors=None):  # noqa: E501
        """ValidationResult - a model defined in Swagger"""  # noqa: E501
        self._valid = None
        self._errors = None
        self.discriminator = None
        if valid is not None:
            self.valid = valid
        if errors is not None:
            self.errors = errors

    @property
    def valid(self):
        """Gets the valid of this ValidationResult.  # noqa: E501


        :return: The valid of this ValidationResult.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this ValidationResult.


        :param valid: The valid of this ValidationResult.  # noqa: E501
        :type: bool
        """

        self._valid = valid

    @property
    def errors(self):
        """Gets the errors of this ValidationResult.  # noqa: E501


        :return: The errors of this ValidationResult.  # noqa: E501
        :rtype: list[ValidationError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ValidationResult.


        :param errors: The errors of this ValidationResult.  # noqa: E501
        :type: list[ValidationError]
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValidationResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
