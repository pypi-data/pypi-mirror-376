# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GithubAppInstallationPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_name': 'str',
        'code': 'str',
        'installation_id': 'int',
        'enterprise_host_name': 'str'
    }

    attribute_map = {
        'account_name': 'accountName',
        'code': 'code',
        'installation_id': 'installationId',
        'enterprise_host_name': 'enterpriseHostName'
    }

    def __init__(self, account_name=None, code=None, installation_id=None, enterprise_host_name=None):  # noqa: E501
        """GithubAppInstallationPayload - a model defined in Swagger"""  # noqa: E501
        self._account_name = None
        self._code = None
        self._installation_id = None
        self._enterprise_host_name = None
        self.discriminator = None
        if account_name is not None:
            self.account_name = account_name
        if code is not None:
            self.code = code
        if installation_id is not None:
            self.installation_id = installation_id
        if enterprise_host_name is not None:
            self.enterprise_host_name = enterprise_host_name

    @property
    def account_name(self):
        """Gets the account_name of this GithubAppInstallationPayload.  # noqa: E501


        :return: The account_name of this GithubAppInstallationPayload.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this GithubAppInstallationPayload.


        :param account_name: The account_name of this GithubAppInstallationPayload.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def code(self):
        """Gets the code of this GithubAppInstallationPayload.  # noqa: E501


        :return: The code of this GithubAppInstallationPayload.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this GithubAppInstallationPayload.


        :param code: The code of this GithubAppInstallationPayload.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def installation_id(self):
        """Gets the installation_id of this GithubAppInstallationPayload.  # noqa: E501


        :return: The installation_id of this GithubAppInstallationPayload.  # noqa: E501
        :rtype: int
        """
        return self._installation_id

    @installation_id.setter
    def installation_id(self, installation_id):
        """Sets the installation_id of this GithubAppInstallationPayload.


        :param installation_id: The installation_id of this GithubAppInstallationPayload.  # noqa: E501
        :type: int
        """

        self._installation_id = installation_id

    @property
    def enterprise_host_name(self):
        """Gets the enterprise_host_name of this GithubAppInstallationPayload.  # noqa: E501


        :return: The enterprise_host_name of this GithubAppInstallationPayload.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_host_name

    @enterprise_host_name.setter
    def enterprise_host_name(self, enterprise_host_name):
        """Sets the enterprise_host_name of this GithubAppInstallationPayload.


        :param enterprise_host_name: The enterprise_host_name of this GithubAppInstallationPayload.  # noqa: E501
        :type: str
        """

        self._enterprise_host_name = enterprise_host_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GithubAppInstallationPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubAppInstallationPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
