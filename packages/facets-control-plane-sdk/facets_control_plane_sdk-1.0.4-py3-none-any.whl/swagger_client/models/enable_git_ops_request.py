# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnableGitOpsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vcs_url': 'str',
        'vcs_account_id': 'str',
        'branch': 'str',
        'relative_path': 'str'
    }

    attribute_map = {
        'vcs_url': 'vcsUrl',
        'vcs_account_id': 'vcsAccountId',
        'branch': 'branch',
        'relative_path': 'relativePath'
    }

    def __init__(self, vcs_url=None, vcs_account_id=None, branch=None, relative_path=None):  # noqa: E501
        """EnableGitOpsRequest - a model defined in Swagger"""  # noqa: E501
        self._vcs_url = None
        self._vcs_account_id = None
        self._branch = None
        self._relative_path = None
        self.discriminator = None
        if vcs_url is not None:
            self.vcs_url = vcs_url
        if vcs_account_id is not None:
            self.vcs_account_id = vcs_account_id
        if branch is not None:
            self.branch = branch
        if relative_path is not None:
            self.relative_path = relative_path

    @property
    def vcs_url(self):
        """Gets the vcs_url of this EnableGitOpsRequest.  # noqa: E501


        :return: The vcs_url of this EnableGitOpsRequest.  # noqa: E501
        :rtype: str
        """
        return self._vcs_url

    @vcs_url.setter
    def vcs_url(self, vcs_url):
        """Sets the vcs_url of this EnableGitOpsRequest.


        :param vcs_url: The vcs_url of this EnableGitOpsRequest.  # noqa: E501
        :type: str
        """

        self._vcs_url = vcs_url

    @property
    def vcs_account_id(self):
        """Gets the vcs_account_id of this EnableGitOpsRequest.  # noqa: E501


        :return: The vcs_account_id of this EnableGitOpsRequest.  # noqa: E501
        :rtype: str
        """
        return self._vcs_account_id

    @vcs_account_id.setter
    def vcs_account_id(self, vcs_account_id):
        """Sets the vcs_account_id of this EnableGitOpsRequest.


        :param vcs_account_id: The vcs_account_id of this EnableGitOpsRequest.  # noqa: E501
        :type: str
        """

        self._vcs_account_id = vcs_account_id

    @property
    def branch(self):
        """Gets the branch of this EnableGitOpsRequest.  # noqa: E501


        :return: The branch of this EnableGitOpsRequest.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this EnableGitOpsRequest.


        :param branch: The branch of this EnableGitOpsRequest.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def relative_path(self):
        """Gets the relative_path of this EnableGitOpsRequest.  # noqa: E501


        :return: The relative_path of this EnableGitOpsRequest.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this EnableGitOpsRequest.


        :param relative_path: The relative_path of this EnableGitOpsRequest.  # noqa: E501
        :type: str
        """

        self._relative_path = relative_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnableGitOpsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnableGitOpsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
