# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'params': 'list[ActionParameterDto]',
        'display_name': 'str',
        'cluster_id': 'str',
        'resource_type': 'str',
        'resource_name': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'params': 'params',
        'display_name': 'displayName',
        'cluster_id': 'clusterId',
        'resource_type': 'resourceType',
        'resource_name': 'resourceName'
    }

    def __init__(self, name=None, description=None, params=None, display_name=None, cluster_id=None, resource_type=None, resource_name=None):  # noqa: E501
        """ActionDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._params = None
        self._display_name = None
        self._cluster_id = None
        self._resource_type = None
        self._resource_name = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        if params is not None:
            self.params = params
        if display_name is not None:
            self.display_name = display_name
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if resource_type is not None:
            self.resource_type = resource_type
        if resource_name is not None:
            self.resource_name = resource_name

    @property
    def name(self):
        """Gets the name of this ActionDto.  # noqa: E501

        Name of the action  # noqa: E501

        :return: The name of this ActionDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActionDto.

        Name of the action  # noqa: E501

        :param name: The name of this ActionDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ActionDto.  # noqa: E501

        Description of what the action does  # noqa: E501

        :return: The description of this ActionDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActionDto.

        Description of what the action does  # noqa: E501

        :param description: The description of this ActionDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def params(self):
        """Gets the params of this ActionDto.  # noqa: E501

        List of parameters that can be passed to the action  # noqa: E501

        :return: The params of this ActionDto.  # noqa: E501
        :rtype: list[ActionParameterDto]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ActionDto.

        List of parameters that can be passed to the action  # noqa: E501

        :param params: The params of this ActionDto.  # noqa: E501
        :type: list[ActionParameterDto]
        """

        self._params = params

    @property
    def display_name(self):
        """Gets the display_name of this ActionDto.  # noqa: E501

        Display name for the action  # noqa: E501

        :return: The display_name of this ActionDto.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ActionDto.

        Display name for the action  # noqa: E501

        :param display_name: The display_name of this ActionDto.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ActionDto.  # noqa: E501

        Cluster ID associated with the action  # noqa: E501

        :return: The cluster_id of this ActionDto.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ActionDto.

        Cluster ID associated with the action  # noqa: E501

        :param cluster_id: The cluster_id of this ActionDto.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def resource_type(self):
        """Gets the resource_type of this ActionDto.  # noqa: E501

        Resource type associated with the action  # noqa: E501

        :return: The resource_type of this ActionDto.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ActionDto.

        Resource type associated with the action  # noqa: E501

        :param resource_type: The resource_type of this ActionDto.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def resource_name(self):
        """Gets the resource_name of this ActionDto.  # noqa: E501

        Resource name associated with the action  # noqa: E501

        :return: The resource_name of this ActionDto.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this ActionDto.

        Resource name associated with the action  # noqa: E501

        :param resource_name: The resource_name of this ActionDto.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
