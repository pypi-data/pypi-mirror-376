# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StackGitLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'stack_name': 'str',
        'cluster_id': 'str',
        'directory': 'str',
        'filename': 'str',
        'resource_type': 'str',
        'resource_name': 'str',
        'commit_log': 'CommitLog',
        'change_log': 'str',
        'versioning_key': 'str'
    }

    attribute_map = {
        'id': 'id',
        'stack_name': 'stackName',
        'cluster_id': 'clusterId',
        'directory': 'directory',
        'filename': 'filename',
        'resource_type': 'resourceType',
        'resource_name': 'resourceName',
        'commit_log': 'commitLog',
        'change_log': 'changeLog',
        'versioning_key': 'versioningKey'
    }

    def __init__(self, id=None, stack_name=None, cluster_id=None, directory=None, filename=None, resource_type=None, resource_name=None, commit_log=None, change_log=None, versioning_key=None):  # noqa: E501
        """StackGitLog - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._stack_name = None
        self._cluster_id = None
        self._directory = None
        self._filename = None
        self._resource_type = None
        self._resource_name = None
        self._commit_log = None
        self._change_log = None
        self._versioning_key = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if stack_name is not None:
            self.stack_name = stack_name
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if directory is not None:
            self.directory = directory
        if filename is not None:
            self.filename = filename
        if resource_type is not None:
            self.resource_type = resource_type
        if resource_name is not None:
            self.resource_name = resource_name
        if commit_log is not None:
            self.commit_log = commit_log
        if change_log is not None:
            self.change_log = change_log
        if versioning_key is not None:
            self.versioning_key = versioning_key

    @property
    def id(self):
        """Gets the id of this StackGitLog.  # noqa: E501


        :return: The id of this StackGitLog.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StackGitLog.


        :param id: The id of this StackGitLog.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def stack_name(self):
        """Gets the stack_name of this StackGitLog.  # noqa: E501


        :return: The stack_name of this StackGitLog.  # noqa: E501
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this StackGitLog.


        :param stack_name: The stack_name of this StackGitLog.  # noqa: E501
        :type: str
        """

        self._stack_name = stack_name

    @property
    def cluster_id(self):
        """Gets the cluster_id of this StackGitLog.  # noqa: E501


        :return: The cluster_id of this StackGitLog.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this StackGitLog.


        :param cluster_id: The cluster_id of this StackGitLog.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def directory(self):
        """Gets the directory of this StackGitLog.  # noqa: E501


        :return: The directory of this StackGitLog.  # noqa: E501
        :rtype: str
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this StackGitLog.


        :param directory: The directory of this StackGitLog.  # noqa: E501
        :type: str
        """

        self._directory = directory

    @property
    def filename(self):
        """Gets the filename of this StackGitLog.  # noqa: E501


        :return: The filename of this StackGitLog.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this StackGitLog.


        :param filename: The filename of this StackGitLog.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def resource_type(self):
        """Gets the resource_type of this StackGitLog.  # noqa: E501


        :return: The resource_type of this StackGitLog.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this StackGitLog.


        :param resource_type: The resource_type of this StackGitLog.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def resource_name(self):
        """Gets the resource_name of this StackGitLog.  # noqa: E501


        :return: The resource_name of this StackGitLog.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this StackGitLog.


        :param resource_name: The resource_name of this StackGitLog.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def commit_log(self):
        """Gets the commit_log of this StackGitLog.  # noqa: E501


        :return: The commit_log of this StackGitLog.  # noqa: E501
        :rtype: CommitLog
        """
        return self._commit_log

    @commit_log.setter
    def commit_log(self, commit_log):
        """Sets the commit_log of this StackGitLog.


        :param commit_log: The commit_log of this StackGitLog.  # noqa: E501
        :type: CommitLog
        """

        self._commit_log = commit_log

    @property
    def change_log(self):
        """Gets the change_log of this StackGitLog.  # noqa: E501


        :return: The change_log of this StackGitLog.  # noqa: E501
        :rtype: str
        """
        return self._change_log

    @change_log.setter
    def change_log(self, change_log):
        """Sets the change_log of this StackGitLog.


        :param change_log: The change_log of this StackGitLog.  # noqa: E501
        :type: str
        """

        self._change_log = change_log

    @property
    def versioning_key(self):
        """Gets the versioning_key of this StackGitLog.  # noqa: E501


        :return: The versioning_key of this StackGitLog.  # noqa: E501
        :rtype: str
        """
        return self._versioning_key

    @versioning_key.setter
    def versioning_key(self, versioning_key):
        """Sets the versioning_key of this StackGitLog.


        :param versioning_key: The versioning_key of this StackGitLog.  # noqa: E501
        :type: str
        """

        self._versioning_key = versioning_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StackGitLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StackGitLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
