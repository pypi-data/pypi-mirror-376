# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VariableCountDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_variables': 'int',
        'overridden_variables': 'int',
        'total_secrets': 'int',
        'overridden_secrets': 'int'
    }

    attribute_map = {
        'total_variables': 'totalVariables',
        'overridden_variables': 'overriddenVariables',
        'total_secrets': 'totalSecrets',
        'overridden_secrets': 'overriddenSecrets'
    }

    def __init__(self, total_variables=None, overridden_variables=None, total_secrets=None, overridden_secrets=None):  # noqa: E501
        """VariableCountDto - a model defined in Swagger"""  # noqa: E501
        self._total_variables = None
        self._overridden_variables = None
        self._total_secrets = None
        self._overridden_secrets = None
        self.discriminator = None
        if total_variables is not None:
            self.total_variables = total_variables
        if overridden_variables is not None:
            self.overridden_variables = overridden_variables
        if total_secrets is not None:
            self.total_secrets = total_secrets
        if overridden_secrets is not None:
            self.overridden_secrets = overridden_secrets

    @property
    def total_variables(self):
        """Gets the total_variables of this VariableCountDto.  # noqa: E501


        :return: The total_variables of this VariableCountDto.  # noqa: E501
        :rtype: int
        """
        return self._total_variables

    @total_variables.setter
    def total_variables(self, total_variables):
        """Sets the total_variables of this VariableCountDto.


        :param total_variables: The total_variables of this VariableCountDto.  # noqa: E501
        :type: int
        """

        self._total_variables = total_variables

    @property
    def overridden_variables(self):
        """Gets the overridden_variables of this VariableCountDto.  # noqa: E501


        :return: The overridden_variables of this VariableCountDto.  # noqa: E501
        :rtype: int
        """
        return self._overridden_variables

    @overridden_variables.setter
    def overridden_variables(self, overridden_variables):
        """Sets the overridden_variables of this VariableCountDto.


        :param overridden_variables: The overridden_variables of this VariableCountDto.  # noqa: E501
        :type: int
        """

        self._overridden_variables = overridden_variables

    @property
    def total_secrets(self):
        """Gets the total_secrets of this VariableCountDto.  # noqa: E501


        :return: The total_secrets of this VariableCountDto.  # noqa: E501
        :rtype: int
        """
        return self._total_secrets

    @total_secrets.setter
    def total_secrets(self, total_secrets):
        """Sets the total_secrets of this VariableCountDto.


        :param total_secrets: The total_secrets of this VariableCountDto.  # noqa: E501
        :type: int
        """

        self._total_secrets = total_secrets

    @property
    def overridden_secrets(self):
        """Gets the overridden_secrets of this VariableCountDto.  # noqa: E501


        :return: The overridden_secrets of this VariableCountDto.  # noqa: E501
        :rtype: int
        """
        return self._overridden_secrets

    @overridden_secrets.setter
    def overridden_secrets(self, overridden_secrets):
        """Sets the overridden_secrets of this VariableCountDto.


        :param overridden_secrets: The overridden_secrets of this VariableCountDto.  # noqa: E501
        :type: int
        """

        self._overridden_secrets = overridden_secrets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VariableCountDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VariableCountDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
