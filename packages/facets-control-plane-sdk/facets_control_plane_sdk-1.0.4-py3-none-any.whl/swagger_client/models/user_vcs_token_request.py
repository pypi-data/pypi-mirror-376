# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserVCSTokenRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'host_name': 'str',
        'user_name': 'str',
        'personal_access_token': 'str'
    }

    attribute_map = {
        'id': 'id',
        'host_name': 'hostName',
        'user_name': 'userName',
        'personal_access_token': 'personalAccessToken'
    }

    def __init__(self, id=None, host_name=None, user_name=None, personal_access_token=None):  # noqa: E501
        """UserVCSTokenRequest - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._host_name = None
        self._user_name = None
        self._personal_access_token = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.host_name = host_name
        self.user_name = user_name
        self.personal_access_token = personal_access_token

    @property
    def id(self):
        """Gets the id of this UserVCSTokenRequest.  # noqa: E501


        :return: The id of this UserVCSTokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserVCSTokenRequest.


        :param id: The id of this UserVCSTokenRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def host_name(self):
        """Gets the host_name of this UserVCSTokenRequest.  # noqa: E501


        :return: The host_name of this UserVCSTokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this UserVCSTokenRequest.


        :param host_name: The host_name of this UserVCSTokenRequest.  # noqa: E501
        :type: str
        """
        if host_name is None:
            raise ValueError("Invalid value for `host_name`, must not be `None`")  # noqa: E501

        self._host_name = host_name

    @property
    def user_name(self):
        """Gets the user_name of this UserVCSTokenRequest.  # noqa: E501


        :return: The user_name of this UserVCSTokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserVCSTokenRequest.


        :param user_name: The user_name of this UserVCSTokenRequest.  # noqa: E501
        :type: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def personal_access_token(self):
        """Gets the personal_access_token of this UserVCSTokenRequest.  # noqa: E501


        :return: The personal_access_token of this UserVCSTokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._personal_access_token

    @personal_access_token.setter
    def personal_access_token(self, personal_access_token):
        """Sets the personal_access_token of this UserVCSTokenRequest.


        :param personal_access_token: The personal_access_token of this UserVCSTokenRequest.  # noqa: E501
        :type: str
        """
        if personal_access_token is None:
            raise ValueError("Invalid value for `personal_access_token`, must not be `None`")  # noqa: E501

        self._personal_access_token = personal_access_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserVCSTokenRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserVCSTokenRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
