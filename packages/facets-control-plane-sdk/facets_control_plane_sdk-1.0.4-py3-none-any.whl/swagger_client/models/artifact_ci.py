# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArtifactCI(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_by': 'str',
        'creation_date': 'datetime',
        'last_modified_date': 'datetime',
        'last_modified_by': 'str',
        'ci_name': 'str',
        'registration_type': 'str',
        'stack_name': 'str',
        'promotion_workflow_id': 'str',
        'rule_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_by': 'createdBy',
        'creation_date': 'creationDate',
        'last_modified_date': 'lastModifiedDate',
        'last_modified_by': 'lastModifiedBy',
        'ci_name': 'ciName',
        'registration_type': 'registrationType',
        'stack_name': 'stackName',
        'promotion_workflow_id': 'promotionWorkflowId',
        'rule_id': 'ruleId'
    }

    def __init__(self, id=None, created_by=None, creation_date=None, last_modified_date=None, last_modified_by=None, ci_name=None, registration_type=None, stack_name=None, promotion_workflow_id=None, rule_id=None):  # noqa: E501
        """ArtifactCI - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_by = None
        self._creation_date = None
        self._last_modified_date = None
        self._last_modified_by = None
        self._ci_name = None
        self._registration_type = None
        self._stack_name = None
        self._promotion_workflow_id = None
        self._rule_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_by is not None:
            self.created_by = created_by
        if creation_date is not None:
            self.creation_date = creation_date
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        self.ci_name = ci_name
        self.registration_type = registration_type
        if stack_name is not None:
            self.stack_name = stack_name
        if promotion_workflow_id is not None:
            self.promotion_workflow_id = promotion_workflow_id
        if rule_id is not None:
            self.rule_id = rule_id

    @property
    def id(self):
        """Gets the id of this ArtifactCI.  # noqa: E501


        :return: The id of this ArtifactCI.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ArtifactCI.


        :param id: The id of this ArtifactCI.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_by(self):
        """Gets the created_by of this ArtifactCI.  # noqa: E501


        :return: The created_by of this ArtifactCI.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ArtifactCI.


        :param created_by: The created_by of this ArtifactCI.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def creation_date(self):
        """Gets the creation_date of this ArtifactCI.  # noqa: E501


        :return: The creation_date of this ArtifactCI.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ArtifactCI.


        :param creation_date: The creation_date of this ArtifactCI.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this ArtifactCI.  # noqa: E501


        :return: The last_modified_date of this ArtifactCI.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this ArtifactCI.


        :param last_modified_date: The last_modified_date of this ArtifactCI.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this ArtifactCI.  # noqa: E501


        :return: The last_modified_by of this ArtifactCI.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this ArtifactCI.


        :param last_modified_by: The last_modified_by of this ArtifactCI.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def ci_name(self):
        """Gets the ci_name of this ArtifactCI.  # noqa: E501


        :return: The ci_name of this ArtifactCI.  # noqa: E501
        :rtype: str
        """
        return self._ci_name

    @ci_name.setter
    def ci_name(self, ci_name):
        """Sets the ci_name of this ArtifactCI.


        :param ci_name: The ci_name of this ArtifactCI.  # noqa: E501
        :type: str
        """
        if ci_name is None:
            raise ValueError("Invalid value for `ci_name`, must not be `None`")  # noqa: E501

        self._ci_name = ci_name

    @property
    def registration_type(self):
        """Gets the registration_type of this ArtifactCI.  # noqa: E501


        :return: The registration_type of this ArtifactCI.  # noqa: E501
        :rtype: str
        """
        return self._registration_type

    @registration_type.setter
    def registration_type(self, registration_type):
        """Sets the registration_type of this ArtifactCI.


        :param registration_type: The registration_type of this ArtifactCI.  # noqa: E501
        :type: str
        """
        if registration_type is None:
            raise ValueError("Invalid value for `registration_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ENVIRONMENT", "RELEASE_STREAM", "HYBRID"]  # noqa: E501
        if registration_type not in allowed_values:
            raise ValueError(
                "Invalid value for `registration_type` ({0}), must be one of {1}"  # noqa: E501
                .format(registration_type, allowed_values)
            )

        self._registration_type = registration_type

    @property
    def stack_name(self):
        """Gets the stack_name of this ArtifactCI.  # noqa: E501


        :return: The stack_name of this ArtifactCI.  # noqa: E501
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this ArtifactCI.


        :param stack_name: The stack_name of this ArtifactCI.  # noqa: E501
        :type: str
        """

        self._stack_name = stack_name

    @property
    def promotion_workflow_id(self):
        """Gets the promotion_workflow_id of this ArtifactCI.  # noqa: E501


        :return: The promotion_workflow_id of this ArtifactCI.  # noqa: E501
        :rtype: str
        """
        return self._promotion_workflow_id

    @promotion_workflow_id.setter
    def promotion_workflow_id(self, promotion_workflow_id):
        """Sets the promotion_workflow_id of this ArtifactCI.


        :param promotion_workflow_id: The promotion_workflow_id of this ArtifactCI.  # noqa: E501
        :type: str
        """

        self._promotion_workflow_id = promotion_workflow_id

    @property
    def rule_id(self):
        """Gets the rule_id of this ArtifactCI.  # noqa: E501


        :return: The rule_id of this ArtifactCI.  # noqa: E501
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this ArtifactCI.


        :param rule_id: The rule_id of this ArtifactCI.  # noqa: E501
        :type: str
        """

        self._rule_id = rule_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArtifactCI, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArtifactCI):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
