# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetricStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'container_resource': 'ContainerResourceMetricStatus',
        'external': 'ExternalMetricStatus',
        'object': 'ObjectMetricStatus',
        'pods': 'PodsMetricStatus',
        'resource': 'ResourceMetricStatus',
        'type': 'str'
    }

    attribute_map = {
        'container_resource': 'containerResource',
        'external': 'external',
        'object': 'object',
        'pods': 'pods',
        'resource': 'resource',
        'type': 'type'
    }

    def __init__(self, container_resource=None, external=None, object=None, pods=None, resource=None, type=None):  # noqa: E501
        """MetricStatus - a model defined in Swagger"""  # noqa: E501
        self._container_resource = None
        self._external = None
        self._object = None
        self._pods = None
        self._resource = None
        self._type = None
        self.discriminator = None
        if container_resource is not None:
            self.container_resource = container_resource
        if external is not None:
            self.external = external
        if object is not None:
            self.object = object
        if pods is not None:
            self.pods = pods
        if resource is not None:
            self.resource = resource
        if type is not None:
            self.type = type

    @property
    def container_resource(self):
        """Gets the container_resource of this MetricStatus.  # noqa: E501


        :return: The container_resource of this MetricStatus.  # noqa: E501
        :rtype: ContainerResourceMetricStatus
        """
        return self._container_resource

    @container_resource.setter
    def container_resource(self, container_resource):
        """Sets the container_resource of this MetricStatus.


        :param container_resource: The container_resource of this MetricStatus.  # noqa: E501
        :type: ContainerResourceMetricStatus
        """

        self._container_resource = container_resource

    @property
    def external(self):
        """Gets the external of this MetricStatus.  # noqa: E501


        :return: The external of this MetricStatus.  # noqa: E501
        :rtype: ExternalMetricStatus
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this MetricStatus.


        :param external: The external of this MetricStatus.  # noqa: E501
        :type: ExternalMetricStatus
        """

        self._external = external

    @property
    def object(self):
        """Gets the object of this MetricStatus.  # noqa: E501


        :return: The object of this MetricStatus.  # noqa: E501
        :rtype: ObjectMetricStatus
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this MetricStatus.


        :param object: The object of this MetricStatus.  # noqa: E501
        :type: ObjectMetricStatus
        """

        self._object = object

    @property
    def pods(self):
        """Gets the pods of this MetricStatus.  # noqa: E501


        :return: The pods of this MetricStatus.  # noqa: E501
        :rtype: PodsMetricStatus
        """
        return self._pods

    @pods.setter
    def pods(self, pods):
        """Sets the pods of this MetricStatus.


        :param pods: The pods of this MetricStatus.  # noqa: E501
        :type: PodsMetricStatus
        """

        self._pods = pods

    @property
    def resource(self):
        """Gets the resource of this MetricStatus.  # noqa: E501


        :return: The resource of this MetricStatus.  # noqa: E501
        :rtype: ResourceMetricStatus
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this MetricStatus.


        :param resource: The resource of this MetricStatus.  # noqa: E501
        :type: ResourceMetricStatus
        """

        self._resource = resource

    @property
    def type(self):
        """Gets the type of this MetricStatus.  # noqa: E501


        :return: The type of this MetricStatus.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MetricStatus.


        :param type: The type of this MetricStatus.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
