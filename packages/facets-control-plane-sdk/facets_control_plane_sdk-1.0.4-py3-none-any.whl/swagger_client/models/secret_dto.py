# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SecretDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'data_key_set': 'list[str]',
        'data_count': 'int',
        'age': 'int'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'data_key_set': 'dataKeySet',
        'data_count': 'dataCount',
        'age': 'age'
    }

    def __init__(self, name=None, type=None, data_key_set=None, data_count=None, age=None):  # noqa: E501
        """SecretDTO - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._data_key_set = None
        self._data_count = None
        self._age = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if data_key_set is not None:
            self.data_key_set = data_key_set
        if data_count is not None:
            self.data_count = data_count
        if age is not None:
            self.age = age

    @property
    def name(self):
        """Gets the name of this SecretDTO.  # noqa: E501


        :return: The name of this SecretDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SecretDTO.


        :param name: The name of this SecretDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this SecretDTO.  # noqa: E501


        :return: The type of this SecretDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SecretDTO.


        :param type: The type of this SecretDTO.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def data_key_set(self):
        """Gets the data_key_set of this SecretDTO.  # noqa: E501


        :return: The data_key_set of this SecretDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_key_set

    @data_key_set.setter
    def data_key_set(self, data_key_set):
        """Sets the data_key_set of this SecretDTO.


        :param data_key_set: The data_key_set of this SecretDTO.  # noqa: E501
        :type: list[str]
        """

        self._data_key_set = data_key_set

    @property
    def data_count(self):
        """Gets the data_count of this SecretDTO.  # noqa: E501


        :return: The data_count of this SecretDTO.  # noqa: E501
        :rtype: int
        """
        return self._data_count

    @data_count.setter
    def data_count(self, data_count):
        """Sets the data_count of this SecretDTO.


        :param data_count: The data_count of this SecretDTO.  # noqa: E501
        :type: int
        """

        self._data_count = data_count

    @property
    def age(self):
        """Gets the age of this SecretDTO.  # noqa: E501


        :return: The age of this SecretDTO.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this SecretDTO.


        :param age: The age of this SecretDTO.  # noqa: E501
        :type: int
        """

        self._age = age

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecretDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecretDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
