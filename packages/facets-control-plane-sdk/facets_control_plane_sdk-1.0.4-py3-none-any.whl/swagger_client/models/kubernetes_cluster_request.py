# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KubernetesClusterRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloud': 'str',
        'cluster_name': 'str',
        'stack_name': 'str',
        'cd_pipeline_parent': 'str',
        'require_sign_off': 'bool',
        'tz': 'MaintenanceWindowDTOTimeZone',
        'release_stream': 'str',
        'k8s_requests_to_limits_ratio': 'float',
        'schedules': 'dict(str, str)',
        'auto_sign_off_schedule': 'str',
        'enable_auto_sign_off': 'bool',
        'component_versions': 'dict(str, str)',
        'is_ephemeral': 'bool',
        'cloud_account_id': 'str',
        'base_cluster_id': 'str',
        'namespace': 'str'
    }

    attribute_map = {
        'cloud': 'cloud',
        'cluster_name': 'clusterName',
        'stack_name': 'stackName',
        'cd_pipeline_parent': 'cdPipelineParent',
        'require_sign_off': 'requireSignOff',
        'tz': 'tz',
        'release_stream': 'releaseStream',
        'k8s_requests_to_limits_ratio': 'k8sRequestsToLimitsRatio',
        'schedules': 'schedules',
        'auto_sign_off_schedule': 'autoSignOffSchedule',
        'enable_auto_sign_off': 'enableAutoSignOff',
        'component_versions': 'componentVersions',
        'is_ephemeral': 'isEphemeral',
        'cloud_account_id': 'cloudAccountId',
        'base_cluster_id': 'baseClusterId',
        'namespace': 'namespace'
    }

    def __init__(self, cloud=None, cluster_name=None, stack_name=None, cd_pipeline_parent=None, require_sign_off=None, tz=None, release_stream=None, k8s_requests_to_limits_ratio=None, schedules=None, auto_sign_off_schedule=None, enable_auto_sign_off=None, component_versions=None, is_ephemeral=None, cloud_account_id=None, base_cluster_id=None, namespace=None):  # noqa: E501
        """KubernetesClusterRequest - a model defined in Swagger"""  # noqa: E501
        self._cloud = None
        self._cluster_name = None
        self._stack_name = None
        self._cd_pipeline_parent = None
        self._require_sign_off = None
        self._tz = None
        self._release_stream = None
        self._k8s_requests_to_limits_ratio = None
        self._schedules = None
        self._auto_sign_off_schedule = None
        self._enable_auto_sign_off = None
        self._component_versions = None
        self._is_ephemeral = None
        self._cloud_account_id = None
        self._base_cluster_id = None
        self._namespace = None
        self.discriminator = None
        if cloud is not None:
            self.cloud = cloud
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if stack_name is not None:
            self.stack_name = stack_name
        if cd_pipeline_parent is not None:
            self.cd_pipeline_parent = cd_pipeline_parent
        if require_sign_off is not None:
            self.require_sign_off = require_sign_off
        if tz is not None:
            self.tz = tz
        if release_stream is not None:
            self.release_stream = release_stream
        if k8s_requests_to_limits_ratio is not None:
            self.k8s_requests_to_limits_ratio = k8s_requests_to_limits_ratio
        if schedules is not None:
            self.schedules = schedules
        if auto_sign_off_schedule is not None:
            self.auto_sign_off_schedule = auto_sign_off_schedule
        if enable_auto_sign_off is not None:
            self.enable_auto_sign_off = enable_auto_sign_off
        if component_versions is not None:
            self.component_versions = component_versions
        if is_ephemeral is not None:
            self.is_ephemeral = is_ephemeral
        if cloud_account_id is not None:
            self.cloud_account_id = cloud_account_id
        if base_cluster_id is not None:
            self.base_cluster_id = base_cluster_id
        if namespace is not None:
            self.namespace = namespace

    @property
    def cloud(self):
        """Gets the cloud of this KubernetesClusterRequest.  # noqa: E501


        :return: The cloud of this KubernetesClusterRequest.  # noqa: E501
        :rtype: str
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this KubernetesClusterRequest.


        :param cloud: The cloud of this KubernetesClusterRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["AWS", "AZURE", "LOCAL", "GCP", "KUBERNETES", "NO_CLOUD"]  # noqa: E501
        if cloud not in allowed_values:
            raise ValueError(
                "Invalid value for `cloud` ({0}), must be one of {1}"  # noqa: E501
                .format(cloud, allowed_values)
            )

        self._cloud = cloud

    @property
    def cluster_name(self):
        """Gets the cluster_name of this KubernetesClusterRequest.  # noqa: E501


        :return: The cluster_name of this KubernetesClusterRequest.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this KubernetesClusterRequest.


        :param cluster_name: The cluster_name of this KubernetesClusterRequest.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def stack_name(self):
        """Gets the stack_name of this KubernetesClusterRequest.  # noqa: E501


        :return: The stack_name of this KubernetesClusterRequest.  # noqa: E501
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this KubernetesClusterRequest.


        :param stack_name: The stack_name of this KubernetesClusterRequest.  # noqa: E501
        :type: str
        """

        self._stack_name = stack_name

    @property
    def cd_pipeline_parent(self):
        """Gets the cd_pipeline_parent of this KubernetesClusterRequest.  # noqa: E501


        :return: The cd_pipeline_parent of this KubernetesClusterRequest.  # noqa: E501
        :rtype: str
        """
        return self._cd_pipeline_parent

    @cd_pipeline_parent.setter
    def cd_pipeline_parent(self, cd_pipeline_parent):
        """Sets the cd_pipeline_parent of this KubernetesClusterRequest.


        :param cd_pipeline_parent: The cd_pipeline_parent of this KubernetesClusterRequest.  # noqa: E501
        :type: str
        """

        self._cd_pipeline_parent = cd_pipeline_parent

    @property
    def require_sign_off(self):
        """Gets the require_sign_off of this KubernetesClusterRequest.  # noqa: E501


        :return: The require_sign_off of this KubernetesClusterRequest.  # noqa: E501
        :rtype: bool
        """
        return self._require_sign_off

    @require_sign_off.setter
    def require_sign_off(self, require_sign_off):
        """Sets the require_sign_off of this KubernetesClusterRequest.


        :param require_sign_off: The require_sign_off of this KubernetesClusterRequest.  # noqa: E501
        :type: bool
        """

        self._require_sign_off = require_sign_off

    @property
    def tz(self):
        """Gets the tz of this KubernetesClusterRequest.  # noqa: E501


        :return: The tz of this KubernetesClusterRequest.  # noqa: E501
        :rtype: MaintenanceWindowDTOTimeZone
        """
        return self._tz

    @tz.setter
    def tz(self, tz):
        """Sets the tz of this KubernetesClusterRequest.


        :param tz: The tz of this KubernetesClusterRequest.  # noqa: E501
        :type: MaintenanceWindowDTOTimeZone
        """

        self._tz = tz

    @property
    def release_stream(self):
        """Gets the release_stream of this KubernetesClusterRequest.  # noqa: E501


        :return: The release_stream of this KubernetesClusterRequest.  # noqa: E501
        :rtype: str
        """
        return self._release_stream

    @release_stream.setter
    def release_stream(self, release_stream):
        """Sets the release_stream of this KubernetesClusterRequest.


        :param release_stream: The release_stream of this KubernetesClusterRequest.  # noqa: E501
        :type: str
        """

        self._release_stream = release_stream

    @property
    def k8s_requests_to_limits_ratio(self):
        """Gets the k8s_requests_to_limits_ratio of this KubernetesClusterRequest.  # noqa: E501


        :return: The k8s_requests_to_limits_ratio of this KubernetesClusterRequest.  # noqa: E501
        :rtype: float
        """
        return self._k8s_requests_to_limits_ratio

    @k8s_requests_to_limits_ratio.setter
    def k8s_requests_to_limits_ratio(self, k8s_requests_to_limits_ratio):
        """Sets the k8s_requests_to_limits_ratio of this KubernetesClusterRequest.


        :param k8s_requests_to_limits_ratio: The k8s_requests_to_limits_ratio of this KubernetesClusterRequest.  # noqa: E501
        :type: float
        """

        self._k8s_requests_to_limits_ratio = k8s_requests_to_limits_ratio

    @property
    def schedules(self):
        """Gets the schedules of this KubernetesClusterRequest.  # noqa: E501


        :return: The schedules of this KubernetesClusterRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """Sets the schedules of this KubernetesClusterRequest.


        :param schedules: The schedules of this KubernetesClusterRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._schedules = schedules

    @property
    def auto_sign_off_schedule(self):
        """Gets the auto_sign_off_schedule of this KubernetesClusterRequest.  # noqa: E501


        :return: The auto_sign_off_schedule of this KubernetesClusterRequest.  # noqa: E501
        :rtype: str
        """
        return self._auto_sign_off_schedule

    @auto_sign_off_schedule.setter
    def auto_sign_off_schedule(self, auto_sign_off_schedule):
        """Sets the auto_sign_off_schedule of this KubernetesClusterRequest.


        :param auto_sign_off_schedule: The auto_sign_off_schedule of this KubernetesClusterRequest.  # noqa: E501
        :type: str
        """

        self._auto_sign_off_schedule = auto_sign_off_schedule

    @property
    def enable_auto_sign_off(self):
        """Gets the enable_auto_sign_off of this KubernetesClusterRequest.  # noqa: E501


        :return: The enable_auto_sign_off of this KubernetesClusterRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_auto_sign_off

    @enable_auto_sign_off.setter
    def enable_auto_sign_off(self, enable_auto_sign_off):
        """Sets the enable_auto_sign_off of this KubernetesClusterRequest.


        :param enable_auto_sign_off: The enable_auto_sign_off of this KubernetesClusterRequest.  # noqa: E501
        :type: bool
        """

        self._enable_auto_sign_off = enable_auto_sign_off

    @property
    def component_versions(self):
        """Gets the component_versions of this KubernetesClusterRequest.  # noqa: E501


        :return: The component_versions of this KubernetesClusterRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._component_versions

    @component_versions.setter
    def component_versions(self, component_versions):
        """Sets the component_versions of this KubernetesClusterRequest.


        :param component_versions: The component_versions of this KubernetesClusterRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._component_versions = component_versions

    @property
    def is_ephemeral(self):
        """Gets the is_ephemeral of this KubernetesClusterRequest.  # noqa: E501


        :return: The is_ephemeral of this KubernetesClusterRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_ephemeral

    @is_ephemeral.setter
    def is_ephemeral(self, is_ephemeral):
        """Sets the is_ephemeral of this KubernetesClusterRequest.


        :param is_ephemeral: The is_ephemeral of this KubernetesClusterRequest.  # noqa: E501
        :type: bool
        """

        self._is_ephemeral = is_ephemeral

    @property
    def cloud_account_id(self):
        """Gets the cloud_account_id of this KubernetesClusterRequest.  # noqa: E501


        :return: The cloud_account_id of this KubernetesClusterRequest.  # noqa: E501
        :rtype: str
        """
        return self._cloud_account_id

    @cloud_account_id.setter
    def cloud_account_id(self, cloud_account_id):
        """Sets the cloud_account_id of this KubernetesClusterRequest.


        :param cloud_account_id: The cloud_account_id of this KubernetesClusterRequest.  # noqa: E501
        :type: str
        """

        self._cloud_account_id = cloud_account_id

    @property
    def base_cluster_id(self):
        """Gets the base_cluster_id of this KubernetesClusterRequest.  # noqa: E501


        :return: The base_cluster_id of this KubernetesClusterRequest.  # noqa: E501
        :rtype: str
        """
        return self._base_cluster_id

    @base_cluster_id.setter
    def base_cluster_id(self, base_cluster_id):
        """Sets the base_cluster_id of this KubernetesClusterRequest.


        :param base_cluster_id: The base_cluster_id of this KubernetesClusterRequest.  # noqa: E501
        :type: str
        """

        self._base_cluster_id = base_cluster_id

    @property
    def namespace(self):
        """Gets the namespace of this KubernetesClusterRequest.  # noqa: E501


        :return: The namespace of this KubernetesClusterRequest.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this KubernetesClusterRequest.


        :param namespace: The namespace of this KubernetesClusterRequest.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KubernetesClusterRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubernetesClusterRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
