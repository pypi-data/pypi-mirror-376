# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserAccessToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token_id': 'str',
        'name': 'str',
        'description': 'str',
        'token': 'str',
        'user_name': 'str',
        'created_on': 'datetime'
    }

    attribute_map = {
        'token_id': 'tokenId',
        'name': 'name',
        'description': 'description',
        'token': 'token',
        'user_name': 'userName',
        'created_on': 'createdOn'
    }

    def __init__(self, token_id=None, name=None, description=None, token=None, user_name=None, created_on=None):  # noqa: E501
        """UserAccessToken - a model defined in Swagger"""  # noqa: E501
        self._token_id = None
        self._name = None
        self._description = None
        self._token = None
        self._user_name = None
        self._created_on = None
        self.discriminator = None
        if token_id is not None:
            self.token_id = token_id
        self.name = name
        if description is not None:
            self.description = description
        if token is not None:
            self.token = token
        if user_name is not None:
            self.user_name = user_name
        if created_on is not None:
            self.created_on = created_on

    @property
    def token_id(self):
        """Gets the token_id of this UserAccessToken.  # noqa: E501


        :return: The token_id of this UserAccessToken.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this UserAccessToken.


        :param token_id: The token_id of this UserAccessToken.  # noqa: E501
        :type: str
        """

        self._token_id = token_id

    @property
    def name(self):
        """Gets the name of this UserAccessToken.  # noqa: E501


        :return: The name of this UserAccessToken.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserAccessToken.


        :param name: The name of this UserAccessToken.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this UserAccessToken.  # noqa: E501


        :return: The description of this UserAccessToken.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UserAccessToken.


        :param description: The description of this UserAccessToken.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def token(self):
        """Gets the token of this UserAccessToken.  # noqa: E501


        :return: The token of this UserAccessToken.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this UserAccessToken.


        :param token: The token of this UserAccessToken.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def user_name(self):
        """Gets the user_name of this UserAccessToken.  # noqa: E501


        :return: The user_name of this UserAccessToken.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserAccessToken.


        :param user_name: The user_name of this UserAccessToken.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def created_on(self):
        """Gets the created_on of this UserAccessToken.  # noqa: E501


        :return: The created_on of this UserAccessToken.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this UserAccessToken.


        :param created_on: The created_on of this UserAccessToken.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserAccessToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAccessToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
