# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RawError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stack_trace': 'str',
        'error_message': 'str',
        'description': 'str',
        'resolution': 'str'
    }

    attribute_map = {
        'stack_trace': 'stackTrace',
        'error_message': 'errorMessage',
        'description': 'description',
        'resolution': 'resolution'
    }

    def __init__(self, stack_trace=None, error_message=None, description=None, resolution=None):  # noqa: E501
        """RawError - a model defined in Swagger"""  # noqa: E501
        self._stack_trace = None
        self._error_message = None
        self._description = None
        self._resolution = None
        self.discriminator = None
        if stack_trace is not None:
            self.stack_trace = stack_trace
        if error_message is not None:
            self.error_message = error_message
        if description is not None:
            self.description = description
        if resolution is not None:
            self.resolution = resolution

    @property
    def stack_trace(self):
        """Gets the stack_trace of this RawError.  # noqa: E501


        :return: The stack_trace of this RawError.  # noqa: E501
        :rtype: str
        """
        return self._stack_trace

    @stack_trace.setter
    def stack_trace(self, stack_trace):
        """Sets the stack_trace of this RawError.


        :param stack_trace: The stack_trace of this RawError.  # noqa: E501
        :type: str
        """

        self._stack_trace = stack_trace

    @property
    def error_message(self):
        """Gets the error_message of this RawError.  # noqa: E501


        :return: The error_message of this RawError.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this RawError.


        :param error_message: The error_message of this RawError.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def description(self):
        """Gets the description of this RawError.  # noqa: E501


        :return: The description of this RawError.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RawError.


        :param description: The description of this RawError.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def resolution(self):
        """Gets the resolution of this RawError.  # noqa: E501


        :return: The resolution of this RawError.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this RawError.


        :param resolution: The resolution of this RawError.  # noqa: E501
        :type: str
        """

        self._resolution = resolution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RawError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RawError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
