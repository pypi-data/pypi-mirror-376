# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeploymentsStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'success_releases': 'int',
        'failed_releases': 'int',
        'no_change_releases': 'int',
        'is_first_release': 'bool'
    }

    attribute_map = {
        'success_releases': 'successReleases',
        'failed_releases': 'failedReleases',
        'no_change_releases': 'noChangeReleases',
        'is_first_release': 'isFirstRelease'
    }

    def __init__(self, success_releases=None, failed_releases=None, no_change_releases=None, is_first_release=None):  # noqa: E501
        """DeploymentsStats - a model defined in Swagger"""  # noqa: E501
        self._success_releases = None
        self._failed_releases = None
        self._no_change_releases = None
        self._is_first_release = None
        self.discriminator = None
        if success_releases is not None:
            self.success_releases = success_releases
        if failed_releases is not None:
            self.failed_releases = failed_releases
        if no_change_releases is not None:
            self.no_change_releases = no_change_releases
        if is_first_release is not None:
            self.is_first_release = is_first_release

    @property
    def success_releases(self):
        """Gets the success_releases of this DeploymentsStats.  # noqa: E501


        :return: The success_releases of this DeploymentsStats.  # noqa: E501
        :rtype: int
        """
        return self._success_releases

    @success_releases.setter
    def success_releases(self, success_releases):
        """Sets the success_releases of this DeploymentsStats.


        :param success_releases: The success_releases of this DeploymentsStats.  # noqa: E501
        :type: int
        """

        self._success_releases = success_releases

    @property
    def failed_releases(self):
        """Gets the failed_releases of this DeploymentsStats.  # noqa: E501


        :return: The failed_releases of this DeploymentsStats.  # noqa: E501
        :rtype: int
        """
        return self._failed_releases

    @failed_releases.setter
    def failed_releases(self, failed_releases):
        """Sets the failed_releases of this DeploymentsStats.


        :param failed_releases: The failed_releases of this DeploymentsStats.  # noqa: E501
        :type: int
        """

        self._failed_releases = failed_releases

    @property
    def no_change_releases(self):
        """Gets the no_change_releases of this DeploymentsStats.  # noqa: E501


        :return: The no_change_releases of this DeploymentsStats.  # noqa: E501
        :rtype: int
        """
        return self._no_change_releases

    @no_change_releases.setter
    def no_change_releases(self, no_change_releases):
        """Sets the no_change_releases of this DeploymentsStats.


        :param no_change_releases: The no_change_releases of this DeploymentsStats.  # noqa: E501
        :type: int
        """

        self._no_change_releases = no_change_releases

    @property
    def is_first_release(self):
        """Gets the is_first_release of this DeploymentsStats.  # noqa: E501


        :return: The is_first_release of this DeploymentsStats.  # noqa: E501
        :rtype: bool
        """
        return self._is_first_release

    @is_first_release.setter
    def is_first_release(self, is_first_release):
        """Sets the is_first_release of this DeploymentsStats.


        :param is_first_release: The is_first_release of this DeploymentsStats.  # noqa: E501
        :type: bool
        """

        self._is_first_release = is_first_release

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeploymentsStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentsStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
