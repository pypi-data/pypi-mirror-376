# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'cluster_id': 'str',
        'resource_name': 'str',
        'resource_type': 'str',
        'sync_status': 'str',
        'current_bp_version': 'str',
        'live_bp_version': 'str',
        'current_artifact_url': 'str',
        'live_artifact_url': 'str',
        'current_artifact_build_id': 'str',
        'live_artifact_build_id': 'str',
        'current_override_version': 'str',
        'live_override_version': 'str',
        'health_status': 'str',
        'release_status': 'str',
        'release_trace_id': 'str',
        'is_alpha': 'bool',
        'disabled': 'bool',
        'current_state': 'str',
        'previous_state': 'str',
        'has_state_change': 'bool',
        'flavor': 'str',
        'artifactory': 'str',
        'ci_name': 'str',
        'deployed': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'cluster_id': 'clusterId',
        'resource_name': 'resourceName',
        'resource_type': 'resourceType',
        'sync_status': 'syncStatus',
        'current_bp_version': 'currentBPVersion',
        'live_bp_version': 'liveBPVersion',
        'current_artifact_url': 'currentArtifactUrl',
        'live_artifact_url': 'liveArtifactUrl',
        'current_artifact_build_id': 'currentArtifactBuildId',
        'live_artifact_build_id': 'liveArtifactBuildId',
        'current_override_version': 'currentOverrideVersion',
        'live_override_version': 'liveOverrideVersion',
        'health_status': 'healthStatus',
        'release_status': 'releaseStatus',
        'release_trace_id': 'releaseTraceId',
        'is_alpha': 'isAlpha',
        'disabled': 'disabled',
        'current_state': 'currentState',
        'previous_state': 'previousState',
        'has_state_change': 'hasStateChange',
        'flavor': 'flavor',
        'artifactory': 'artifactory',
        'ci_name': 'ciName',
        'deployed': 'deployed'
    }

    def __init__(self, id=None, cluster_id=None, resource_name=None, resource_type=None, sync_status=None, current_bp_version=None, live_bp_version=None, current_artifact_url=None, live_artifact_url=None, current_artifact_build_id=None, live_artifact_build_id=None, current_override_version=None, live_override_version=None, health_status=None, release_status=None, release_trace_id=None, is_alpha=None, disabled=None, current_state=None, previous_state=None, has_state_change=None, flavor=None, artifactory=None, ci_name=None, deployed=None):  # noqa: E501
        """ResourceStatus - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._cluster_id = None
        self._resource_name = None
        self._resource_type = None
        self._sync_status = None
        self._current_bp_version = None
        self._live_bp_version = None
        self._current_artifact_url = None
        self._live_artifact_url = None
        self._current_artifact_build_id = None
        self._live_artifact_build_id = None
        self._current_override_version = None
        self._live_override_version = None
        self._health_status = None
        self._release_status = None
        self._release_trace_id = None
        self._is_alpha = None
        self._disabled = None
        self._current_state = None
        self._previous_state = None
        self._has_state_change = None
        self._flavor = None
        self._artifactory = None
        self._ci_name = None
        self._deployed = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if resource_name is not None:
            self.resource_name = resource_name
        if resource_type is not None:
            self.resource_type = resource_type
        if sync_status is not None:
            self.sync_status = sync_status
        if current_bp_version is not None:
            self.current_bp_version = current_bp_version
        if live_bp_version is not None:
            self.live_bp_version = live_bp_version
        if current_artifact_url is not None:
            self.current_artifact_url = current_artifact_url
        if live_artifact_url is not None:
            self.live_artifact_url = live_artifact_url
        if current_artifact_build_id is not None:
            self.current_artifact_build_id = current_artifact_build_id
        if live_artifact_build_id is not None:
            self.live_artifact_build_id = live_artifact_build_id
        if current_override_version is not None:
            self.current_override_version = current_override_version
        if live_override_version is not None:
            self.live_override_version = live_override_version
        if health_status is not None:
            self.health_status = health_status
        if release_status is not None:
            self.release_status = release_status
        if release_trace_id is not None:
            self.release_trace_id = release_trace_id
        if is_alpha is not None:
            self.is_alpha = is_alpha
        if disabled is not None:
            self.disabled = disabled
        if current_state is not None:
            self.current_state = current_state
        if previous_state is not None:
            self.previous_state = previous_state
        if has_state_change is not None:
            self.has_state_change = has_state_change
        if flavor is not None:
            self.flavor = flavor
        if artifactory is not None:
            self.artifactory = artifactory
        if ci_name is not None:
            self.ci_name = ci_name
        if deployed is not None:
            self.deployed = deployed

    @property
    def id(self):
        """Gets the id of this ResourceStatus.  # noqa: E501


        :return: The id of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourceStatus.


        :param id: The id of this ResourceStatus.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ResourceStatus.  # noqa: E501


        :return: The cluster_id of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ResourceStatus.


        :param cluster_id: The cluster_id of this ResourceStatus.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def resource_name(self):
        """Gets the resource_name of this ResourceStatus.  # noqa: E501


        :return: The resource_name of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this ResourceStatus.


        :param resource_name: The resource_name of this ResourceStatus.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceStatus.  # noqa: E501


        :return: The resource_type of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceStatus.


        :param resource_type: The resource_type of this ResourceStatus.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def sync_status(self):
        """Gets the sync_status of this ResourceStatus.  # noqa: E501


        :return: The sync_status of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._sync_status

    @sync_status.setter
    def sync_status(self, sync_status):
        """Sets the sync_status of this ResourceStatus.


        :param sync_status: The sync_status of this ResourceStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_SYNC", "OUT_OF_SYNC"]  # noqa: E501
        if sync_status not in allowed_values:
            raise ValueError(
                "Invalid value for `sync_status` ({0}), must be one of {1}"  # noqa: E501
                .format(sync_status, allowed_values)
            )

        self._sync_status = sync_status

    @property
    def current_bp_version(self):
        """Gets the current_bp_version of this ResourceStatus.  # noqa: E501


        :return: The current_bp_version of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._current_bp_version

    @current_bp_version.setter
    def current_bp_version(self, current_bp_version):
        """Sets the current_bp_version of this ResourceStatus.


        :param current_bp_version: The current_bp_version of this ResourceStatus.  # noqa: E501
        :type: str
        """

        self._current_bp_version = current_bp_version

    @property
    def live_bp_version(self):
        """Gets the live_bp_version of this ResourceStatus.  # noqa: E501


        :return: The live_bp_version of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._live_bp_version

    @live_bp_version.setter
    def live_bp_version(self, live_bp_version):
        """Sets the live_bp_version of this ResourceStatus.


        :param live_bp_version: The live_bp_version of this ResourceStatus.  # noqa: E501
        :type: str
        """

        self._live_bp_version = live_bp_version

    @property
    def current_artifact_url(self):
        """Gets the current_artifact_url of this ResourceStatus.  # noqa: E501


        :return: The current_artifact_url of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._current_artifact_url

    @current_artifact_url.setter
    def current_artifact_url(self, current_artifact_url):
        """Sets the current_artifact_url of this ResourceStatus.


        :param current_artifact_url: The current_artifact_url of this ResourceStatus.  # noqa: E501
        :type: str
        """

        self._current_artifact_url = current_artifact_url

    @property
    def live_artifact_url(self):
        """Gets the live_artifact_url of this ResourceStatus.  # noqa: E501


        :return: The live_artifact_url of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._live_artifact_url

    @live_artifact_url.setter
    def live_artifact_url(self, live_artifact_url):
        """Sets the live_artifact_url of this ResourceStatus.


        :param live_artifact_url: The live_artifact_url of this ResourceStatus.  # noqa: E501
        :type: str
        """

        self._live_artifact_url = live_artifact_url

    @property
    def current_artifact_build_id(self):
        """Gets the current_artifact_build_id of this ResourceStatus.  # noqa: E501


        :return: The current_artifact_build_id of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._current_artifact_build_id

    @current_artifact_build_id.setter
    def current_artifact_build_id(self, current_artifact_build_id):
        """Sets the current_artifact_build_id of this ResourceStatus.


        :param current_artifact_build_id: The current_artifact_build_id of this ResourceStatus.  # noqa: E501
        :type: str
        """

        self._current_artifact_build_id = current_artifact_build_id

    @property
    def live_artifact_build_id(self):
        """Gets the live_artifact_build_id of this ResourceStatus.  # noqa: E501


        :return: The live_artifact_build_id of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._live_artifact_build_id

    @live_artifact_build_id.setter
    def live_artifact_build_id(self, live_artifact_build_id):
        """Sets the live_artifact_build_id of this ResourceStatus.


        :param live_artifact_build_id: The live_artifact_build_id of this ResourceStatus.  # noqa: E501
        :type: str
        """

        self._live_artifact_build_id = live_artifact_build_id

    @property
    def current_override_version(self):
        """Gets the current_override_version of this ResourceStatus.  # noqa: E501


        :return: The current_override_version of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._current_override_version

    @current_override_version.setter
    def current_override_version(self, current_override_version):
        """Sets the current_override_version of this ResourceStatus.


        :param current_override_version: The current_override_version of this ResourceStatus.  # noqa: E501
        :type: str
        """

        self._current_override_version = current_override_version

    @property
    def live_override_version(self):
        """Gets the live_override_version of this ResourceStatus.  # noqa: E501


        :return: The live_override_version of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._live_override_version

    @live_override_version.setter
    def live_override_version(self, live_override_version):
        """Sets the live_override_version of this ResourceStatus.


        :param live_override_version: The live_override_version of this ResourceStatus.  # noqa: E501
        :type: str
        """

        self._live_override_version = live_override_version

    @property
    def health_status(self):
        """Gets the health_status of this ResourceStatus.  # noqa: E501


        :return: The health_status of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this ResourceStatus.


        :param health_status: The health_status of this ResourceStatus.  # noqa: E501
        :type: str
        """

        self._health_status = health_status

    @property
    def release_status(self):
        """Gets the release_status of this ResourceStatus.  # noqa: E501


        :return: The release_status of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._release_status

    @release_status.setter
    def release_status(self, release_status):
        """Sets the release_status of this ResourceStatus.


        :param release_status: The release_status of this ResourceStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["QUEUED", "FAILED", "IN_PROGRESS", "COMPLETED"]  # noqa: E501
        if release_status not in allowed_values:
            raise ValueError(
                "Invalid value for `release_status` ({0}), must be one of {1}"  # noqa: E501
                .format(release_status, allowed_values)
            )

        self._release_status = release_status

    @property
    def release_trace_id(self):
        """Gets the release_trace_id of this ResourceStatus.  # noqa: E501


        :return: The release_trace_id of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._release_trace_id

    @release_trace_id.setter
    def release_trace_id(self, release_trace_id):
        """Sets the release_trace_id of this ResourceStatus.


        :param release_trace_id: The release_trace_id of this ResourceStatus.  # noqa: E501
        :type: str
        """

        self._release_trace_id = release_trace_id

    @property
    def is_alpha(self):
        """Gets the is_alpha of this ResourceStatus.  # noqa: E501


        :return: The is_alpha of this ResourceStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_alpha

    @is_alpha.setter
    def is_alpha(self, is_alpha):
        """Sets the is_alpha of this ResourceStatus.


        :param is_alpha: The is_alpha of this ResourceStatus.  # noqa: E501
        :type: bool
        """

        self._is_alpha = is_alpha

    @property
    def disabled(self):
        """Gets the disabled of this ResourceStatus.  # noqa: E501


        :return: The disabled of this ResourceStatus.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this ResourceStatus.


        :param disabled: The disabled of this ResourceStatus.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def current_state(self):
        """Gets the current_state of this ResourceStatus.  # noqa: E501


        :return: The current_state of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this ResourceStatus.


        :param current_state: The current_state of this ResourceStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if current_state not in allowed_values:
            raise ValueError(
                "Invalid value for `current_state` ({0}), must be one of {1}"  # noqa: E501
                .format(current_state, allowed_values)
            )

        self._current_state = current_state

    @property
    def previous_state(self):
        """Gets the previous_state of this ResourceStatus.  # noqa: E501


        :return: The previous_state of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._previous_state

    @previous_state.setter
    def previous_state(self, previous_state):
        """Sets the previous_state of this ResourceStatus.


        :param previous_state: The previous_state of this ResourceStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if previous_state not in allowed_values:
            raise ValueError(
                "Invalid value for `previous_state` ({0}), must be one of {1}"  # noqa: E501
                .format(previous_state, allowed_values)
            )

        self._previous_state = previous_state

    @property
    def has_state_change(self):
        """Gets the has_state_change of this ResourceStatus.  # noqa: E501


        :return: The has_state_change of this ResourceStatus.  # noqa: E501
        :rtype: bool
        """
        return self._has_state_change

    @has_state_change.setter
    def has_state_change(self, has_state_change):
        """Sets the has_state_change of this ResourceStatus.


        :param has_state_change: The has_state_change of this ResourceStatus.  # noqa: E501
        :type: bool
        """

        self._has_state_change = has_state_change

    @property
    def flavor(self):
        """Gets the flavor of this ResourceStatus.  # noqa: E501


        :return: The flavor of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._flavor

    @flavor.setter
    def flavor(self, flavor):
        """Sets the flavor of this ResourceStatus.


        :param flavor: The flavor of this ResourceStatus.  # noqa: E501
        :type: str
        """

        self._flavor = flavor

    @property
    def artifactory(self):
        """Gets the artifactory of this ResourceStatus.  # noqa: E501


        :return: The artifactory of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._artifactory

    @artifactory.setter
    def artifactory(self, artifactory):
        """Sets the artifactory of this ResourceStatus.


        :param artifactory: The artifactory of this ResourceStatus.  # noqa: E501
        :type: str
        """

        self._artifactory = artifactory

    @property
    def ci_name(self):
        """Gets the ci_name of this ResourceStatus.  # noqa: E501


        :return: The ci_name of this ResourceStatus.  # noqa: E501
        :rtype: str
        """
        return self._ci_name

    @ci_name.setter
    def ci_name(self, ci_name):
        """Sets the ci_name of this ResourceStatus.


        :param ci_name: The ci_name of this ResourceStatus.  # noqa: E501
        :type: str
        """

        self._ci_name = ci_name

    @property
    def deployed(self):
        """Gets the deployed of this ResourceStatus.  # noqa: E501


        :return: The deployed of this ResourceStatus.  # noqa: E501
        :rtype: bool
        """
        return self._deployed

    @deployed.setter
    def deployed(self, deployed):
        """Sets the deployed of this ResourceStatus.


        :param deployed: The deployed of this ResourceStatus.  # noqa: E501
        :type: bool
        """

        self._deployed = deployed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
