# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChangeRepresentationObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'change_type': 'str',
        'old_value': 'object',
        'new_value': 'object',
        'action': 'str'
    }

    attribute_map = {
        'change_type': 'changeType',
        'old_value': 'oldValue',
        'new_value': 'newValue',
        'action': 'action'
    }

    def __init__(self, change_type=None, old_value=None, new_value=None, action=None):  # noqa: E501
        """ChangeRepresentationObject - a model defined in Swagger"""  # noqa: E501
        self._change_type = None
        self._old_value = None
        self._new_value = None
        self._action = None
        self.discriminator = None
        if change_type is not None:
            self.change_type = change_type
        if old_value is not None:
            self.old_value = old_value
        if new_value is not None:
            self.new_value = new_value
        if action is not None:
            self.action = action

    @property
    def change_type(self):
        """Gets the change_type of this ChangeRepresentationObject.  # noqa: E501


        :return: The change_type of this ChangeRepresentationObject.  # noqa: E501
        :rtype: str
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type):
        """Sets the change_type of this ChangeRepresentationObject.


        :param change_type: The change_type of this ChangeRepresentationObject.  # noqa: E501
        :type: str
        """
        allowed_values = ["BLUEPRINT_CHANGES", "IAC_CHANGES", "OVERRIDE_CHANGES", "ARTIFACT_CHANGES"]  # noqa: E501
        if change_type not in allowed_values:
            raise ValueError(
                "Invalid value for `change_type` ({0}), must be one of {1}"  # noqa: E501
                .format(change_type, allowed_values)
            )

        self._change_type = change_type

    @property
    def old_value(self):
        """Gets the old_value of this ChangeRepresentationObject.  # noqa: E501


        :return: The old_value of this ChangeRepresentationObject.  # noqa: E501
        :rtype: object
        """
        return self._old_value

    @old_value.setter
    def old_value(self, old_value):
        """Sets the old_value of this ChangeRepresentationObject.


        :param old_value: The old_value of this ChangeRepresentationObject.  # noqa: E501
        :type: object
        """

        self._old_value = old_value

    @property
    def new_value(self):
        """Gets the new_value of this ChangeRepresentationObject.  # noqa: E501


        :return: The new_value of this ChangeRepresentationObject.  # noqa: E501
        :rtype: object
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this ChangeRepresentationObject.


        :param new_value: The new_value of this ChangeRepresentationObject.  # noqa: E501
        :type: object
        """

        self._new_value = new_value

    @property
    def action(self):
        """Gets the action of this ChangeRepresentationObject.  # noqa: E501


        :return: The action of this ChangeRepresentationObject.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ChangeRepresentationObject.


        :param action: The action of this ChangeRepresentationObject.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADDED", "CHANGED", "REMOVED"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChangeRepresentationObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangeRepresentationObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
