# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Setting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_by': 'str',
        'creation_date': 'datetime',
        'last_modified_date': 'datetime',
        'last_modified_by': 'str',
        'name': 'str',
        'allowed_values': 'list[str]',
        'default_value': 'object',
        'supported_for_clouds': 'list[str]',
        'description': 'str',
        'entity': 'str',
        'setting_type': 'str',
        'min': 'int',
        'max': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created_by': 'createdBy',
        'creation_date': 'creationDate',
        'last_modified_date': 'lastModifiedDate',
        'last_modified_by': 'lastModifiedBy',
        'name': 'name',
        'allowed_values': 'allowedValues',
        'default_value': 'defaultValue',
        'supported_for_clouds': 'supportedForClouds',
        'description': 'description',
        'entity': 'entity',
        'setting_type': 'settingType',
        'min': 'min',
        'max': 'max'
    }

    def __init__(self, id=None, created_by=None, creation_date=None, last_modified_date=None, last_modified_by=None, name=None, allowed_values=None, default_value=None, supported_for_clouds=None, description=None, entity=None, setting_type=None, min=None, max=None):  # noqa: E501
        """Setting - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_by = None
        self._creation_date = None
        self._last_modified_date = None
        self._last_modified_by = None
        self._name = None
        self._allowed_values = None
        self._default_value = None
        self._supported_for_clouds = None
        self._description = None
        self._entity = None
        self._setting_type = None
        self._min = None
        self._max = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_by is not None:
            self.created_by = created_by
        if creation_date is not None:
            self.creation_date = creation_date
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        self.name = name
        if allowed_values is not None:
            self.allowed_values = allowed_values
        self.default_value = default_value
        self.supported_for_clouds = supported_for_clouds
        if description is not None:
            self.description = description
        self.entity = entity
        self.setting_type = setting_type
        if min is not None:
            self.min = min
        if max is not None:
            self.max = max

    @property
    def id(self):
        """Gets the id of this Setting.  # noqa: E501


        :return: The id of this Setting.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Setting.


        :param id: The id of this Setting.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_by(self):
        """Gets the created_by of this Setting.  # noqa: E501


        :return: The created_by of this Setting.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Setting.


        :param created_by: The created_by of this Setting.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def creation_date(self):
        """Gets the creation_date of this Setting.  # noqa: E501


        :return: The creation_date of this Setting.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Setting.


        :param creation_date: The creation_date of this Setting.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this Setting.  # noqa: E501


        :return: The last_modified_date of this Setting.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this Setting.


        :param last_modified_date: The last_modified_date of this Setting.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this Setting.  # noqa: E501


        :return: The last_modified_by of this Setting.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this Setting.


        :param last_modified_by: The last_modified_by of this Setting.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def name(self):
        """Gets the name of this Setting.  # noqa: E501


        :return: The name of this Setting.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Setting.


        :param name: The name of this Setting.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def allowed_values(self):
        """Gets the allowed_values of this Setting.  # noqa: E501


        :return: The allowed_values of this Setting.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values):
        """Sets the allowed_values of this Setting.


        :param allowed_values: The allowed_values of this Setting.  # noqa: E501
        :type: list[str]
        """

        self._allowed_values = allowed_values

    @property
    def default_value(self):
        """Gets the default_value of this Setting.  # noqa: E501


        :return: The default_value of this Setting.  # noqa: E501
        :rtype: object
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this Setting.


        :param default_value: The default_value of this Setting.  # noqa: E501
        :type: object
        """
        if default_value is None:
            raise ValueError("Invalid value for `default_value`, must not be `None`")  # noqa: E501

        self._default_value = default_value

    @property
    def supported_for_clouds(self):
        """Gets the supported_for_clouds of this Setting.  # noqa: E501


        :return: The supported_for_clouds of this Setting.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_for_clouds

    @supported_for_clouds.setter
    def supported_for_clouds(self, supported_for_clouds):
        """Sets the supported_for_clouds of this Setting.


        :param supported_for_clouds: The supported_for_clouds of this Setting.  # noqa: E501
        :type: list[str]
        """
        if supported_for_clouds is None:
            raise ValueError("Invalid value for `supported_for_clouds`, must not be `None`")  # noqa: E501
        allowed_values = ["AWS", "AZURE", "LOCAL", "GCP", "KUBERNETES", "NO_CLOUD"]  # noqa: E501
        if not set(supported_for_clouds).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `supported_for_clouds` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(supported_for_clouds) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._supported_for_clouds = supported_for_clouds

    @property
    def description(self):
        """Gets the description of this Setting.  # noqa: E501


        :return: The description of this Setting.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Setting.


        :param description: The description of this Setting.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def entity(self):
        """Gets the entity of this Setting.  # noqa: E501


        :return: The entity of this Setting.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this Setting.


        :param entity: The entity of this Setting.  # noqa: E501
        :type: str
        """
        if entity is None:
            raise ValueError("Invalid value for `entity`, must not be `None`")  # noqa: E501
        allowed_values = ["CLUSTER", "BLUE_PRINT", "TEMPLATE_INPUT", "CONTROL_PLANE", "IAC", "ARTIFACT_CI", "USER_GROUP", "ACCOUNT", "ARTIFACTORY"]  # noqa: E501
        if entity not in allowed_values:
            raise ValueError(
                "Invalid value for `entity` ({0}), must be one of {1}"  # noqa: E501
                .format(entity, allowed_values)
            )

        self._entity = entity

    @property
    def setting_type(self):
        """Gets the setting_type of this Setting.  # noqa: E501


        :return: The setting_type of this Setting.  # noqa: E501
        :rtype: str
        """
        return self._setting_type

    @setting_type.setter
    def setting_type(self, setting_type):
        """Sets the setting_type of this Setting.


        :param setting_type: The setting_type of this Setting.  # noqa: E501
        :type: str
        """
        if setting_type is None:
            raise ValueError("Invalid value for `setting_type`, must not be `None`")  # noqa: E501
        allowed_values = ["NUMBER", "STRING", "ENUM", "BOOLEAN", "FLOAT"]  # noqa: E501
        if setting_type not in allowed_values:
            raise ValueError(
                "Invalid value for `setting_type` ({0}), must be one of {1}"  # noqa: E501
                .format(setting_type, allowed_values)
            )

        self._setting_type = setting_type

    @property
    def min(self):
        """Gets the min of this Setting.  # noqa: E501


        :return: The min of this Setting.  # noqa: E501
        :rtype: int
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this Setting.


        :param min: The min of this Setting.  # noqa: E501
        :type: int
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this Setting.  # noqa: E501


        :return: The max of this Setting.  # noqa: E501
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this Setting.


        :param max: The max of this Setting.  # noqa: E501
        :type: int
        """

        self._max = max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Setting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Setting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
