# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateTemplateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'coder_account_id': 'str',
        'relative_path': 'str',
        'mono_repo': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'coder_account_id': 'coderAccountId',
        'relative_path': 'relativePath',
        'mono_repo': 'monoRepo'
    }

    def __init__(self, name=None, description=None, coder_account_id=None, relative_path=None, mono_repo=None):  # noqa: E501
        """CreateTemplateRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._coder_account_id = None
        self._relative_path = None
        self._mono_repo = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if coder_account_id is not None:
            self.coder_account_id = coder_account_id
        if relative_path is not None:
            self.relative_path = relative_path
        if mono_repo is not None:
            self.mono_repo = mono_repo

    @property
    def name(self):
        """Gets the name of this CreateTemplateRequest.  # noqa: E501


        :return: The name of this CreateTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTemplateRequest.


        :param name: The name of this CreateTemplateRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateTemplateRequest.  # noqa: E501


        :return: The description of this CreateTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateTemplateRequest.


        :param description: The description of this CreateTemplateRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def coder_account_id(self):
        """Gets the coder_account_id of this CreateTemplateRequest.  # noqa: E501


        :return: The coder_account_id of this CreateTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._coder_account_id

    @coder_account_id.setter
    def coder_account_id(self, coder_account_id):
        """Sets the coder_account_id of this CreateTemplateRequest.


        :param coder_account_id: The coder_account_id of this CreateTemplateRequest.  # noqa: E501
        :type: str
        """

        self._coder_account_id = coder_account_id

    @property
    def relative_path(self):
        """Gets the relative_path of this CreateTemplateRequest.  # noqa: E501


        :return: The relative_path of this CreateTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this CreateTemplateRequest.


        :param relative_path: The relative_path of this CreateTemplateRequest.  # noqa: E501
        :type: str
        """

        self._relative_path = relative_path

    @property
    def mono_repo(self):
        """Gets the mono_repo of this CreateTemplateRequest.  # noqa: E501


        :return: The mono_repo of this CreateTemplateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._mono_repo

    @mono_repo.setter
    def mono_repo(self, mono_repo):
        """Sets the mono_repo of this CreateTemplateRequest.


        :param mono_repo: The mono_repo of this CreateTemplateRequest.  # noqa: E501
        :type: bool
        """

        self._mono_repo = mono_repo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateTemplateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTemplateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
