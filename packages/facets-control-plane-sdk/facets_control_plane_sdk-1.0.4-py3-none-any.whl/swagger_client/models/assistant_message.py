# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssistantMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role': 'str',
        'created_at': 'datetime',
        'assistant': 'Assistant',
        'message': 'str',
        'context': 'object'
    }

    attribute_map = {
        'role': 'role',
        'created_at': 'createdAt',
        'assistant': 'assistant',
        'message': 'message',
        'context': 'context'
    }

    def __init__(self, role=None, created_at=None, assistant=None, message=None, context=None):  # noqa: E501
        """AssistantMessage - a model defined in Swagger"""  # noqa: E501
        self._role = None
        self._created_at = None
        self._assistant = None
        self._message = None
        self._context = None
        self.discriminator = None
        if role is not None:
            self.role = role
        if created_at is not None:
            self.created_at = created_at
        if assistant is not None:
            self.assistant = assistant
        if message is not None:
            self.message = message
        if context is not None:
            self.context = context

    @property
    def role(self):
        """Gets the role of this AssistantMessage.  # noqa: E501


        :return: The role of this AssistantMessage.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this AssistantMessage.


        :param role: The role of this AssistantMessage.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def created_at(self):
        """Gets the created_at of this AssistantMessage.  # noqa: E501


        :return: The created_at of this AssistantMessage.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AssistantMessage.


        :param created_at: The created_at of this AssistantMessage.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def assistant(self):
        """Gets the assistant of this AssistantMessage.  # noqa: E501


        :return: The assistant of this AssistantMessage.  # noqa: E501
        :rtype: Assistant
        """
        return self._assistant

    @assistant.setter
    def assistant(self, assistant):
        """Sets the assistant of this AssistantMessage.


        :param assistant: The assistant of this AssistantMessage.  # noqa: E501
        :type: Assistant
        """

        self._assistant = assistant

    @property
    def message(self):
        """Gets the message of this AssistantMessage.  # noqa: E501


        :return: The message of this AssistantMessage.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AssistantMessage.


        :param message: The message of this AssistantMessage.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def context(self):
        """Gets the context of this AssistantMessage.  # noqa: E501


        :return: The context of this AssistantMessage.  # noqa: E501
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this AssistantMessage.


        :param context: The context of this AssistantMessage.  # noqa: E501
        :type: object
        """

        self._context = context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssistantMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssistantMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
