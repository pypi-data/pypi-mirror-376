# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'resource_name': 'str',
        'commit_id': 'str',
        'override_version': 'int',
        'override_version_id': 'str',
        'artifact_url': 'str'
    }

    attribute_map = {
        'resource_type': 'resourceType',
        'resource_name': 'resourceName',
        'commit_id': 'commitId',
        'override_version': 'overrideVersion',
        'override_version_id': 'overrideVersionId',
        'artifact_url': 'artifactUrl'
    }

    def __init__(self, resource_type=None, resource_name=None, commit_id=None, override_version=None, override_version_id=None, artifact_url=None):  # noqa: E501
        """ResourceMetadata - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._resource_name = None
        self._commit_id = None
        self._override_version = None
        self._override_version_id = None
        self._artifact_url = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if resource_name is not None:
            self.resource_name = resource_name
        if commit_id is not None:
            self.commit_id = commit_id
        if override_version is not None:
            self.override_version = override_version
        if override_version_id is not None:
            self.override_version_id = override_version_id
        if artifact_url is not None:
            self.artifact_url = artifact_url

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceMetadata.  # noqa: E501


        :return: The resource_type of this ResourceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceMetadata.


        :param resource_type: The resource_type of this ResourceMetadata.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def resource_name(self):
        """Gets the resource_name of this ResourceMetadata.  # noqa: E501


        :return: The resource_name of this ResourceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this ResourceMetadata.


        :param resource_name: The resource_name of this ResourceMetadata.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def commit_id(self):
        """Gets the commit_id of this ResourceMetadata.  # noqa: E501


        :return: The commit_id of this ResourceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this ResourceMetadata.


        :param commit_id: The commit_id of this ResourceMetadata.  # noqa: E501
        :type: str
        """

        self._commit_id = commit_id

    @property
    def override_version(self):
        """Gets the override_version of this ResourceMetadata.  # noqa: E501


        :return: The override_version of this ResourceMetadata.  # noqa: E501
        :rtype: int
        """
        return self._override_version

    @override_version.setter
    def override_version(self, override_version):
        """Sets the override_version of this ResourceMetadata.


        :param override_version: The override_version of this ResourceMetadata.  # noqa: E501
        :type: int
        """

        self._override_version = override_version

    @property
    def override_version_id(self):
        """Gets the override_version_id of this ResourceMetadata.  # noqa: E501


        :return: The override_version_id of this ResourceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._override_version_id

    @override_version_id.setter
    def override_version_id(self, override_version_id):
        """Sets the override_version_id of this ResourceMetadata.


        :param override_version_id: The override_version_id of this ResourceMetadata.  # noqa: E501
        :type: str
        """

        self._override_version_id = override_version_id

    @property
    def artifact_url(self):
        """Gets the artifact_url of this ResourceMetadata.  # noqa: E501


        :return: The artifact_url of this ResourceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._artifact_url

    @artifact_url.setter
    def artifact_url(self, artifact_url):
        """Sets the artifact_url of this ResourceMetadata.


        :param artifact_url: The artifact_url of this ResourceMetadata.  # noqa: E501
        :type: str
        """

        self._artifact_url = artifact_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
