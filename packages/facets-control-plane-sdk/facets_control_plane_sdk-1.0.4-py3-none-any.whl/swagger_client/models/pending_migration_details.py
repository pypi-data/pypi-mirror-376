# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PendingMigrationDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pending_migrations': 'list[MigrationScriptMetadata]',
        'block_releases': 'bool',
        'migration_status_available': 'bool'
    }

    attribute_map = {
        'pending_migrations': 'pendingMigrations',
        'block_releases': 'blockReleases',
        'migration_status_available': 'migrationStatusAvailable'
    }

    def __init__(self, pending_migrations=None, block_releases=None, migration_status_available=None):  # noqa: E501
        """PendingMigrationDetails - a model defined in Swagger"""  # noqa: E501
        self._pending_migrations = None
        self._block_releases = None
        self._migration_status_available = None
        self.discriminator = None
        if pending_migrations is not None:
            self.pending_migrations = pending_migrations
        if block_releases is not None:
            self.block_releases = block_releases
        if migration_status_available is not None:
            self.migration_status_available = migration_status_available

    @property
    def pending_migrations(self):
        """Gets the pending_migrations of this PendingMigrationDetails.  # noqa: E501


        :return: The pending_migrations of this PendingMigrationDetails.  # noqa: E501
        :rtype: list[MigrationScriptMetadata]
        """
        return self._pending_migrations

    @pending_migrations.setter
    def pending_migrations(self, pending_migrations):
        """Sets the pending_migrations of this PendingMigrationDetails.


        :param pending_migrations: The pending_migrations of this PendingMigrationDetails.  # noqa: E501
        :type: list[MigrationScriptMetadata]
        """

        self._pending_migrations = pending_migrations

    @property
    def block_releases(self):
        """Gets the block_releases of this PendingMigrationDetails.  # noqa: E501


        :return: The block_releases of this PendingMigrationDetails.  # noqa: E501
        :rtype: bool
        """
        return self._block_releases

    @block_releases.setter
    def block_releases(self, block_releases):
        """Sets the block_releases of this PendingMigrationDetails.


        :param block_releases: The block_releases of this PendingMigrationDetails.  # noqa: E501
        :type: bool
        """

        self._block_releases = block_releases

    @property
    def migration_status_available(self):
        """Gets the migration_status_available of this PendingMigrationDetails.  # noqa: E501


        :return: The migration_status_available of this PendingMigrationDetails.  # noqa: E501
        :rtype: bool
        """
        return self._migration_status_available

    @migration_status_available.setter
    def migration_status_available(self, migration_status_available):
        """Sets the migration_status_available of this PendingMigrationDetails.


        :param migration_status_available: The migration_status_available of this PendingMigrationDetails.  # noqa: E501
        :type: bool
        """

        self._migration_status_available = migration_status_available

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PendingMigrationDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PendingMigrationDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
