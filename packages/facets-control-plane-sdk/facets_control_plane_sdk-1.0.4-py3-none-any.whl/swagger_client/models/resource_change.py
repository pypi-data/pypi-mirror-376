# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceChange(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'change_type': 'str',
        'resource_name': 'str',
        'resource_type': 'str',
        'changed_attributes': 'list[ChangedAttribute]',
        'flavor': 'str'
    }

    attribute_map = {
        'change_type': 'changeType',
        'resource_name': 'resourceName',
        'resource_type': 'resourceType',
        'changed_attributes': 'changedAttributes',
        'flavor': 'flavor'
    }

    def __init__(self, change_type=None, resource_name=None, resource_type=None, changed_attributes=None, flavor=None):  # noqa: E501
        """ResourceChange - a model defined in Swagger"""  # noqa: E501
        self._change_type = None
        self._resource_name = None
        self._resource_type = None
        self._changed_attributes = None
        self._flavor = None
        self.discriminator = None
        if change_type is not None:
            self.change_type = change_type
        if resource_name is not None:
            self.resource_name = resource_name
        if resource_type is not None:
            self.resource_type = resource_type
        if changed_attributes is not None:
            self.changed_attributes = changed_attributes
        if flavor is not None:
            self.flavor = flavor

    @property
    def change_type(self):
        """Gets the change_type of this ResourceChange.  # noqa: E501


        :return: The change_type of this ResourceChange.  # noqa: E501
        :rtype: str
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type):
        """Sets the change_type of this ResourceChange.


        :param change_type: The change_type of this ResourceChange.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADDED", "MODIFIED", "REMOVED"]  # noqa: E501
        if change_type not in allowed_values:
            raise ValueError(
                "Invalid value for `change_type` ({0}), must be one of {1}"  # noqa: E501
                .format(change_type, allowed_values)
            )

        self._change_type = change_type

    @property
    def resource_name(self):
        """Gets the resource_name of this ResourceChange.  # noqa: E501


        :return: The resource_name of this ResourceChange.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this ResourceChange.


        :param resource_name: The resource_name of this ResourceChange.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceChange.  # noqa: E501


        :return: The resource_type of this ResourceChange.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceChange.


        :param resource_type: The resource_type of this ResourceChange.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def changed_attributes(self):
        """Gets the changed_attributes of this ResourceChange.  # noqa: E501


        :return: The changed_attributes of this ResourceChange.  # noqa: E501
        :rtype: list[ChangedAttribute]
        """
        return self._changed_attributes

    @changed_attributes.setter
    def changed_attributes(self, changed_attributes):
        """Sets the changed_attributes of this ResourceChange.


        :param changed_attributes: The changed_attributes of this ResourceChange.  # noqa: E501
        :type: list[ChangedAttribute]
        """

        self._changed_attributes = changed_attributes

    @property
    def flavor(self):
        """Gets the flavor of this ResourceChange.  # noqa: E501


        :return: The flavor of this ResourceChange.  # noqa: E501
        :rtype: str
        """
        return self._flavor

    @flavor.setter
    def flavor(self, flavor):
        """Sets the flavor of this ResourceChange.


        :param flavor: The flavor of this ResourceChange.  # noqa: E501
        :type: str
        """

        self._flavor = flavor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceChange, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceChange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
