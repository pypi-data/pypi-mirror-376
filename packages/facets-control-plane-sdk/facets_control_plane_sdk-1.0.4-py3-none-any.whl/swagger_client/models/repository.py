# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Repository(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'kind': 'int',
        'name': 'str',
        'official': 'bool',
        'display_name': 'str',
        'repository_id': 'str',
        'scanner_disabled': 'bool',
        'organization_name': 'str',
        'verified_publisher': 'bool',
        'organization_display_name': 'str'
    }

    attribute_map = {
        'url': 'url',
        'kind': 'kind',
        'name': 'name',
        'official': 'official',
        'display_name': 'display_name',
        'repository_id': 'repository_id',
        'scanner_disabled': 'scanner_disabled',
        'organization_name': 'organization_name',
        'verified_publisher': 'verified_publisher',
        'organization_display_name': 'organization_display_name'
    }

    def __init__(self, url=None, kind=None, name=None, official=None, display_name=None, repository_id=None, scanner_disabled=None, organization_name=None, verified_publisher=None, organization_display_name=None):  # noqa: E501
        """Repository - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._kind = None
        self._name = None
        self._official = None
        self._display_name = None
        self._repository_id = None
        self._scanner_disabled = None
        self._organization_name = None
        self._verified_publisher = None
        self._organization_display_name = None
        self.discriminator = None
        if url is not None:
            self.url = url
        if kind is not None:
            self.kind = kind
        if name is not None:
            self.name = name
        if official is not None:
            self.official = official
        if display_name is not None:
            self.display_name = display_name
        if repository_id is not None:
            self.repository_id = repository_id
        if scanner_disabled is not None:
            self.scanner_disabled = scanner_disabled
        if organization_name is not None:
            self.organization_name = organization_name
        if verified_publisher is not None:
            self.verified_publisher = verified_publisher
        if organization_display_name is not None:
            self.organization_display_name = organization_display_name

    @property
    def url(self):
        """Gets the url of this Repository.  # noqa: E501


        :return: The url of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Repository.


        :param url: The url of this Repository.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def kind(self):
        """Gets the kind of this Repository.  # noqa: E501


        :return: The kind of this Repository.  # noqa: E501
        :rtype: int
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Repository.


        :param kind: The kind of this Repository.  # noqa: E501
        :type: int
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this Repository.  # noqa: E501


        :return: The name of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Repository.


        :param name: The name of this Repository.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def official(self):
        """Gets the official of this Repository.  # noqa: E501


        :return: The official of this Repository.  # noqa: E501
        :rtype: bool
        """
        return self._official

    @official.setter
    def official(self, official):
        """Sets the official of this Repository.


        :param official: The official of this Repository.  # noqa: E501
        :type: bool
        """

        self._official = official

    @property
    def display_name(self):
        """Gets the display_name of this Repository.  # noqa: E501


        :return: The display_name of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Repository.


        :param display_name: The display_name of this Repository.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def repository_id(self):
        """Gets the repository_id of this Repository.  # noqa: E501


        :return: The repository_id of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._repository_id

    @repository_id.setter
    def repository_id(self, repository_id):
        """Sets the repository_id of this Repository.


        :param repository_id: The repository_id of this Repository.  # noqa: E501
        :type: str
        """

        self._repository_id = repository_id

    @property
    def scanner_disabled(self):
        """Gets the scanner_disabled of this Repository.  # noqa: E501


        :return: The scanner_disabled of this Repository.  # noqa: E501
        :rtype: bool
        """
        return self._scanner_disabled

    @scanner_disabled.setter
    def scanner_disabled(self, scanner_disabled):
        """Sets the scanner_disabled of this Repository.


        :param scanner_disabled: The scanner_disabled of this Repository.  # noqa: E501
        :type: bool
        """

        self._scanner_disabled = scanner_disabled

    @property
    def organization_name(self):
        """Gets the organization_name of this Repository.  # noqa: E501


        :return: The organization_name of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this Repository.


        :param organization_name: The organization_name of this Repository.  # noqa: E501
        :type: str
        """

        self._organization_name = organization_name

    @property
    def verified_publisher(self):
        """Gets the verified_publisher of this Repository.  # noqa: E501


        :return: The verified_publisher of this Repository.  # noqa: E501
        :rtype: bool
        """
        return self._verified_publisher

    @verified_publisher.setter
    def verified_publisher(self, verified_publisher):
        """Sets the verified_publisher of this Repository.


        :param verified_publisher: The verified_publisher of this Repository.  # noqa: E501
        :type: bool
        """

        self._verified_publisher = verified_publisher

    @property
    def organization_display_name(self):
        """Gets the organization_display_name of this Repository.  # noqa: E501


        :return: The organization_display_name of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._organization_display_name

    @organization_display_name.setter
    def organization_display_name(self, organization_display_name):
        """Sets the organization_display_name of this Repository.


        :param organization_display_name: The organization_display_name of this Repository.  # noqa: E501
        :type: str
        """

        self._organization_display_name = organization_display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Repository, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Repository):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
