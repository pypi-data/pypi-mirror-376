# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimpleOauth2User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'granted_authorities': 'list[GrantedAuthority]',
        'attributes': 'dict(str, object)',
        'name': 'str',
        'allowed_cluster_ids': 'list[str]',
        'allowed_stack_names': 'list[str]',
        'cluster_role_binding': 'dict(str, str)',
        'stack_resources': 'list[StackResource]',
        'allowed_accounts': 'list[str]',
        'user_id': 'str',
        'authorities': 'list[GrantedAuthority]',
        'associated_to_resource_group': 'bool'
    }

    attribute_map = {
        'granted_authorities': 'grantedAuthorities',
        'attributes': 'attributes',
        'name': 'name',
        'allowed_cluster_ids': 'allowedClusterIds',
        'allowed_stack_names': 'allowedStackNames',
        'cluster_role_binding': 'clusterRoleBinding',
        'stack_resources': 'stackResources',
        'allowed_accounts': 'allowedAccounts',
        'user_id': 'userId',
        'authorities': 'authorities',
        'associated_to_resource_group': 'associatedToResourceGroup'
    }

    def __init__(self, granted_authorities=None, attributes=None, name=None, allowed_cluster_ids=None, allowed_stack_names=None, cluster_role_binding=None, stack_resources=None, allowed_accounts=None, user_id=None, authorities=None, associated_to_resource_group=None):  # noqa: E501
        """SimpleOauth2User - a model defined in Swagger"""  # noqa: E501
        self._granted_authorities = None
        self._attributes = None
        self._name = None
        self._allowed_cluster_ids = None
        self._allowed_stack_names = None
        self._cluster_role_binding = None
        self._stack_resources = None
        self._allowed_accounts = None
        self._user_id = None
        self._authorities = None
        self._associated_to_resource_group = None
        self.discriminator = None
        if granted_authorities is not None:
            self.granted_authorities = granted_authorities
        if attributes is not None:
            self.attributes = attributes
        if name is not None:
            self.name = name
        if allowed_cluster_ids is not None:
            self.allowed_cluster_ids = allowed_cluster_ids
        if allowed_stack_names is not None:
            self.allowed_stack_names = allowed_stack_names
        if cluster_role_binding is not None:
            self.cluster_role_binding = cluster_role_binding
        if stack_resources is not None:
            self.stack_resources = stack_resources
        if allowed_accounts is not None:
            self.allowed_accounts = allowed_accounts
        if user_id is not None:
            self.user_id = user_id
        if authorities is not None:
            self.authorities = authorities
        if associated_to_resource_group is not None:
            self.associated_to_resource_group = associated_to_resource_group

    @property
    def granted_authorities(self):
        """Gets the granted_authorities of this SimpleOauth2User.  # noqa: E501


        :return: The granted_authorities of this SimpleOauth2User.  # noqa: E501
        :rtype: list[GrantedAuthority]
        """
        return self._granted_authorities

    @granted_authorities.setter
    def granted_authorities(self, granted_authorities):
        """Sets the granted_authorities of this SimpleOauth2User.


        :param granted_authorities: The granted_authorities of this SimpleOauth2User.  # noqa: E501
        :type: list[GrantedAuthority]
        """

        self._granted_authorities = granted_authorities

    @property
    def attributes(self):
        """Gets the attributes of this SimpleOauth2User.  # noqa: E501


        :return: The attributes of this SimpleOauth2User.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this SimpleOauth2User.


        :param attributes: The attributes of this SimpleOauth2User.  # noqa: E501
        :type: dict(str, object)
        """

        self._attributes = attributes

    @property
    def name(self):
        """Gets the name of this SimpleOauth2User.  # noqa: E501


        :return: The name of this SimpleOauth2User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SimpleOauth2User.


        :param name: The name of this SimpleOauth2User.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def allowed_cluster_ids(self):
        """Gets the allowed_cluster_ids of this SimpleOauth2User.  # noqa: E501


        :return: The allowed_cluster_ids of this SimpleOauth2User.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_cluster_ids

    @allowed_cluster_ids.setter
    def allowed_cluster_ids(self, allowed_cluster_ids):
        """Sets the allowed_cluster_ids of this SimpleOauth2User.


        :param allowed_cluster_ids: The allowed_cluster_ids of this SimpleOauth2User.  # noqa: E501
        :type: list[str]
        """

        self._allowed_cluster_ids = allowed_cluster_ids

    @property
    def allowed_stack_names(self):
        """Gets the allowed_stack_names of this SimpleOauth2User.  # noqa: E501


        :return: The allowed_stack_names of this SimpleOauth2User.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_stack_names

    @allowed_stack_names.setter
    def allowed_stack_names(self, allowed_stack_names):
        """Sets the allowed_stack_names of this SimpleOauth2User.


        :param allowed_stack_names: The allowed_stack_names of this SimpleOauth2User.  # noqa: E501
        :type: list[str]
        """

        self._allowed_stack_names = allowed_stack_names

    @property
    def cluster_role_binding(self):
        """Gets the cluster_role_binding of this SimpleOauth2User.  # noqa: E501


        :return: The cluster_role_binding of this SimpleOauth2User.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._cluster_role_binding

    @cluster_role_binding.setter
    def cluster_role_binding(self, cluster_role_binding):
        """Sets the cluster_role_binding of this SimpleOauth2User.


        :param cluster_role_binding: The cluster_role_binding of this SimpleOauth2User.  # noqa: E501
        :type: dict(str, str)
        """

        self._cluster_role_binding = cluster_role_binding

    @property
    def stack_resources(self):
        """Gets the stack_resources of this SimpleOauth2User.  # noqa: E501


        :return: The stack_resources of this SimpleOauth2User.  # noqa: E501
        :rtype: list[StackResource]
        """
        return self._stack_resources

    @stack_resources.setter
    def stack_resources(self, stack_resources):
        """Sets the stack_resources of this SimpleOauth2User.


        :param stack_resources: The stack_resources of this SimpleOauth2User.  # noqa: E501
        :type: list[StackResource]
        """

        self._stack_resources = stack_resources

    @property
    def allowed_accounts(self):
        """Gets the allowed_accounts of this SimpleOauth2User.  # noqa: E501


        :return: The allowed_accounts of this SimpleOauth2User.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_accounts

    @allowed_accounts.setter
    def allowed_accounts(self, allowed_accounts):
        """Sets the allowed_accounts of this SimpleOauth2User.


        :param allowed_accounts: The allowed_accounts of this SimpleOauth2User.  # noqa: E501
        :type: list[str]
        """

        self._allowed_accounts = allowed_accounts

    @property
    def user_id(self):
        """Gets the user_id of this SimpleOauth2User.  # noqa: E501


        :return: The user_id of this SimpleOauth2User.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SimpleOauth2User.


        :param user_id: The user_id of this SimpleOauth2User.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def authorities(self):
        """Gets the authorities of this SimpleOauth2User.  # noqa: E501


        :return: The authorities of this SimpleOauth2User.  # noqa: E501
        :rtype: list[GrantedAuthority]
        """
        return self._authorities

    @authorities.setter
    def authorities(self, authorities):
        """Sets the authorities of this SimpleOauth2User.


        :param authorities: The authorities of this SimpleOauth2User.  # noqa: E501
        :type: list[GrantedAuthority]
        """

        self._authorities = authorities

    @property
    def associated_to_resource_group(self):
        """Gets the associated_to_resource_group of this SimpleOauth2User.  # noqa: E501


        :return: The associated_to_resource_group of this SimpleOauth2User.  # noqa: E501
        :rtype: bool
        """
        return self._associated_to_resource_group

    @associated_to_resource_group.setter
    def associated_to_resource_group(self, associated_to_resource_group):
        """Sets the associated_to_resource_group of this SimpleOauth2User.


        :param associated_to_resource_group: The associated_to_resource_group of this SimpleOauth2User.  # noqa: E501
        :type: bool
        """

        self._associated_to_resource_group = associated_to_resource_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimpleOauth2User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleOauth2User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
