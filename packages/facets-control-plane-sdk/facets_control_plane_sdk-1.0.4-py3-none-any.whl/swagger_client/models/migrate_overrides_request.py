# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MigrateOverridesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'git_override_url': 'str',
        'branch_name': 'str',
        'stack_name': 'str'
    }

    attribute_map = {
        'git_override_url': 'gitOverrideUrl',
        'branch_name': 'branchName',
        'stack_name': 'stackName'
    }

    def __init__(self, git_override_url=None, branch_name=None, stack_name=None):  # noqa: E501
        """MigrateOverridesRequest - a model defined in Swagger"""  # noqa: E501
        self._git_override_url = None
        self._branch_name = None
        self._stack_name = None
        self.discriminator = None
        if git_override_url is not None:
            self.git_override_url = git_override_url
        if branch_name is not None:
            self.branch_name = branch_name
        if stack_name is not None:
            self.stack_name = stack_name

    @property
    def git_override_url(self):
        """Gets the git_override_url of this MigrateOverridesRequest.  # noqa: E501


        :return: The git_override_url of this MigrateOverridesRequest.  # noqa: E501
        :rtype: str
        """
        return self._git_override_url

    @git_override_url.setter
    def git_override_url(self, git_override_url):
        """Sets the git_override_url of this MigrateOverridesRequest.


        :param git_override_url: The git_override_url of this MigrateOverridesRequest.  # noqa: E501
        :type: str
        """

        self._git_override_url = git_override_url

    @property
    def branch_name(self):
        """Gets the branch_name of this MigrateOverridesRequest.  # noqa: E501


        :return: The branch_name of this MigrateOverridesRequest.  # noqa: E501
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """Sets the branch_name of this MigrateOverridesRequest.


        :param branch_name: The branch_name of this MigrateOverridesRequest.  # noqa: E501
        :type: str
        """

        self._branch_name = branch_name

    @property
    def stack_name(self):
        """Gets the stack_name of this MigrateOverridesRequest.  # noqa: E501


        :return: The stack_name of this MigrateOverridesRequest.  # noqa: E501
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this MigrateOverridesRequest.


        :param stack_name: The stack_name of this MigrateOverridesRequest.  # noqa: E501
        :type: str
        """

        self._stack_name = stack_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrateOverridesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrateOverridesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
