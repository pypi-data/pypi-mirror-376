# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CoderAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_by': 'str',
        'creation_date': 'datetime',
        'last_modified_date': 'datetime',
        'last_modified_by': 'str',
        'name': 'str',
        'account_type': 'str',
        'provider': 'str',
        'change_log': 'str',
        'system_defined': 'bool',
        'in_use': 'bool',
        'associated_to': 'list[AccountAssociationInfo]',
        'url': 'str',
        'organization_id': 'str',
        'template_id': 'str',
        'api_token': 'str',
        'default': 'bool',
        'versioning_key': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_by': 'createdBy',
        'creation_date': 'creationDate',
        'last_modified_date': 'lastModifiedDate',
        'last_modified_by': 'lastModifiedBy',
        'name': 'name',
        'account_type': 'accountType',
        'provider': 'provider',
        'change_log': 'changeLog',
        'system_defined': 'systemDefined',
        'in_use': 'inUse',
        'associated_to': 'associatedTo',
        'url': 'url',
        'organization_id': 'organizationId',
        'template_id': 'templateId',
        'api_token': 'apiToken',
        'default': 'default',
        'versioning_key': 'versioningKey'
    }

    def __init__(self, id=None, created_by=None, creation_date=None, last_modified_date=None, last_modified_by=None, name=None, account_type=None, provider=None, change_log=None, system_defined=None, in_use=None, associated_to=None, url=None, organization_id=None, template_id=None, api_token=None, default=None, versioning_key=None):  # noqa: E501
        """CoderAccount - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_by = None
        self._creation_date = None
        self._last_modified_date = None
        self._last_modified_by = None
        self._name = None
        self._account_type = None
        self._provider = None
        self._change_log = None
        self._system_defined = None
        self._in_use = None
        self._associated_to = None
        self._url = None
        self._organization_id = None
        self._template_id = None
        self._api_token = None
        self._default = None
        self._versioning_key = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_by is not None:
            self.created_by = created_by
        if creation_date is not None:
            self.creation_date = creation_date
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if name is not None:
            self.name = name
        if account_type is not None:
            self.account_type = account_type
        if provider is not None:
            self.provider = provider
        if change_log is not None:
            self.change_log = change_log
        if system_defined is not None:
            self.system_defined = system_defined
        if in_use is not None:
            self.in_use = in_use
        if associated_to is not None:
            self.associated_to = associated_to
        if url is not None:
            self.url = url
        if organization_id is not None:
            self.organization_id = organization_id
        if template_id is not None:
            self.template_id = template_id
        if api_token is not None:
            self.api_token = api_token
        if default is not None:
            self.default = default
        if versioning_key is not None:
            self.versioning_key = versioning_key

    @property
    def id(self):
        """Gets the id of this CoderAccount.  # noqa: E501


        :return: The id of this CoderAccount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CoderAccount.


        :param id: The id of this CoderAccount.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_by(self):
        """Gets the created_by of this CoderAccount.  # noqa: E501


        :return: The created_by of this CoderAccount.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CoderAccount.


        :param created_by: The created_by of this CoderAccount.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def creation_date(self):
        """Gets the creation_date of this CoderAccount.  # noqa: E501


        :return: The creation_date of this CoderAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this CoderAccount.


        :param creation_date: The creation_date of this CoderAccount.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this CoderAccount.  # noqa: E501


        :return: The last_modified_date of this CoderAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this CoderAccount.


        :param last_modified_date: The last_modified_date of this CoderAccount.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this CoderAccount.  # noqa: E501


        :return: The last_modified_by of this CoderAccount.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this CoderAccount.


        :param last_modified_by: The last_modified_by of this CoderAccount.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def name(self):
        """Gets the name of this CoderAccount.  # noqa: E501


        :return: The name of this CoderAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CoderAccount.


        :param name: The name of this CoderAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def account_type(self):
        """Gets the account_type of this CoderAccount.  # noqa: E501


        :return: The account_type of this CoderAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this CoderAccount.


        :param account_type: The account_type of this CoderAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["VERSION_CONTROL", "CLOUD", "CODER"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"  # noqa: E501
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def provider(self):
        """Gets the provider of this CoderAccount.  # noqa: E501


        :return: The provider of this CoderAccount.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CoderAccount.


        :param provider: The provider of this CoderAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["GITHUB", "BITBUCKET", "GITLAB", "AWS", "AZURE", "GCP", "KUBERNETES", "CODER"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def change_log(self):
        """Gets the change_log of this CoderAccount.  # noqa: E501


        :return: The change_log of this CoderAccount.  # noqa: E501
        :rtype: str
        """
        return self._change_log

    @change_log.setter
    def change_log(self, change_log):
        """Sets the change_log of this CoderAccount.


        :param change_log: The change_log of this CoderAccount.  # noqa: E501
        :type: str
        """

        self._change_log = change_log

    @property
    def system_defined(self):
        """Gets the system_defined of this CoderAccount.  # noqa: E501


        :return: The system_defined of this CoderAccount.  # noqa: E501
        :rtype: bool
        """
        return self._system_defined

    @system_defined.setter
    def system_defined(self, system_defined):
        """Sets the system_defined of this CoderAccount.


        :param system_defined: The system_defined of this CoderAccount.  # noqa: E501
        :type: bool
        """

        self._system_defined = system_defined

    @property
    def in_use(self):
        """Gets the in_use of this CoderAccount.  # noqa: E501


        :return: The in_use of this CoderAccount.  # noqa: E501
        :rtype: bool
        """
        return self._in_use

    @in_use.setter
    def in_use(self, in_use):
        """Sets the in_use of this CoderAccount.


        :param in_use: The in_use of this CoderAccount.  # noqa: E501
        :type: bool
        """

        self._in_use = in_use

    @property
    def associated_to(self):
        """Gets the associated_to of this CoderAccount.  # noqa: E501


        :return: The associated_to of this CoderAccount.  # noqa: E501
        :rtype: list[AccountAssociationInfo]
        """
        return self._associated_to

    @associated_to.setter
    def associated_to(self, associated_to):
        """Sets the associated_to of this CoderAccount.


        :param associated_to: The associated_to of this CoderAccount.  # noqa: E501
        :type: list[AccountAssociationInfo]
        """

        self._associated_to = associated_to

    @property
    def url(self):
        """Gets the url of this CoderAccount.  # noqa: E501


        :return: The url of this CoderAccount.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CoderAccount.


        :param url: The url of this CoderAccount.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def organization_id(self):
        """Gets the organization_id of this CoderAccount.  # noqa: E501


        :return: The organization_id of this CoderAccount.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this CoderAccount.


        :param organization_id: The organization_id of this CoderAccount.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def template_id(self):
        """Gets the template_id of this CoderAccount.  # noqa: E501


        :return: The template_id of this CoderAccount.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this CoderAccount.


        :param template_id: The template_id of this CoderAccount.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def api_token(self):
        """Gets the api_token of this CoderAccount.  # noqa: E501


        :return: The api_token of this CoderAccount.  # noqa: E501
        :rtype: str
        """
        return self._api_token

    @api_token.setter
    def api_token(self, api_token):
        """Sets the api_token of this CoderAccount.


        :param api_token: The api_token of this CoderAccount.  # noqa: E501
        :type: str
        """

        self._api_token = api_token

    @property
    def default(self):
        """Gets the default of this CoderAccount.  # noqa: E501


        :return: The default of this CoderAccount.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this CoderAccount.


        :param default: The default of this CoderAccount.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def versioning_key(self):
        """Gets the versioning_key of this CoderAccount.  # noqa: E501


        :return: The versioning_key of this CoderAccount.  # noqa: E501
        :rtype: str
        """
        return self._versioning_key

    @versioning_key.setter
    def versioning_key(self, versioning_key):
        """Sets the versioning_key of this CoderAccount.


        :param versioning_key: The versioning_key of this CoderAccount.  # noqa: E501
        :type: str
        """

        self._versioning_key = versioning_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoderAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoderAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
