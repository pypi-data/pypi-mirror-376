# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnvSpecificAccess(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'env_name': 'str',
        'project': 'str',
        'role_info': 'RoleInfo'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'env_name': 'envName',
        'project': 'project',
        'role_info': 'roleInfo'
    }

    def __init__(self, cluster_id=None, env_name=None, project=None, role_info=None):  # noqa: E501
        """EnvSpecificAccess - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._env_name = None
        self._project = None
        self._role_info = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if env_name is not None:
            self.env_name = env_name
        if project is not None:
            self.project = project
        if role_info is not None:
            self.role_info = role_info

    @property
    def cluster_id(self):
        """Gets the cluster_id of this EnvSpecificAccess.  # noqa: E501


        :return: The cluster_id of this EnvSpecificAccess.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this EnvSpecificAccess.


        :param cluster_id: The cluster_id of this EnvSpecificAccess.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def env_name(self):
        """Gets the env_name of this EnvSpecificAccess.  # noqa: E501


        :return: The env_name of this EnvSpecificAccess.  # noqa: E501
        :rtype: str
        """
        return self._env_name

    @env_name.setter
    def env_name(self, env_name):
        """Sets the env_name of this EnvSpecificAccess.


        :param env_name: The env_name of this EnvSpecificAccess.  # noqa: E501
        :type: str
        """

        self._env_name = env_name

    @property
    def project(self):
        """Gets the project of this EnvSpecificAccess.  # noqa: E501


        :return: The project of this EnvSpecificAccess.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this EnvSpecificAccess.


        :param project: The project of this EnvSpecificAccess.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def role_info(self):
        """Gets the role_info of this EnvSpecificAccess.  # noqa: E501


        :return: The role_info of this EnvSpecificAccess.  # noqa: E501
        :rtype: RoleInfo
        """
        return self._role_info

    @role_info.setter
    def role_info(self, role_info):
        """Sets the role_info of this EnvSpecificAccess.


        :param role_info: The role_info of this EnvSpecificAccess.  # noqa: E501
        :type: RoleInfo
        """

        self._role_info = role_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnvSpecificAccess, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvSpecificAccess):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
