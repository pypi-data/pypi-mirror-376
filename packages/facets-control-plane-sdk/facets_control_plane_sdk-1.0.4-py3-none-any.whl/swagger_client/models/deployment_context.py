# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeploymentContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'artifacts': 'dict(str, dict(str, Artifact))',
        'artifactory_details': 'list[Artifactory]',
        'overrides': 'list[OverrideObject]',
        'snapshots': 'dict(str, dict(str, SnapshotInfo))',
        'extra_env': 'dict(str, str)',
        'provided_resources': 'ProvidedResources',
        'settings': 'dict(str, dict(str, object))',
        'template_inputs': 'dict(str, list[StackTemplateInput])',
        'stack_source_version': 'str',
        'tf_version': 'TfVersion',
        'resource_metadata': 'dict(str, list[ResourceMetadata])',
        'provided_secrets_id': 'str',
        'can_skip_approval': 'bool',
        'resources': 'dict(str, MatchedResourceDTO)',
        'modules': 'dict(str, ModuleDTO)',
        'maintenance_window': 'MaintenanceWindowDTO',
        'secrets_context': 'SecretsContextDTO',
        'project_type': 'ProjectType',
        'parallel_release': 'bool'
    }

    attribute_map = {
        'artifacts': 'artifacts',
        'artifactory_details': 'artifactoryDetails',
        'overrides': 'overrides',
        'snapshots': 'snapshots',
        'extra_env': 'extraEnv',
        'provided_resources': 'providedResources',
        'settings': 'settings',
        'template_inputs': 'templateInputs',
        'stack_source_version': 'stackSourceVersion',
        'tf_version': 'tfVersion',
        'resource_metadata': 'resourceMetadata',
        'provided_secrets_id': 'providedSecretsId',
        'can_skip_approval': 'canSkipApproval',
        'resources': 'resources',
        'modules': 'modules',
        'maintenance_window': 'maintenanceWindow',
        'secrets_context': 'secretsContext',
        'project_type': 'projectType',
        'parallel_release': 'parallelRelease'
    }

    def __init__(self, artifacts=None, artifactory_details=None, overrides=None, snapshots=None, extra_env=None, provided_resources=None, settings=None, template_inputs=None, stack_source_version=None, tf_version=None, resource_metadata=None, provided_secrets_id=None, can_skip_approval=None, resources=None, modules=None, maintenance_window=None, secrets_context=None, project_type=None, parallel_release=None):  # noqa: E501
        """DeploymentContext - a model defined in Swagger"""  # noqa: E501
        self._artifacts = None
        self._artifactory_details = None
        self._overrides = None
        self._snapshots = None
        self._extra_env = None
        self._provided_resources = None
        self._settings = None
        self._template_inputs = None
        self._stack_source_version = None
        self._tf_version = None
        self._resource_metadata = None
        self._provided_secrets_id = None
        self._can_skip_approval = None
        self._resources = None
        self._modules = None
        self._maintenance_window = None
        self._secrets_context = None
        self._project_type = None
        self._parallel_release = None
        self.discriminator = None
        if artifacts is not None:
            self.artifacts = artifacts
        if artifactory_details is not None:
            self.artifactory_details = artifactory_details
        if overrides is not None:
            self.overrides = overrides
        if snapshots is not None:
            self.snapshots = snapshots
        if extra_env is not None:
            self.extra_env = extra_env
        if provided_resources is not None:
            self.provided_resources = provided_resources
        if settings is not None:
            self.settings = settings
        if template_inputs is not None:
            self.template_inputs = template_inputs
        if stack_source_version is not None:
            self.stack_source_version = stack_source_version
        if tf_version is not None:
            self.tf_version = tf_version
        if resource_metadata is not None:
            self.resource_metadata = resource_metadata
        if provided_secrets_id is not None:
            self.provided_secrets_id = provided_secrets_id
        if can_skip_approval is not None:
            self.can_skip_approval = can_skip_approval
        if resources is not None:
            self.resources = resources
        if modules is not None:
            self.modules = modules
        if maintenance_window is not None:
            self.maintenance_window = maintenance_window
        if secrets_context is not None:
            self.secrets_context = secrets_context
        if project_type is not None:
            self.project_type = project_type
        if parallel_release is not None:
            self.parallel_release = parallel_release

    @property
    def artifacts(self):
        """Gets the artifacts of this DeploymentContext.  # noqa: E501


        :return: The artifacts of this DeploymentContext.  # noqa: E501
        :rtype: dict(str, dict(str, Artifact))
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this DeploymentContext.


        :param artifacts: The artifacts of this DeploymentContext.  # noqa: E501
        :type: dict(str, dict(str, Artifact))
        """

        self._artifacts = artifacts

    @property
    def artifactory_details(self):
        """Gets the artifactory_details of this DeploymentContext.  # noqa: E501


        :return: The artifactory_details of this DeploymentContext.  # noqa: E501
        :rtype: list[Artifactory]
        """
        return self._artifactory_details

    @artifactory_details.setter
    def artifactory_details(self, artifactory_details):
        """Sets the artifactory_details of this DeploymentContext.


        :param artifactory_details: The artifactory_details of this DeploymentContext.  # noqa: E501
        :type: list[Artifactory]
        """

        self._artifactory_details = artifactory_details

    @property
    def overrides(self):
        """Gets the overrides of this DeploymentContext.  # noqa: E501


        :return: The overrides of this DeploymentContext.  # noqa: E501
        :rtype: list[OverrideObject]
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this DeploymentContext.


        :param overrides: The overrides of this DeploymentContext.  # noqa: E501
        :type: list[OverrideObject]
        """

        self._overrides = overrides

    @property
    def snapshots(self):
        """Gets the snapshots of this DeploymentContext.  # noqa: E501


        :return: The snapshots of this DeploymentContext.  # noqa: E501
        :rtype: dict(str, dict(str, SnapshotInfo))
        """
        return self._snapshots

    @snapshots.setter
    def snapshots(self, snapshots):
        """Sets the snapshots of this DeploymentContext.


        :param snapshots: The snapshots of this DeploymentContext.  # noqa: E501
        :type: dict(str, dict(str, SnapshotInfo))
        """

        self._snapshots = snapshots

    @property
    def extra_env(self):
        """Gets the extra_env of this DeploymentContext.  # noqa: E501


        :return: The extra_env of this DeploymentContext.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extra_env

    @extra_env.setter
    def extra_env(self, extra_env):
        """Sets the extra_env of this DeploymentContext.


        :param extra_env: The extra_env of this DeploymentContext.  # noqa: E501
        :type: dict(str, str)
        """

        self._extra_env = extra_env

    @property
    def provided_resources(self):
        """Gets the provided_resources of this DeploymentContext.  # noqa: E501


        :return: The provided_resources of this DeploymentContext.  # noqa: E501
        :rtype: ProvidedResources
        """
        return self._provided_resources

    @provided_resources.setter
    def provided_resources(self, provided_resources):
        """Sets the provided_resources of this DeploymentContext.


        :param provided_resources: The provided_resources of this DeploymentContext.  # noqa: E501
        :type: ProvidedResources
        """

        self._provided_resources = provided_resources

    @property
    def settings(self):
        """Gets the settings of this DeploymentContext.  # noqa: E501


        :return: The settings of this DeploymentContext.  # noqa: E501
        :rtype: dict(str, dict(str, object))
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this DeploymentContext.


        :param settings: The settings of this DeploymentContext.  # noqa: E501
        :type: dict(str, dict(str, object))
        """

        self._settings = settings

    @property
    def template_inputs(self):
        """Gets the template_inputs of this DeploymentContext.  # noqa: E501


        :return: The template_inputs of this DeploymentContext.  # noqa: E501
        :rtype: dict(str, list[StackTemplateInput])
        """
        return self._template_inputs

    @template_inputs.setter
    def template_inputs(self, template_inputs):
        """Sets the template_inputs of this DeploymentContext.


        :param template_inputs: The template_inputs of this DeploymentContext.  # noqa: E501
        :type: dict(str, list[StackTemplateInput])
        """

        self._template_inputs = template_inputs

    @property
    def stack_source_version(self):
        """Gets the stack_source_version of this DeploymentContext.  # noqa: E501


        :return: The stack_source_version of this DeploymentContext.  # noqa: E501
        :rtype: str
        """
        return self._stack_source_version

    @stack_source_version.setter
    def stack_source_version(self, stack_source_version):
        """Sets the stack_source_version of this DeploymentContext.


        :param stack_source_version: The stack_source_version of this DeploymentContext.  # noqa: E501
        :type: str
        """

        self._stack_source_version = stack_source_version

    @property
    def tf_version(self):
        """Gets the tf_version of this DeploymentContext.  # noqa: E501


        :return: The tf_version of this DeploymentContext.  # noqa: E501
        :rtype: TfVersion
        """
        return self._tf_version

    @tf_version.setter
    def tf_version(self, tf_version):
        """Sets the tf_version of this DeploymentContext.


        :param tf_version: The tf_version of this DeploymentContext.  # noqa: E501
        :type: TfVersion
        """

        self._tf_version = tf_version

    @property
    def resource_metadata(self):
        """Gets the resource_metadata of this DeploymentContext.  # noqa: E501


        :return: The resource_metadata of this DeploymentContext.  # noqa: E501
        :rtype: dict(str, list[ResourceMetadata])
        """
        return self._resource_metadata

    @resource_metadata.setter
    def resource_metadata(self, resource_metadata):
        """Sets the resource_metadata of this DeploymentContext.


        :param resource_metadata: The resource_metadata of this DeploymentContext.  # noqa: E501
        :type: dict(str, list[ResourceMetadata])
        """

        self._resource_metadata = resource_metadata

    @property
    def provided_secrets_id(self):
        """Gets the provided_secrets_id of this DeploymentContext.  # noqa: E501


        :return: The provided_secrets_id of this DeploymentContext.  # noqa: E501
        :rtype: str
        """
        return self._provided_secrets_id

    @provided_secrets_id.setter
    def provided_secrets_id(self, provided_secrets_id):
        """Sets the provided_secrets_id of this DeploymentContext.


        :param provided_secrets_id: The provided_secrets_id of this DeploymentContext.  # noqa: E501
        :type: str
        """

        self._provided_secrets_id = provided_secrets_id

    @property
    def can_skip_approval(self):
        """Gets the can_skip_approval of this DeploymentContext.  # noqa: E501


        :return: The can_skip_approval of this DeploymentContext.  # noqa: E501
        :rtype: bool
        """
        return self._can_skip_approval

    @can_skip_approval.setter
    def can_skip_approval(self, can_skip_approval):
        """Sets the can_skip_approval of this DeploymentContext.


        :param can_skip_approval: The can_skip_approval of this DeploymentContext.  # noqa: E501
        :type: bool
        """

        self._can_skip_approval = can_skip_approval

    @property
    def resources(self):
        """Gets the resources of this DeploymentContext.  # noqa: E501


        :return: The resources of this DeploymentContext.  # noqa: E501
        :rtype: dict(str, MatchedResourceDTO)
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this DeploymentContext.


        :param resources: The resources of this DeploymentContext.  # noqa: E501
        :type: dict(str, MatchedResourceDTO)
        """

        self._resources = resources

    @property
    def modules(self):
        """Gets the modules of this DeploymentContext.  # noqa: E501


        :return: The modules of this DeploymentContext.  # noqa: E501
        :rtype: dict(str, ModuleDTO)
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this DeploymentContext.


        :param modules: The modules of this DeploymentContext.  # noqa: E501
        :type: dict(str, ModuleDTO)
        """

        self._modules = modules

    @property
    def maintenance_window(self):
        """Gets the maintenance_window of this DeploymentContext.  # noqa: E501


        :return: The maintenance_window of this DeploymentContext.  # noqa: E501
        :rtype: MaintenanceWindowDTO
        """
        return self._maintenance_window

    @maintenance_window.setter
    def maintenance_window(self, maintenance_window):
        """Sets the maintenance_window of this DeploymentContext.


        :param maintenance_window: The maintenance_window of this DeploymentContext.  # noqa: E501
        :type: MaintenanceWindowDTO
        """

        self._maintenance_window = maintenance_window

    @property
    def secrets_context(self):
        """Gets the secrets_context of this DeploymentContext.  # noqa: E501


        :return: The secrets_context of this DeploymentContext.  # noqa: E501
        :rtype: SecretsContextDTO
        """
        return self._secrets_context

    @secrets_context.setter
    def secrets_context(self, secrets_context):
        """Sets the secrets_context of this DeploymentContext.


        :param secrets_context: The secrets_context of this DeploymentContext.  # noqa: E501
        :type: SecretsContextDTO
        """

        self._secrets_context = secrets_context

    @property
    def project_type(self):
        """Gets the project_type of this DeploymentContext.  # noqa: E501


        :return: The project_type of this DeploymentContext.  # noqa: E501
        :rtype: ProjectType
        """
        return self._project_type

    @project_type.setter
    def project_type(self, project_type):
        """Sets the project_type of this DeploymentContext.


        :param project_type: The project_type of this DeploymentContext.  # noqa: E501
        :type: ProjectType
        """

        self._project_type = project_type

    @property
    def parallel_release(self):
        """Gets the parallel_release of this DeploymentContext.  # noqa: E501


        :return: The parallel_release of this DeploymentContext.  # noqa: E501
        :rtype: bool
        """
        return self._parallel_release

    @parallel_release.setter
    def parallel_release(self, parallel_release):
        """Sets the parallel_release of this DeploymentContext.


        :param parallel_release: The parallel_release of this DeploymentContext.  # noqa: E501
        :type: bool
        """

        self._parallel_release = parallel_release

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeploymentContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
