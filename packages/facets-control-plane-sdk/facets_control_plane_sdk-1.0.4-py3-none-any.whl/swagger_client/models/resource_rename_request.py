# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceRenameRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'new_resource_name': 'str',
        'resource_type': 'str',
        'old_resource_name': 'str',
        'old_file_name': 'str',
        'directory': 'str'
    }

    attribute_map = {
        'new_resource_name': 'newResourceName',
        'resource_type': 'resourceType',
        'old_resource_name': 'oldResourceName',
        'old_file_name': 'oldFileName',
        'directory': 'directory'
    }

    def __init__(self, new_resource_name=None, resource_type=None, old_resource_name=None, old_file_name=None, directory=None):  # noqa: E501
        """ResourceRenameRequest - a model defined in Swagger"""  # noqa: E501
        self._new_resource_name = None
        self._resource_type = None
        self._old_resource_name = None
        self._old_file_name = None
        self._directory = None
        self.discriminator = None
        self.new_resource_name = new_resource_name
        self.resource_type = resource_type
        self.old_resource_name = old_resource_name
        if old_file_name is not None:
            self.old_file_name = old_file_name
        if directory is not None:
            self.directory = directory

    @property
    def new_resource_name(self):
        """Gets the new_resource_name of this ResourceRenameRequest.  # noqa: E501


        :return: The new_resource_name of this ResourceRenameRequest.  # noqa: E501
        :rtype: str
        """
        return self._new_resource_name

    @new_resource_name.setter
    def new_resource_name(self, new_resource_name):
        """Sets the new_resource_name of this ResourceRenameRequest.


        :param new_resource_name: The new_resource_name of this ResourceRenameRequest.  # noqa: E501
        :type: str
        """
        if new_resource_name is None:
            raise ValueError("Invalid value for `new_resource_name`, must not be `None`")  # noqa: E501

        self._new_resource_name = new_resource_name

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceRenameRequest.  # noqa: E501


        :return: The resource_type of this ResourceRenameRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceRenameRequest.


        :param resource_type: The resource_type of this ResourceRenameRequest.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def old_resource_name(self):
        """Gets the old_resource_name of this ResourceRenameRequest.  # noqa: E501


        :return: The old_resource_name of this ResourceRenameRequest.  # noqa: E501
        :rtype: str
        """
        return self._old_resource_name

    @old_resource_name.setter
    def old_resource_name(self, old_resource_name):
        """Sets the old_resource_name of this ResourceRenameRequest.


        :param old_resource_name: The old_resource_name of this ResourceRenameRequest.  # noqa: E501
        :type: str
        """
        if old_resource_name is None:
            raise ValueError("Invalid value for `old_resource_name`, must not be `None`")  # noqa: E501

        self._old_resource_name = old_resource_name

    @property
    def old_file_name(self):
        """Gets the old_file_name of this ResourceRenameRequest.  # noqa: E501


        :return: The old_file_name of this ResourceRenameRequest.  # noqa: E501
        :rtype: str
        """
        return self._old_file_name

    @old_file_name.setter
    def old_file_name(self, old_file_name):
        """Sets the old_file_name of this ResourceRenameRequest.


        :param old_file_name: The old_file_name of this ResourceRenameRequest.  # noqa: E501
        :type: str
        """

        self._old_file_name = old_file_name

    @property
    def directory(self):
        """Gets the directory of this ResourceRenameRequest.  # noqa: E501


        :return: The directory of this ResourceRenameRequest.  # noqa: E501
        :rtype: str
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this ResourceRenameRequest.


        :param directory: The directory of this ResourceRenameRequest.  # noqa: E501
        :type: str
        """

        self._directory = directory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceRenameRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceRenameRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
