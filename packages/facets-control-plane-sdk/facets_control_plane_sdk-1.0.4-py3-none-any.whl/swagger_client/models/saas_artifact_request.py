# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SaasArtifactRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blueprint_name': 'str',
        'application_name': 'str',
        'ci_name': 'str',
        'artifact_uri': 'str',
        'external_id': 'str',
        'artifactory': 'str',
        'artifact_register_type': 'str',
        'artifact_register_value': 'str',
        'repository_name': 'str',
        'tag': 'str'
    }

    attribute_map = {
        'blueprint_name': 'blueprintName',
        'application_name': 'applicationName',
        'ci_name': 'ciName',
        'artifact_uri': 'artifactUri',
        'external_id': 'externalId',
        'artifactory': 'artifactory',
        'artifact_register_type': 'artifactRegisterType',
        'artifact_register_value': 'artifactRegisterValue',
        'repository_name': 'repositoryName',
        'tag': 'tag'
    }

    def __init__(self, blueprint_name=None, application_name=None, ci_name=None, artifact_uri=None, external_id=None, artifactory=None, artifact_register_type=None, artifact_register_value=None, repository_name=None, tag=None):  # noqa: E501
        """SaasArtifactRequest - a model defined in Swagger"""  # noqa: E501
        self._blueprint_name = None
        self._application_name = None
        self._ci_name = None
        self._artifact_uri = None
        self._external_id = None
        self._artifactory = None
        self._artifact_register_type = None
        self._artifact_register_value = None
        self._repository_name = None
        self._tag = None
        self.discriminator = None
        self.blueprint_name = blueprint_name
        if application_name is not None:
            self.application_name = application_name
        if ci_name is not None:
            self.ci_name = ci_name
        self.artifact_uri = artifact_uri
        if external_id is not None:
            self.external_id = external_id
        self.artifactory = artifactory
        self.artifact_register_type = artifact_register_type
        self.artifact_register_value = artifact_register_value
        if repository_name is not None:
            self.repository_name = repository_name
        if tag is not None:
            self.tag = tag

    @property
    def blueprint_name(self):
        """Gets the blueprint_name of this SaasArtifactRequest.  # noqa: E501

        Blueprint name associated with the artifact.  # noqa: E501

        :return: The blueprint_name of this SaasArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._blueprint_name

    @blueprint_name.setter
    def blueprint_name(self, blueprint_name):
        """Sets the blueprint_name of this SaasArtifactRequest.

        Blueprint name associated with the artifact.  # noqa: E501

        :param blueprint_name: The blueprint_name of this SaasArtifactRequest.  # noqa: E501
        :type: str
        """
        if blueprint_name is None:
            raise ValueError("Invalid value for `blueprint_name`, must not be `None`")  # noqa: E501

        self._blueprint_name = blueprint_name

    @property
    def application_name(self):
        """Gets the application_name of this SaasArtifactRequest.  # noqa: E501

        Application name of the artifact.  # noqa: E501

        :return: The application_name of this SaasArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this SaasArtifactRequest.

        Application name of the artifact.  # noqa: E501

        :param application_name: The application_name of this SaasArtifactRequest.  # noqa: E501
        :type: str
        """

        self._application_name = application_name

    @property
    def ci_name(self):
        """Gets the ci_name of this SaasArtifactRequest.  # noqa: E501

        Custom CI name if applicationName is not used.  # noqa: E501

        :return: The ci_name of this SaasArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._ci_name

    @ci_name.setter
    def ci_name(self, ci_name):
        """Sets the ci_name of this SaasArtifactRequest.

        Custom CI name if applicationName is not used.  # noqa: E501

        :param ci_name: The ci_name of this SaasArtifactRequest.  # noqa: E501
        :type: str
        """

        self._ci_name = ci_name

    @property
    def artifact_uri(self):
        """Gets the artifact_uri of this SaasArtifactRequest.  # noqa: E501

        URI of the artifact.  # noqa: E501

        :return: The artifact_uri of this SaasArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._artifact_uri

    @artifact_uri.setter
    def artifact_uri(self, artifact_uri):
        """Sets the artifact_uri of this SaasArtifactRequest.

        URI of the artifact.  # noqa: E501

        :param artifact_uri: The artifact_uri of this SaasArtifactRequest.  # noqa: E501
        :type: str
        """
        if artifact_uri is None:
            raise ValueError("Invalid value for `artifact_uri`, must not be `None`")  # noqa: E501

        self._artifact_uri = artifact_uri

    @property
    def external_id(self):
        """Gets the external_id of this SaasArtifactRequest.  # noqa: E501

        External identifier for the artifact.  # noqa: E501

        :return: The external_id of this SaasArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this SaasArtifactRequest.

        External identifier for the artifact.  # noqa: E501

        :param external_id: The external_id of this SaasArtifactRequest.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def artifactory(self):
        """Gets the artifactory of this SaasArtifactRequest.  # noqa: E501

        Name of the artifactory.  # noqa: E501

        :return: The artifactory of this SaasArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._artifactory

    @artifactory.setter
    def artifactory(self, artifactory):
        """Sets the artifactory of this SaasArtifactRequest.

        Name of the artifactory.  # noqa: E501

        :param artifactory: The artifactory of this SaasArtifactRequest.  # noqa: E501
        :type: str
        """
        if artifactory is None:
            raise ValueError("Invalid value for `artifactory`, must not be `None`")  # noqa: E501

        self._artifactory = artifactory

    @property
    def artifact_register_type(self):
        """Gets the artifact_register_type of this SaasArtifactRequest.  # noqa: E501

        Type of artifact registration.  # noqa: E501

        :return: The artifact_register_type of this SaasArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._artifact_register_type

    @artifact_register_type.setter
    def artifact_register_type(self, artifact_register_type):
        """Sets the artifact_register_type of this SaasArtifactRequest.

        Type of artifact registration.  # noqa: E501

        :param artifact_register_type: The artifact_register_type of this SaasArtifactRequest.  # noqa: E501
        :type: str
        """
        if artifact_register_type is None:
            raise ValueError("Invalid value for `artifact_register_type`, must not be `None`")  # noqa: E501
        allowed_values = ["GIT_REF", "ENVIRONMENT", "RELEASE_STREAM"]  # noqa: E501
        if artifact_register_type not in allowed_values:
            raise ValueError(
                "Invalid value for `artifact_register_type` ({0}), must be one of {1}"  # noqa: E501
                .format(artifact_register_type, allowed_values)
            )

        self._artifact_register_type = artifact_register_type

    @property
    def artifact_register_value(self):
        """Gets the artifact_register_value of this SaasArtifactRequest.  # noqa: E501

        Artifact register value dependent on register type.  # noqa: E501

        :return: The artifact_register_value of this SaasArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._artifact_register_value

    @artifact_register_value.setter
    def artifact_register_value(self, artifact_register_value):
        """Sets the artifact_register_value of this SaasArtifactRequest.

        Artifact register value dependent on register type.  # noqa: E501

        :param artifact_register_value: The artifact_register_value of this SaasArtifactRequest.  # noqa: E501
        :type: str
        """
        if artifact_register_value is None:
            raise ValueError("Invalid value for `artifact_register_value`, must not be `None`")  # noqa: E501

        self._artifact_register_value = artifact_register_value

    @property
    def repository_name(self):
        """Gets the repository_name of this SaasArtifactRequest.  # noqa: E501

        Repository name in the artifactory.  # noqa: E501

        :return: The repository_name of this SaasArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this SaasArtifactRequest.

        Repository name in the artifactory.  # noqa: E501

        :param repository_name: The repository_name of this SaasArtifactRequest.  # noqa: E501
        :type: str
        """

        self._repository_name = repository_name

    @property
    def tag(self):
        """Gets the tag of this SaasArtifactRequest.  # noqa: E501

        The tag of the artifact.  # noqa: E501

        :return: The tag of this SaasArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this SaasArtifactRequest.

        The tag of the artifact.  # noqa: E501

        :param tag: The tag of this SaasArtifactRequest.  # noqa: E501
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaasArtifactRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaasArtifactRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
