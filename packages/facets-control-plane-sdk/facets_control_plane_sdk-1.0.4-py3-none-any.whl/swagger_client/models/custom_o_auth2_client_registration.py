# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomOAuth2ClientRegistration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'registration_id': 'str',
        'provider': 'str',
        'issuer_url': 'str',
        'client_id': 'str',
        'client_secret': 'str',
        'scope': 'str',
        'is_system_configured': 'bool',
        'login_button_text': 'str',
        'system_configured': 'bool'
    }

    attribute_map = {
        'registration_id': 'registrationId',
        'provider': 'provider',
        'issuer_url': 'issuerUrl',
        'client_id': 'clientId',
        'client_secret': 'clientSecret',
        'scope': 'scope',
        'is_system_configured': 'isSystemConfigured',
        'login_button_text': 'loginButtonText',
        'system_configured': 'systemConfigured'
    }

    def __init__(self, registration_id=None, provider=None, issuer_url=None, client_id=None, client_secret=None, scope=None, is_system_configured=None, login_button_text=None, system_configured=None):  # noqa: E501
        """CustomOAuth2ClientRegistration - a model defined in Swagger"""  # noqa: E501
        self._registration_id = None
        self._provider = None
        self._issuer_url = None
        self._client_id = None
        self._client_secret = None
        self._scope = None
        self._is_system_configured = None
        self._login_button_text = None
        self._system_configured = None
        self.discriminator = None
        self.registration_id = registration_id
        self.provider = provider
        if issuer_url is not None:
            self.issuer_url = issuer_url
        self.client_id = client_id
        self.client_secret = client_secret
        self.scope = scope
        if is_system_configured is not None:
            self.is_system_configured = is_system_configured
        self.login_button_text = login_button_text
        if system_configured is not None:
            self.system_configured = system_configured

    @property
    def registration_id(self):
        """Gets the registration_id of this CustomOAuth2ClientRegistration.  # noqa: E501


        :return: The registration_id of this CustomOAuth2ClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._registration_id

    @registration_id.setter
    def registration_id(self, registration_id):
        """Sets the registration_id of this CustomOAuth2ClientRegistration.


        :param registration_id: The registration_id of this CustomOAuth2ClientRegistration.  # noqa: E501
        :type: str
        """
        if registration_id is None:
            raise ValueError("Invalid value for `registration_id`, must not be `None`")  # noqa: E501

        self._registration_id = registration_id

    @property
    def provider(self):
        """Gets the provider of this CustomOAuth2ClientRegistration.  # noqa: E501


        :return: The provider of this CustomOAuth2ClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CustomOAuth2ClientRegistration.


        :param provider: The provider of this CustomOAuth2ClientRegistration.  # noqa: E501
        :type: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501
        allowed_values = ["GOOGLE", "OKTA", "ONE_LOGIN", "AZURE_AD", "JUMP_CLOUD", "OPEN_ID"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def issuer_url(self):
        """Gets the issuer_url of this CustomOAuth2ClientRegistration.  # noqa: E501


        :return: The issuer_url of this CustomOAuth2ClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._issuer_url

    @issuer_url.setter
    def issuer_url(self, issuer_url):
        """Sets the issuer_url of this CustomOAuth2ClientRegistration.


        :param issuer_url: The issuer_url of this CustomOAuth2ClientRegistration.  # noqa: E501
        :type: str
        """

        self._issuer_url = issuer_url

    @property
    def client_id(self):
        """Gets the client_id of this CustomOAuth2ClientRegistration.  # noqa: E501


        :return: The client_id of this CustomOAuth2ClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this CustomOAuth2ClientRegistration.


        :param client_id: The client_id of this CustomOAuth2ClientRegistration.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this CustomOAuth2ClientRegistration.  # noqa: E501


        :return: The client_secret of this CustomOAuth2ClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this CustomOAuth2ClientRegistration.


        :param client_secret: The client_secret of this CustomOAuth2ClientRegistration.  # noqa: E501
        :type: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")  # noqa: E501

        self._client_secret = client_secret

    @property
    def scope(self):
        """Gets the scope of this CustomOAuth2ClientRegistration.  # noqa: E501


        :return: The scope of this CustomOAuth2ClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this CustomOAuth2ClientRegistration.


        :param scope: The scope of this CustomOAuth2ClientRegistration.  # noqa: E501
        :type: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self._scope = scope

    @property
    def is_system_configured(self):
        """Gets the is_system_configured of this CustomOAuth2ClientRegistration.  # noqa: E501


        :return: The is_system_configured of this CustomOAuth2ClientRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._is_system_configured

    @is_system_configured.setter
    def is_system_configured(self, is_system_configured):
        """Sets the is_system_configured of this CustomOAuth2ClientRegistration.


        :param is_system_configured: The is_system_configured of this CustomOAuth2ClientRegistration.  # noqa: E501
        :type: bool
        """

        self._is_system_configured = is_system_configured

    @property
    def login_button_text(self):
        """Gets the login_button_text of this CustomOAuth2ClientRegistration.  # noqa: E501


        :return: The login_button_text of this CustomOAuth2ClientRegistration.  # noqa: E501
        :rtype: str
        """
        return self._login_button_text

    @login_button_text.setter
    def login_button_text(self, login_button_text):
        """Sets the login_button_text of this CustomOAuth2ClientRegistration.


        :param login_button_text: The login_button_text of this CustomOAuth2ClientRegistration.  # noqa: E501
        :type: str
        """
        if login_button_text is None:
            raise ValueError("Invalid value for `login_button_text`, must not be `None`")  # noqa: E501

        self._login_button_text = login_button_text

    @property
    def system_configured(self):
        """Gets the system_configured of this CustomOAuth2ClientRegistration.  # noqa: E501


        :return: The system_configured of this CustomOAuth2ClientRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._system_configured

    @system_configured.setter
    def system_configured(self, system_configured):
        """Sets the system_configured of this CustomOAuth2ClientRegistration.


        :param system_configured: The system_configured of this CustomOAuth2ClientRegistration.  # noqa: E501
        :type: bool
        """

        self._system_configured = system_configured

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomOAuth2ClientRegistration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomOAuth2ClientRegistration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
