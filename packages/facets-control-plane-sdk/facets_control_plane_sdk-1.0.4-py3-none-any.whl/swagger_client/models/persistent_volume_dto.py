# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PersistentVolumeDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'capacity': 'str',
        'status': 'str',
        'storage_class': 'str',
        'pv_access_modes': 'list[str]',
        'reclaim_policy': 'str',
        'age_in_seconds': 'int',
        'claim': 'str',
        'reason': 'str'
    }

    attribute_map = {
        'name': 'name',
        'capacity': 'capacity',
        'status': 'status',
        'storage_class': 'storageClass',
        'pv_access_modes': 'pvAccessModes',
        'reclaim_policy': 'reclaimPolicy',
        'age_in_seconds': 'ageInSeconds',
        'claim': 'claim',
        'reason': 'reason'
    }

    def __init__(self, name=None, capacity=None, status=None, storage_class=None, pv_access_modes=None, reclaim_policy=None, age_in_seconds=None, claim=None, reason=None):  # noqa: E501
        """PersistentVolumeDTO - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._capacity = None
        self._status = None
        self._storage_class = None
        self._pv_access_modes = None
        self._reclaim_policy = None
        self._age_in_seconds = None
        self._claim = None
        self._reason = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if capacity is not None:
            self.capacity = capacity
        if status is not None:
            self.status = status
        if storage_class is not None:
            self.storage_class = storage_class
        if pv_access_modes is not None:
            self.pv_access_modes = pv_access_modes
        if reclaim_policy is not None:
            self.reclaim_policy = reclaim_policy
        if age_in_seconds is not None:
            self.age_in_seconds = age_in_seconds
        if claim is not None:
            self.claim = claim
        if reason is not None:
            self.reason = reason

    @property
    def name(self):
        """Gets the name of this PersistentVolumeDTO.  # noqa: E501


        :return: The name of this PersistentVolumeDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PersistentVolumeDTO.


        :param name: The name of this PersistentVolumeDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def capacity(self):
        """Gets the capacity of this PersistentVolumeDTO.  # noqa: E501


        :return: The capacity of this PersistentVolumeDTO.  # noqa: E501
        :rtype: str
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this PersistentVolumeDTO.


        :param capacity: The capacity of this PersistentVolumeDTO.  # noqa: E501
        :type: str
        """

        self._capacity = capacity

    @property
    def status(self):
        """Gets the status of this PersistentVolumeDTO.  # noqa: E501


        :return: The status of this PersistentVolumeDTO.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PersistentVolumeDTO.


        :param status: The status of this PersistentVolumeDTO.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def storage_class(self):
        """Gets the storage_class of this PersistentVolumeDTO.  # noqa: E501


        :return: The storage_class of this PersistentVolumeDTO.  # noqa: E501
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this PersistentVolumeDTO.


        :param storage_class: The storage_class of this PersistentVolumeDTO.  # noqa: E501
        :type: str
        """

        self._storage_class = storage_class

    @property
    def pv_access_modes(self):
        """Gets the pv_access_modes of this PersistentVolumeDTO.  # noqa: E501


        :return: The pv_access_modes of this PersistentVolumeDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._pv_access_modes

    @pv_access_modes.setter
    def pv_access_modes(self, pv_access_modes):
        """Sets the pv_access_modes of this PersistentVolumeDTO.


        :param pv_access_modes: The pv_access_modes of this PersistentVolumeDTO.  # noqa: E501
        :type: list[str]
        """

        self._pv_access_modes = pv_access_modes

    @property
    def reclaim_policy(self):
        """Gets the reclaim_policy of this PersistentVolumeDTO.  # noqa: E501


        :return: The reclaim_policy of this PersistentVolumeDTO.  # noqa: E501
        :rtype: str
        """
        return self._reclaim_policy

    @reclaim_policy.setter
    def reclaim_policy(self, reclaim_policy):
        """Sets the reclaim_policy of this PersistentVolumeDTO.


        :param reclaim_policy: The reclaim_policy of this PersistentVolumeDTO.  # noqa: E501
        :type: str
        """

        self._reclaim_policy = reclaim_policy

    @property
    def age_in_seconds(self):
        """Gets the age_in_seconds of this PersistentVolumeDTO.  # noqa: E501


        :return: The age_in_seconds of this PersistentVolumeDTO.  # noqa: E501
        :rtype: int
        """
        return self._age_in_seconds

    @age_in_seconds.setter
    def age_in_seconds(self, age_in_seconds):
        """Sets the age_in_seconds of this PersistentVolumeDTO.


        :param age_in_seconds: The age_in_seconds of this PersistentVolumeDTO.  # noqa: E501
        :type: int
        """

        self._age_in_seconds = age_in_seconds

    @property
    def claim(self):
        """Gets the claim of this PersistentVolumeDTO.  # noqa: E501


        :return: The claim of this PersistentVolumeDTO.  # noqa: E501
        :rtype: str
        """
        return self._claim

    @claim.setter
    def claim(self, claim):
        """Sets the claim of this PersistentVolumeDTO.


        :param claim: The claim of this PersistentVolumeDTO.  # noqa: E501
        :type: str
        """

        self._claim = claim

    @property
    def reason(self):
        """Gets the reason of this PersistentVolumeDTO.  # noqa: E501


        :return: The reason of this PersistentVolumeDTO.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this PersistentVolumeDTO.


        :param reason: The reason of this PersistentVolumeDTO.  # noqa: E501
        :type: str
        """

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersistentVolumeDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersistentVolumeDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
