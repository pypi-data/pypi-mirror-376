# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReleaseDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment_log_id': 'str',
        'stack_version': 'str',
        'triggered_by': 'str',
        'release_type': 'str',
        'triggered_on': 'datetime'
    }

    attribute_map = {
        'deployment_log_id': 'deploymentLogId',
        'stack_version': 'stackVersion',
        'triggered_by': 'triggeredBy',
        'release_type': 'releaseType',
        'triggered_on': 'triggeredOn'
    }

    def __init__(self, deployment_log_id=None, stack_version=None, triggered_by=None, release_type=None, triggered_on=None):  # noqa: E501
        """ReleaseDetails - a model defined in Swagger"""  # noqa: E501
        self._deployment_log_id = None
        self._stack_version = None
        self._triggered_by = None
        self._release_type = None
        self._triggered_on = None
        self.discriminator = None
        if deployment_log_id is not None:
            self.deployment_log_id = deployment_log_id
        if stack_version is not None:
            self.stack_version = stack_version
        if triggered_by is not None:
            self.triggered_by = triggered_by
        if release_type is not None:
            self.release_type = release_type
        if triggered_on is not None:
            self.triggered_on = triggered_on

    @property
    def deployment_log_id(self):
        """Gets the deployment_log_id of this ReleaseDetails.  # noqa: E501


        :return: The deployment_log_id of this ReleaseDetails.  # noqa: E501
        :rtype: str
        """
        return self._deployment_log_id

    @deployment_log_id.setter
    def deployment_log_id(self, deployment_log_id):
        """Sets the deployment_log_id of this ReleaseDetails.


        :param deployment_log_id: The deployment_log_id of this ReleaseDetails.  # noqa: E501
        :type: str
        """

        self._deployment_log_id = deployment_log_id

    @property
    def stack_version(self):
        """Gets the stack_version of this ReleaseDetails.  # noqa: E501


        :return: The stack_version of this ReleaseDetails.  # noqa: E501
        :rtype: str
        """
        return self._stack_version

    @stack_version.setter
    def stack_version(self, stack_version):
        """Sets the stack_version of this ReleaseDetails.


        :param stack_version: The stack_version of this ReleaseDetails.  # noqa: E501
        :type: str
        """

        self._stack_version = stack_version

    @property
    def triggered_by(self):
        """Gets the triggered_by of this ReleaseDetails.  # noqa: E501


        :return: The triggered_by of this ReleaseDetails.  # noqa: E501
        :rtype: str
        """
        return self._triggered_by

    @triggered_by.setter
    def triggered_by(self, triggered_by):
        """Sets the triggered_by of this ReleaseDetails.


        :param triggered_by: The triggered_by of this ReleaseDetails.  # noqa: E501
        :type: str
        """

        self._triggered_by = triggered_by

    @property
    def release_type(self):
        """Gets the release_type of this ReleaseDetails.  # noqa: E501


        :return: The release_type of this ReleaseDetails.  # noqa: E501
        :rtype: str
        """
        return self._release_type

    @release_type.setter
    def release_type(self, release_type):
        """Sets the release_type of this ReleaseDetails.


        :param release_type: The release_type of this ReleaseDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["HOTFIX", "RELEASE", "LAUNCH", "DESTROY", "CUSTOM", "UNLOCK_STATE", "PLAN", "HOTFIX_PLAN", "APPLY_PLAN", "APPLY_HOTFIX_PLAN", "SCALE_UP", "SCALE_DOWN", "MAINTENANCE", "TERRAFORM_EXPORT", "ROLLBACK_PLAN", "APPLY_ROLLBACK_PLAN"]  # noqa: E501
        if release_type not in allowed_values:
            raise ValueError(
                "Invalid value for `release_type` ({0}), must be one of {1}"  # noqa: E501
                .format(release_type, allowed_values)
            )

        self._release_type = release_type

    @property
    def triggered_on(self):
        """Gets the triggered_on of this ReleaseDetails.  # noqa: E501


        :return: The triggered_on of this ReleaseDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._triggered_on

    @triggered_on.setter
    def triggered_on(self, triggered_on):
        """Sets the triggered_on of this ReleaseDetails.


        :param triggered_on: The triggered_on of this ReleaseDetails.  # noqa: E501
        :type: datetime
        """

        self._triggered_on = triggered_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReleaseDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleaseDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
