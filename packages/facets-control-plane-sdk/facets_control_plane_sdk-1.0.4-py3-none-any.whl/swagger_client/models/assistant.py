# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Assistant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'prompt': 'str',
        'ability': 'str',
        'conversational': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'prompt': 'prompt',
        'ability': 'ability',
        'conversational': 'conversational'
    }

    def __init__(self, id=None, name=None, prompt=None, ability=None, conversational=None):  # noqa: E501
        """Assistant - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._prompt = None
        self._ability = None
        self._conversational = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if prompt is not None:
            self.prompt = prompt
        if ability is not None:
            self.ability = ability
        if conversational is not None:
            self.conversational = conversational

    @property
    def id(self):
        """Gets the id of this Assistant.  # noqa: E501


        :return: The id of this Assistant.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Assistant.


        :param id: The id of this Assistant.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Assistant.  # noqa: E501


        :return: The name of this Assistant.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Assistant.


        :param name: The name of this Assistant.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def prompt(self):
        """Gets the prompt of this Assistant.  # noqa: E501


        :return: The prompt of this Assistant.  # noqa: E501
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt):
        """Sets the prompt of this Assistant.


        :param prompt: The prompt of this Assistant.  # noqa: E501
        :type: str
        """

        self._prompt = prompt

    @property
    def ability(self):
        """Gets the ability of this Assistant.  # noqa: E501


        :return: The ability of this Assistant.  # noqa: E501
        :rtype: str
        """
        return self._ability

    @ability.setter
    def ability(self, ability):
        """Sets the ability of this Assistant.


        :param ability: The ability of this Assistant.  # noqa: E501
        :type: str
        """

        self._ability = ability

    @property
    def conversational(self):
        """Gets the conversational of this Assistant.  # noqa: E501


        :return: The conversational of this Assistant.  # noqa: E501
        :rtype: bool
        """
        return self._conversational

    @conversational.setter
    def conversational(self, conversational):
        """Sets the conversational of this Assistant.


        :param conversational: The conversational of this Assistant.  # noqa: E501
        :type: bool
        """

        self._conversational = conversational

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Assistant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Assistant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
