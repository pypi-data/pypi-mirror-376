# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TFModule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_by': 'str',
        'creation_date': 'datetime',
        'last_modified_date': 'datetime',
        'last_modified_by': 'str',
        'intent': 'str',
        'flavor': 'str',
        'alias_flavors': 'list[str]',
        'version': 'str',
        'git_url': 'str',
        'git_ref': 'str',
        'relative_path': 'str',
        'account_id': 'str',
        'facets_yaml': 'str',
        'clouds': 'list[str]',
        'sample_json': 'str',
        'spec': 'str',
        'metadata': 'str',
        'type': 'str',
        'source': 'str',
        'inputs': 'dict(str, Input)',
        'outputs': 'list[IntentOutput]',
        'path': 'TFModulePath',
        'stage': 'str',
        'allowed_test_projects': 'list[str]',
        'description': 'str',
        'readme_md': 'str',
        'contains_overridable_fields': 'bool',
        'tags': 'list[str]',
        'iac_tool': 'list[str]',
        'module_group_id': 'str',
        'critical_resource': 'bool',
        'enable_kubernetes_explorer': 'bool',
        'name_length_limit': 'int',
        'spec_modeled': 'bool',
        'feature_branch': 'bool',
        'change_log': 'str',
        'versioning_key': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_by': 'createdBy',
        'creation_date': 'creationDate',
        'last_modified_date': 'lastModifiedDate',
        'last_modified_by': 'lastModifiedBy',
        'intent': 'intent',
        'flavor': 'flavor',
        'alias_flavors': 'aliasFlavors',
        'version': 'version',
        'git_url': 'gitUrl',
        'git_ref': 'gitRef',
        'relative_path': 'relativePath',
        'account_id': 'accountId',
        'facets_yaml': 'facetsYaml',
        'clouds': 'clouds',
        'sample_json': 'sampleJson',
        'spec': 'spec',
        'metadata': 'metadata',
        'type': 'type',
        'source': 'source',
        'inputs': 'inputs',
        'outputs': 'outputs',
        'path': 'path',
        'stage': 'stage',
        'allowed_test_projects': 'allowedTestProjects',
        'description': 'description',
        'readme_md': 'readmeMd',
        'contains_overridable_fields': 'containsOverridableFields',
        'tags': 'tags',
        'iac_tool': 'iacTool',
        'module_group_id': 'moduleGroupId',
        'critical_resource': 'criticalResource',
        'enable_kubernetes_explorer': 'enableKubernetesExplorer',
        'name_length_limit': 'nameLengthLimit',
        'spec_modeled': 'specModeled',
        'feature_branch': 'featureBranch',
        'change_log': 'changeLog',
        'versioning_key': 'versioningKey'
    }

    def __init__(self, id=None, created_by=None, creation_date=None, last_modified_date=None, last_modified_by=None, intent=None, flavor=None, alias_flavors=None, version=None, git_url=None, git_ref=None, relative_path=None, account_id=None, facets_yaml=None, clouds=None, sample_json=None, spec=None, metadata=None, type=None, source=None, inputs=None, outputs=None, path=None, stage=None, allowed_test_projects=None, description=None, readme_md=None, contains_overridable_fields=None, tags=None, iac_tool=None, module_group_id=None, critical_resource=None, enable_kubernetes_explorer=None, name_length_limit=None, spec_modeled=None, feature_branch=None, change_log=None, versioning_key=None):  # noqa: E501
        """TFModule - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_by = None
        self._creation_date = None
        self._last_modified_date = None
        self._last_modified_by = None
        self._intent = None
        self._flavor = None
        self._alias_flavors = None
        self._version = None
        self._git_url = None
        self._git_ref = None
        self._relative_path = None
        self._account_id = None
        self._facets_yaml = None
        self._clouds = None
        self._sample_json = None
        self._spec = None
        self._metadata = None
        self._type = None
        self._source = None
        self._inputs = None
        self._outputs = None
        self._path = None
        self._stage = None
        self._allowed_test_projects = None
        self._description = None
        self._readme_md = None
        self._contains_overridable_fields = None
        self._tags = None
        self._iac_tool = None
        self._module_group_id = None
        self._critical_resource = None
        self._enable_kubernetes_explorer = None
        self._name_length_limit = None
        self._spec_modeled = None
        self._feature_branch = None
        self._change_log = None
        self._versioning_key = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_by is not None:
            self.created_by = created_by
        if creation_date is not None:
            self.creation_date = creation_date
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if intent is not None:
            self.intent = intent
        if flavor is not None:
            self.flavor = flavor
        if alias_flavors is not None:
            self.alias_flavors = alias_flavors
        if version is not None:
            self.version = version
        if git_url is not None:
            self.git_url = git_url
        if git_ref is not None:
            self.git_ref = git_ref
        if relative_path is not None:
            self.relative_path = relative_path
        if account_id is not None:
            self.account_id = account_id
        if facets_yaml is not None:
            self.facets_yaml = facets_yaml
        if clouds is not None:
            self.clouds = clouds
        if sample_json is not None:
            self.sample_json = sample_json
        if spec is not None:
            self.spec = spec
        if metadata is not None:
            self.metadata = metadata
        if type is not None:
            self.type = type
        if source is not None:
            self.source = source
        if inputs is not None:
            self.inputs = inputs
        if outputs is not None:
            self.outputs = outputs
        if path is not None:
            self.path = path
        if stage is not None:
            self.stage = stage
        if allowed_test_projects is not None:
            self.allowed_test_projects = allowed_test_projects
        if description is not None:
            self.description = description
        if readme_md is not None:
            self.readme_md = readme_md
        if contains_overridable_fields is not None:
            self.contains_overridable_fields = contains_overridable_fields
        if tags is not None:
            self.tags = tags
        if iac_tool is not None:
            self.iac_tool = iac_tool
        if module_group_id is not None:
            self.module_group_id = module_group_id
        if critical_resource is not None:
            self.critical_resource = critical_resource
        if enable_kubernetes_explorer is not None:
            self.enable_kubernetes_explorer = enable_kubernetes_explorer
        if name_length_limit is not None:
            self.name_length_limit = name_length_limit
        if spec_modeled is not None:
            self.spec_modeled = spec_modeled
        if feature_branch is not None:
            self.feature_branch = feature_branch
        if change_log is not None:
            self.change_log = change_log
        if versioning_key is not None:
            self.versioning_key = versioning_key

    @property
    def id(self):
        """Gets the id of this TFModule.  # noqa: E501


        :return: The id of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TFModule.


        :param id: The id of this TFModule.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_by(self):
        """Gets the created_by of this TFModule.  # noqa: E501


        :return: The created_by of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TFModule.


        :param created_by: The created_by of this TFModule.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def creation_date(self):
        """Gets the creation_date of this TFModule.  # noqa: E501


        :return: The creation_date of this TFModule.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this TFModule.


        :param creation_date: The creation_date of this TFModule.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this TFModule.  # noqa: E501


        :return: The last_modified_date of this TFModule.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this TFModule.


        :param last_modified_date: The last_modified_date of this TFModule.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this TFModule.  # noqa: E501


        :return: The last_modified_by of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this TFModule.


        :param last_modified_by: The last_modified_by of this TFModule.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def intent(self):
        """Gets the intent of this TFModule.  # noqa: E501

        Intent of the TF Module  # noqa: E501

        :return: The intent of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._intent

    @intent.setter
    def intent(self, intent):
        """Sets the intent of this TFModule.

        Intent of the TF Module  # noqa: E501

        :param intent: The intent of this TFModule.  # noqa: E501
        :type: str
        """

        self._intent = intent

    @property
    def flavor(self):
        """Gets the flavor of this TFModule.  # noqa: E501

        Flavor of the TF Module  # noqa: E501

        :return: The flavor of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._flavor

    @flavor.setter
    def flavor(self, flavor):
        """Sets the flavor of this TFModule.

        Flavor of the TF Module  # noqa: E501

        :param flavor: The flavor of this TFModule.  # noqa: E501
        :type: str
        """

        self._flavor = flavor

    @property
    def alias_flavors(self):
        """Gets the alias_flavors of this TFModule.  # noqa: E501

        Alias flavors for the module  # noqa: E501

        :return: The alias_flavors of this TFModule.  # noqa: E501
        :rtype: list[str]
        """
        return self._alias_flavors

    @alias_flavors.setter
    def alias_flavors(self, alias_flavors):
        """Sets the alias_flavors of this TFModule.

        Alias flavors for the module  # noqa: E501

        :param alias_flavors: The alias_flavors of this TFModule.  # noqa: E501
        :type: list[str]
        """

        self._alias_flavors = alias_flavors

    @property
    def version(self):
        """Gets the version of this TFModule.  # noqa: E501

        Version of the TF Module  # noqa: E501

        :return: The version of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TFModule.

        Version of the TF Module  # noqa: E501

        :param version: The version of this TFModule.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def git_url(self):
        """Gets the git_url of this TFModule.  # noqa: E501

        URL of the GIT repository  # noqa: E501

        :return: The git_url of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._git_url

    @git_url.setter
    def git_url(self, git_url):
        """Sets the git_url of this TFModule.

        URL of the GIT repository  # noqa: E501

        :param git_url: The git_url of this TFModule.  # noqa: E501
        :type: str
        """

        self._git_url = git_url

    @property
    def git_ref(self):
        """Gets the git_ref of this TFModule.  # noqa: E501

        Reference to a specific GIT branch or commit  # noqa: E501

        :return: The git_ref of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._git_ref

    @git_ref.setter
    def git_ref(self, git_ref):
        """Sets the git_ref of this TFModule.

        Reference to a specific GIT branch or commit  # noqa: E501

        :param git_ref: The git_ref of this TFModule.  # noqa: E501
        :type: str
        """

        self._git_ref = git_ref

    @property
    def relative_path(self):
        """Gets the relative_path of this TFModule.  # noqa: E501

        Relative path within the repository  # noqa: E501

        :return: The relative_path of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this TFModule.

        Relative path within the repository  # noqa: E501

        :param relative_path: The relative_path of this TFModule.  # noqa: E501
        :type: str
        """

        self._relative_path = relative_path

    @property
    def account_id(self):
        """Gets the account_id of this TFModule.  # noqa: E501

        Account identifier  # noqa: E501

        :return: The account_id of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this TFModule.

        Account identifier  # noqa: E501

        :param account_id: The account_id of this TFModule.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def facets_yaml(self):
        """Gets the facets_yaml of this TFModule.  # noqa: E501

        Facets YAML content  # noqa: E501

        :return: The facets_yaml of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._facets_yaml

    @facets_yaml.setter
    def facets_yaml(self, facets_yaml):
        """Sets the facets_yaml of this TFModule.

        Facets YAML content  # noqa: E501

        :param facets_yaml: The facets_yaml of this TFModule.  # noqa: E501
        :type: str
        """

        self._facets_yaml = facets_yaml

    @property
    def clouds(self):
        """Gets the clouds of this TFModule.  # noqa: E501

        Supported cloud providers for this module  # noqa: E501

        :return: The clouds of this TFModule.  # noqa: E501
        :rtype: list[str]
        """
        return self._clouds

    @clouds.setter
    def clouds(self, clouds):
        """Sets the clouds of this TFModule.

        Supported cloud providers for this module  # noqa: E501

        :param clouds: The clouds of this TFModule.  # noqa: E501
        :type: list[str]
        """

        self._clouds = clouds

    @property
    def sample_json(self):
        """Gets the sample_json of this TFModule.  # noqa: E501

        Sample JSON configuration  # noqa: E501

        :return: The sample_json of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._sample_json

    @sample_json.setter
    def sample_json(self, sample_json):
        """Sets the sample_json of this TFModule.

        Sample JSON configuration  # noqa: E501

        :param sample_json: The sample_json of this TFModule.  # noqa: E501
        :type: str
        """

        self._sample_json = sample_json

    @property
    def spec(self):
        """Gets the spec of this TFModule.  # noqa: E501

        Specification details of the module  # noqa: E501

        :return: The spec of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this TFModule.

        Specification details of the module  # noqa: E501

        :param spec: The spec of this TFModule.  # noqa: E501
        :type: str
        """

        self._spec = spec

    @property
    def metadata(self):
        """Gets the metadata of this TFModule.  # noqa: E501


        :return: The metadata of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TFModule.


        :param metadata: The metadata of this TFModule.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def type(self):
        """Gets the type of this TFModule.  # noqa: E501

        Type of the TF Module  # noqa: E501

        :return: The type of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TFModule.

        Type of the TF Module  # noqa: E501

        :param type: The type of this TFModule.  # noqa: E501
        :type: str
        """
        allowed_values = ["SIMPLE", "ADD_ON"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def source(self):
        """Gets the source of this TFModule.  # noqa: E501

        Source of the module  # noqa: E501

        :return: The source of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TFModule.

        Source of the module  # noqa: E501

        :param source: The source of this TFModule.  # noqa: E501
        :type: str
        """
        allowed_values = ["BUILT_IN", "CUSTOM"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def inputs(self):
        """Gets the inputs of this TFModule.  # noqa: E501

        Input parameters for this module  # noqa: E501

        :return: The inputs of this TFModule.  # noqa: E501
        :rtype: dict(str, Input)
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this TFModule.

        Input parameters for this module  # noqa: E501

        :param inputs: The inputs of this TFModule.  # noqa: E501
        :type: dict(str, Input)
        """

        self._inputs = inputs

    @property
    def outputs(self):
        """Gets the outputs of this TFModule.  # noqa: E501


        :return: The outputs of this TFModule.  # noqa: E501
        :rtype: list[IntentOutput]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this TFModule.


        :param outputs: The outputs of this TFModule.  # noqa: E501
        :type: list[IntentOutput]
        """

        self._outputs = outputs

    @property
    def path(self):
        """Gets the path of this TFModule.  # noqa: E501


        :return: The path of this TFModule.  # noqa: E501
        :rtype: TFModulePath
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this TFModule.


        :param path: The path of this TFModule.  # noqa: E501
        :type: TFModulePath
        """

        self._path = path

    @property
    def stage(self):
        """Gets the stage of this TFModule.  # noqa: E501

        Stage of the TF Module in its lifecycle  # noqa: E501

        :return: The stage of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this TFModule.

        Stage of the TF Module in its lifecycle  # noqa: E501

        :param stage: The stage of this TFModule.  # noqa: E501
        :type: str
        """
        allowed_values = ["PREVIEW", "PUBLISHED"]  # noqa: E501
        if stage not in allowed_values:
            raise ValueError(
                "Invalid value for `stage` ({0}), must be one of {1}"  # noqa: E501
                .format(stage, allowed_values)
            )

        self._stage = stage

    @property
    def allowed_test_projects(self):
        """Gets the allowed_test_projects of this TFModule.  # noqa: E501

        List of test projects where this module will be available. If absent, it is available globally.  # noqa: E501

        :return: The allowed_test_projects of this TFModule.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_test_projects

    @allowed_test_projects.setter
    def allowed_test_projects(self, allowed_test_projects):
        """Sets the allowed_test_projects of this TFModule.

        List of test projects where this module will be available. If absent, it is available globally.  # noqa: E501

        :param allowed_test_projects: The allowed_test_projects of this TFModule.  # noqa: E501
        :type: list[str]
        """

        self._allowed_test_projects = allowed_test_projects

    @property
    def description(self):
        """Gets the description of this TFModule.  # noqa: E501


        :return: The description of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TFModule.


        :param description: The description of this TFModule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def readme_md(self):
        """Gets the readme_md of this TFModule.  # noqa: E501


        :return: The readme_md of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._readme_md

    @readme_md.setter
    def readme_md(self, readme_md):
        """Sets the readme_md of this TFModule.


        :param readme_md: The readme_md of this TFModule.  # noqa: E501
        :type: str
        """

        self._readme_md = readme_md

    @property
    def contains_overridable_fields(self):
        """Gets the contains_overridable_fields of this TFModule.  # noqa: E501


        :return: The contains_overridable_fields of this TFModule.  # noqa: E501
        :rtype: bool
        """
        return self._contains_overridable_fields

    @contains_overridable_fields.setter
    def contains_overridable_fields(self, contains_overridable_fields):
        """Sets the contains_overridable_fields of this TFModule.


        :param contains_overridable_fields: The contains_overridable_fields of this TFModule.  # noqa: E501
        :type: bool
        """

        self._contains_overridable_fields = contains_overridable_fields

    @property
    def tags(self):
        """Gets the tags of this TFModule.  # noqa: E501


        :return: The tags of this TFModule.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TFModule.


        :param tags: The tags of this TFModule.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def iac_tool(self):
        """Gets the iac_tool of this TFModule.  # noqa: E501


        :return: The iac_tool of this TFModule.  # noqa: E501
        :rtype: list[str]
        """
        return self._iac_tool

    @iac_tool.setter
    def iac_tool(self, iac_tool):
        """Sets the iac_tool of this TFModule.


        :param iac_tool: The iac_tool of this TFModule.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["TERRAFORM", "OPENTOFU"]  # noqa: E501
        if not set(iac_tool).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `iac_tool` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(iac_tool) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._iac_tool = iac_tool

    @property
    def module_group_id(self):
        """Gets the module_group_id of this TFModule.  # noqa: E501


        :return: The module_group_id of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._module_group_id

    @module_group_id.setter
    def module_group_id(self, module_group_id):
        """Sets the module_group_id of this TFModule.


        :param module_group_id: The module_group_id of this TFModule.  # noqa: E501
        :type: str
        """

        self._module_group_id = module_group_id

    @property
    def critical_resource(self):
        """Gets the critical_resource of this TFModule.  # noqa: E501


        :return: The critical_resource of this TFModule.  # noqa: E501
        :rtype: bool
        """
        return self._critical_resource

    @critical_resource.setter
    def critical_resource(self, critical_resource):
        """Sets the critical_resource of this TFModule.


        :param critical_resource: The critical_resource of this TFModule.  # noqa: E501
        :type: bool
        """

        self._critical_resource = critical_resource

    @property
    def enable_kubernetes_explorer(self):
        """Gets the enable_kubernetes_explorer of this TFModule.  # noqa: E501


        :return: The enable_kubernetes_explorer of this TFModule.  # noqa: E501
        :rtype: bool
        """
        return self._enable_kubernetes_explorer

    @enable_kubernetes_explorer.setter
    def enable_kubernetes_explorer(self, enable_kubernetes_explorer):
        """Sets the enable_kubernetes_explorer of this TFModule.


        :param enable_kubernetes_explorer: The enable_kubernetes_explorer of this TFModule.  # noqa: E501
        :type: bool
        """

        self._enable_kubernetes_explorer = enable_kubernetes_explorer

    @property
    def name_length_limit(self):
        """Gets the name_length_limit of this TFModule.  # noqa: E501

        Maximum allowed length for resource names using this module  # noqa: E501

        :return: The name_length_limit of this TFModule.  # noqa: E501
        :rtype: int
        """
        return self._name_length_limit

    @name_length_limit.setter
    def name_length_limit(self, name_length_limit):
        """Sets the name_length_limit of this TFModule.

        Maximum allowed length for resource names using this module  # noqa: E501

        :param name_length_limit: The name_length_limit of this TFModule.  # noqa: E501
        :type: int
        """

        self._name_length_limit = name_length_limit

    @property
    def spec_modeled(self):
        """Gets the spec_modeled of this TFModule.  # noqa: E501


        :return: The spec_modeled of this TFModule.  # noqa: E501
        :rtype: bool
        """
        return self._spec_modeled

    @spec_modeled.setter
    def spec_modeled(self, spec_modeled):
        """Sets the spec_modeled of this TFModule.


        :param spec_modeled: The spec_modeled of this TFModule.  # noqa: E501
        :type: bool
        """

        self._spec_modeled = spec_modeled

    @property
    def feature_branch(self):
        """Gets the feature_branch of this TFModule.  # noqa: E501


        :return: The feature_branch of this TFModule.  # noqa: E501
        :rtype: bool
        """
        return self._feature_branch

    @feature_branch.setter
    def feature_branch(self, feature_branch):
        """Sets the feature_branch of this TFModule.


        :param feature_branch: The feature_branch of this TFModule.  # noqa: E501
        :type: bool
        """

        self._feature_branch = feature_branch

    @property
    def change_log(self):
        """Gets the change_log of this TFModule.  # noqa: E501


        :return: The change_log of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._change_log

    @change_log.setter
    def change_log(self, change_log):
        """Sets the change_log of this TFModule.


        :param change_log: The change_log of this TFModule.  # noqa: E501
        :type: str
        """

        self._change_log = change_log

    @property
    def versioning_key(self):
        """Gets the versioning_key of this TFModule.  # noqa: E501


        :return: The versioning_key of this TFModule.  # noqa: E501
        :rtype: str
        """
        return self._versioning_key

    @versioning_key.setter
    def versioning_key(self, versioning_key):
        """Sets the versioning_key of this TFModule.


        :param versioning_key: The versioning_key of this TFModule.  # noqa: E501
        :type: str
        """

        self._versioning_key = versioning_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TFModule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TFModule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
