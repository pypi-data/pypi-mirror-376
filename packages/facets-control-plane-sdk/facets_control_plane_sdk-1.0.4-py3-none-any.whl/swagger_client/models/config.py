# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Config(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requires_sign_off': 'bool',
        'auto_promote_artifact': 'bool'
    }

    attribute_map = {
        'requires_sign_off': 'requiresSignOff',
        'auto_promote_artifact': 'autoPromoteArtifact'
    }

    def __init__(self, requires_sign_off=None, auto_promote_artifact=None):  # noqa: E501
        """Config - a model defined in Swagger"""  # noqa: E501
        self._requires_sign_off = None
        self._auto_promote_artifact = None
        self.discriminator = None
        if requires_sign_off is not None:
            self.requires_sign_off = requires_sign_off
        if auto_promote_artifact is not None:
            self.auto_promote_artifact = auto_promote_artifact

    @property
    def requires_sign_off(self):
        """Gets the requires_sign_off of this Config.  # noqa: E501


        :return: The requires_sign_off of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._requires_sign_off

    @requires_sign_off.setter
    def requires_sign_off(self, requires_sign_off):
        """Sets the requires_sign_off of this Config.


        :param requires_sign_off: The requires_sign_off of this Config.  # noqa: E501
        :type: bool
        """

        self._requires_sign_off = requires_sign_off

    @property
    def auto_promote_artifact(self):
        """Gets the auto_promote_artifact of this Config.  # noqa: E501


        :return: The auto_promote_artifact of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._auto_promote_artifact

    @auto_promote_artifact.setter
    def auto_promote_artifact(self, auto_promote_artifact):
        """Sets the auto_promote_artifact of this Config.


        :param auto_promote_artifact: The auto_promote_artifact of this Config.  # noqa: E501
        :type: bool
        """

        self._auto_promote_artifact = auto_promote_artifact

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Config, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Config):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
