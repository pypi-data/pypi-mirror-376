# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TopologySpreadConstraint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label_selector': 'LabelSelector',
        'match_label_keys': 'list[str]',
        'max_skew': 'int',
        'min_domains': 'int',
        'node_affinity_policy': 'str',
        'node_taints_policy': 'str',
        'topology_key': 'str',
        'when_unsatisfiable': 'str'
    }

    attribute_map = {
        'label_selector': 'labelSelector',
        'match_label_keys': 'matchLabelKeys',
        'max_skew': 'maxSkew',
        'min_domains': 'minDomains',
        'node_affinity_policy': 'nodeAffinityPolicy',
        'node_taints_policy': 'nodeTaintsPolicy',
        'topology_key': 'topologyKey',
        'when_unsatisfiable': 'whenUnsatisfiable'
    }

    def __init__(self, label_selector=None, match_label_keys=None, max_skew=None, min_domains=None, node_affinity_policy=None, node_taints_policy=None, topology_key=None, when_unsatisfiable=None):  # noqa: E501
        """TopologySpreadConstraint - a model defined in Swagger"""  # noqa: E501
        self._label_selector = None
        self._match_label_keys = None
        self._max_skew = None
        self._min_domains = None
        self._node_affinity_policy = None
        self._node_taints_policy = None
        self._topology_key = None
        self._when_unsatisfiable = None
        self.discriminator = None
        if label_selector is not None:
            self.label_selector = label_selector
        if match_label_keys is not None:
            self.match_label_keys = match_label_keys
        if max_skew is not None:
            self.max_skew = max_skew
        if min_domains is not None:
            self.min_domains = min_domains
        if node_affinity_policy is not None:
            self.node_affinity_policy = node_affinity_policy
        if node_taints_policy is not None:
            self.node_taints_policy = node_taints_policy
        if topology_key is not None:
            self.topology_key = topology_key
        if when_unsatisfiable is not None:
            self.when_unsatisfiable = when_unsatisfiable

    @property
    def label_selector(self):
        """Gets the label_selector of this TopologySpreadConstraint.  # noqa: E501


        :return: The label_selector of this TopologySpreadConstraint.  # noqa: E501
        :rtype: LabelSelector
        """
        return self._label_selector

    @label_selector.setter
    def label_selector(self, label_selector):
        """Sets the label_selector of this TopologySpreadConstraint.


        :param label_selector: The label_selector of this TopologySpreadConstraint.  # noqa: E501
        :type: LabelSelector
        """

        self._label_selector = label_selector

    @property
    def match_label_keys(self):
        """Gets the match_label_keys of this TopologySpreadConstraint.  # noqa: E501


        :return: The match_label_keys of this TopologySpreadConstraint.  # noqa: E501
        :rtype: list[str]
        """
        return self._match_label_keys

    @match_label_keys.setter
    def match_label_keys(self, match_label_keys):
        """Sets the match_label_keys of this TopologySpreadConstraint.


        :param match_label_keys: The match_label_keys of this TopologySpreadConstraint.  # noqa: E501
        :type: list[str]
        """

        self._match_label_keys = match_label_keys

    @property
    def max_skew(self):
        """Gets the max_skew of this TopologySpreadConstraint.  # noqa: E501


        :return: The max_skew of this TopologySpreadConstraint.  # noqa: E501
        :rtype: int
        """
        return self._max_skew

    @max_skew.setter
    def max_skew(self, max_skew):
        """Sets the max_skew of this TopologySpreadConstraint.


        :param max_skew: The max_skew of this TopologySpreadConstraint.  # noqa: E501
        :type: int
        """

        self._max_skew = max_skew

    @property
    def min_domains(self):
        """Gets the min_domains of this TopologySpreadConstraint.  # noqa: E501


        :return: The min_domains of this TopologySpreadConstraint.  # noqa: E501
        :rtype: int
        """
        return self._min_domains

    @min_domains.setter
    def min_domains(self, min_domains):
        """Sets the min_domains of this TopologySpreadConstraint.


        :param min_domains: The min_domains of this TopologySpreadConstraint.  # noqa: E501
        :type: int
        """

        self._min_domains = min_domains

    @property
    def node_affinity_policy(self):
        """Gets the node_affinity_policy of this TopologySpreadConstraint.  # noqa: E501


        :return: The node_affinity_policy of this TopologySpreadConstraint.  # noqa: E501
        :rtype: str
        """
        return self._node_affinity_policy

    @node_affinity_policy.setter
    def node_affinity_policy(self, node_affinity_policy):
        """Sets the node_affinity_policy of this TopologySpreadConstraint.


        :param node_affinity_policy: The node_affinity_policy of this TopologySpreadConstraint.  # noqa: E501
        :type: str
        """

        self._node_affinity_policy = node_affinity_policy

    @property
    def node_taints_policy(self):
        """Gets the node_taints_policy of this TopologySpreadConstraint.  # noqa: E501


        :return: The node_taints_policy of this TopologySpreadConstraint.  # noqa: E501
        :rtype: str
        """
        return self._node_taints_policy

    @node_taints_policy.setter
    def node_taints_policy(self, node_taints_policy):
        """Sets the node_taints_policy of this TopologySpreadConstraint.


        :param node_taints_policy: The node_taints_policy of this TopologySpreadConstraint.  # noqa: E501
        :type: str
        """

        self._node_taints_policy = node_taints_policy

    @property
    def topology_key(self):
        """Gets the topology_key of this TopologySpreadConstraint.  # noqa: E501


        :return: The topology_key of this TopologySpreadConstraint.  # noqa: E501
        :rtype: str
        """
        return self._topology_key

    @topology_key.setter
    def topology_key(self, topology_key):
        """Sets the topology_key of this TopologySpreadConstraint.


        :param topology_key: The topology_key of this TopologySpreadConstraint.  # noqa: E501
        :type: str
        """

        self._topology_key = topology_key

    @property
    def when_unsatisfiable(self):
        """Gets the when_unsatisfiable of this TopologySpreadConstraint.  # noqa: E501


        :return: The when_unsatisfiable of this TopologySpreadConstraint.  # noqa: E501
        :rtype: str
        """
        return self._when_unsatisfiable

    @when_unsatisfiable.setter
    def when_unsatisfiable(self, when_unsatisfiable):
        """Sets the when_unsatisfiable of this TopologySpreadConstraint.


        :param when_unsatisfiable: The when_unsatisfiable of this TopologySpreadConstraint.  # noqa: E501
        :type: str
        """

        self._when_unsatisfiable = when_unsatisfiable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopologySpreadConstraint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopologySpreadConstraint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
