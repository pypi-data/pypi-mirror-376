# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateWorkspaceNewBranchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workspace_name': 'str',
        'source_branch': 'str',
        'new_branch': 'str'
    }

    attribute_map = {
        'workspace_name': 'workspaceName',
        'source_branch': 'sourceBranch',
        'new_branch': 'newBranch'
    }

    def __init__(self, workspace_name=None, source_branch=None, new_branch=None):  # noqa: E501
        """CreateWorkspaceNewBranchRequest - a model defined in Swagger"""  # noqa: E501
        self._workspace_name = None
        self._source_branch = None
        self._new_branch = None
        self.discriminator = None
        self.workspace_name = workspace_name
        self.source_branch = source_branch
        self.new_branch = new_branch

    @property
    def workspace_name(self):
        """Gets the workspace_name of this CreateWorkspaceNewBranchRequest.  # noqa: E501


        :return: The workspace_name of this CreateWorkspaceNewBranchRequest.  # noqa: E501
        :rtype: str
        """
        return self._workspace_name

    @workspace_name.setter
    def workspace_name(self, workspace_name):
        """Sets the workspace_name of this CreateWorkspaceNewBranchRequest.


        :param workspace_name: The workspace_name of this CreateWorkspaceNewBranchRequest.  # noqa: E501
        :type: str
        """
        if workspace_name is None:
            raise ValueError("Invalid value for `workspace_name`, must not be `None`")  # noqa: E501

        self._workspace_name = workspace_name

    @property
    def source_branch(self):
        """Gets the source_branch of this CreateWorkspaceNewBranchRequest.  # noqa: E501


        :return: The source_branch of this CreateWorkspaceNewBranchRequest.  # noqa: E501
        :rtype: str
        """
        return self._source_branch

    @source_branch.setter
    def source_branch(self, source_branch):
        """Sets the source_branch of this CreateWorkspaceNewBranchRequest.


        :param source_branch: The source_branch of this CreateWorkspaceNewBranchRequest.  # noqa: E501
        :type: str
        """
        if source_branch is None:
            raise ValueError("Invalid value for `source_branch`, must not be `None`")  # noqa: E501

        self._source_branch = source_branch

    @property
    def new_branch(self):
        """Gets the new_branch of this CreateWorkspaceNewBranchRequest.  # noqa: E501


        :return: The new_branch of this CreateWorkspaceNewBranchRequest.  # noqa: E501
        :rtype: str
        """
        return self._new_branch

    @new_branch.setter
    def new_branch(self, new_branch):
        """Sets the new_branch of this CreateWorkspaceNewBranchRequest.


        :param new_branch: The new_branch of this CreateWorkspaceNewBranchRequest.  # noqa: E501
        :type: str
        """
        if new_branch is None:
            raise ValueError("Invalid value for `new_branch`, must not be `None`")  # noqa: E501

        self._new_branch = new_branch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateWorkspaceNewBranchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateWorkspaceNewBranchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
