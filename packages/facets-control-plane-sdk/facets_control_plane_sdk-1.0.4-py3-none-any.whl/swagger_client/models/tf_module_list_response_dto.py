# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TFModuleListResponseDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_by': 'str',
        'creation_date': 'datetime',
        'last_modified_date': 'datetime',
        'last_modified_by': 'str',
        'intent_details': 'IntentResponseDTO',
        'flavor': 'str',
        'version': 'str',
        'clouds': 'list[str]',
        'source': 'str',
        'stage': 'str',
        'preview_module_id': 'str',
        'type': 'str',
        'tags': 'list[str]',
        'git_url': 'str',
        'git_ref': 'str',
        'preview_git_url': 'str',
        'preview_git_ref': 'str',
        'iac_tool': 'list[str]',
        'feature_branch': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'created_by': 'createdBy',
        'creation_date': 'creationDate',
        'last_modified_date': 'lastModifiedDate',
        'last_modified_by': 'lastModifiedBy',
        'intent_details': 'intentDetails',
        'flavor': 'flavor',
        'version': 'version',
        'clouds': 'clouds',
        'source': 'source',
        'stage': 'stage',
        'preview_module_id': 'previewModuleId',
        'type': 'type',
        'tags': 'tags',
        'git_url': 'gitUrl',
        'git_ref': 'gitRef',
        'preview_git_url': 'previewGitUrl',
        'preview_git_ref': 'previewGitRef',
        'iac_tool': 'iacTool',
        'feature_branch': 'featureBranch'
    }

    def __init__(self, id=None, created_by=None, creation_date=None, last_modified_date=None, last_modified_by=None, intent_details=None, flavor=None, version=None, clouds=None, source=None, stage=None, preview_module_id=None, type=None, tags=None, git_url=None, git_ref=None, preview_git_url=None, preview_git_ref=None, iac_tool=None, feature_branch=None):  # noqa: E501
        """TFModuleListResponseDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_by = None
        self._creation_date = None
        self._last_modified_date = None
        self._last_modified_by = None
        self._intent_details = None
        self._flavor = None
        self._version = None
        self._clouds = None
        self._source = None
        self._stage = None
        self._preview_module_id = None
        self._type = None
        self._tags = None
        self._git_url = None
        self._git_ref = None
        self._preview_git_url = None
        self._preview_git_ref = None
        self._iac_tool = None
        self._feature_branch = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_by is not None:
            self.created_by = created_by
        if creation_date is not None:
            self.creation_date = creation_date
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if intent_details is not None:
            self.intent_details = intent_details
        if flavor is not None:
            self.flavor = flavor
        if version is not None:
            self.version = version
        if clouds is not None:
            self.clouds = clouds
        if source is not None:
            self.source = source
        if stage is not None:
            self.stage = stage
        if preview_module_id is not None:
            self.preview_module_id = preview_module_id
        if type is not None:
            self.type = type
        if tags is not None:
            self.tags = tags
        if git_url is not None:
            self.git_url = git_url
        if git_ref is not None:
            self.git_ref = git_ref
        if preview_git_url is not None:
            self.preview_git_url = preview_git_url
        if preview_git_ref is not None:
            self.preview_git_ref = preview_git_ref
        if iac_tool is not None:
            self.iac_tool = iac_tool
        if feature_branch is not None:
            self.feature_branch = feature_branch

    @property
    def id(self):
        """Gets the id of this TFModuleListResponseDTO.  # noqa: E501


        :return: The id of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TFModuleListResponseDTO.


        :param id: The id of this TFModuleListResponseDTO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_by(self):
        """Gets the created_by of this TFModuleListResponseDTO.  # noqa: E501


        :return: The created_by of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TFModuleListResponseDTO.


        :param created_by: The created_by of this TFModuleListResponseDTO.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def creation_date(self):
        """Gets the creation_date of this TFModuleListResponseDTO.  # noqa: E501


        :return: The creation_date of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this TFModuleListResponseDTO.


        :param creation_date: The creation_date of this TFModuleListResponseDTO.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this TFModuleListResponseDTO.  # noqa: E501


        :return: The last_modified_date of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this TFModuleListResponseDTO.


        :param last_modified_date: The last_modified_date of this TFModuleListResponseDTO.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this TFModuleListResponseDTO.  # noqa: E501


        :return: The last_modified_by of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this TFModuleListResponseDTO.


        :param last_modified_by: The last_modified_by of this TFModuleListResponseDTO.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def intent_details(self):
        """Gets the intent_details of this TFModuleListResponseDTO.  # noqa: E501


        :return: The intent_details of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: IntentResponseDTO
        """
        return self._intent_details

    @intent_details.setter
    def intent_details(self, intent_details):
        """Sets the intent_details of this TFModuleListResponseDTO.


        :param intent_details: The intent_details of this TFModuleListResponseDTO.  # noqa: E501
        :type: IntentResponseDTO
        """

        self._intent_details = intent_details

    @property
    def flavor(self):
        """Gets the flavor of this TFModuleListResponseDTO.  # noqa: E501

        Flavor of the TF Module  # noqa: E501

        :return: The flavor of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: str
        """
        return self._flavor

    @flavor.setter
    def flavor(self, flavor):
        """Sets the flavor of this TFModuleListResponseDTO.

        Flavor of the TF Module  # noqa: E501

        :param flavor: The flavor of this TFModuleListResponseDTO.  # noqa: E501
        :type: str
        """

        self._flavor = flavor

    @property
    def version(self):
        """Gets the version of this TFModuleListResponseDTO.  # noqa: E501

        Version of the TF Module  # noqa: E501

        :return: The version of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TFModuleListResponseDTO.

        Version of the TF Module  # noqa: E501

        :param version: The version of this TFModuleListResponseDTO.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def clouds(self):
        """Gets the clouds of this TFModuleListResponseDTO.  # noqa: E501

        Supported cloud providers  # noqa: E501

        :return: The clouds of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._clouds

    @clouds.setter
    def clouds(self, clouds):
        """Sets the clouds of this TFModuleListResponseDTO.

        Supported cloud providers  # noqa: E501

        :param clouds: The clouds of this TFModuleListResponseDTO.  # noqa: E501
        :type: list[str]
        """

        self._clouds = clouds

    @property
    def source(self):
        """Gets the source of this TFModuleListResponseDTO.  # noqa: E501

        Source of the TF Module  # noqa: E501

        :return: The source of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TFModuleListResponseDTO.

        Source of the TF Module  # noqa: E501

        :param source: The source of this TFModuleListResponseDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["BUILT_IN", "CUSTOM"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def stage(self):
        """Gets the stage of this TFModuleListResponseDTO.  # noqa: E501

        Stage of the TF Module in its lifecycle  # noqa: E501

        :return: The stage of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this TFModuleListResponseDTO.

        Stage of the TF Module in its lifecycle  # noqa: E501

        :param stage: The stage of this TFModuleListResponseDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["PREVIEW", "PUBLISHED"]  # noqa: E501
        if stage not in allowed_values:
            raise ValueError(
                "Invalid value for `stage` ({0}), must be one of {1}"  # noqa: E501
                .format(stage, allowed_values)
            )

        self._stage = stage

    @property
    def preview_module_id(self):
        """Gets the preview_module_id of this TFModuleListResponseDTO.  # noqa: E501


        :return: The preview_module_id of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: str
        """
        return self._preview_module_id

    @preview_module_id.setter
    def preview_module_id(self, preview_module_id):
        """Sets the preview_module_id of this TFModuleListResponseDTO.


        :param preview_module_id: The preview_module_id of this TFModuleListResponseDTO.  # noqa: E501
        :type: str
        """

        self._preview_module_id = preview_module_id

    @property
    def type(self):
        """Gets the type of this TFModuleListResponseDTO.  # noqa: E501

        Type of the TF Module  # noqa: E501

        :return: The type of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TFModuleListResponseDTO.

        Type of the TF Module  # noqa: E501

        :param type: The type of this TFModuleListResponseDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["SIMPLE", "ADD_ON"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def tags(self):
        """Gets the tags of this TFModuleListResponseDTO.  # noqa: E501

        Tags associated with the module  # noqa: E501

        :return: The tags of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TFModuleListResponseDTO.

        Tags associated with the module  # noqa: E501

        :param tags: The tags of this TFModuleListResponseDTO.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def git_url(self):
        """Gets the git_url of this TFModuleListResponseDTO.  # noqa: E501


        :return: The git_url of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: str
        """
        return self._git_url

    @git_url.setter
    def git_url(self, git_url):
        """Sets the git_url of this TFModuleListResponseDTO.


        :param git_url: The git_url of this TFModuleListResponseDTO.  # noqa: E501
        :type: str
        """

        self._git_url = git_url

    @property
    def git_ref(self):
        """Gets the git_ref of this TFModuleListResponseDTO.  # noqa: E501


        :return: The git_ref of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: str
        """
        return self._git_ref

    @git_ref.setter
    def git_ref(self, git_ref):
        """Sets the git_ref of this TFModuleListResponseDTO.


        :param git_ref: The git_ref of this TFModuleListResponseDTO.  # noqa: E501
        :type: str
        """

        self._git_ref = git_ref

    @property
    def preview_git_url(self):
        """Gets the preview_git_url of this TFModuleListResponseDTO.  # noqa: E501


        :return: The preview_git_url of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: str
        """
        return self._preview_git_url

    @preview_git_url.setter
    def preview_git_url(self, preview_git_url):
        """Sets the preview_git_url of this TFModuleListResponseDTO.


        :param preview_git_url: The preview_git_url of this TFModuleListResponseDTO.  # noqa: E501
        :type: str
        """

        self._preview_git_url = preview_git_url

    @property
    def preview_git_ref(self):
        """Gets the preview_git_ref of this TFModuleListResponseDTO.  # noqa: E501


        :return: The preview_git_ref of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: str
        """
        return self._preview_git_ref

    @preview_git_ref.setter
    def preview_git_ref(self, preview_git_ref):
        """Sets the preview_git_ref of this TFModuleListResponseDTO.


        :param preview_git_ref: The preview_git_ref of this TFModuleListResponseDTO.  # noqa: E501
        :type: str
        """

        self._preview_git_ref = preview_git_ref

    @property
    def iac_tool(self):
        """Gets the iac_tool of this TFModuleListResponseDTO.  # noqa: E501


        :return: The iac_tool of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._iac_tool

    @iac_tool.setter
    def iac_tool(self, iac_tool):
        """Sets the iac_tool of this TFModuleListResponseDTO.


        :param iac_tool: The iac_tool of this TFModuleListResponseDTO.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["TERRAFORM", "OPENTOFU"]  # noqa: E501
        if not set(iac_tool).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `iac_tool` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(iac_tool) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._iac_tool = iac_tool

    @property
    def feature_branch(self):
        """Gets the feature_branch of this TFModuleListResponseDTO.  # noqa: E501


        :return: The feature_branch of this TFModuleListResponseDTO.  # noqa: E501
        :rtype: bool
        """
        return self._feature_branch

    @feature_branch.setter
    def feature_branch(self, feature_branch):
        """Sets the feature_branch of this TFModuleListResponseDTO.


        :param feature_branch: The feature_branch of this TFModuleListResponseDTO.  # noqa: E501
        :type: bool
        """

        self._feature_branch = feature_branch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TFModuleListResponseDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TFModuleListResponseDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
