# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UiBlueprintDesignerControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_variables(self, body, stack_name, **kwargs):  # noqa: E501
        """add_variables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_variables(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, VariableDetails) body: (required)
        :param str stack_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_variables_with_http_info(body, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.add_variables_with_http_info(body, stack_name, **kwargs)  # noqa: E501
            return data

    def add_variables_with_http_info(self, body, stack_name, **kwargs):  # noqa: E501
        """add_variables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_variables_with_http_info(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, VariableDetails) body: (required)
        :param str stack_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_variables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_variables`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `add_variables`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/variables', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apply_template(self, stack_name, template_name, **kwargs):  # noqa: E501
        """apply_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_template(stack_name, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str template_name: (required)
        :param str prefix:
        :param str suffix:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apply_template_with_http_info(stack_name, template_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apply_template_with_http_info(stack_name, template_name, **kwargs)  # noqa: E501
            return data

    def apply_template_with_http_info(self, stack_name, template_name, **kwargs):  # noqa: E501
        """apply_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_template_with_http_info(stack_name, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str template_name: (required)
        :param str prefix:
        :param str suffix:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'template_name', 'prefix', 'suffix']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apply_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `apply_template`")  # noqa: E501
        # verify the required parameter 'template_name' is set
        if ('template_name' not in params or
                params['template_name'] is None):
            raise ValueError("Missing the required parameter `template_name` when calling `apply_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'template_name' in params:
            path_params['templateName'] = params['template_name']  # noqa: E501

        query_params = []
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501
        if 'suffix' in params:
            query_params.append(('suffix', params['suffix']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/{templateName}/apply', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_edit_disabled_for_resources(self, body, stack_name, **kwargs):  # noqa: E501
        """bulk_edit_disabled_for_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_edit_disabled_for_resources(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceEnableDisableRequest] body: (required)
        :param str stack_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_edit_disabled_for_resources_with_http_info(body, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_edit_disabled_for_resources_with_http_info(body, stack_name, **kwargs)  # noqa: E501
            return data

    def bulk_edit_disabled_for_resources_with_http_info(self, body, stack_name, **kwargs):  # noqa: E501
        """bulk_edit_disabled_for_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_edit_disabled_for_resources_with_http_info(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceEnableDisableRequest] body: (required)
        :param str stack_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_edit_disabled_for_resources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bulk_edit_disabled_for_resources`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `bulk_edit_disabled_for_resources`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/resource-enable-disable', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_edit_disabled_for_resources1(self, body, stack_name, branch, **kwargs):  # noqa: E501
        """bulk_edit_disabled_for_resources1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_edit_disabled_for_resources1(body, stack_name, branch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceEnableDisableRequest] body: (required)
        :param str stack_name: (required)
        :param str branch: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_edit_disabled_for_resources1_with_http_info(body, stack_name, branch, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_edit_disabled_for_resources1_with_http_info(body, stack_name, branch, **kwargs)  # noqa: E501
            return data

    def bulk_edit_disabled_for_resources1_with_http_info(self, body, stack_name, branch, **kwargs):  # noqa: E501
        """bulk_edit_disabled_for_resources1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_edit_disabled_for_resources1_with_http_info(body, stack_name, branch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceEnableDisableRequest] body: (required)
        :param str stack_name: (required)
        :param str branch: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name', 'branch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_edit_disabled_for_resources1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bulk_edit_disabled_for_resources1`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `bulk_edit_disabled_for_resources1`")  # noqa: E501
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `bulk_edit_disabled_for_resources1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/branch/{branch}/resource-enable-disable', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_edit_inherit_from_base_for_resources(self, body, stack_name, branch, **kwargs):  # noqa: E501
        """bulk_edit_inherit_from_base_for_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_edit_inherit_from_base_for_resources(body, stack_name, branch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceInheritFromBaseRequest] body: (required)
        :param str stack_name: (required)
        :param str branch: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_edit_inherit_from_base_for_resources_with_http_info(body, stack_name, branch, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_edit_inherit_from_base_for_resources_with_http_info(body, stack_name, branch, **kwargs)  # noqa: E501
            return data

    def bulk_edit_inherit_from_base_for_resources_with_http_info(self, body, stack_name, branch, **kwargs):  # noqa: E501
        """bulk_edit_inherit_from_base_for_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_edit_inherit_from_base_for_resources_with_http_info(body, stack_name, branch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceInheritFromBaseRequest] body: (required)
        :param str stack_name: (required)
        :param str branch: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name', 'branch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_edit_inherit_from_base_for_resources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bulk_edit_inherit_from_base_for_resources`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `bulk_edit_inherit_from_base_for_resources`")  # noqa: E501
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `bulk_edit_inherit_from_base_for_resources`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/branch/{branch}/resource-inherit-from-base', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_branch(self, stack_name, branch, **kwargs):  # noqa: E501
        """create_branch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_branch(stack_name, branch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str branch: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_branch_with_http_info(stack_name, branch, **kwargs)  # noqa: E501
        else:
            (data) = self.create_branch_with_http_info(stack_name, branch, **kwargs)  # noqa: E501
            return data

    def create_branch_with_http_info(self, stack_name, branch, **kwargs):  # noqa: E501
        """create_branch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_branch_with_http_info(stack_name, branch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str branch: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'branch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_branch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `create_branch`")  # noqa: E501
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `create_branch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/{branch}/create-branch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_resources(self, body, stack_name, branch, **kwargs):  # noqa: E501
        """create_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_resources(body, stack_name, branch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceFileRequest] body: (required)
        :param str stack_name: (required)
        :param str branch: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_resources_with_http_info(body, stack_name, branch, **kwargs)  # noqa: E501
        else:
            (data) = self.create_resources_with_http_info(body, stack_name, branch, **kwargs)  # noqa: E501
            return data

    def create_resources_with_http_info(self, body, stack_name, branch, **kwargs):  # noqa: E501
        """create_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_resources_with_http_info(body, stack_name, branch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceFileRequest] body: (required)
        :param str stack_name: (required)
        :param str branch: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name', 'branch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_resources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_resources`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `create_resources`")  # noqa: E501
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `create_resources`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/branch/{branch}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_resources(self, body, stack_name, branch, **kwargs):  # noqa: E501
        """delete_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_resources(body, stack_name, branch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceFileRequest] body: (required)
        :param str stack_name: (required)
        :param str branch: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_resources_with_http_info(body, stack_name, branch, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_resources_with_http_info(body, stack_name, branch, **kwargs)  # noqa: E501
            return data

    def delete_resources_with_http_info(self, body, stack_name, branch, **kwargs):  # noqa: E501
        """delete_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_resources_with_http_info(body, stack_name, branch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceFileRequest] body: (required)
        :param str stack_name: (required)
        :param str branch: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name', 'branch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_resources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_resources`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `delete_resources`")  # noqa: E501
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `delete_resources`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/branch/{branch}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_variables(self, body, stack_name, **kwargs):  # noqa: E501
        """delete_variables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_variables(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: (required)
        :param str stack_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_variables_with_http_info(body, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_variables_with_http_info(body, stack_name, **kwargs)  # noqa: E501
            return data

    def delete_variables_with_http_info(self, body, stack_name, **kwargs):  # noqa: E501
        """delete_variables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_variables_with_http_info(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: (required)
        :param str stack_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_variables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_variables`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `delete_variables`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/variables', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_add_on_modules(self, stack_name, resource_type, resource_name, **kwargs):  # noqa: E501
        """Get add ons for this resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_add_on_modules(stack_name, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str resource_type: (required)
        :param str resource_name: (required)
        :param str cloud:
        :return: list[AddOnDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_add_on_modules_with_http_info(stack_name, resource_type, resource_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_add_on_modules_with_http_info(stack_name, resource_type, resource_name, **kwargs)  # noqa: E501
            return data

    def get_add_on_modules_with_http_info(self, stack_name, resource_type, resource_name, **kwargs):  # noqa: E501
        """Get add ons for this resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_add_on_modules_with_http_info(stack_name, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str resource_type: (required)
        :param str resource_name: (required)
        :param str cloud:
        :return: list[AddOnDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'resource_type', 'resource_name', 'cloud']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_add_on_modules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_add_on_modules`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `get_add_on_modules`")  # noqa: E501
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `get_add_on_modules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501

        query_params = []
        if 'cloud' in params:
            query_params.append(('cloud', params['cloud']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/add-ons', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AddOnDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_autocomplete_data(self, stack_name, **kwargs):  # noqa: E501
        """get_autocomplete_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_autocomplete_data(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :return: AutocompleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_autocomplete_data_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_autocomplete_data_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def get_autocomplete_data_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """get_autocomplete_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_autocomplete_data_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :return: AutocompleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_autocomplete_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_autocomplete_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/ref-autocomplete-data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutocompleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_autocomplete_data_v2(self, stack_name, **kwargs):  # noqa: E501
        """Get autocomplete data with module-specific output trees  # noqa: E501

        Returns module-specific output trees for each resource with automatic fallback to intent-level outputs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_autocomplete_data_v2(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :return: AutocompleteResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_autocomplete_data_v2_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_autocomplete_data_v2_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def get_autocomplete_data_v2_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """Get autocomplete data with module-specific output trees  # noqa: E501

        Returns module-specific output trees for each resource with automatic fallback to intent-level outputs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_autocomplete_data_v2_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :return: AutocompleteResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_autocomplete_data_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_autocomplete_data_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/ref-autocomplete-data-v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutocompleteResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_designer_resources(self, stack_name, branch_name, **kwargs):  # noqa: E501
        """get_designer_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_designer_resources(stack_name, branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str branch_name: (required)
        :return: list[BlueprintFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_designer_resources_with_http_info(stack_name, branch_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_designer_resources_with_http_info(stack_name, branch_name, **kwargs)  # noqa: E501
            return data

    def get_designer_resources_with_http_info(self, stack_name, branch_name, **kwargs):  # noqa: E501
        """get_designer_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_designer_resources_with_http_info(stack_name, branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str branch_name: (required)
        :return: list[BlueprintFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'branch_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_designer_resources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_designer_resources`")  # noqa: E501
        # verify the required parameter 'branch_name' is set
        if ('branch_name' not in params or
                params['branch_name'] is None):
            raise ValueError("Missing the required parameter `branch_name` when calling `get_designer_resources`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'branch_name' in params:
            path_params['branchName'] = params['branch_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/{branchName}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BlueprintFile]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_module_inputs(self, stack_name, intent, flavor, **kwargs):  # noqa: E501
        """get_module_inputs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_module_inputs(stack_name, intent, flavor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str intent: (required)
        :param str flavor: (required)
        :param str version:
        :return: dict(str, ModuleInputDTO)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_module_inputs_with_http_info(stack_name, intent, flavor, **kwargs)  # noqa: E501
        else:
            (data) = self.get_module_inputs_with_http_info(stack_name, intent, flavor, **kwargs)  # noqa: E501
            return data

    def get_module_inputs_with_http_info(self, stack_name, intent, flavor, **kwargs):  # noqa: E501
        """get_module_inputs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_module_inputs_with_http_info(stack_name, intent, flavor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str intent: (required)
        :param str flavor: (required)
        :param str version:
        :return: dict(str, ModuleInputDTO)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'intent', 'flavor', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_module_inputs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_module_inputs`")  # noqa: E501
        # verify the required parameter 'intent' is set
        if ('intent' not in params or
                params['intent'] is None):
            raise ValueError("Missing the required parameter `intent` when calling `get_module_inputs`")  # noqa: E501
        # verify the required parameter 'flavor' is set
        if ('flavor' not in params or
                params['flavor'] is None):
            raise ValueError("Missing the required parameter `flavor` when calling `get_module_inputs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'intent' in params:
            path_params['intent'] = params['intent']  # noqa: E501
        if 'flavor' in params:
            path_params['flavor'] = params['flavor']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/intent/{intent}/flavor/{flavor}/input', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, ModuleInputDTO)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pull_requests(self, stack_name, resource_type, resource_name, **kwargs):  # noqa: E501
        """get_pull_requests  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pull_requests(stack_name, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str resource_type: (required)
        :param str resource_name: (required)
        :param str state:
        :param int page_size:
        :param int page_number:
        :param str created_date:
        :param str query:
        :return: ListPullRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pull_requests_with_http_info(stack_name, resource_type, resource_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pull_requests_with_http_info(stack_name, resource_type, resource_name, **kwargs)  # noqa: E501
            return data

    def get_pull_requests_with_http_info(self, stack_name, resource_type, resource_name, **kwargs):  # noqa: E501
        """get_pull_requests  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pull_requests_with_http_info(stack_name, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str resource_type: (required)
        :param str resource_name: (required)
        :param str state:
        :param int page_size:
        :param int page_number:
        :param str created_date:
        :param str query:
        :return: ListPullRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'resource_type', 'resource_name', 'state', 'page_size', 'page_number', 'created_date', 'query']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pull_requests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_pull_requests`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `get_pull_requests`")  # noqa: E501
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `get_pull_requests`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501

        query_params = []
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'created_date' in params:
            query_params.append(('createdDate', params['created_date']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/pulls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListPullRequestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pull_requests1(self, stack_name, **kwargs):  # noqa: E501
        """get_pull_requests1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pull_requests1(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str state:
        :param int page_size:
        :param int page_number:
        :param str created_date:
        :param str query:
        :return: ListPullRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pull_requests1_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pull_requests1_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def get_pull_requests1_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """get_pull_requests1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pull_requests1_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str state:
        :param int page_size:
        :param int page_number:
        :param str created_date:
        :param str query:
        :return: ListPullRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'state', 'page_size', 'page_number', 'created_date', 'query']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pull_requests1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_pull_requests1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'created_date' in params:
            query_params.append(('createdDate', params['created_date']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/pulls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListPullRequestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_schema_metadata(self, **kwargs):  # noqa: E501
        """get_schema_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schema_metadata(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: JsonNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_schema_metadata_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_schema_metadata_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_schema_metadata_with_http_info(self, **kwargs):  # noqa: E501
        """get_schema_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schema_metadata_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: JsonNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_schema_metadata" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/facets-components', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_runs(self, stack_name, **kwargs):  # noqa: E501
        """get_workflow_runs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_runs(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param int page_size:
        :param int page_number:
        :param str workflow_id:
        :param str event:
        :param str status:
        :param str branch:
        :param str actor:
        :return: ListWorkflowRunsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_runs_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_runs_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def get_workflow_runs_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """get_workflow_runs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_runs_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param int page_size:
        :param int page_number:
        :param str workflow_id:
        :param str event:
        :param str status:
        :param str branch:
        :param str actor:
        :return: ListWorkflowRunsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'page_size', 'page_number', 'workflow_id', 'event', 'status', 'branch', 'actor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_runs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_workflow_runs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'workflow_id' in params:
            query_params.append(('workflowId', params['workflow_id']))  # noqa: E501
        if 'event' in params:
            query_params.append(('event', params['event']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'branch' in params:
            query_params.append(('branch', params['branch']))  # noqa: E501
        if 'actor' in params:
            query_params.append(('actor', params['actor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/workflow-runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListWorkflowRunsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_runs1(self, stack_name, resource_type, resource_name, **kwargs):  # noqa: E501
        """get_workflow_runs1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_runs1(stack_name, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str resource_type: (required)
        :param str resource_name: (required)
        :param int page_size:
        :param int page_number:
        :param str workflow_id:
        :param str event:
        :param str status:
        :param str branch:
        :param str actor:
        :return: ListWorkflowRunsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_runs1_with_http_info(stack_name, resource_type, resource_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_runs1_with_http_info(stack_name, resource_type, resource_name, **kwargs)  # noqa: E501
            return data

    def get_workflow_runs1_with_http_info(self, stack_name, resource_type, resource_name, **kwargs):  # noqa: E501
        """get_workflow_runs1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_runs1_with_http_info(stack_name, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str resource_type: (required)
        :param str resource_name: (required)
        :param int page_size:
        :param int page_number:
        :param str workflow_id:
        :param str event:
        :param str status:
        :param str branch:
        :param str actor:
        :return: ListWorkflowRunsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'resource_type', 'resource_name', 'page_size', 'page_number', 'workflow_id', 'event', 'status', 'branch', 'actor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_runs1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_workflow_runs1`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `get_workflow_runs1`")  # noqa: E501
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `get_workflow_runs1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'workflow_id' in params:
            query_params.append(('workflowId', params['workflow_id']))  # noqa: E501
        if 'event' in params:
            query_params.append(('event', params['event']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'branch' in params:
            query_params.append(('branch', params['branch']))  # noqa: E501
        if 'actor' in params:
            query_params.append(('actor', params['actor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workflow-runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListWorkflowRunsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows(self, stack_name, **kwargs):  # noqa: E501
        """get_workflows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflows(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :return: list[Workflow]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def get_workflows_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """get_workflows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflows_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :return: list[Workflow]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_workflows`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/workflows', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Workflow]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows1(self, stack_name, resource_type, resource_name, **kwargs):  # noqa: E501
        """get_workflows1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflows1(stack_name, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str resource_type: (required)
        :param str resource_name: (required)
        :return: list[Workflow]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows1_with_http_info(stack_name, resource_type, resource_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows1_with_http_info(stack_name, resource_type, resource_name, **kwargs)  # noqa: E501
            return data

    def get_workflows1_with_http_info(self, stack_name, resource_type, resource_name, **kwargs):  # noqa: E501
        """get_workflows1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflows1_with_http_info(stack_name, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str resource_type: (required)
        :param str resource_name: (required)
        :return: list[Workflow]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'resource_type', 'resource_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_workflows1`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `get_workflows1`")  # noqa: E501
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `get_workflows1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workflows', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Workflow]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_branches(self, stack_name, resource_type, resource_name, **kwargs):  # noqa: E501
        """list_branches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_branches(stack_name, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str resource_type: (required)
        :param str resource_name: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_branches_with_http_info(stack_name, resource_type, resource_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_branches_with_http_info(stack_name, resource_type, resource_name, **kwargs)  # noqa: E501
            return data

    def list_branches_with_http_info(self, stack_name, resource_type, resource_name, **kwargs):  # noqa: E501
        """list_branches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_branches_with_http_info(stack_name, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str resource_type: (required)
        :param str resource_name: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'resource_type', 'resource_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_branches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `list_branches`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `list_branches`")  # noqa: E501
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `list_branches`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/branch-list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_branches1(self, stack_name, **kwargs):  # noqa: E501
        """list_branches1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_branches1(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :return: BranchDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_branches1_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_branches1_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def list_branches1_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """list_branches1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_branches1_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :return: BranchDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_branches1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `list_branches1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/branch-list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BranchDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_providers_exposed_by_module(self, stack_name, intent, flavor, **kwargs):  # noqa: E501
        """list_providers_exposed_by_module  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_providers_exposed_by_module(stack_name, intent, flavor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str intent: (required)
        :param str flavor: (required)
        :return: list[TFProvider]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_providers_exposed_by_module_with_http_info(stack_name, intent, flavor, **kwargs)  # noqa: E501
        else:
            (data) = self.list_providers_exposed_by_module_with_http_info(stack_name, intent, flavor, **kwargs)  # noqa: E501
            return data

    def list_providers_exposed_by_module_with_http_info(self, stack_name, intent, flavor, **kwargs):  # noqa: E501
        """list_providers_exposed_by_module  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_providers_exposed_by_module_with_http_info(stack_name, intent, flavor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str intent: (required)
        :param str flavor: (required)
        :return: list[TFProvider]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'intent', 'flavor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_providers_exposed_by_module" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `list_providers_exposed_by_module`")  # noqa: E501
        # verify the required parameter 'intent' is set
        if ('intent' not in params or
                params['intent'] is None):
            raise ValueError("Missing the required parameter `intent` when calling `list_providers_exposed_by_module`")  # noqa: E501
        # verify the required parameter 'flavor' is set
        if ('flavor' not in params or
                params['flavor'] is None):
            raise ValueError("Missing the required parameter `flavor` when calling `list_providers_exposed_by_module`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'intent' in params:
            path_params['intent'] = params['intent']  # noqa: E501
        if 'flavor' in params:
            path_params['flavor'] = params['flavor']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/intent/{intent}/flavor/{flavor}/output-providers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TFProvider]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rename_resource(self, body, stack_name, branch, **kwargs):  # noqa: E501
        """rename_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rename_resource(body, stack_name, branch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResourceRenameRequest body: (required)
        :param str stack_name: (required)
        :param str branch: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rename_resource_with_http_info(body, stack_name, branch, **kwargs)  # noqa: E501
        else:
            (data) = self.rename_resource_with_http_info(body, stack_name, branch, **kwargs)  # noqa: E501
            return data

    def rename_resource_with_http_info(self, body, stack_name, branch, **kwargs):  # noqa: E501
        """rename_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rename_resource_with_http_info(body, stack_name, branch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResourceRenameRequest body: (required)
        :param str stack_name: (required)
        :param str branch: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name', 'branch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rename_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `rename_resource`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `rename_resource`")  # noqa: E501
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `rename_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/branch/{branch}/rename', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sync_specified_blueprints_with_templates(self, body, template_name, **kwargs):  # noqa: E501
        """sync_specified_blueprints_with_templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sync_specified_blueprints_with_templates(body, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: (required)
        :param str template_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sync_specified_blueprints_with_templates_with_http_info(body, template_name, **kwargs)  # noqa: E501
        else:
            (data) = self.sync_specified_blueprints_with_templates_with_http_info(body, template_name, **kwargs)  # noqa: E501
            return data

    def sync_specified_blueprints_with_templates_with_http_info(self, body, template_name, **kwargs):  # noqa: E501
        """sync_specified_blueprints_with_templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sync_specified_blueprints_with_templates_with_http_info(body, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: (required)
        :param str template_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'template_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_specified_blueprints_with_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `sync_specified_blueprints_with_templates`")  # noqa: E501
        # verify the required parameter 'template_name' is set
        if ('template_name' not in params or
                params['template_name'] is None):
            raise ValueError("Missing the required parameter `template_name` when calling `sync_specified_blueprints_with_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_name' in params:
            path_params['templateName'] = params['template_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{templateName}/sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_resources(self, body, stack_name, branch, **kwargs):  # noqa: E501
        """update_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_resources(body, stack_name, branch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateBlueprintRequest body: (required)
        :param str stack_name: (required)
        :param str branch: (required)
        :param bool change_affected_resources:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_resources_with_http_info(body, stack_name, branch, **kwargs)  # noqa: E501
        else:
            (data) = self.update_resources_with_http_info(body, stack_name, branch, **kwargs)  # noqa: E501
            return data

    def update_resources_with_http_info(self, body, stack_name, branch, **kwargs):  # noqa: E501
        """update_resources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_resources_with_http_info(body, stack_name, branch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateBlueprintRequest body: (required)
        :param str stack_name: (required)
        :param str branch: (required)
        :param bool change_affected_resources:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name', 'branch', 'change_affected_resources']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_resources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_resources`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `update_resources`")  # noqa: E501
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `update_resources`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501

        query_params = []
        if 'change_affected_resources' in params:
            query_params.append(('changeAffectedResources', params['change_affected_resources']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/branch/{branch}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_variables(self, body, stack_name, **kwargs):  # noqa: E501
        """update_variables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_variables(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, VariableDetails) body: (required)
        :param str stack_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_variables_with_http_info(body, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_variables_with_http_info(body, stack_name, **kwargs)  # noqa: E501
            return data

    def update_variables_with_http_info(self, body, stack_name, **kwargs):  # noqa: E501
        """update_variables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_variables_with_http_info(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, VariableDetails) body: (required)
        :param str stack_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_variables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_variables`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `update_variables`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/variables', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
