# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UiResourceStatusControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_namespaces_in_use_by_dependent_clusters(self, base_cluster_id, **kwargs):  # noqa: E501
        """get_namespaces_in_use_by_dependent_clusters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_namespaces_in_use_by_dependent_clusters(base_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str base_cluster_id: (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_namespaces_in_use_by_dependent_clusters_with_http_info(base_cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_namespaces_in_use_by_dependent_clusters_with_http_info(base_cluster_id, **kwargs)  # noqa: E501
            return data

    def get_namespaces_in_use_by_dependent_clusters_with_http_info(self, base_cluster_id, **kwargs):  # noqa: E501
        """get_namespaces_in_use_by_dependent_clusters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_namespaces_in_use_by_dependent_clusters_with_http_info(base_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str base_cluster_id: (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['base_cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_namespaces_in_use_by_dependent_clusters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'base_cluster_id' is set
        if ('base_cluster_id' not in params or
                params['base_cluster_id'] is None):
            raise ValueError("Missing the required parameter `base_cluster_id` when calling `get_namespaces_in_use_by_dependent_clusters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'base_cluster_id' in params:
            path_params['baseClusterId'] = params['base_cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/resources/{baseClusterId}/base-env-in-use-namespaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, str)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_release_preview(self, cluster_id, **kwargs):  # noqa: E501
        """get_release_preview  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_release_preview(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :return: ReleasePreviewResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_release_preview_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_release_preview_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_release_preview_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """get_release_preview  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_release_preview_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :return: ReleasePreviewResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_release_preview" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_release_preview`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/resources/{clusterId}/release-preview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReleasePreviewResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_resource_status(self, project_name, environment_name, resources, **kwargs):  # noqa: E501
        """get_resource_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resource_status(project_name, environment_name, resources, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: (required)
        :param str environment_name: (required)
        :param dict(str, str) resources: (required)
        :return: ResourceStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_resource_status_with_http_info(project_name, environment_name, resources, **kwargs)  # noqa: E501
        else:
            (data) = self.get_resource_status_with_http_info(project_name, environment_name, resources, **kwargs)  # noqa: E501
            return data

    def get_resource_status_with_http_info(self, project_name, environment_name, resources, **kwargs):  # noqa: E501
        """get_resource_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resource_status_with_http_info(project_name, environment_name, resources, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_name: (required)
        :param str environment_name: (required)
        :param dict(str, str) resources: (required)
        :return: ResourceStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_name', 'environment_name', 'resources']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resource_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_name' is set
        if ('project_name' not in params or
                params['project_name'] is None):
            raise ValueError("Missing the required parameter `project_name` when calling `get_resource_status`")  # noqa: E501
        # verify the required parameter 'environment_name' is set
        if ('environment_name' not in params or
                params['environment_name'] is None):
            raise ValueError("Missing the required parameter `environment_name` when calling `get_resource_status`")  # noqa: E501
        # verify the required parameter 'resources' is set
        if ('resources' not in params or
                params['resources'] is None):
            raise ValueError("Missing the required parameter `resources` when calling `get_resource_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_name' in params:
            path_params['projectName'] = params['project_name']  # noqa: E501
        if 'environment_name' in params:
            path_params['environmentName'] = params['environment_name']  # noqa: E501

        query_params = []
        if 'resources' in params:
            query_params.append(('resources', params['resources']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/resources/{projectName}/{environmentName}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourceStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sync_resource(self, body, **kwargs):  # noqa: E501
        """sync_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sync_resource(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResourceSyncRequest body: (required)
        :return: ResourceStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sync_resource_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.sync_resource_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def sync_resource_with_http_info(self, body, **kwargs):  # noqa: E501
        """sync_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sync_resource_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResourceSyncRequest body: (required)
        :return: ResourceStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `sync_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/resources/sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourceStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
