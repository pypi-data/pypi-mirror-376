# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UiKubernetesExplorerControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def container_logs(self, cluster_id, pod_name, container_name, tail, labels, **kwargs):  # noqa: E501
        """container_logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.container_logs(cluster_id, pod_name, container_name, tail, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str pod_name: (required)
        :param str container_name: (required)
        :param int tail: (required)
        :param dict(str, str) labels: (required)
        :return: StreamingResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.container_logs_with_http_info(cluster_id, pod_name, container_name, tail, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.container_logs_with_http_info(cluster_id, pod_name, container_name, tail, labels, **kwargs)  # noqa: E501
            return data

    def container_logs_with_http_info(self, cluster_id, pod_name, container_name, tail, labels, **kwargs):  # noqa: E501
        """container_logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.container_logs_with_http_info(cluster_id, pod_name, container_name, tail, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str pod_name: (required)
        :param str container_name: (required)
        :param int tail: (required)
        :param dict(str, str) labels: (required)
        :return: StreamingResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'pod_name', 'container_name', 'tail', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method container_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `container_logs`")  # noqa: E501
        # verify the required parameter 'pod_name' is set
        if ('pod_name' not in params or
                params['pod_name'] is None):
            raise ValueError("Missing the required parameter `pod_name` when calling `container_logs`")  # noqa: E501
        # verify the required parameter 'container_name' is set
        if ('container_name' not in params or
                params['container_name'] is None):
            raise ValueError("Missing the required parameter `container_name` when calling `container_logs`")  # noqa: E501
        # verify the required parameter 'tail' is set
        if ('tail' not in params or
                params['tail'] is None):
            raise ValueError("Missing the required parameter `tail` when calling `container_logs`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `container_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'pod_name' in params:
            path_params['podName'] = params['pod_name']  # noqa: E501
        if 'container_name' in params:
            path_params['containerName'] = params['container_name']  # noqa: E501

        query_params = []
        if 'tail' in params:
            query_params.append(('tail', params['tail']))  # noqa: E501
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/pods/{podName}/{containerName}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StreamingResponseBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_ingress_rules_for_cluster(self, cluster_id, **kwargs):  # noqa: E501
        """get_all_ingress_rules_for_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ingress_rules_for_cluster(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :return: list[IngressRulesDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_ingress_rules_for_cluster_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_ingress_rules_for_cluster_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_all_ingress_rules_for_cluster_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """get_all_ingress_rules_for_cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ingress_rules_for_cluster_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :return: list[IngressRulesDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ingress_rules_for_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_all_ingress_rules_for_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/ingress-rules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IngressRulesDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_config_map_data(self, cluster_id, config_map_name, labels, **kwargs):  # noqa: E501
        """get_config_map_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_config_map_data(cluster_id, config_map_name, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str config_map_name: (required)
        :param dict(str, str) labels: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_config_map_data_with_http_info(cluster_id, config_map_name, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.get_config_map_data_with_http_info(cluster_id, config_map_name, labels, **kwargs)  # noqa: E501
            return data

    def get_config_map_data_with_http_info(self, cluster_id, config_map_name, labels, **kwargs):  # noqa: E501
        """get_config_map_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_config_map_data_with_http_info(cluster_id, config_map_name, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str config_map_name: (required)
        :param dict(str, str) labels: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'config_map_name', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_config_map_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_config_map_data`")  # noqa: E501
        # verify the required parameter 'config_map_name' is set
        if ('config_map_name' not in params or
                params['config_map_name'] is None):
            raise ValueError("Missing the required parameter `config_map_name` when calling `get_config_map_data`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `get_config_map_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'config_map_name' in params:
            path_params['configMapName'] = params['config_map_name']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/configMaps/{configMapName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_manifest(self, cluster_id, k8s_resource_type, k8s_resource_name, labels, **kwargs):  # noqa: E501
        """get_manifest  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_manifest(cluster_id, k8s_resource_type, k8s_resource_name, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str k8s_resource_type: (required)
        :param str k8s_resource_name: (required)
        :param dict(str, str) labels: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_manifest_with_http_info(cluster_id, k8s_resource_type, k8s_resource_name, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.get_manifest_with_http_info(cluster_id, k8s_resource_type, k8s_resource_name, labels, **kwargs)  # noqa: E501
            return data

    def get_manifest_with_http_info(self, cluster_id, k8s_resource_type, k8s_resource_name, labels, **kwargs):  # noqa: E501
        """get_manifest  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_manifest_with_http_info(cluster_id, k8s_resource_type, k8s_resource_name, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str k8s_resource_type: (required)
        :param str k8s_resource_name: (required)
        :param dict(str, str) labels: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'k8s_resource_type', 'k8s_resource_name', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_manifest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_manifest`")  # noqa: E501
        # verify the required parameter 'k8s_resource_type' is set
        if ('k8s_resource_type' not in params or
                params['k8s_resource_type'] is None):
            raise ValueError("Missing the required parameter `k8s_resource_type` when calling `get_manifest`")  # noqa: E501
        # verify the required parameter 'k8s_resource_name' is set
        if ('k8s_resource_name' not in params or
                params['k8s_resource_name'] is None):
            raise ValueError("Missing the required parameter `k8s_resource_name` when calling `get_manifest`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `get_manifest`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'k8s_resource_type' in params:
            path_params['k8sResourceType'] = params['k8s_resource_type']  # noqa: E501
        if 'k8s_resource_name' in params:
            path_params['k8sResourceName'] = params['k8s_resource_name']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/{k8sResourceType}/{k8sResourceName}/manifest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pods_for_deployment(self, cluster_id, deployment_name, labels, **kwargs):  # noqa: E501
        """get_pods_for_deployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pods_for_deployment(cluster_id, deployment_name, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str deployment_name: (required)
        :param dict(str, str) labels: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pods_for_deployment_with_http_info(cluster_id, deployment_name, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pods_for_deployment_with_http_info(cluster_id, deployment_name, labels, **kwargs)  # noqa: E501
            return data

    def get_pods_for_deployment_with_http_info(self, cluster_id, deployment_name, labels, **kwargs):  # noqa: E501
        """get_pods_for_deployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pods_for_deployment_with_http_info(cluster_id, deployment_name, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str deployment_name: (required)
        :param dict(str, str) labels: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'deployment_name', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pods_for_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_pods_for_deployment`")  # noqa: E501
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `get_pods_for_deployment`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `get_pods_for_deployment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'deployment_name' in params:
            path_params['deploymentName'] = params['deployment_name']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/deployments/{deploymentName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_secrets_data(self, cluster_id, secret_name, labels, **kwargs):  # noqa: E501
        """get_secrets_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_secrets_data(cluster_id, secret_name, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str secret_name: (required)
        :param dict(str, str) labels: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_secrets_data_with_http_info(cluster_id, secret_name, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.get_secrets_data_with_http_info(cluster_id, secret_name, labels, **kwargs)  # noqa: E501
            return data

    def get_secrets_data_with_http_info(self, cluster_id, secret_name, labels, **kwargs):  # noqa: E501
        """get_secrets_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_secrets_data_with_http_info(cluster_id, secret_name, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str secret_name: (required)
        :param dict(str, str) labels: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'secret_name', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_secrets_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_secrets_data`")  # noqa: E501
        # verify the required parameter 'secret_name' is set
        if ('secret_name' not in params or
                params['secret_name'] is None):
            raise ValueError("Missing the required parameter `secret_name` when calling `get_secrets_data`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `get_secrets_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'secret_name' in params:
            path_params['secretName'] = params['secret_name']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/secrets/{secretName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_config_map_by_labels(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_config_map_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_config_map_by_labels(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[ConfigMapDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_config_map_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.list_config_map_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
            return data

    def list_config_map_by_labels_with_http_info(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_config_map_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_config_map_by_labels_with_http_info(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[ConfigMapDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_config_map_by_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `list_config_map_by_labels`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `list_config_map_by_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/configMaps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ConfigMapDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_containers_in_pod(self, cluster_id, pod_name, labels, **kwargs):  # noqa: E501
        """list_containers_in_pod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_containers_in_pod(cluster_id, pod_name, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str pod_name: (required)
        :param dict(str, str) labels: (required)
        :return: list[Container]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_containers_in_pod_with_http_info(cluster_id, pod_name, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.list_containers_in_pod_with_http_info(cluster_id, pod_name, labels, **kwargs)  # noqa: E501
            return data

    def list_containers_in_pod_with_http_info(self, cluster_id, pod_name, labels, **kwargs):  # noqa: E501
        """list_containers_in_pod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_containers_in_pod_with_http_info(cluster_id, pod_name, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str pod_name: (required)
        :param dict(str, str) labels: (required)
        :return: list[Container]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'pod_name', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_containers_in_pod" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `list_containers_in_pod`")  # noqa: E501
        # verify the required parameter 'pod_name' is set
        if ('pod_name' not in params or
                params['pod_name'] is None):
            raise ValueError("Missing the required parameter `pod_name` when calling `list_containers_in_pod`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `list_containers_in_pod`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'pod_name' in params:
            path_params['podName'] = params['pod_name']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/{podName}/containers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Container]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_containers_in_pod_v2(self, cluster_id, pod_name, labels, **kwargs):  # noqa: E501
        """list_containers_in_pod_v2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_containers_in_pod_v2(cluster_id, pod_name, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str pod_name: (required)
        :param dict(str, str) labels: (required)
        :return: list[ContainerDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_containers_in_pod_v2_with_http_info(cluster_id, pod_name, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.list_containers_in_pod_v2_with_http_info(cluster_id, pod_name, labels, **kwargs)  # noqa: E501
            return data

    def list_containers_in_pod_v2_with_http_info(self, cluster_id, pod_name, labels, **kwargs):  # noqa: E501
        """list_containers_in_pod_v2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_containers_in_pod_v2_with_http_info(cluster_id, pod_name, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str pod_name: (required)
        :param dict(str, str) labels: (required)
        :return: list[ContainerDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'pod_name', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_containers_in_pod_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `list_containers_in_pod_v2`")  # noqa: E501
        # verify the required parameter 'pod_name' is set
        if ('pod_name' not in params or
                params['pod_name'] is None):
            raise ValueError("Missing the required parameter `pod_name` when calling `list_containers_in_pod_v2`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `list_containers_in_pod_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'pod_name' in params:
            path_params['podName'] = params['pod_name']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/{podName}/v2/containers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContainerDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_cron_job_by_labels(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_cron_job_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_cron_job_by_labels(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[CronJobDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_cron_job_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.list_cron_job_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
            return data

    def list_cron_job_by_labels_with_http_info(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_cron_job_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_cron_job_by_labels_with_http_info(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[CronJobDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_cron_job_by_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `list_cron_job_by_labels`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `list_cron_job_by_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/cronJobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CronJobDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_daemon_sets_by_labels(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_daemon_sets_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_daemon_sets_by_labels(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[DaemonSetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_daemon_sets_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.list_daemon_sets_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
            return data

    def list_daemon_sets_by_labels_with_http_info(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_daemon_sets_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_daemon_sets_by_labels_with_http_info(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[DaemonSetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_daemon_sets_by_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `list_daemon_sets_by_labels`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `list_daemon_sets_by_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/daemonSets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DaemonSetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_deployments_by_labels(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_deployments_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_deployments_by_labels(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[DeploymentDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_deployments_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.list_deployments_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
            return data

    def list_deployments_by_labels_with_http_info(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_deployments_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_deployments_by_labels_with_http_info(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[DeploymentDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_deployments_by_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `list_deployments_by_labels`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `list_deployments_by_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/deployments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeploymentDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_events_by_k8s_resource(self, cluster_id, k8s_resource_type, k8s_resource_name, labels, **kwargs):  # noqa: E501
        """list_events_by_k8s_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_events_by_k8s_resource(cluster_id, k8s_resource_type, k8s_resource_name, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str k8s_resource_type: (required)
        :param str k8s_resource_name: (required)
        :param dict(str, str) labels: (required)
        :return: list[EventDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_events_by_k8s_resource_with_http_info(cluster_id, k8s_resource_type, k8s_resource_name, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.list_events_by_k8s_resource_with_http_info(cluster_id, k8s_resource_type, k8s_resource_name, labels, **kwargs)  # noqa: E501
            return data

    def list_events_by_k8s_resource_with_http_info(self, cluster_id, k8s_resource_type, k8s_resource_name, labels, **kwargs):  # noqa: E501
        """list_events_by_k8s_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_events_by_k8s_resource_with_http_info(cluster_id, k8s_resource_type, k8s_resource_name, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str k8s_resource_type: (required)
        :param str k8s_resource_name: (required)
        :param dict(str, str) labels: (required)
        :return: list[EventDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'k8s_resource_type', 'k8s_resource_name', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_events_by_k8s_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `list_events_by_k8s_resource`")  # noqa: E501
        # verify the required parameter 'k8s_resource_type' is set
        if ('k8s_resource_type' not in params or
                params['k8s_resource_type'] is None):
            raise ValueError("Missing the required parameter `k8s_resource_type` when calling `list_events_by_k8s_resource`")  # noqa: E501
        # verify the required parameter 'k8s_resource_name' is set
        if ('k8s_resource_name' not in params or
                params['k8s_resource_name'] is None):
            raise ValueError("Missing the required parameter `k8s_resource_name` when calling `list_events_by_k8s_resource`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `list_events_by_k8s_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'k8s_resource_type' in params:
            path_params['k8sResourceType'] = params['k8s_resource_type']  # noqa: E501
        if 'k8s_resource_name' in params:
            path_params['k8sResourceName'] = params['k8s_resource_name']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/{k8sResourceType}/{k8sResourceName}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EventDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_hpa_by_labels(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_hpa_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_hpa_by_labels(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[HorizontalPodAutoscalerDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_hpa_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.list_hpa_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
            return data

    def list_hpa_by_labels_with_http_info(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_hpa_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_hpa_by_labels_with_http_info(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[HorizontalPodAutoscalerDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_hpa_by_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `list_hpa_by_labels`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `list_hpa_by_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/hpa', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HorizontalPodAutoscalerDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_ingresses_by_labels(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_ingresses_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ingresses_by_labels(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[IngressDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_ingresses_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.list_ingresses_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
            return data

    def list_ingresses_by_labels_with_http_info(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_ingresses_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ingresses_by_labels_with_http_info(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[IngressDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_ingresses_by_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `list_ingresses_by_labels`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `list_ingresses_by_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/ingresses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IngressDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_jobs_by_labels(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_jobs_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_jobs_by_labels(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[JobDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_jobs_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.list_jobs_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
            return data

    def list_jobs_by_labels_with_http_info(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_jobs_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_jobs_by_labels_with_http_info(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[JobDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_jobs_by_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `list_jobs_by_labels`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `list_jobs_by_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JobDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_pods_by_labels(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_pods_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pods_by_labels(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[PodDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_pods_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.list_pods_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
            return data

    def list_pods_by_labels_with_http_info(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_pods_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pods_by_labels_with_http_info(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[PodDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pods_by_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `list_pods_by_labels`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `list_pods_by_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/pods', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PodDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_pvby_labels(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_pvby_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pvby_labels(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[PersistentVolumeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_pvby_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.list_pvby_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
            return data

    def list_pvby_labels_with_http_info(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_pvby_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pvby_labels_with_http_info(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[PersistentVolumeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pvby_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `list_pvby_labels`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `list_pvby_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/pv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PersistentVolumeDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_pvcby_labels(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_pvcby_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pvcby_labels(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[PersistentVolumeClaimDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_pvcby_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.list_pvcby_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
            return data

    def list_pvcby_labels_with_http_info(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_pvcby_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pvcby_labels_with_http_info(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[PersistentVolumeClaimDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pvcby_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `list_pvcby_labels`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `list_pvcby_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/pvc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PersistentVolumeClaimDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_replicasets_by_labels(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_replicasets_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_replicasets_by_labels(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[ReplicasetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_replicasets_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.list_replicasets_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
            return data

    def list_replicasets_by_labels_with_http_info(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_replicasets_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_replicasets_by_labels_with_http_info(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[ReplicasetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_replicasets_by_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `list_replicasets_by_labels`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `list_replicasets_by_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/replicasets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ReplicasetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_secrets_by_labels(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_secrets_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_secrets_by_labels(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[SecretDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_secrets_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.list_secrets_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
            return data

    def list_secrets_by_labels_with_http_info(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_secrets_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_secrets_by_labels_with_http_info(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[SecretDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_secrets_by_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `list_secrets_by_labels`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `list_secrets_by_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/secrets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SecretDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_services_by_labels(self, cluster_id, **kwargs):  # noqa: E501
        """list_services_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_services_by_labels(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :return: list[ServiceDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_services_by_labels_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_services_by_labels_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def list_services_by_labels_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """list_services_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_services_by_labels_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :return: list[ServiceDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_services_by_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `list_services_by_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/services', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ServiceDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_statefulsets_labels_by_labels(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_statefulsets_labels_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_statefulsets_labels_by_labels(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[StatefulSetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_statefulsets_labels_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.list_statefulsets_labels_by_labels_with_http_info(cluster_id, labels, **kwargs)  # noqa: E501
            return data

    def list_statefulsets_labels_by_labels_with_http_info(self, cluster_id, labels, **kwargs):  # noqa: E501
        """list_statefulsets_labels_by_labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_statefulsets_labels_by_labels_with_http_info(cluster_id, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param dict(str, str) labels: (required)
        :return: list[StatefulSetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_statefulsets_labels_by_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `list_statefulsets_labels_by_labels`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if ('labels' not in params or
                params['labels'] is None):
            raise ValueError("Missing the required parameter `labels` when calling `list_statefulsets_labels_by_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/k8s-explorer/statefulsets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StatefulSetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
