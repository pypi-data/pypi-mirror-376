# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UiTektonActionControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def download_upload(self, action_run_name, **kwargs):  # noqa: E501
        """Download Upload for Action Run  # noqa: E501

        - **Description:** Download the file uploaded for a specific Action Run. \\n- **Restrictions:** User must have access to the associated task. \\n- **Permissions:** Requires task access permissions. \\n- **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_upload(action_run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action_run_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_upload_with_http_info(action_run_name, **kwargs)  # noqa: E501
        else:
            (data) = self.download_upload_with_http_info(action_run_name, **kwargs)  # noqa: E501
            return data

    def download_upload_with_http_info(self, action_run_name, **kwargs):  # noqa: E501
        """Download Upload for Action Run  # noqa: E501

        - **Description:** Download the file uploaded for a specific Action Run. \\n- **Restrictions:** User must have access to the associated task. \\n- **Permissions:** Requires task access permissions. \\n- **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_upload_with_http_info(action_run_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action_run_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['action_run_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'action_run_name' is set
        if ('action_run_name' not in params or
                params['action_run_name'] is None):
            raise ValueError("Missing the required parameter `action_run_name` when calling `download_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'action_run_name' in params:
            path_params['actionRunName'] = params['action_run_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/actions/runs/{actionRunName}/upload', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_action_runs(self, action_name, **kwargs):  # noqa: E501
        """Get Action Runs  # noqa: E501

        - **Description:** Retrieve Action Runs for a specific Action.  - **Restrictions:** None.  - **Permissions:** None required.  - **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_action_runs(action_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action_name: (required)
        :return: list[ActionRunDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_action_runs_with_http_info(action_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_action_runs_with_http_info(action_name, **kwargs)  # noqa: E501
            return data

    def get_action_runs_with_http_info(self, action_name, **kwargs):  # noqa: E501
        """Get Action Runs  # noqa: E501

        - **Description:** Retrieve Action Runs for a specific Action.  - **Restrictions:** None.  - **Permissions:** None required.  - **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_action_runs_with_http_info(action_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action_name: (required)
        :return: list[ActionRunDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['action_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_action_runs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'action_name' is set
        if ('action_name' not in params or
                params['action_name'] is None):
            raise ValueError("Missing the required parameter `action_name` when calling `get_action_runs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'action_name' in params:
            path_params['actionName'] = params['action_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/actions/{actionName}/runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ActionRunDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_actions(self, **kwargs):  # noqa: E501
        """Get Actions  # noqa: E501

        - **Description:** Retrieve Actions optionally filtered by cluster, resource type, and resource name.  - **Restrictions:** Actions are filtered based on provided parameters.  - **Permissions:** None required.  - **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id:
        :param str resource_type:
        :param str resource_name:
        :return: list[ActionDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_actions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_actions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_actions_with_http_info(self, **kwargs):  # noqa: E501
        """Get Actions  # noqa: E501

        - **Description:** Retrieve Actions optionally filtered by cluster, resource type, and resource name.  - **Restrictions:** Actions are filtered based on provided parameters.  - **Permissions:** None required.  - **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id:
        :param str resource_type:
        :param str resource_name:
        :return: list[ActionDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'resource_type', 'resource_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('clusterId', params['cluster_id']))  # noqa: E501
        if 'resource_type' in params:
            query_params.append(('resourceType', params['resource_type']))  # noqa: E501
        if 'resource_name' in params:
            query_params.append(('resourceName', params['resource_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ActionDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_step_logs(self, action_run_name, step_name, **kwargs):  # noqa: E501
        """Get Step Logs  # noqa: E501

        - **Description:** Retrieve logs for a specific step of an Action Run.  - **Restrictions:** None.  - **Permissions:** None required.  - **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_step_logs(action_run_name, step_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action_run_name: (required)
        :param str step_name: (required)
        :return: StepLogDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_step_logs_with_http_info(action_run_name, step_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_step_logs_with_http_info(action_run_name, step_name, **kwargs)  # noqa: E501
            return data

    def get_step_logs_with_http_info(self, action_run_name, step_name, **kwargs):  # noqa: E501
        """Get Step Logs  # noqa: E501

        - **Description:** Retrieve logs for a specific step of an Action Run.  - **Restrictions:** None.  - **Permissions:** None required.  - **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_step_logs_with_http_info(action_run_name, step_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action_run_name: (required)
        :param str step_name: (required)
        :return: StepLogDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['action_run_name', 'step_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_step_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'action_run_name' is set
        if ('action_run_name' not in params or
                params['action_run_name'] is None):
            raise ValueError("Missing the required parameter `action_run_name` when calling `get_step_logs`")  # noqa: E501
        # verify the required parameter 'step_name' is set
        if ('step_name' not in params or
                params['step_name'] is None):
            raise ValueError("Missing the required parameter `step_name` when calling `get_step_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'action_run_name' in params:
            path_params['actionRunName'] = params['action_run_name']  # noqa: E501
        if 'step_name' in params:
            path_params['stepName'] = params['step_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/actions/runs/{actionRunName}/steps/{stepName}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StepLogDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def run_actions(self, body, **kwargs):  # noqa: E501
        """Run Multiple Actions  # noqa: E501

        - **Description:** Create and run Action Runs for multiple Actions with individual parameters.  - **Restrictions:** None.  - **Permissions:** Requires `RUN_ACTION` permission.  - **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_actions(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkActionRunRequestDto body: (required)
        :return: list[ActionRunDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.run_actions_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.run_actions_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def run_actions_with_http_info(self, body, **kwargs):  # noqa: E501
        """Run Multiple Actions  # noqa: E501

        - **Description:** Create and run Action Runs for multiple Actions with individual parameters.  - **Restrictions:** None.  - **Permissions:** Requires `RUN_ACTION` permission.  - **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_actions_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkActionRunRequestDto body: (required)
        :return: list[ActionRunDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_actions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `run_actions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/actions/run', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ActionRunDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
