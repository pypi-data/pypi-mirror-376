# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UiCiCdControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def attach_rule_and_workflow(self, body, **kwargs):  # noqa: E501
        """Attach Rule and Workflow  # noqa: E501

        - **Description:** Attaches a rule and workflow to an artifact CI.  - **Restrictions:** CI must exist or will be created for the project.  - **Permissions:** Requires `ARTIFACT_CI_WRITE` permission.  - **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_rule_and_workflow(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttachDetachCiRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attach_rule_and_workflow_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.attach_rule_and_workflow_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def attach_rule_and_workflow_with_http_info(self, body, **kwargs):  # noqa: E501
        """Attach Rule and Workflow  # noqa: E501

        - **Description:** Attaches a rule and workflow to an artifact CI.  - **Restrictions:** CI must exist or will be created for the project.  - **Permissions:** Requires `ARTIFACT_CI_WRITE` permission.  - **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_rule_and_workflow_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttachDetachCiRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_rule_and_workflow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `attach_rule_and_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/ci-cd/attach', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detach_rule_and_workflow(self, body, **kwargs):  # noqa: E501
        """Detach Rule and Workflow  # noqa: E501

        - **Description:** Detaches a rule and workflow from an artifact CI.  - **Restrictions:** Existing CI registration required.  - **Permissions:** Requires `ARTIFACT_CI_WRITE` permission.  - **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_rule_and_workflow(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttachDetachCiRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detach_rule_and_workflow_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.detach_rule_and_workflow_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def detach_rule_and_workflow_with_http_info(self, body, **kwargs):  # noqa: E501
        """Detach Rule and Workflow  # noqa: E501

        - **Description:** Detaches a rule and workflow from an artifact CI.  - **Restrictions:** Existing CI registration required.  - **Permissions:** Requires `ARTIFACT_CI_WRITE` permission.  - **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_rule_and_workflow_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttachDetachCiRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detach_rule_and_workflow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `detach_rule_and_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/ci-cd/detach', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_artifact_push_credentials(self, body, **kwargs):  # noqa: E501
        """Generate Artifact Push Credentials  # noqa: E501

        - **Description:** Generates push credentials for an artifact.  - **Restrictions:** Only for supported artifactory types.  - **Permissions:** Requires `ARTIFACTS_WRITE` permission.  - **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_artifact_push_credentials(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PushCredentialsRequest body: (required)
        :return: PushCredentialsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_artifact_push_credentials_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_artifact_push_credentials_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def generate_artifact_push_credentials_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate Artifact Push Credentials  # noqa: E501

        - **Description:** Generates push credentials for an artifact.  - **Restrictions:** Only for supported artifactory types.  - **Permissions:** Requires `ARTIFACTS_WRITE` permission.  - **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_artifact_push_credentials_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PushCredentialsRequest body: (required)
        :return: PushCredentialsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_artifact_push_credentials" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `generate_artifact_push_credentials`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/ci-cd/pushCredentials', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PushCredentialsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ci_cd_details(self, stack_name, **kwargs):  # noqa: E501
        """Get CI/CD Details  # noqa: E501

        - **Description:** Retrieves CI/CD details for a specified project name.  - **Restrictions:** Requires existing default artifact routing rule or promotion workflow.  - **Permissions:** None required.  - **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ci_cd_details(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :return: CiCdDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ci_cd_details_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ci_cd_details_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def get_ci_cd_details_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """Get CI/CD Details  # noqa: E501

        - **Description:** Retrieves CI/CD details for a specified project name.  - **Restrictions:** Requires existing default artifact routing rule or promotion workflow.  - **Permissions:** None required.  - **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ci_cd_details_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :return: CiCdDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ci_cd_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_ci_cd_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/ci-cd/{stackName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CiCdDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_artifact_saas(self, body, **kwargs):  # noqa: E501
        """Register Artifact SaaS  # noqa: E501

        - **Description:** Registers a new artifact within the system for SaaS.  - **Restrictions:** Valid artifactory name and consistent registration type required. Blueprint must be CI/CD configured.  - **Permissions:** Requires `ARTIFACTS_WRITE` permission.  - **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_artifact_saas(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaasArtifactRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_artifact_saas_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.register_artifact_saas_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def register_artifact_saas_with_http_info(self, body, **kwargs):  # noqa: E501
        """Register Artifact SaaS  # noqa: E501

        - **Description:** Registers a new artifact within the system for SaaS.  - **Restrictions:** Valid artifactory name and consistent registration type required. Blueprint must be CI/CD configured.  - **Permissions:** Requires `ARTIFACTS_WRITE` permission.  - **Audit Logging:** Not applicable.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_artifact_saas_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaasArtifactRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_artifact_saas" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_artifact_saas`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/ci-cd/register', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_ci_cd_details(self, body, **kwargs):  # noqa: E501
        """Save CI/CD Details  # noqa: E501

        - **Description:** Saves CI/CD configuration details.  - **Restrictions:** Cannot change registration type after initial configuration.  - **Permissions:** Requires `CI_CD_CONFIGURE` permission.  - **Audit Logging:** This operation is logged for audit purposes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_ci_cd_details(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CiCdDto body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_ci_cd_details_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.save_ci_cd_details_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def save_ci_cd_details_with_http_info(self, body, **kwargs):  # noqa: E501
        """Save CI/CD Details  # noqa: E501

        - **Description:** Saves CI/CD configuration details.  - **Restrictions:** Cannot change registration type after initial configuration.  - **Permissions:** Requires `CI_CD_CONFIGURE` permission.  - **Audit Logging:** This operation is logged for audit purposes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_ci_cd_details_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CiCdDto body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_ci_cd_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `save_ci_cd_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/ci-cd', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
