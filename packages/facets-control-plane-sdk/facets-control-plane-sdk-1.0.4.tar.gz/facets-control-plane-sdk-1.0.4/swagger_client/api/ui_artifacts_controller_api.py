# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UiArtifactsControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def attach_image_via_register(self, body, **kwargs):  # noqa: E501
        """attach_image_via_register  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_image_via_register(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImageOverrideRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attach_image_via_register_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.attach_image_via_register_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def attach_image_via_register_with_http_info(self, body, **kwargs):  # noqa: E501
        """attach_image_via_register  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_image_via_register_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImageOverrideRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_image_via_register" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `attach_image_via_register`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/attach-image-via-register', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_artifact(self, artifact_id, **kwargs):  # noqa: E501
        """delete_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_artifact(artifact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifact_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_artifact_with_http_info(artifact_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_artifact_with_http_info(artifact_id, **kwargs)  # noqa: E501
            return data

    def delete_artifact_with_http_info(self, artifact_id, **kwargs):  # noqa: E501
        """delete_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_artifact_with_http_info(artifact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifact_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['artifact_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_artifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'artifact_id' is set
        if ('artifact_id' not in params or
                params['artifact_id'] is None):
            raise ValueError("Missing the required parameter `artifact_id` when calling `delete_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'artifact_id' in params:
            path_params['artifactId'] = params['artifact_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/{artifactId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_artifact_push_credentials1(self, stack_name, app_name, **kwargs):  # noqa: E501
        """generate_artifact_push_credentials1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_artifact_push_credentials1(stack_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str app_name: (required)
        :return: ECRAuthorizationData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_artifact_push_credentials1_with_http_info(stack_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_artifact_push_credentials1_with_http_info(stack_name, app_name, **kwargs)  # noqa: E501
            return data

    def generate_artifact_push_credentials1_with_http_info(self, stack_name, app_name, **kwargs):  # noqa: E501
        """generate_artifact_push_credentials1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_artifact_push_credentials1_with_http_info(stack_name, app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str app_name: (required)
        :return: ECRAuthorizationData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'app_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_artifact_push_credentials1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `generate_artifact_push_credentials1`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `generate_artifact_push_credentials1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'app_name' in params:
            path_params['appName'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/pushCredentials/{stackName}/{appName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ECRAuthorizationData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_artifact_push_credentials_v2(self, artifact_name, registration_type, registration_value, **kwargs):  # noqa: E501
        """generate_artifact_push_credentials_v2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_artifact_push_credentials_v2(artifact_name, registration_type, registration_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifact_name: (required)
        :param str registration_type: (required)
        :param str registration_value: (required)
        :return: ECRAuthorizationData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_artifact_push_credentials_v2_with_http_info(artifact_name, registration_type, registration_value, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_artifact_push_credentials_v2_with_http_info(artifact_name, registration_type, registration_value, **kwargs)  # noqa: E501
            return data

    def generate_artifact_push_credentials_v2_with_http_info(self, artifact_name, registration_type, registration_value, **kwargs):  # noqa: E501
        """generate_artifact_push_credentials_v2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_artifact_push_credentials_v2_with_http_info(artifact_name, registration_type, registration_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifact_name: (required)
        :param str registration_type: (required)
        :param str registration_value: (required)
        :return: ECRAuthorizationData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['artifact_name', 'registration_type', 'registration_value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_artifact_push_credentials_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'artifact_name' is set
        if ('artifact_name' not in params or
                params['artifact_name'] is None):
            raise ValueError("Missing the required parameter `artifact_name` when calling `generate_artifact_push_credentials_v2`")  # noqa: E501
        # verify the required parameter 'registration_type' is set
        if ('registration_type' not in params or
                params['registration_type'] is None):
            raise ValueError("Missing the required parameter `registration_type` when calling `generate_artifact_push_credentials_v2`")  # noqa: E501
        # verify the required parameter 'registration_value' is set
        if ('registration_value' not in params or
                params['registration_value'] is None):
            raise ValueError("Missing the required parameter `registration_value` when calling `generate_artifact_push_credentials_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'artifact_name' in params:
            path_params['artifactName'] = params['artifact_name']  # noqa: E501
        if 'registration_type' in params:
            path_params['registrationType'] = params['registration_type']  # noqa: E501
        if 'registration_value' in params:
            path_params['registrationValue'] = params['registration_value']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/pushCredentialsV2/artifactName/{artifactName}/registrationType/{registrationType}/value/{registrationValue}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ECRAuthorizationData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_artifact_push_credentials_v3(self, artifact_name, metadata, **kwargs):  # noqa: E501
        """generate_artifact_push_credentials_v3  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_artifact_push_credentials_v3(artifact_name, metadata, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifact_name: (required)
        :param dict(str, str) metadata: (required)
        :return: ECRAuthorizationData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_artifact_push_credentials_v3_with_http_info(artifact_name, metadata, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_artifact_push_credentials_v3_with_http_info(artifact_name, metadata, **kwargs)  # noqa: E501
            return data

    def generate_artifact_push_credentials_v3_with_http_info(self, artifact_name, metadata, **kwargs):  # noqa: E501
        """generate_artifact_push_credentials_v3  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_artifact_push_credentials_v3_with_http_info(artifact_name, metadata, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifact_name: (required)
        :param dict(str, str) metadata: (required)
        :return: ECRAuthorizationData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['artifact_name', 'metadata']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_artifact_push_credentials_v3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'artifact_name' is set
        if ('artifact_name' not in params or
                params['artifact_name'] is None):
            raise ValueError("Missing the required parameter `artifact_name` when calling `generate_artifact_push_credentials_v3`")  # noqa: E501
        # verify the required parameter 'metadata' is set
        if ('metadata' not in params or
                params['metadata'] is None):
            raise ValueError("Missing the required parameter `metadata` when calling `generate_artifact_push_credentials_v3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'artifact_name' in params:
            path_params['artifactName'] = params['artifact_name']  # noqa: E501

        query_params = []
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/pushCredentialsV3/artifactName/{artifactName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ECRAuthorizationData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_artifact_by_application_name(self, application_name, cluster_id, **kwargs):  # noqa: E501
        """get_artifact_by_application_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifact_by_application_name(application_name, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_name: (required)
        :param str cluster_id: (required)
        :return: Artifact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_artifact_by_application_name_with_http_info(application_name, cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_artifact_by_application_name_with_http_info(application_name, cluster_id, **kwargs)  # noqa: E501
            return data

    def get_artifact_by_application_name_with_http_info(self, application_name, cluster_id, **kwargs):  # noqa: E501
        """get_artifact_by_application_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifact_by_application_name_with_http_info(application_name, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_name: (required)
        :param str cluster_id: (required)
        :return: Artifact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_name', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_artifact_by_application_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_name' is set
        if ('application_name' not in params or
                params['application_name'] is None):
            raise ValueError("Missing the required parameter `application_name` when calling `get_artifact_by_application_name`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_artifact_by_application_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_name' in params:
            path_params['applicationName'] = params['application_name']  # noqa: E501
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/cluster/{clusterId}/application/{applicationName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Artifact',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_artifact_by_cluster_id(self, cluster_id, **kwargs):  # noqa: E501
        """get_artifact_by_cluster_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifact_by_cluster_id(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :return: dict(str, dict(str, Artifact))
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_artifact_by_cluster_id_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_artifact_by_cluster_id_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_artifact_by_cluster_id_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """get_artifact_by_cluster_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifact_by_cluster_id_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :return: dict(str, dict(str, Artifact))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_artifact_by_cluster_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_artifact_by_cluster_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/{clusterId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, dict(str, Artifact))',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_artifacts_by_resource_name_and_resource_type(self, cluster_id, resource_type, resource_name, **kwargs):  # noqa: E501
        """get_artifacts_by_resource_name_and_resource_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifacts_by_resource_name_and_resource_type(cluster_id, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str resource_type: (required)
        :param str resource_name: (required)
        :return: Artifact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_artifacts_by_resource_name_and_resource_type_with_http_info(cluster_id, resource_type, resource_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_artifacts_by_resource_name_and_resource_type_with_http_info(cluster_id, resource_type, resource_name, **kwargs)  # noqa: E501
            return data

    def get_artifacts_by_resource_name_and_resource_type_with_http_info(self, cluster_id, resource_type, resource_name, **kwargs):  # noqa: E501
        """get_artifacts_by_resource_name_and_resource_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifacts_by_resource_name_and_resource_type_with_http_info(cluster_id, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str resource_type: (required)
        :param str resource_name: (required)
        :return: Artifact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'resource_type', 'resource_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_artifacts_by_resource_name_and_resource_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_artifacts_by_resource_name_and_resource_type`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `get_artifacts_by_resource_name_and_resource_type`")  # noqa: E501
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `get_artifacts_by_resource_name_and_resource_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/cluster/{clusterId}/resourceType/{resourceType}/resourceName/{resourceName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Artifact',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadata_keys(self, **kwargs):  # noqa: E501
        """get_metadata_keys  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata_keys(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metadata_keys_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_metadata_keys_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_metadata_keys_with_http_info(self, **kwargs):  # noqa: E501
        """get_metadata_keys  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata_keys_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata_keys" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/metadata/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def promote_artifact(self, ci_id, artifact_id, **kwargs):  # noqa: E501
        """promote_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promote_artifact(ci_id, artifact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ci_id: (required)
        :param str artifact_id: (required)
        :return: Artifact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.promote_artifact_with_http_info(ci_id, artifact_id, **kwargs)  # noqa: E501
        else:
            (data) = self.promote_artifact_with_http_info(ci_id, artifact_id, **kwargs)  # noqa: E501
            return data

    def promote_artifact_with_http_info(self, ci_id, artifact_id, **kwargs):  # noqa: E501
        """promote_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promote_artifact_with_http_info(ci_id, artifact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ci_id: (required)
        :param str artifact_id: (required)
        :return: Artifact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ci_id', 'artifact_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method promote_artifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ci_id' is set
        if ('ci_id' not in params or
                params['ci_id'] is None):
            raise ValueError("Missing the required parameter `ci_id` when calling `promote_artifact`")  # noqa: E501
        # verify the required parameter 'artifact_id' is set
        if ('artifact_id' not in params or
                params['artifact_id'] is None):
            raise ValueError("Missing the required parameter `artifact_id` when calling `promote_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ci_id' in params:
            path_params['ciId'] = params['ci_id']  # noqa: E501
        if 'artifact_id' in params:
            path_params['artifactId'] = params['artifact_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/{ciId}/promote/{artifactId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Artifact',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def promote_artifact_by_artifact_ci_name(self, ci_name, artifact_id, **kwargs):  # noqa: E501
        """promote_artifact_by_artifact_ci_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promote_artifact_by_artifact_ci_name(ci_name, artifact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ci_name: (required)
        :param str artifact_id: (required)
        :return: Artifact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.promote_artifact_by_artifact_ci_name_with_http_info(ci_name, artifact_id, **kwargs)  # noqa: E501
        else:
            (data) = self.promote_artifact_by_artifact_ci_name_with_http_info(ci_name, artifact_id, **kwargs)  # noqa: E501
            return data

    def promote_artifact_by_artifact_ci_name_with_http_info(self, ci_name, artifact_id, **kwargs):  # noqa: E501
        """promote_artifact_by_artifact_ci_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promote_artifact_by_artifact_ci_name_with_http_info(ci_name, artifact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ci_name: (required)
        :param str artifact_id: (required)
        :return: Artifact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ci_name', 'artifact_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method promote_artifact_by_artifact_ci_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ci_name' is set
        if ('ci_name' not in params or
                params['ci_name'] is None):
            raise ValueError("Missing the required parameter `ci_name` when calling `promote_artifact_by_artifact_ci_name`")  # noqa: E501
        # verify the required parameter 'artifact_id' is set
        if ('artifact_id' not in params or
                params['artifact_id'] is None):
            raise ValueError("Missing the required parameter `artifact_id` when calling `promote_artifact_by_artifact_ci_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ci_name' in params:
            query_params.append(('ciName', params['ci_name']))  # noqa: E501
        if 'artifact_id' in params:
            query_params.append(('artifactId', params['artifact_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/promote', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Artifact',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def push_artifact(self, body, **kwargs):  # noqa: E501
        """push_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.push_artifact(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArtifactRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.push_artifact_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.push_artifact_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def push_artifact_with_http_info(self, body, **kwargs):  # noqa: E501
        """push_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.push_artifact_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArtifactRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method push_artifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `push_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/push', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reclassify_artifacts(self, artifact_ci_id, **kwargs):  # noqa: E501
        """reclassify_artifacts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reclassify_artifacts(artifact_ci_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifact_ci_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reclassify_artifacts_with_http_info(artifact_ci_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reclassify_artifacts_with_http_info(artifact_ci_id, **kwargs)  # noqa: E501
            return data

    def reclassify_artifacts_with_http_info(self, artifact_ci_id, **kwargs):  # noqa: E501
        """reclassify_artifacts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reclassify_artifacts_with_http_info(artifact_ci_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifact_ci_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['artifact_ci_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reclassify_artifacts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'artifact_ci_id' is set
        if ('artifact_ci_id' not in params or
                params['artifact_ci_id'] is None):
            raise ValueError("Missing the required parameter `artifact_ci_id` when calling `reclassify_artifacts`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'artifact_ci_id' in params:
            query_params.append(('artifactCiId', params['artifact_ci_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/reclassify', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_artifact(self, body, **kwargs):  # noqa: E501
        """register_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_artifact(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Artifact body: (required)
        :return: list[Artifact]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_artifact_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.register_artifact_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def register_artifact_with_http_info(self, body, **kwargs):  # noqa: E501
        """register_artifact  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_artifact_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Artifact body: (required)
        :return: list[Artifact]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_artifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/register', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Artifact]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_artifact_by_env(self, body, **kwargs):  # noqa: E501
        """register_artifact_by_env  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_artifact_by_env(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArtifactByEnvironmentRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_artifact_by_env_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.register_artifact_by_env_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def register_artifact_by_env_with_http_info(self, body, **kwargs):  # noqa: E501
        """register_artifact_by_env  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_artifact_by_env_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArtifactByEnvironmentRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_artifact_by_env" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_artifact_by_env`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/register-by-env', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_artifact_by_release_stream(self, body, **kwargs):  # noqa: E501
        """register_artifact_by_release_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_artifact_by_release_stream(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArtifactByReleaseStreamRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_artifact_by_release_stream_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.register_artifact_by_release_stream_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def register_artifact_by_release_stream_with_http_info(self, body, **kwargs):  # noqa: E501
        """register_artifact_by_release_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_artifact_by_release_stream_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArtifactByReleaseStreamRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_artifact_by_release_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_artifact_by_release_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/register-by-release-stream', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_artifact_saas1(self, body, **kwargs):  # noqa: E501
        """register_artifact_saas1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_artifact_saas1(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaasArtifactRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_artifact_saas1_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.register_artifact_saas1_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def register_artifact_saas1_with_http_info(self, body, **kwargs):  # noqa: E501
        """register_artifact_saas1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_artifact_saas1_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaasArtifactRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_artifact_saas1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_artifact_saas1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/register-saas', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_artifact_v2(self, body, **kwargs):  # noqa: E501
        """register_artifact_v2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_artifact_v2(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArtifactRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_artifact_v2_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.register_artifact_v2_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def register_artifact_v2_with_http_info(self, body, **kwargs):  # noqa: E501
        """register_artifact_v2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_artifact_v2_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArtifactRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_artifact_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_artifact_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/registerV2', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_release_stream(self, cluster_id, current_release_stream, updated_release_stream, include_apps, exclude_apps, **kwargs):  # noqa: E501
        """update_release_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_release_stream(cluster_id, current_release_stream, updated_release_stream, include_apps, exclude_apps, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str current_release_stream: (required)
        :param str updated_release_stream: (required)
        :param list[str] include_apps: (required)
        :param list[str] exclude_apps: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_release_stream_with_http_info(cluster_id, current_release_stream, updated_release_stream, include_apps, exclude_apps, **kwargs)  # noqa: E501
        else:
            (data) = self.update_release_stream_with_http_info(cluster_id, current_release_stream, updated_release_stream, include_apps, exclude_apps, **kwargs)  # noqa: E501
            return data

    def update_release_stream_with_http_info(self, cluster_id, current_release_stream, updated_release_stream, include_apps, exclude_apps, **kwargs):  # noqa: E501
        """update_release_stream  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_release_stream_with_http_info(cluster_id, current_release_stream, updated_release_stream, include_apps, exclude_apps, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: (required)
        :param str current_release_stream: (required)
        :param str updated_release_stream: (required)
        :param list[str] include_apps: (required)
        :param list[str] exclude_apps: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'current_release_stream', 'updated_release_stream', 'include_apps', 'exclude_apps']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_release_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `update_release_stream`")  # noqa: E501
        # verify the required parameter 'current_release_stream' is set
        if ('current_release_stream' not in params or
                params['current_release_stream'] is None):
            raise ValueError("Missing the required parameter `current_release_stream` when calling `update_release_stream`")  # noqa: E501
        # verify the required parameter 'updated_release_stream' is set
        if ('updated_release_stream' not in params or
                params['updated_release_stream'] is None):
            raise ValueError("Missing the required parameter `updated_release_stream` when calling `update_release_stream`")  # noqa: E501
        # verify the required parameter 'include_apps' is set
        if ('include_apps' not in params or
                params['include_apps'] is None):
            raise ValueError("Missing the required parameter `include_apps` when calling `update_release_stream`")  # noqa: E501
        # verify the required parameter 'exclude_apps' is set
        if ('exclude_apps' not in params or
                params['exclude_apps'] is None):
            raise ValueError("Missing the required parameter `exclude_apps` when calling `update_release_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'current_release_stream' in params:
            path_params['currentReleaseStream'] = params['current_release_stream']  # noqa: E501
        if 'updated_release_stream' in params:
            path_params['updatedReleaseStream'] = params['updated_release_stream']  # noqa: E501

        query_params = []
        if 'include_apps' in params:
            query_params.append(('includeApps', params['include_apps']))  # noqa: E501
            collection_formats['includeApps'] = 'multi'  # noqa: E501
        if 'exclude_apps' in params:
            query_params.append(('excludeApps', params['exclude_apps']))  # noqa: E501
            collection_formats['excludeApps'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/clusterId/{clusterId}/currentReleaseStream/{currentReleaseStream}/updatedReleaseStream/{updatedReleaseStream}/updateStream', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_artifacts_zip(self, **kwargs):  # noqa: E501
        """upload_artifacts_zip  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_artifacts_zip(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArtifactsUploadBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_artifacts_zip_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.upload_artifacts_zip_with_http_info(**kwargs)  # noqa: E501
            return data

    def upload_artifacts_zip_with_http_info(self, **kwargs):  # noqa: E501
        """upload_artifacts_zip  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_artifacts_zip_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArtifactsUploadBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_artifacts_zip" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifacts/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
