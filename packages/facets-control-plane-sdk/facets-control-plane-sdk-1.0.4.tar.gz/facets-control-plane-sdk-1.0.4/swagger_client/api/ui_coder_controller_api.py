# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UiCoderControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_workspace_with_existing_branch(self, body, stack_name, resource_type, resource_name, **kwargs):  # noqa: E501
        """create_workspace_with_existing_branch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workspace_with_existing_branch(body, stack_name, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateWorkspaceExistingBranchRequest body: (required)
        :param str stack_name: (required)
        :param str resource_type: (required)
        :param str resource_name: (required)
        :return: CoderWorkspaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_workspace_with_existing_branch_with_http_info(body, stack_name, resource_type, resource_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_workspace_with_existing_branch_with_http_info(body, stack_name, resource_type, resource_name, **kwargs)  # noqa: E501
            return data

    def create_workspace_with_existing_branch_with_http_info(self, body, stack_name, resource_type, resource_name, **kwargs):  # noqa: E501
        """create_workspace_with_existing_branch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workspace_with_existing_branch_with_http_info(body, stack_name, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateWorkspaceExistingBranchRequest body: (required)
        :param str stack_name: (required)
        :param str resource_type: (required)
        :param str resource_name: (required)
        :return: CoderWorkspaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name', 'resource_type', 'resource_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_workspace_with_existing_branch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_workspace_with_existing_branch`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `create_workspace_with_existing_branch`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `create_workspace_with_existing_branch`")  # noqa: E501
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `create_workspace_with_existing_branch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/existing-branch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoderWorkspaceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_workspace_with_existing_branch1(self, body, stack_name, **kwargs):  # noqa: E501
        """create_workspace_with_existing_branch1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workspace_with_existing_branch1(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateWorkspaceExistingBranchRequest body: (required)
        :param str stack_name: (required)
        :return: CoderWorkspaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_workspace_with_existing_branch1_with_http_info(body, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_workspace_with_existing_branch1_with_http_info(body, stack_name, **kwargs)  # noqa: E501
            return data

    def create_workspace_with_existing_branch1_with_http_info(self, body, stack_name, **kwargs):  # noqa: E501
        """create_workspace_with_existing_branch1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workspace_with_existing_branch1_with_http_info(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateWorkspaceExistingBranchRequest body: (required)
        :param str stack_name: (required)
        :return: CoderWorkspaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_workspace_with_existing_branch1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_workspace_with_existing_branch1`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `create_workspace_with_existing_branch1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/coder/stack/{stackName}/existing-branch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoderWorkspaceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_workspace_with_new_branch(self, body, stack_name, resource_type, resource_name, **kwargs):  # noqa: E501
        """create_workspace_with_new_branch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workspace_with_new_branch(body, stack_name, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateWorkspaceNewBranchRequest body: (required)
        :param str stack_name: (required)
        :param str resource_type: (required)
        :param str resource_name: (required)
        :return: CoderWorkspaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_workspace_with_new_branch_with_http_info(body, stack_name, resource_type, resource_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_workspace_with_new_branch_with_http_info(body, stack_name, resource_type, resource_name, **kwargs)  # noqa: E501
            return data

    def create_workspace_with_new_branch_with_http_info(self, body, stack_name, resource_type, resource_name, **kwargs):  # noqa: E501
        """create_workspace_with_new_branch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workspace_with_new_branch_with_http_info(body, stack_name, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateWorkspaceNewBranchRequest body: (required)
        :param str stack_name: (required)
        :param str resource_type: (required)
        :param str resource_name: (required)
        :return: CoderWorkspaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name', 'resource_type', 'resource_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_workspace_with_new_branch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_workspace_with_new_branch`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `create_workspace_with_new_branch`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `create_workspace_with_new_branch`")  # noqa: E501
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `create_workspace_with_new_branch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/new-branch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoderWorkspaceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_workspace_with_new_branch1(self, body, stack_name, **kwargs):  # noqa: E501
        """create_workspace_with_new_branch1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workspace_with_new_branch1(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateWorkspaceNewBranchRequest body: (required)
        :param str stack_name: (required)
        :return: CoderWorkspaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_workspace_with_new_branch1_with_http_info(body, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_workspace_with_new_branch1_with_http_info(body, stack_name, **kwargs)  # noqa: E501
            return data

    def create_workspace_with_new_branch1_with_http_info(self, body, stack_name, **kwargs):  # noqa: E501
        """create_workspace_with_new_branch1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workspace_with_new_branch1_with_http_info(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateWorkspaceNewBranchRequest body: (required)
        :param str stack_name: (required)
        :return: CoderWorkspaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_workspace_with_new_branch1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_workspace_with_new_branch1`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `create_workspace_with_new_branch1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/coder/stack/{stackName}/new-branch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoderWorkspaceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all3(self, stack_name, **kwargs):  # noqa: E501
        """get_all3  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all3(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :return: list[CoderWorkspaceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all3_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all3_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def get_all3_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """get_all3  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all3_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :return: list[CoderWorkspaceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_all3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/coder/stack/{stackName}/workspaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CoderWorkspaceResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all4(self, stack_name, resource_type, resource_name, **kwargs):  # noqa: E501
        """get_all4  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all4(stack_name, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str resource_type: (required)
        :param str resource_name: (required)
        :return: list[CoderWorkspaceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all4_with_http_info(stack_name, resource_type, resource_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all4_with_http_info(stack_name, resource_type, resource_name, **kwargs)  # noqa: E501
            return data

    def get_all4_with_http_info(self, stack_name, resource_type, resource_name, **kwargs):  # noqa: E501
        """get_all4  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all4_with_http_info(stack_name, resource_type, resource_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :param str resource_type: (required)
        :param str resource_name: (required)
        :return: list[CoderWorkspaceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'resource_type', 'resource_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_all4`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `get_all4`")  # noqa: E501
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `get_all4`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/coder/stack/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workspaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CoderWorkspaceResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def identify_coder_launch_eligible(self, stack_name, **kwargs):  # noqa: E501
        """identify_coder_launch_eligible  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.identify_coder_launch_eligible(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :return: CoderLaunchEligibilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.identify_coder_launch_eligible_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.identify_coder_launch_eligible_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def identify_coder_launch_eligible_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """identify_coder_launch_eligible  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.identify_coder_launch_eligible_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :return: CoderLaunchEligibilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method identify_coder_launch_eligible" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `identify_coder_launch_eligible`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/coder/stack/{stackName}/coder-eligibility', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoderLaunchEligibilityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
