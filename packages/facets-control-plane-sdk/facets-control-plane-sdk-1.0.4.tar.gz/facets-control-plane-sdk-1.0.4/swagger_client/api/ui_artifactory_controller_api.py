# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UiArtifactoryControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def associate_stacks(self, body, artifactory_id, **kwargs):  # noqa: E501
        """associate_stacks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_stacks(body, artifactory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: (required)
        :param str artifactory_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associate_stacks_with_http_info(body, artifactory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.associate_stacks_with_http_info(body, artifactory_id, **kwargs)  # noqa: E501
            return data

    def associate_stacks_with_http_info(self, body, artifactory_id, **kwargs):  # noqa: E501
        """associate_stacks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_stacks_with_http_info(body, artifactory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: (required)
        :param str artifactory_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'artifactory_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_stacks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `associate_stacks`")  # noqa: E501
        # verify the required parameter 'artifactory_id' is set
        if ('artifactory_id' not in params or
                params['artifactory_id'] is None):
            raise ValueError("Missing the required parameter `artifactory_id` when calling `associate_stacks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'artifactory_id' in params:
            path_params['artifactoryId'] = params['artifactory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifactories/{artifactoryId}/associate-projects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_artifactory_mirror(self, body, **kwargs):  # noqa: E501
        """create_artifactory_mirror  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_artifactory_mirror(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArtifactoryMirror body: (required)
        :return: ArtifactoryMirror
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_artifactory_mirror_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_artifactory_mirror_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_artifactory_mirror_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_artifactory_mirror  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_artifactory_mirror_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArtifactoryMirror body: (required)
        :return: ArtifactoryMirror
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_artifactory_mirror" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_artifactory_mirror`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifactories/mirrors', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArtifactoryMirror',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_basic_docker_artifactory(self, body, **kwargs):  # noqa: E501
        """create_basic_docker_artifactory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_basic_docker_artifactory(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BasicDockerDTO body: (required)
        :return: BasicDockerArtifactory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_basic_docker_artifactory_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_basic_docker_artifactory_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_basic_docker_artifactory_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_basic_docker_artifactory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_basic_docker_artifactory_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BasicDockerDTO body: (required)
        :return: BasicDockerArtifactory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_basic_docker_artifactory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_basic_docker_artifactory`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifactories/others', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasicDockerArtifactory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ecr_artifactory(self, body, **kwargs):  # noqa: E501
        """create_ecr_artifactory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ecr_artifactory(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ECRArtifactory body: (required)
        :return: ECRArtifactory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ecr_artifactory_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ecr_artifactory_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_ecr_artifactory_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_ecr_artifactory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ecr_artifactory_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ECRArtifactory body: (required)
        :return: ECRArtifactory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ecr_artifactory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_ecr_artifactory`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifactories', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ECRArtifactory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_artifactory(self, artifactory_id, **kwargs):  # noqa: E501
        """delete_artifactory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_artifactory(artifactory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifactory_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_artifactory_with_http_info(artifactory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_artifactory_with_http_info(artifactory_id, **kwargs)  # noqa: E501
            return data

    def delete_artifactory_with_http_info(self, artifactory_id, **kwargs):  # noqa: E501
        """delete_artifactory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_artifactory_with_http_info(artifactory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifactory_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['artifactory_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_artifactory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'artifactory_id' is set
        if ('artifactory_id' not in params or
                params['artifactory_id'] is None):
            raise ValueError("Missing the required parameter `artifactory_id` when calling `delete_artifactory`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'artifactory_id' in params:
            path_params['artifactoryId'] = params['artifactory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifactories/v2/{artifactoryId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ecr_artifactory(self, artifactory_id, **kwargs):  # noqa: E501
        """delete_ecr_artifactory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ecr_artifactory(artifactory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifactory_id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ecr_artifactory_with_http_info(artifactory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ecr_artifactory_with_http_info(artifactory_id, **kwargs)  # noqa: E501
            return data

    def delete_ecr_artifactory_with_http_info(self, artifactory_id, **kwargs):  # noqa: E501
        """delete_ecr_artifactory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ecr_artifactory_with_http_info(artifactory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifactory_id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['artifactory_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ecr_artifactory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'artifactory_id' is set
        if ('artifactory_id' not in params or
                params['artifactory_id'] is None):
            raise ValueError("Missing the required parameter `artifactory_id` when calling `delete_ecr_artifactory`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'artifactory_id' in params:
            path_params['artifactoryId'] = params['artifactory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifactories/{artifactoryId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_artifactories(self, **kwargs):  # noqa: E501
        """get_all_artifactories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_artifactories(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Artifactory]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_artifactories_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_artifactories_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_artifactories_with_http_info(self, **kwargs):  # noqa: E501
        """get_all_artifactories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_artifactories_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Artifactory]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_artifactories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifactories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Artifactory]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_artifactories_for_stack(self, stack_name, **kwargs):  # noqa: E501
        """get_all_artifactories_for_stack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_artifactories_for_stack(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :return: list[Artifactory]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_artifactories_for_stack_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_artifactories_for_stack_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def get_all_artifactories_for_stack_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """get_all_artifactories_for_stack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_artifactories_for_stack_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: (required)
        :return: list[Artifactory]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_artifactories_for_stack" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_all_artifactories_for_stack`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifactories/stack/{stackName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Artifactory]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_artifactory_by_id(self, artifactory_id, **kwargs):  # noqa: E501
        """get_artifactory_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifactory_by_id(artifactory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifactory_id: (required)
        :return: Artifactory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_artifactory_by_id_with_http_info(artifactory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_artifactory_by_id_with_http_info(artifactory_id, **kwargs)  # noqa: E501
            return data

    def get_artifactory_by_id_with_http_info(self, artifactory_id, **kwargs):  # noqa: E501
        """get_artifactory_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifactory_by_id_with_http_info(artifactory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifactory_id: (required)
        :return: Artifactory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['artifactory_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_artifactory_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'artifactory_id' is set
        if ('artifactory_id' not in params or
                params['artifactory_id'] is None):
            raise ValueError("Missing the required parameter `artifactory_id` when calling `get_artifactory_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'artifactory_id' in params:
            path_params['artifactoryId'] = params['artifactory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifactories/{artifactoryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Artifactory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_artifactory_by_name(self, name, **kwargs):  # noqa: E501
        """get_artifactory_by_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifactory_by_name(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: Artifactory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_artifactory_by_name_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_artifactory_by_name_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_artifactory_by_name_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_artifactory_by_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_artifactory_by_name_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: Artifactory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_artifactory_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_artifactory_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifactories/name/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Artifactory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_repositories(self, artifactory_id, **kwargs):  # noqa: E501
        """get_repositories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repositories(artifactory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifactory_id: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_repositories_with_http_info(artifactory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_repositories_with_http_info(artifactory_id, **kwargs)  # noqa: E501
            return data

    def get_repositories_with_http_info(self, artifactory_id, **kwargs):  # noqa: E501
        """get_repositories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repositories_with_http_info(artifactory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifactory_id: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['artifactory_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repositories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'artifactory_id' is set
        if ('artifactory_id' not in params or
                params['artifactory_id'] is None):
            raise ValueError("Missing the required parameter `artifactory_id` when calling `get_repositories`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'artifactory_id' in params:
            path_params['artifactoryId'] = params['artifactory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifactories/{artifactoryId}/repos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_repositories_by_artifactory_name(self, name, **kwargs):  # noqa: E501
        """get_repositories_by_artifactory_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repositories_by_artifactory_name(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str artifact_type:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_repositories_by_artifactory_name_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_repositories_by_artifactory_name_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_repositories_by_artifactory_name_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_repositories_by_artifactory_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repositories_by_artifactory_name_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str artifact_type:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'artifact_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repositories_by_artifactory_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_repositories_by_artifactory_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'artifact_type' in params:
            query_params.append(('artifactType', params['artifact_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifactories/name/{name}/repos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tags(self, artifactory_id, repo, **kwargs):  # noqa: E501
        """get_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tags(artifactory_id, repo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifactory_id: (required)
        :param str repo: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tags_with_http_info(artifactory_id, repo, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tags_with_http_info(artifactory_id, repo, **kwargs)  # noqa: E501
            return data

    def get_tags_with_http_info(self, artifactory_id, repo, **kwargs):  # noqa: E501
        """get_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tags_with_http_info(artifactory_id, repo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str artifactory_id: (required)
        :param str repo: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['artifactory_id', 'repo']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'artifactory_id' is set
        if ('artifactory_id' not in params or
                params['artifactory_id'] is None):
            raise ValueError("Missing the required parameter `artifactory_id` when calling `get_tags`")  # noqa: E501
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `get_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'artifactory_id' in params:
            path_params['artifactoryId'] = params['artifactory_id']  # noqa: E501

        query_params = []
        if 'repo' in params:
            query_params.append(('repo', params['repo']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifactories/{artifactoryId}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tags_by_artifactory_name(self, name, repo, **kwargs):  # noqa: E501
        """get_tags_by_artifactory_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tags_by_artifactory_name(name, repo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str repo: (required)
        :param str artifact_type:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tags_by_artifactory_name_with_http_info(name, repo, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tags_by_artifactory_name_with_http_info(name, repo, **kwargs)  # noqa: E501
            return data

    def get_tags_by_artifactory_name_with_http_info(self, name, repo, **kwargs):  # noqa: E501
        """get_tags_by_artifactory_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tags_by_artifactory_name_with_http_info(name, repo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str repo: (required)
        :param str artifact_type:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'repo', 'artifact_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tags_by_artifactory_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_tags_by_artifactory_name`")  # noqa: E501
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `get_tags_by_artifactory_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'repo' in params:
            query_params.append(('repo', params['repo']))  # noqa: E501
        if 'artifact_type' in params:
            query_params.append(('artifactType', params['artifact_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifactories/name/{name}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_artifactory_linking(self, body, **kwargs):  # noqa: E501
        """request_artifactory_linking  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_artifactory_linking(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArtifactoryLinkingRequest body: (required)
        :return: OneTimeWebhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_artifactory_linking_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.request_artifactory_linking_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def request_artifactory_linking_with_http_info(self, body, **kwargs):  # noqa: E501
        """request_artifactory_linking  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_artifactory_linking_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArtifactoryLinkingRequest body: (required)
        :return: OneTimeWebhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_artifactory_linking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `request_artifactory_linking`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifactories/link-container-registry', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OneTimeWebhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_basic_docker_artifactory(self, body, artifactory_id, **kwargs):  # noqa: E501
        """update_basic_docker_artifactory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_basic_docker_artifactory(body, artifactory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BasicDockerDTO body: (required)
        :param str artifactory_id: (required)
        :return: BasicDockerArtifactory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_basic_docker_artifactory_with_http_info(body, artifactory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_basic_docker_artifactory_with_http_info(body, artifactory_id, **kwargs)  # noqa: E501
            return data

    def update_basic_docker_artifactory_with_http_info(self, body, artifactory_id, **kwargs):  # noqa: E501
        """update_basic_docker_artifactory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_basic_docker_artifactory_with_http_info(body, artifactory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BasicDockerDTO body: (required)
        :param str artifactory_id: (required)
        :return: BasicDockerArtifactory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'artifactory_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_basic_docker_artifactory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_basic_docker_artifactory`")  # noqa: E501
        # verify the required parameter 'artifactory_id' is set
        if ('artifactory_id' not in params or
                params['artifactory_id'] is None):
            raise ValueError("Missing the required parameter `artifactory_id` when calling `update_basic_docker_artifactory`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'artifactory_id' in params:
            path_params['artifactoryId'] = params['artifactory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifactories/others/{artifactoryId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasicDockerArtifactory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ecr_artifactory(self, body, artifactory_id, **kwargs):  # noqa: E501
        """update_ecr_artifactory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ecr_artifactory(body, artifactory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ECRArtifactory body: (required)
        :param str artifactory_id: (required)
        :return: ECRArtifactory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ecr_artifactory_with_http_info(body, artifactory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ecr_artifactory_with_http_info(body, artifactory_id, **kwargs)  # noqa: E501
            return data

    def update_ecr_artifactory_with_http_info(self, body, artifactory_id, **kwargs):  # noqa: E501
        """update_ecr_artifactory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ecr_artifactory_with_http_info(body, artifactory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ECRArtifactory body: (required)
        :param str artifactory_id: (required)
        :return: ECRArtifactory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'artifactory_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ecr_artifactory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_ecr_artifactory`")  # noqa: E501
        # verify the required parameter 'artifactory_id' is set
        if ('artifactory_id' not in params or
                params['artifactory_id'] is None):
            raise ValueError("Missing the required parameter `artifactory_id` when calling `update_ecr_artifactory`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'artifactory_id' in params:
            path_params['artifactoryId'] = params['artifactory_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/artifactories/{artifactoryId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ECRArtifactory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
