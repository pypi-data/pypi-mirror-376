# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValidationError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filename': 'str',
        'error': 'str',
        'directory': 'str',
        'type': 'str',
        'syntax_error': 'bool'
    }

    attribute_map = {
        'filename': 'filename',
        'error': 'error',
        'directory': 'directory',
        'type': 'type',
        'syntax_error': 'syntaxError'
    }

    def __init__(self, filename=None, error=None, directory=None, type=None, syntax_error=None):  # noqa: E501
        """ValidationError - a model defined in Swagger"""  # noqa: E501
        self._filename = None
        self._error = None
        self._directory = None
        self._type = None
        self._syntax_error = None
        self.discriminator = None
        if filename is not None:
            self.filename = filename
        if error is not None:
            self.error = error
        if directory is not None:
            self.directory = directory
        if type is not None:
            self.type = type
        if syntax_error is not None:
            self.syntax_error = syntax_error

    @property
    def filename(self):
        """Gets the filename of this ValidationError.  # noqa: E501


        :return: The filename of this ValidationError.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ValidationError.


        :param filename: The filename of this ValidationError.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def error(self):
        """Gets the error of this ValidationError.  # noqa: E501


        :return: The error of this ValidationError.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ValidationError.


        :param error: The error of this ValidationError.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def directory(self):
        """Gets the directory of this ValidationError.  # noqa: E501


        :return: The directory of this ValidationError.  # noqa: E501
        :rtype: str
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this ValidationError.


        :param directory: The directory of this ValidationError.  # noqa: E501
        :type: str
        """

        self._directory = directory

    @property
    def type(self):
        """Gets the type of this ValidationError.  # noqa: E501


        :return: The type of this ValidationError.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ValidationError.


        :param type: The type of this ValidationError.  # noqa: E501
        :type: str
        """
        allowed_values = ["Syntax Error", "Missing File Error", "Reference Error", "Invalid Filename"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def syntax_error(self):
        """Gets the syntax_error of this ValidationError.  # noqa: E501


        :return: The syntax_error of this ValidationError.  # noqa: E501
        :rtype: bool
        """
        return self._syntax_error

    @syntax_error.setter
    def syntax_error(self, syntax_error):
        """Sets the syntax_error of this ValidationError.


        :param syntax_error: The syntax_error of this ValidationError.  # noqa: E501
        :type: bool
        """

        self._syntax_error = syntax_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValidationError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidationError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
