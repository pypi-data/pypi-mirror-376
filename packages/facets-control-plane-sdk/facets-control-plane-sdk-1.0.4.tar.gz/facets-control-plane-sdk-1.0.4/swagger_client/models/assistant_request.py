# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssistantRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'thread_id': 'str',
        'action_name': 'str',
        'message': 'str',
        'context': 'JSONObject'
    }

    attribute_map = {
        'thread_id': 'threadId',
        'action_name': 'actionName',
        'message': 'message',
        'context': 'context'
    }

    def __init__(self, thread_id=None, action_name=None, message=None, context=None):  # noqa: E501
        """AssistantRequest - a model defined in Swagger"""  # noqa: E501
        self._thread_id = None
        self._action_name = None
        self._message = None
        self._context = None
        self.discriminator = None
        if thread_id is not None:
            self.thread_id = thread_id
        if action_name is not None:
            self.action_name = action_name
        if message is not None:
            self.message = message
        if context is not None:
            self.context = context

    @property
    def thread_id(self):
        """Gets the thread_id of this AssistantRequest.  # noqa: E501


        :return: The thread_id of this AssistantRequest.  # noqa: E501
        :rtype: str
        """
        return self._thread_id

    @thread_id.setter
    def thread_id(self, thread_id):
        """Sets the thread_id of this AssistantRequest.


        :param thread_id: The thread_id of this AssistantRequest.  # noqa: E501
        :type: str
        """

        self._thread_id = thread_id

    @property
    def action_name(self):
        """Gets the action_name of this AssistantRequest.  # noqa: E501


        :return: The action_name of this AssistantRequest.  # noqa: E501
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this AssistantRequest.


        :param action_name: The action_name of this AssistantRequest.  # noqa: E501
        :type: str
        """

        self._action_name = action_name

    @property
    def message(self):
        """Gets the message of this AssistantRequest.  # noqa: E501


        :return: The message of this AssistantRequest.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AssistantRequest.


        :param message: The message of this AssistantRequest.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def context(self):
        """Gets the context of this AssistantRequest.  # noqa: E501


        :return: The context of this AssistantRequest.  # noqa: E501
        :rtype: JSONObject
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this AssistantRequest.


        :param context: The context of this AssistantRequest.  # noqa: E501
        :type: JSONObject
        """

        self._context = context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssistantRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssistantRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
