# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateProjectRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blueprint_name': 'str',
        'cloud': 'str',
        'allowed_clouds': 'list[str]',
        'description': 'str',
        'git_ops_request': 'EnableGitOpsRequest',
        'draft_clusters': 'list[DraftClusterRequest]',
        'vcs_account_id': 'str',
        'org_name': 'str',
        'project_type_id': 'str',
        'bitbucket_project_key': 'str',
        'template_id': 'str'
    }

    attribute_map = {
        'blueprint_name': 'blueprintName',
        'cloud': 'cloud',
        'allowed_clouds': 'allowedClouds',
        'description': 'description',
        'git_ops_request': 'gitOpsRequest',
        'draft_clusters': 'draftClusters',
        'vcs_account_id': 'vcsAccountId',
        'org_name': 'orgName',
        'project_type_id': 'projectTypeId',
        'bitbucket_project_key': 'bitbucketProjectKey',
        'template_id': 'templateId'
    }

    def __init__(self, blueprint_name=None, cloud=None, allowed_clouds=None, description=None, git_ops_request=None, draft_clusters=None, vcs_account_id=None, org_name=None, project_type_id=None, bitbucket_project_key=None, template_id=None):  # noqa: E501
        """CreateProjectRequest - a model defined in Swagger"""  # noqa: E501
        self._blueprint_name = None
        self._cloud = None
        self._allowed_clouds = None
        self._description = None
        self._git_ops_request = None
        self._draft_clusters = None
        self._vcs_account_id = None
        self._org_name = None
        self._project_type_id = None
        self._bitbucket_project_key = None
        self._template_id = None
        self.discriminator = None
        if blueprint_name is not None:
            self.blueprint_name = blueprint_name
        if cloud is not None:
            self.cloud = cloud
        if allowed_clouds is not None:
            self.allowed_clouds = allowed_clouds
        if description is not None:
            self.description = description
        if git_ops_request is not None:
            self.git_ops_request = git_ops_request
        if draft_clusters is not None:
            self.draft_clusters = draft_clusters
        if vcs_account_id is not None:
            self.vcs_account_id = vcs_account_id
        if org_name is not None:
            self.org_name = org_name
        if project_type_id is not None:
            self.project_type_id = project_type_id
        if bitbucket_project_key is not None:
            self.bitbucket_project_key = bitbucket_project_key
        if template_id is not None:
            self.template_id = template_id

    @property
    def blueprint_name(self):
        """Gets the blueprint_name of this CreateProjectRequest.  # noqa: E501


        :return: The blueprint_name of this CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._blueprint_name

    @blueprint_name.setter
    def blueprint_name(self, blueprint_name):
        """Sets the blueprint_name of this CreateProjectRequest.


        :param blueprint_name: The blueprint_name of this CreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._blueprint_name = blueprint_name

    @property
    def cloud(self):
        """Gets the cloud of this CreateProjectRequest.  # noqa: E501


        :return: The cloud of this CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this CreateProjectRequest.


        :param cloud: The cloud of this CreateProjectRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["AWS", "AZURE", "LOCAL", "GCP", "KUBERNETES", "NO_CLOUD"]  # noqa: E501
        if cloud not in allowed_values:
            raise ValueError(
                "Invalid value for `cloud` ({0}), must be one of {1}"  # noqa: E501
                .format(cloud, allowed_values)
            )

        self._cloud = cloud

    @property
    def allowed_clouds(self):
        """Gets the allowed_clouds of this CreateProjectRequest.  # noqa: E501


        :return: The allowed_clouds of this CreateProjectRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_clouds

    @allowed_clouds.setter
    def allowed_clouds(self, allowed_clouds):
        """Sets the allowed_clouds of this CreateProjectRequest.


        :param allowed_clouds: The allowed_clouds of this CreateProjectRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["AWS", "AZURE", "LOCAL", "GCP", "KUBERNETES", "NO_CLOUD"]  # noqa: E501
        if not set(allowed_clouds).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `allowed_clouds` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(allowed_clouds) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._allowed_clouds = allowed_clouds

    @property
    def description(self):
        """Gets the description of this CreateProjectRequest.  # noqa: E501


        :return: The description of this CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateProjectRequest.


        :param description: The description of this CreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def git_ops_request(self):
        """Gets the git_ops_request of this CreateProjectRequest.  # noqa: E501


        :return: The git_ops_request of this CreateProjectRequest.  # noqa: E501
        :rtype: EnableGitOpsRequest
        """
        return self._git_ops_request

    @git_ops_request.setter
    def git_ops_request(self, git_ops_request):
        """Sets the git_ops_request of this CreateProjectRequest.


        :param git_ops_request: The git_ops_request of this CreateProjectRequest.  # noqa: E501
        :type: EnableGitOpsRequest
        """

        self._git_ops_request = git_ops_request

    @property
    def draft_clusters(self):
        """Gets the draft_clusters of this CreateProjectRequest.  # noqa: E501


        :return: The draft_clusters of this CreateProjectRequest.  # noqa: E501
        :rtype: list[DraftClusterRequest]
        """
        return self._draft_clusters

    @draft_clusters.setter
    def draft_clusters(self, draft_clusters):
        """Sets the draft_clusters of this CreateProjectRequest.


        :param draft_clusters: The draft_clusters of this CreateProjectRequest.  # noqa: E501
        :type: list[DraftClusterRequest]
        """

        self._draft_clusters = draft_clusters

    @property
    def vcs_account_id(self):
        """Gets the vcs_account_id of this CreateProjectRequest.  # noqa: E501


        :return: The vcs_account_id of this CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._vcs_account_id

    @vcs_account_id.setter
    def vcs_account_id(self, vcs_account_id):
        """Sets the vcs_account_id of this CreateProjectRequest.


        :param vcs_account_id: The vcs_account_id of this CreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._vcs_account_id = vcs_account_id

    @property
    def org_name(self):
        """Gets the org_name of this CreateProjectRequest.  # noqa: E501


        :return: The org_name of this CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this CreateProjectRequest.


        :param org_name: The org_name of this CreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._org_name = org_name

    @property
    def project_type_id(self):
        """Gets the project_type_id of this CreateProjectRequest.  # noqa: E501


        :return: The project_type_id of this CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_type_id

    @project_type_id.setter
    def project_type_id(self, project_type_id):
        """Sets the project_type_id of this CreateProjectRequest.


        :param project_type_id: The project_type_id of this CreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._project_type_id = project_type_id

    @property
    def bitbucket_project_key(self):
        """Gets the bitbucket_project_key of this CreateProjectRequest.  # noqa: E501


        :return: The bitbucket_project_key of this CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._bitbucket_project_key

    @bitbucket_project_key.setter
    def bitbucket_project_key(self, bitbucket_project_key):
        """Sets the bitbucket_project_key of this CreateProjectRequest.


        :param bitbucket_project_key: The bitbucket_project_key of this CreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._bitbucket_project_key = bitbucket_project_key

    @property
    def template_id(self):
        """Gets the template_id of this CreateProjectRequest.  # noqa: E501


        :return: The template_id of this CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this CreateProjectRequest.


        :param template_id: The template_id of this CreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateProjectRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateProjectRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
