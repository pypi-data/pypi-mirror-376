# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CronJobDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'schedule': 'str',
        'suspend': 'bool',
        'active': 'int',
        'last_schedule': 'str',
        'age_in_seconds': 'int'
    }

    attribute_map = {
        'name': 'name',
        'schedule': 'schedule',
        'suspend': 'suspend',
        'active': 'active',
        'last_schedule': 'lastSchedule',
        'age_in_seconds': 'ageInSeconds'
    }

    def __init__(self, name=None, schedule=None, suspend=None, active=None, last_schedule=None, age_in_seconds=None):  # noqa: E501
        """CronJobDTO - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._schedule = None
        self._suspend = None
        self._active = None
        self._last_schedule = None
        self._age_in_seconds = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if schedule is not None:
            self.schedule = schedule
        if suspend is not None:
            self.suspend = suspend
        if active is not None:
            self.active = active
        if last_schedule is not None:
            self.last_schedule = last_schedule
        if age_in_seconds is not None:
            self.age_in_seconds = age_in_seconds

    @property
    def name(self):
        """Gets the name of this CronJobDTO.  # noqa: E501


        :return: The name of this CronJobDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CronJobDTO.


        :param name: The name of this CronJobDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def schedule(self):
        """Gets the schedule of this CronJobDTO.  # noqa: E501


        :return: The schedule of this CronJobDTO.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this CronJobDTO.


        :param schedule: The schedule of this CronJobDTO.  # noqa: E501
        :type: str
        """

        self._schedule = schedule

    @property
    def suspend(self):
        """Gets the suspend of this CronJobDTO.  # noqa: E501


        :return: The suspend of this CronJobDTO.  # noqa: E501
        :rtype: bool
        """
        return self._suspend

    @suspend.setter
    def suspend(self, suspend):
        """Sets the suspend of this CronJobDTO.


        :param suspend: The suspend of this CronJobDTO.  # noqa: E501
        :type: bool
        """

        self._suspend = suspend

    @property
    def active(self):
        """Gets the active of this CronJobDTO.  # noqa: E501


        :return: The active of this CronJobDTO.  # noqa: E501
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CronJobDTO.


        :param active: The active of this CronJobDTO.  # noqa: E501
        :type: int
        """

        self._active = active

    @property
    def last_schedule(self):
        """Gets the last_schedule of this CronJobDTO.  # noqa: E501


        :return: The last_schedule of this CronJobDTO.  # noqa: E501
        :rtype: str
        """
        return self._last_schedule

    @last_schedule.setter
    def last_schedule(self, last_schedule):
        """Sets the last_schedule of this CronJobDTO.


        :param last_schedule: The last_schedule of this CronJobDTO.  # noqa: E501
        :type: str
        """

        self._last_schedule = last_schedule

    @property
    def age_in_seconds(self):
        """Gets the age_in_seconds of this CronJobDTO.  # noqa: E501


        :return: The age_in_seconds of this CronJobDTO.  # noqa: E501
        :rtype: int
        """
        return self._age_in_seconds

    @age_in_seconds.setter
    def age_in_seconds(self, age_in_seconds):
        """Sets the age_in_seconds of this CronJobDTO.


        :param age_in_seconds: The age_in_seconds of this CronJobDTO.  # noqa: E501
        :type: int
        """

        self._age_in_seconds = age_in_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CronJobDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CronJobDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
