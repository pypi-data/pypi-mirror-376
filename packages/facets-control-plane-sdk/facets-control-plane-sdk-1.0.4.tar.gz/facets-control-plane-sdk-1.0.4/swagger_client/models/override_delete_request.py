# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OverrideDeleteRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'resource_name': 'str',
        'deletions': 'list[OverrideDelete]',
        'cluster_ids': 'list[str]'
    }

    attribute_map = {
        'resource_type': 'resourceType',
        'resource_name': 'resourceName',
        'deletions': 'deletions',
        'cluster_ids': 'clusterIds'
    }

    def __init__(self, resource_type=None, resource_name=None, deletions=None, cluster_ids=None):  # noqa: E501
        """OverrideDeleteRequest - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._resource_name = None
        self._deletions = None
        self._cluster_ids = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if resource_name is not None:
            self.resource_name = resource_name
        if deletions is not None:
            self.deletions = deletions
        if cluster_ids is not None:
            self.cluster_ids = cluster_ids

    @property
    def resource_type(self):
        """Gets the resource_type of this OverrideDeleteRequest.  # noqa: E501


        :return: The resource_type of this OverrideDeleteRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this OverrideDeleteRequest.


        :param resource_type: The resource_type of this OverrideDeleteRequest.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def resource_name(self):
        """Gets the resource_name of this OverrideDeleteRequest.  # noqa: E501


        :return: The resource_name of this OverrideDeleteRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this OverrideDeleteRequest.


        :param resource_name: The resource_name of this OverrideDeleteRequest.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def deletions(self):
        """Gets the deletions of this OverrideDeleteRequest.  # noqa: E501


        :return: The deletions of this OverrideDeleteRequest.  # noqa: E501
        :rtype: list[OverrideDelete]
        """
        return self._deletions

    @deletions.setter
    def deletions(self, deletions):
        """Sets the deletions of this OverrideDeleteRequest.


        :param deletions: The deletions of this OverrideDeleteRequest.  # noqa: E501
        :type: list[OverrideDelete]
        """

        self._deletions = deletions

    @property
    def cluster_ids(self):
        """Gets the cluster_ids of this OverrideDeleteRequest.  # noqa: E501


        :return: The cluster_ids of this OverrideDeleteRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._cluster_ids

    @cluster_ids.setter
    def cluster_ids(self, cluster_ids):
        """Sets the cluster_ids of this OverrideDeleteRequest.


        :param cluster_ids: The cluster_ids of this OverrideDeleteRequest.  # noqa: E501
        :type: list[str]
        """

        self._cluster_ids = cluster_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OverrideDeleteRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OverrideDeleteRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
