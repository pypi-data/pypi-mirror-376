# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DailyCloudCostDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stack_name': 'str',
        'unit': 'str',
        'total': 'float',
        'previous_period_total': 'float',
        'service_cost': 'list[ServiceCostDTO]',
        'daily_cost': 'list[ClusterCostDTO]',
        'last_sync': 'datetime'
    }

    attribute_map = {
        'stack_name': 'stackName',
        'unit': 'unit',
        'total': 'total',
        'previous_period_total': 'previousPeriodTotal',
        'service_cost': 'serviceCost',
        'daily_cost': 'dailyCost',
        'last_sync': 'lastSync'
    }

    def __init__(self, stack_name=None, unit=None, total=None, previous_period_total=None, service_cost=None, daily_cost=None, last_sync=None):  # noqa: E501
        """DailyCloudCostDTO - a model defined in Swagger"""  # noqa: E501
        self._stack_name = None
        self._unit = None
        self._total = None
        self._previous_period_total = None
        self._service_cost = None
        self._daily_cost = None
        self._last_sync = None
        self.discriminator = None
        if stack_name is not None:
            self.stack_name = stack_name
        if unit is not None:
            self.unit = unit
        if total is not None:
            self.total = total
        if previous_period_total is not None:
            self.previous_period_total = previous_period_total
        if service_cost is not None:
            self.service_cost = service_cost
        if daily_cost is not None:
            self.daily_cost = daily_cost
        if last_sync is not None:
            self.last_sync = last_sync

    @property
    def stack_name(self):
        """Gets the stack_name of this DailyCloudCostDTO.  # noqa: E501


        :return: The stack_name of this DailyCloudCostDTO.  # noqa: E501
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this DailyCloudCostDTO.


        :param stack_name: The stack_name of this DailyCloudCostDTO.  # noqa: E501
        :type: str
        """

        self._stack_name = stack_name

    @property
    def unit(self):
        """Gets the unit of this DailyCloudCostDTO.  # noqa: E501


        :return: The unit of this DailyCloudCostDTO.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this DailyCloudCostDTO.


        :param unit: The unit of this DailyCloudCostDTO.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def total(self):
        """Gets the total of this DailyCloudCostDTO.  # noqa: E501


        :return: The total of this DailyCloudCostDTO.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this DailyCloudCostDTO.


        :param total: The total of this DailyCloudCostDTO.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def previous_period_total(self):
        """Gets the previous_period_total of this DailyCloudCostDTO.  # noqa: E501


        :return: The previous_period_total of this DailyCloudCostDTO.  # noqa: E501
        :rtype: float
        """
        return self._previous_period_total

    @previous_period_total.setter
    def previous_period_total(self, previous_period_total):
        """Sets the previous_period_total of this DailyCloudCostDTO.


        :param previous_period_total: The previous_period_total of this DailyCloudCostDTO.  # noqa: E501
        :type: float
        """

        self._previous_period_total = previous_period_total

    @property
    def service_cost(self):
        """Gets the service_cost of this DailyCloudCostDTO.  # noqa: E501


        :return: The service_cost of this DailyCloudCostDTO.  # noqa: E501
        :rtype: list[ServiceCostDTO]
        """
        return self._service_cost

    @service_cost.setter
    def service_cost(self, service_cost):
        """Sets the service_cost of this DailyCloudCostDTO.


        :param service_cost: The service_cost of this DailyCloudCostDTO.  # noqa: E501
        :type: list[ServiceCostDTO]
        """

        self._service_cost = service_cost

    @property
    def daily_cost(self):
        """Gets the daily_cost of this DailyCloudCostDTO.  # noqa: E501


        :return: The daily_cost of this DailyCloudCostDTO.  # noqa: E501
        :rtype: list[ClusterCostDTO]
        """
        return self._daily_cost

    @daily_cost.setter
    def daily_cost(self, daily_cost):
        """Sets the daily_cost of this DailyCloudCostDTO.


        :param daily_cost: The daily_cost of this DailyCloudCostDTO.  # noqa: E501
        :type: list[ClusterCostDTO]
        """

        self._daily_cost = daily_cost

    @property
    def last_sync(self):
        """Gets the last_sync of this DailyCloudCostDTO.  # noqa: E501


        :return: The last_sync of this DailyCloudCostDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_sync

    @last_sync.setter
    def last_sync(self, last_sync):
        """Sets the last_sync of this DailyCloudCostDTO.


        :param last_sync: The last_sync of this DailyCloudCostDTO.  # noqa: E501
        :type: datetime
        """

        self._last_sync = last_sync

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DailyCloudCostDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DailyCloudCostDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
