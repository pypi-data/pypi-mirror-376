# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_seen': 'str',
        'type': 'str',
        'reason': 'str',
        'object': 'str',
        'message': 'str'
    }

    attribute_map = {
        'last_seen': 'lastSeen',
        'type': 'type',
        'reason': 'reason',
        'object': 'object',
        'message': 'message'
    }

    def __init__(self, last_seen=None, type=None, reason=None, object=None, message=None):  # noqa: E501
        """EventDTO - a model defined in Swagger"""  # noqa: E501
        self._last_seen = None
        self._type = None
        self._reason = None
        self._object = None
        self._message = None
        self.discriminator = None
        if last_seen is not None:
            self.last_seen = last_seen
        if type is not None:
            self.type = type
        if reason is not None:
            self.reason = reason
        if object is not None:
            self.object = object
        if message is not None:
            self.message = message

    @property
    def last_seen(self):
        """Gets the last_seen of this EventDTO.  # noqa: E501


        :return: The last_seen of this EventDTO.  # noqa: E501
        :rtype: str
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this EventDTO.


        :param last_seen: The last_seen of this EventDTO.  # noqa: E501
        :type: str
        """

        self._last_seen = last_seen

    @property
    def type(self):
        """Gets the type of this EventDTO.  # noqa: E501


        :return: The type of this EventDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventDTO.


        :param type: The type of this EventDTO.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def reason(self):
        """Gets the reason of this EventDTO.  # noqa: E501


        :return: The reason of this EventDTO.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this EventDTO.


        :param reason: The reason of this EventDTO.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def object(self):
        """Gets the object of this EventDTO.  # noqa: E501


        :return: The object of this EventDTO.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this EventDTO.


        :param object: The object of this EventDTO.  # noqa: E501
        :type: str
        """

        self._object = object

    @property
    def message(self):
        """Gets the message of this EventDTO.  # noqa: E501


        :return: The message of this EventDTO.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EventDTO.


        :param message: The message of this EventDTO.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
