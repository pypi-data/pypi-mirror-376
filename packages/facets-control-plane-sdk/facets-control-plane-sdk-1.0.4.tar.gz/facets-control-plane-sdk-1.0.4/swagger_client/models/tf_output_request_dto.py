# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TFOutputRequestDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'lookup_tree': 'str',
        'inferred_from_module': 'bool',
        'properties': 'JsonNode',
        'namespace': 'str',
        'providers': 'list[TFProvider]'
    }

    attribute_map = {
        'name': 'name',
        'lookup_tree': 'lookupTree',
        'inferred_from_module': 'inferredFromModule',
        'properties': 'properties',
        'namespace': 'namespace',
        'providers': 'providers'
    }

    def __init__(self, name=None, lookup_tree=None, inferred_from_module=None, properties=None, namespace=None, providers=None):  # noqa: E501
        """TFOutputRequestDTO - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._lookup_tree = None
        self._inferred_from_module = None
        self._properties = None
        self._namespace = None
        self._providers = None
        self.discriminator = None
        self.name = name
        if lookup_tree is not None:
            self.lookup_tree = lookup_tree
        if inferred_from_module is not None:
            self.inferred_from_module = inferred_from_module
        if properties is not None:
            self.properties = properties
        if namespace is not None:
            self.namespace = namespace
        if providers is not None:
            self.providers = providers

    @property
    def name(self):
        """Gets the name of this TFOutputRequestDTO.  # noqa: E501


        :return: The name of this TFOutputRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TFOutputRequestDTO.


        :param name: The name of this TFOutputRequestDTO.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def lookup_tree(self):
        """Gets the lookup_tree of this TFOutputRequestDTO.  # noqa: E501


        :return: The lookup_tree of this TFOutputRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._lookup_tree

    @lookup_tree.setter
    def lookup_tree(self, lookup_tree):
        """Sets the lookup_tree of this TFOutputRequestDTO.


        :param lookup_tree: The lookup_tree of this TFOutputRequestDTO.  # noqa: E501
        :type: str
        """

        self._lookup_tree = lookup_tree

    @property
    def inferred_from_module(self):
        """Gets the inferred_from_module of this TFOutputRequestDTO.  # noqa: E501


        :return: The inferred_from_module of this TFOutputRequestDTO.  # noqa: E501
        :rtype: bool
        """
        return self._inferred_from_module

    @inferred_from_module.setter
    def inferred_from_module(self, inferred_from_module):
        """Sets the inferred_from_module of this TFOutputRequestDTO.


        :param inferred_from_module: The inferred_from_module of this TFOutputRequestDTO.  # noqa: E501
        :type: bool
        """

        self._inferred_from_module = inferred_from_module

    @property
    def properties(self):
        """Gets the properties of this TFOutputRequestDTO.  # noqa: E501


        :return: The properties of this TFOutputRequestDTO.  # noqa: E501
        :rtype: JsonNode
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this TFOutputRequestDTO.


        :param properties: The properties of this TFOutputRequestDTO.  # noqa: E501
        :type: JsonNode
        """

        self._properties = properties

    @property
    def namespace(self):
        """Gets the namespace of this TFOutputRequestDTO.  # noqa: E501


        :return: The namespace of this TFOutputRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this TFOutputRequestDTO.


        :param namespace: The namespace of this TFOutputRequestDTO.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def providers(self):
        """Gets the providers of this TFOutputRequestDTO.  # noqa: E501


        :return: The providers of this TFOutputRequestDTO.  # noqa: E501
        :rtype: list[TFProvider]
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this TFOutputRequestDTO.


        :param providers: The providers of this TFOutputRequestDTO.  # noqa: E501
        :type: list[TFProvider]
        """

        self._providers = providers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TFOutputRequestDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TFOutputRequestDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
