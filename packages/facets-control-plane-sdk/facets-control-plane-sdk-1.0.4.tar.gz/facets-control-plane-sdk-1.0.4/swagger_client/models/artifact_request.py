# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArtifactRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_id': 'str',
        'tag': 'str',
        'application_name': 'str',
        'artifact_uri': 'str',
        'release_stream': 'str',
        'cluster_id': 'str',
        'artifactory': 'str',
        'description': 'str',
        'registered_for': 'str',
        'promoted': 'bool',
        'metadata': 'dict(str, str)',
        'rule_version_id': 'str',
        'rule_id': 'str',
        'rule_name': 'str',
        'stack_name': 'str',
        'registration_type': 'str'
    }

    attribute_map = {
        'external_id': 'externalId',
        'tag': 'tag',
        'application_name': 'applicationName',
        'artifact_uri': 'artifactUri',
        'release_stream': 'releaseStream',
        'cluster_id': 'clusterId',
        'artifactory': 'artifactory',
        'description': 'description',
        'registered_for': 'registeredFor',
        'promoted': 'promoted',
        'metadata': 'metadata',
        'rule_version_id': 'ruleVersionId',
        'rule_id': 'ruleId',
        'rule_name': 'ruleName',
        'stack_name': 'stackName',
        'registration_type': 'registrationType'
    }

    def __init__(self, external_id=None, tag=None, application_name=None, artifact_uri=None, release_stream=None, cluster_id=None, artifactory=None, description=None, registered_for=None, promoted=None, metadata=None, rule_version_id=None, rule_id=None, rule_name=None, stack_name=None, registration_type=None):  # noqa: E501
        """ArtifactRequest - a model defined in Swagger"""  # noqa: E501
        self._external_id = None
        self._tag = None
        self._application_name = None
        self._artifact_uri = None
        self._release_stream = None
        self._cluster_id = None
        self._artifactory = None
        self._description = None
        self._registered_for = None
        self._promoted = None
        self._metadata = None
        self._rule_version_id = None
        self._rule_id = None
        self._rule_name = None
        self._stack_name = None
        self._registration_type = None
        self.discriminator = None
        if external_id is not None:
            self.external_id = external_id
        if tag is not None:
            self.tag = tag
        self.application_name = application_name
        self.artifact_uri = artifact_uri
        if release_stream is not None:
            self.release_stream = release_stream
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if artifactory is not None:
            self.artifactory = artifactory
        if description is not None:
            self.description = description
        if registered_for is not None:
            self.registered_for = registered_for
        if promoted is not None:
            self.promoted = promoted
        if metadata is not None:
            self.metadata = metadata
        if rule_version_id is not None:
            self.rule_version_id = rule_version_id
        if rule_id is not None:
            self.rule_id = rule_id
        if rule_name is not None:
            self.rule_name = rule_name
        if stack_name is not None:
            self.stack_name = stack_name
        if registration_type is not None:
            self.registration_type = registration_type

    @property
    def external_id(self):
        """Gets the external_id of this ArtifactRequest.  # noqa: E501


        :return: The external_id of this ArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ArtifactRequest.


        :param external_id: The external_id of this ArtifactRequest.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def tag(self):
        """Gets the tag of this ArtifactRequest.  # noqa: E501


        :return: The tag of this ArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ArtifactRequest.


        :param tag: The tag of this ArtifactRequest.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def application_name(self):
        """Gets the application_name of this ArtifactRequest.  # noqa: E501


        :return: The application_name of this ArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ArtifactRequest.


        :param application_name: The application_name of this ArtifactRequest.  # noqa: E501
        :type: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")  # noqa: E501

        self._application_name = application_name

    @property
    def artifact_uri(self):
        """Gets the artifact_uri of this ArtifactRequest.  # noqa: E501


        :return: The artifact_uri of this ArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._artifact_uri

    @artifact_uri.setter
    def artifact_uri(self, artifact_uri):
        """Sets the artifact_uri of this ArtifactRequest.


        :param artifact_uri: The artifact_uri of this ArtifactRequest.  # noqa: E501
        :type: str
        """
        if artifact_uri is None:
            raise ValueError("Invalid value for `artifact_uri`, must not be `None`")  # noqa: E501

        self._artifact_uri = artifact_uri

    @property
    def release_stream(self):
        """Gets the release_stream of this ArtifactRequest.  # noqa: E501


        :return: The release_stream of this ArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._release_stream

    @release_stream.setter
    def release_stream(self, release_stream):
        """Sets the release_stream of this ArtifactRequest.


        :param release_stream: The release_stream of this ArtifactRequest.  # noqa: E501
        :type: str
        """

        self._release_stream = release_stream

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ArtifactRequest.  # noqa: E501


        :return: The cluster_id of this ArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ArtifactRequest.


        :param cluster_id: The cluster_id of this ArtifactRequest.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def artifactory(self):
        """Gets the artifactory of this ArtifactRequest.  # noqa: E501


        :return: The artifactory of this ArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._artifactory

    @artifactory.setter
    def artifactory(self, artifactory):
        """Sets the artifactory of this ArtifactRequest.


        :param artifactory: The artifactory of this ArtifactRequest.  # noqa: E501
        :type: str
        """

        self._artifactory = artifactory

    @property
    def description(self):
        """Gets the description of this ArtifactRequest.  # noqa: E501


        :return: The description of this ArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ArtifactRequest.


        :param description: The description of this ArtifactRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def registered_for(self):
        """Gets the registered_for of this ArtifactRequest.  # noqa: E501


        :return: The registered_for of this ArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._registered_for

    @registered_for.setter
    def registered_for(self, registered_for):
        """Sets the registered_for of this ArtifactRequest.


        :param registered_for: The registered_for of this ArtifactRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLUSTER", "RELEASE_STREAM"]  # noqa: E501
        if registered_for not in allowed_values:
            raise ValueError(
                "Invalid value for `registered_for` ({0}), must be one of {1}"  # noqa: E501
                .format(registered_for, allowed_values)
            )

        self._registered_for = registered_for

    @property
    def promoted(self):
        """Gets the promoted of this ArtifactRequest.  # noqa: E501


        :return: The promoted of this ArtifactRequest.  # noqa: E501
        :rtype: bool
        """
        return self._promoted

    @promoted.setter
    def promoted(self, promoted):
        """Sets the promoted of this ArtifactRequest.


        :param promoted: The promoted of this ArtifactRequest.  # noqa: E501
        :type: bool
        """

        self._promoted = promoted

    @property
    def metadata(self):
        """Gets the metadata of this ArtifactRequest.  # noqa: E501


        :return: The metadata of this ArtifactRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ArtifactRequest.


        :param metadata: The metadata of this ArtifactRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def rule_version_id(self):
        """Gets the rule_version_id of this ArtifactRequest.  # noqa: E501


        :return: The rule_version_id of this ArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._rule_version_id

    @rule_version_id.setter
    def rule_version_id(self, rule_version_id):
        """Sets the rule_version_id of this ArtifactRequest.


        :param rule_version_id: The rule_version_id of this ArtifactRequest.  # noqa: E501
        :type: str
        """

        self._rule_version_id = rule_version_id

    @property
    def rule_id(self):
        """Gets the rule_id of this ArtifactRequest.  # noqa: E501


        :return: The rule_id of this ArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this ArtifactRequest.


        :param rule_id: The rule_id of this ArtifactRequest.  # noqa: E501
        :type: str
        """

        self._rule_id = rule_id

    @property
    def rule_name(self):
        """Gets the rule_name of this ArtifactRequest.  # noqa: E501


        :return: The rule_name of this ArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this ArtifactRequest.


        :param rule_name: The rule_name of this ArtifactRequest.  # noqa: E501
        :type: str
        """

        self._rule_name = rule_name

    @property
    def stack_name(self):
        """Gets the stack_name of this ArtifactRequest.  # noqa: E501


        :return: The stack_name of this ArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this ArtifactRequest.


        :param stack_name: The stack_name of this ArtifactRequest.  # noqa: E501
        :type: str
        """

        self._stack_name = stack_name

    @property
    def registration_type(self):
        """Gets the registration_type of this ArtifactRequest.  # noqa: E501


        :return: The registration_type of this ArtifactRequest.  # noqa: E501
        :rtype: str
        """
        return self._registration_type

    @registration_type.setter
    def registration_type(self, registration_type):
        """Sets the registration_type of this ArtifactRequest.


        :param registration_type: The registration_type of this ArtifactRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENVIRONMENT", "RELEASE_STREAM", "HYBRID"]  # noqa: E501
        if registration_type not in allowed_values:
            raise ValueError(
                "Invalid value for `registration_type` ({0}), must be one of {1}"  # noqa: E501
                .format(registration_type, allowed_values)
            )

        self._registration_type = registration_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArtifactRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArtifactRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
