# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActionStepDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'status': 'str',
        'container_name': 'str',
        'pod_name': 'str',
        'start_time': 'datetime',
        'finished_at': 'datetime',
        'termination_reason': 'str',
        'exit_code': 'int'
    }

    attribute_map = {
        'name': 'name',
        'status': 'status',
        'container_name': 'containerName',
        'pod_name': 'podName',
        'start_time': 'startTime',
        'finished_at': 'finishedAt',
        'termination_reason': 'terminationReason',
        'exit_code': 'exitCode'
    }

    def __init__(self, name=None, status=None, container_name=None, pod_name=None, start_time=None, finished_at=None, termination_reason=None, exit_code=None):  # noqa: E501
        """ActionStepDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._status = None
        self._container_name = None
        self._pod_name = None
        self._start_time = None
        self._finished_at = None
        self._termination_reason = None
        self._exit_code = None
        self.discriminator = None
        self.name = name
        self.status = status
        if container_name is not None:
            self.container_name = container_name
        if pod_name is not None:
            self.pod_name = pod_name
        if start_time is not None:
            self.start_time = start_time
        if finished_at is not None:
            self.finished_at = finished_at
        if termination_reason is not None:
            self.termination_reason = termination_reason
        if exit_code is not None:
            self.exit_code = exit_code

    @property
    def name(self):
        """Gets the name of this ActionStepDto.  # noqa: E501

        Name of the step  # noqa: E501

        :return: The name of this ActionStepDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActionStepDto.

        Name of the step  # noqa: E501

        :param name: The name of this ActionStepDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def status(self):
        """Gets the status of this ActionStepDto.  # noqa: E501

        Represents the status of a step within an action run  # noqa: E501

        :return: The status of this ActionStepDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ActionStepDto.

        Represents the status of a step within an action run  # noqa: E501

        :param status: The status of this ActionStepDto.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["WAITING", "RUNNING", "COMPLETED", "ERROR", "PENDING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def container_name(self):
        """Gets the container_name of this ActionStepDto.  # noqa: E501

        Name of the container running this step  # noqa: E501

        :return: The container_name of this ActionStepDto.  # noqa: E501
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this ActionStepDto.

        Name of the container running this step  # noqa: E501

        :param container_name: The container_name of this ActionStepDto.  # noqa: E501
        :type: str
        """

        self._container_name = container_name

    @property
    def pod_name(self):
        """Gets the pod_name of this ActionStepDto.  # noqa: E501

        Name of the pod running this step  # noqa: E501

        :return: The pod_name of this ActionStepDto.  # noqa: E501
        :rtype: str
        """
        return self._pod_name

    @pod_name.setter
    def pod_name(self, pod_name):
        """Sets the pod_name of this ActionStepDto.

        Name of the pod running this step  # noqa: E501

        :param pod_name: The pod_name of this ActionStepDto.  # noqa: E501
        :type: str
        """

        self._pod_name = pod_name

    @property
    def start_time(self):
        """Gets the start_time of this ActionStepDto.  # noqa: E501

        Timestamp when the step started  # noqa: E501

        :return: The start_time of this ActionStepDto.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ActionStepDto.

        Timestamp when the step started  # noqa: E501

        :param start_time: The start_time of this ActionStepDto.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def finished_at(self):
        """Gets the finished_at of this ActionStepDto.  # noqa: E501

        Timestamp when the step finished  # noqa: E501

        :return: The finished_at of this ActionStepDto.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this ActionStepDto.

        Timestamp when the step finished  # noqa: E501

        :param finished_at: The finished_at of this ActionStepDto.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def termination_reason(self):
        """Gets the termination_reason of this ActionStepDto.  # noqa: E501

        Reason for termination if the step did not complete successfully  # noqa: E501

        :return: The termination_reason of this ActionStepDto.  # noqa: E501
        :rtype: str
        """
        return self._termination_reason

    @termination_reason.setter
    def termination_reason(self, termination_reason):
        """Sets the termination_reason of this ActionStepDto.

        Reason for termination if the step did not complete successfully  # noqa: E501

        :param termination_reason: The termination_reason of this ActionStepDto.  # noqa: E501
        :type: str
        """

        self._termination_reason = termination_reason

    @property
    def exit_code(self):
        """Gets the exit_code of this ActionStepDto.  # noqa: E501

        Exit code of the step  # noqa: E501

        :return: The exit_code of this ActionStepDto.  # noqa: E501
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this ActionStepDto.

        Exit code of the step  # noqa: E501

        :param exit_code: The exit_code of this ActionStepDto.  # noqa: E501
        :type: int
        """

        self._exit_code = exit_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionStepDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionStepDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
