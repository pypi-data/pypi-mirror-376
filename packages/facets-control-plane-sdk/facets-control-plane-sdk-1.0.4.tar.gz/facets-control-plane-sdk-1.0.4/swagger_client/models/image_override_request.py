# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImageOverrideRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_name': 'str',
        'resource_type': 'str',
        'artifactory': 'str',
        'repository_name': 'str',
        'tag': 'str',
        'artifact_type': 'str',
        'artifact_uri': 'str',
        'registration_type': 'str',
        'registration_value': 'str',
        'blueprint_name': 'str',
        'ci_name': 'str'
    }

    attribute_map = {
        'resource_name': 'resourceName',
        'resource_type': 'resourceType',
        'artifactory': 'artifactory',
        'repository_name': 'repositoryName',
        'tag': 'tag',
        'artifact_type': 'artifactType',
        'artifact_uri': 'artifactUri',
        'registration_type': 'registrationType',
        'registration_value': 'registrationValue',
        'blueprint_name': 'blueprintName',
        'ci_name': 'ciName'
    }

    def __init__(self, resource_name=None, resource_type=None, artifactory=None, repository_name=None, tag=None, artifact_type=None, artifact_uri=None, registration_type=None, registration_value=None, blueprint_name=None, ci_name=None):  # noqa: E501
        """ImageOverrideRequest - a model defined in Swagger"""  # noqa: E501
        self._resource_name = None
        self._resource_type = None
        self._artifactory = None
        self._repository_name = None
        self._tag = None
        self._artifact_type = None
        self._artifact_uri = None
        self._registration_type = None
        self._registration_value = None
        self._blueprint_name = None
        self._ci_name = None
        self.discriminator = None
        self.resource_name = resource_name
        self.resource_type = resource_type
        if artifactory is not None:
            self.artifactory = artifactory
        if repository_name is not None:
            self.repository_name = repository_name
        if tag is not None:
            self.tag = tag
        if artifact_type is not None:
            self.artifact_type = artifact_type
        if artifact_uri is not None:
            self.artifact_uri = artifact_uri
        if registration_type is not None:
            self.registration_type = registration_type
        if registration_value is not None:
            self.registration_value = registration_value
        if blueprint_name is not None:
            self.blueprint_name = blueprint_name
        if ci_name is not None:
            self.ci_name = ci_name

    @property
    def resource_name(self):
        """Gets the resource_name of this ImageOverrideRequest.  # noqa: E501


        :return: The resource_name of this ImageOverrideRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this ImageOverrideRequest.


        :param resource_name: The resource_name of this ImageOverrideRequest.  # noqa: E501
        :type: str
        """
        if resource_name is None:
            raise ValueError("Invalid value for `resource_name`, must not be `None`")  # noqa: E501

        self._resource_name = resource_name

    @property
    def resource_type(self):
        """Gets the resource_type of this ImageOverrideRequest.  # noqa: E501


        :return: The resource_type of this ImageOverrideRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ImageOverrideRequest.


        :param resource_type: The resource_type of this ImageOverrideRequest.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def artifactory(self):
        """Gets the artifactory of this ImageOverrideRequest.  # noqa: E501


        :return: The artifactory of this ImageOverrideRequest.  # noqa: E501
        :rtype: str
        """
        return self._artifactory

    @artifactory.setter
    def artifactory(self, artifactory):
        """Sets the artifactory of this ImageOverrideRequest.


        :param artifactory: The artifactory of this ImageOverrideRequest.  # noqa: E501
        :type: str
        """

        self._artifactory = artifactory

    @property
    def repository_name(self):
        """Gets the repository_name of this ImageOverrideRequest.  # noqa: E501


        :return: The repository_name of this ImageOverrideRequest.  # noqa: E501
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this ImageOverrideRequest.


        :param repository_name: The repository_name of this ImageOverrideRequest.  # noqa: E501
        :type: str
        """

        self._repository_name = repository_name

    @property
    def tag(self):
        """Gets the tag of this ImageOverrideRequest.  # noqa: E501


        :return: The tag of this ImageOverrideRequest.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ImageOverrideRequest.


        :param tag: The tag of this ImageOverrideRequest.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def artifact_type(self):
        """Gets the artifact_type of this ImageOverrideRequest.  # noqa: E501


        :return: The artifact_type of this ImageOverrideRequest.  # noqa: E501
        :rtype: str
        """
        return self._artifact_type

    @artifact_type.setter
    def artifact_type(self, artifact_type):
        """Sets the artifact_type of this ImageOverrideRequest.


        :param artifact_type: The artifact_type of this ImageOverrideRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["docker_image", "freestyle"]  # noqa: E501
        if artifact_type not in allowed_values:
            raise ValueError(
                "Invalid value for `artifact_type` ({0}), must be one of {1}"  # noqa: E501
                .format(artifact_type, allowed_values)
            )

        self._artifact_type = artifact_type

    @property
    def artifact_uri(self):
        """Gets the artifact_uri of this ImageOverrideRequest.  # noqa: E501


        :return: The artifact_uri of this ImageOverrideRequest.  # noqa: E501
        :rtype: str
        """
        return self._artifact_uri

    @artifact_uri.setter
    def artifact_uri(self, artifact_uri):
        """Sets the artifact_uri of this ImageOverrideRequest.


        :param artifact_uri: The artifact_uri of this ImageOverrideRequest.  # noqa: E501
        :type: str
        """

        self._artifact_uri = artifact_uri

    @property
    def registration_type(self):
        """Gets the registration_type of this ImageOverrideRequest.  # noqa: E501


        :return: The registration_type of this ImageOverrideRequest.  # noqa: E501
        :rtype: str
        """
        return self._registration_type

    @registration_type.setter
    def registration_type(self, registration_type):
        """Sets the registration_type of this ImageOverrideRequest.


        :param registration_type: The registration_type of this ImageOverrideRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["GIT_REF", "ENVIRONMENT", "RELEASE_STREAM"]  # noqa: E501
        if registration_type not in allowed_values:
            raise ValueError(
                "Invalid value for `registration_type` ({0}), must be one of {1}"  # noqa: E501
                .format(registration_type, allowed_values)
            )

        self._registration_type = registration_type

    @property
    def registration_value(self):
        """Gets the registration_value of this ImageOverrideRequest.  # noqa: E501


        :return: The registration_value of this ImageOverrideRequest.  # noqa: E501
        :rtype: str
        """
        return self._registration_value

    @registration_value.setter
    def registration_value(self, registration_value):
        """Sets the registration_value of this ImageOverrideRequest.


        :param registration_value: The registration_value of this ImageOverrideRequest.  # noqa: E501
        :type: str
        """

        self._registration_value = registration_value

    @property
    def blueprint_name(self):
        """Gets the blueprint_name of this ImageOverrideRequest.  # noqa: E501


        :return: The blueprint_name of this ImageOverrideRequest.  # noqa: E501
        :rtype: str
        """
        return self._blueprint_name

    @blueprint_name.setter
    def blueprint_name(self, blueprint_name):
        """Sets the blueprint_name of this ImageOverrideRequest.


        :param blueprint_name: The blueprint_name of this ImageOverrideRequest.  # noqa: E501
        :type: str
        """

        self._blueprint_name = blueprint_name

    @property
    def ci_name(self):
        """Gets the ci_name of this ImageOverrideRequest.  # noqa: E501


        :return: The ci_name of this ImageOverrideRequest.  # noqa: E501
        :rtype: str
        """
        return self._ci_name

    @ci_name.setter
    def ci_name(self, ci_name):
        """Sets the ci_name of this ImageOverrideRequest.


        :param ci_name: The ci_name of this ImageOverrideRequest.  # noqa: E501
        :type: str
        """

        self._ci_name = ci_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageOverrideRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageOverrideRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
