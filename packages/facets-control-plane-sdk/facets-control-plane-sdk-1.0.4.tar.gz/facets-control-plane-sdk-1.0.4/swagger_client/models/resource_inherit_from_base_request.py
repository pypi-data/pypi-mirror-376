# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceInheritFromBaseRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'resource_name': 'str',
        'directory': 'str',
        'filename': 'str',
        'inherit_from_base': 'bool'
    }

    attribute_map = {
        'resource_type': 'resourceType',
        'resource_name': 'resourceName',
        'directory': 'directory',
        'filename': 'filename',
        'inherit_from_base': 'inheritFromBase'
    }

    def __init__(self, resource_type=None, resource_name=None, directory=None, filename=None, inherit_from_base=None):  # noqa: E501
        """ResourceInheritFromBaseRequest - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._resource_name = None
        self._directory = None
        self._filename = None
        self._inherit_from_base = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if resource_name is not None:
            self.resource_name = resource_name
        if directory is not None:
            self.directory = directory
        if filename is not None:
            self.filename = filename
        if inherit_from_base is not None:
            self.inherit_from_base = inherit_from_base

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceInheritFromBaseRequest.  # noqa: E501


        :return: The resource_type of this ResourceInheritFromBaseRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceInheritFromBaseRequest.


        :param resource_type: The resource_type of this ResourceInheritFromBaseRequest.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def resource_name(self):
        """Gets the resource_name of this ResourceInheritFromBaseRequest.  # noqa: E501


        :return: The resource_name of this ResourceInheritFromBaseRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this ResourceInheritFromBaseRequest.


        :param resource_name: The resource_name of this ResourceInheritFromBaseRequest.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def directory(self):
        """Gets the directory of this ResourceInheritFromBaseRequest.  # noqa: E501


        :return: The directory of this ResourceInheritFromBaseRequest.  # noqa: E501
        :rtype: str
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this ResourceInheritFromBaseRequest.


        :param directory: The directory of this ResourceInheritFromBaseRequest.  # noqa: E501
        :type: str
        """

        self._directory = directory

    @property
    def filename(self):
        """Gets the filename of this ResourceInheritFromBaseRequest.  # noqa: E501


        :return: The filename of this ResourceInheritFromBaseRequest.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ResourceInheritFromBaseRequest.


        :param filename: The filename of this ResourceInheritFromBaseRequest.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def inherit_from_base(self):
        """Gets the inherit_from_base of this ResourceInheritFromBaseRequest.  # noqa: E501


        :return: The inherit_from_base of this ResourceInheritFromBaseRequest.  # noqa: E501
        :rtype: bool
        """
        return self._inherit_from_base

    @inherit_from_base.setter
    def inherit_from_base(self, inherit_from_base):
        """Sets the inherit_from_base of this ResourceInheritFromBaseRequest.


        :param inherit_from_base: The inherit_from_base of this ResourceInheritFromBaseRequest.  # noqa: E501
        :type: bool
        """

        self._inherit_from_base = inherit_from_base

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceInheritFromBaseRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceInheritFromBaseRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
