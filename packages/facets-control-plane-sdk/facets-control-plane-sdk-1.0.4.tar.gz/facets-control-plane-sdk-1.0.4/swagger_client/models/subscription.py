# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Subscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'stack_name': 'str',
        'channel_type': 'str',
        'channel_address': 'str',
        'notification_type': 'str',
        'channel_id': 'str',
        'notification_subject': 'str',
        'filters': 'dict(str, list[str])',
        'payload_json': 'str',
        'test': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'stack_name': 'stackName',
        'channel_type': 'channelType',
        'channel_address': 'channelAddress',
        'notification_type': 'notificationType',
        'channel_id': 'channelId',
        'notification_subject': 'notificationSubject',
        'filters': 'filters',
        'payload_json': 'payloadJson',
        'test': 'test'
    }

    def __init__(self, id=None, name=None, stack_name=None, channel_type=None, channel_address=None, notification_type=None, channel_id=None, notification_subject=None, filters=None, payload_json=None, test=None):  # noqa: E501
        """Subscription - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._stack_name = None
        self._channel_type = None
        self._channel_address = None
        self._notification_type = None
        self._channel_id = None
        self._notification_subject = None
        self._filters = None
        self._payload_json = None
        self._test = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if stack_name is not None:
            self.stack_name = stack_name
        if channel_type is not None:
            self.channel_type = channel_type
        if channel_address is not None:
            self.channel_address = channel_address
        if notification_type is not None:
            self.notification_type = notification_type
        self.channel_id = channel_id
        if notification_subject is not None:
            self.notification_subject = notification_subject
        if filters is not None:
            self.filters = filters
        if payload_json is not None:
            self.payload_json = payload_json
        if test is not None:
            self.test = test

    @property
    def id(self):
        """Gets the id of this Subscription.  # noqa: E501


        :return: The id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.


        :param id: The id of this Subscription.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Subscription.  # noqa: E501


        :return: The name of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subscription.


        :param name: The name of this Subscription.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def stack_name(self):
        """Gets the stack_name of this Subscription.  # noqa: E501


        :return: The stack_name of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this Subscription.


        :param stack_name: The stack_name of this Subscription.  # noqa: E501
        :type: str
        """

        self._stack_name = stack_name

    @property
    def channel_type(self):
        """Gets the channel_type of this Subscription.  # noqa: E501


        :return: The channel_type of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this Subscription.


        :param channel_type: The channel_type of this Subscription.  # noqa: E501
        :type: str
        """
        allowed_values = ["SLACK", "CAPILLARY_VALIDATOR", "WEBHOOK", "PAGER_DUTY", "ZEN_DUTY", "EMAIL", "MS_TEAMS", "MS_TEAMS_WORKFLOW"]  # noqa: E501
        if channel_type not in allowed_values:
            raise ValueError(
                "Invalid value for `channel_type` ({0}), must be one of {1}"  # noqa: E501
                .format(channel_type, allowed_values)
            )

        self._channel_type = channel_type

    @property
    def channel_address(self):
        """Gets the channel_address of this Subscription.  # noqa: E501


        :return: The channel_address of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._channel_address

    @channel_address.setter
    def channel_address(self, channel_address):
        """Sets the channel_address of this Subscription.


        :param channel_address: The channel_address of this Subscription.  # noqa: E501
        :type: str
        """

        self._channel_address = channel_address

    @property
    def notification_type(self):
        """Gets the notification_type of this Subscription.  # noqa: E501


        :return: The notification_type of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this Subscription.


        :param notification_type: The notification_type of this Subscription.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEPLOYMENT_STATUS_UPDATE", "APP_DEPLOYMENT", "QASUITE_SANITY", "DR_RESULT", "STACK_SIGNOFF", "ALERT", "TEST", "APPLICATION_DEPLOYMENT_COMPLETE", "ENVIRONMENT_CREATE", "ENVIRONMENT_DELETE", "ENVIRONMENT_LAUNCH", "ENVIRONMENT_DESTROY", "ENVIRONMENT_CONFIGURE"]  # noqa: E501
        if notification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_type` ({0}), must be one of {1}"  # noqa: E501
                .format(notification_type, allowed_values)
            )

        self._notification_type = notification_type

    @property
    def channel_id(self):
        """Gets the channel_id of this Subscription.  # noqa: E501


        :return: The channel_id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this Subscription.


        :param channel_id: The channel_id of this Subscription.  # noqa: E501
        :type: str
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")  # noqa: E501

        self._channel_id = channel_id

    @property
    def notification_subject(self):
        """Gets the notification_subject of this Subscription.  # noqa: E501


        :return: The notification_subject of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._notification_subject

    @notification_subject.setter
    def notification_subject(self, notification_subject):
        """Sets the notification_subject of this Subscription.


        :param notification_subject: The notification_subject of this Subscription.  # noqa: E501
        :type: str
        """

        self._notification_subject = notification_subject

    @property
    def filters(self):
        """Gets the filters of this Subscription.  # noqa: E501


        :return: The filters of this Subscription.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this Subscription.


        :param filters: The filters of this Subscription.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._filters = filters

    @property
    def payload_json(self):
        """Gets the payload_json of this Subscription.  # noqa: E501


        :return: The payload_json of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._payload_json

    @payload_json.setter
    def payload_json(self, payload_json):
        """Sets the payload_json of this Subscription.


        :param payload_json: The payload_json of this Subscription.  # noqa: E501
        :type: str
        """

        self._payload_json = payload_json

    @property
    def test(self):
        """Gets the test of this Subscription.  # noqa: E501


        :return: The test of this Subscription.  # noqa: E501
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this Subscription.


        :param test: The test of this Subscription.  # noqa: E501
        :type: bool
        """

        self._test = test

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Subscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
