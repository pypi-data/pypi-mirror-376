# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModuleDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'facets_yaml': 'dict(str, object)',
        'tf_module_path': 'TFModulePath'
    }

    attribute_map = {
        'facets_yaml': 'facetsYaml',
        'tf_module_path': 'tfModulePath'
    }

    def __init__(self, facets_yaml=None, tf_module_path=None):  # noqa: E501
        """ModuleDTO - a model defined in Swagger"""  # noqa: E501
        self._facets_yaml = None
        self._tf_module_path = None
        self.discriminator = None
        if facets_yaml is not None:
            self.facets_yaml = facets_yaml
        if tf_module_path is not None:
            self.tf_module_path = tf_module_path

    @property
    def facets_yaml(self):
        """Gets the facets_yaml of this ModuleDTO.  # noqa: E501


        :return: The facets_yaml of this ModuleDTO.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._facets_yaml

    @facets_yaml.setter
    def facets_yaml(self, facets_yaml):
        """Sets the facets_yaml of this ModuleDTO.


        :param facets_yaml: The facets_yaml of this ModuleDTO.  # noqa: E501
        :type: dict(str, object)
        """

        self._facets_yaml = facets_yaml

    @property
    def tf_module_path(self):
        """Gets the tf_module_path of this ModuleDTO.  # noqa: E501


        :return: The tf_module_path of this ModuleDTO.  # noqa: E501
        :rtype: TFModulePath
        """
        return self._tf_module_path

    @tf_module_path.setter
    def tf_module_path(self, tf_module_path):
        """Sets the tf_module_path of this ModuleDTO.


        :param tf_module_path: The tf_module_path of this ModuleDTO.  # noqa: E501
        :type: TFModulePath
        """

        self._tf_module_path = tf_module_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModuleDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModuleDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
