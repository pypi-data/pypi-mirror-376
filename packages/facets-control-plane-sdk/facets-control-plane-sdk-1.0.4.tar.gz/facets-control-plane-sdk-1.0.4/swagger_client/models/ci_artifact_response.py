# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CiArtifactResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'artifact_id': 'str',
        'external_id': 'str',
        'artifact_name': 'str',
        'artifact_uri': 'str',
        'artifactory': 'str',
        'build_description': 'str',
        'created_on': 'datetime',
        'versioning_key': 'str',
        'registration_value': 'str',
        'created_by': 'str',
        'registration_type': 'str',
        'applied_rule_version_id': 'str',
        'applied_rule_id': 'str',
        'applied_rule_name': 'str',
        'metadata': 'dict(str, str)',
        'repository_name': 'str',
        'tag': 'str',
        'classified': 'bool',
        'promoted': 'bool'
    }

    attribute_map = {
        'artifact_id': 'artifactId',
        'external_id': 'externalId',
        'artifact_name': 'artifactName',
        'artifact_uri': 'artifactUri',
        'artifactory': 'artifactory',
        'build_description': 'buildDescription',
        'created_on': 'createdOn',
        'versioning_key': 'versioningKey',
        'registration_value': 'registrationValue',
        'created_by': 'createdBy',
        'registration_type': 'registrationType',
        'applied_rule_version_id': 'appliedRuleVersionId',
        'applied_rule_id': 'appliedRuleId',
        'applied_rule_name': 'appliedRuleName',
        'metadata': 'metadata',
        'repository_name': 'repositoryName',
        'tag': 'tag',
        'classified': 'classified',
        'promoted': 'promoted'
    }

    def __init__(self, artifact_id=None, external_id=None, artifact_name=None, artifact_uri=None, artifactory=None, build_description=None, created_on=None, versioning_key=None, registration_value=None, created_by=None, registration_type=None, applied_rule_version_id=None, applied_rule_id=None, applied_rule_name=None, metadata=None, repository_name=None, tag=None, classified=None, promoted=None):  # noqa: E501
        """CiArtifactResponse - a model defined in Swagger"""  # noqa: E501
        self._artifact_id = None
        self._external_id = None
        self._artifact_name = None
        self._artifact_uri = None
        self._artifactory = None
        self._build_description = None
        self._created_on = None
        self._versioning_key = None
        self._registration_value = None
        self._created_by = None
        self._registration_type = None
        self._applied_rule_version_id = None
        self._applied_rule_id = None
        self._applied_rule_name = None
        self._metadata = None
        self._repository_name = None
        self._tag = None
        self._classified = None
        self._promoted = None
        self.discriminator = None
        if artifact_id is not None:
            self.artifact_id = artifact_id
        if external_id is not None:
            self.external_id = external_id
        if artifact_name is not None:
            self.artifact_name = artifact_name
        if artifact_uri is not None:
            self.artifact_uri = artifact_uri
        if artifactory is not None:
            self.artifactory = artifactory
        if build_description is not None:
            self.build_description = build_description
        if created_on is not None:
            self.created_on = created_on
        if versioning_key is not None:
            self.versioning_key = versioning_key
        if registration_value is not None:
            self.registration_value = registration_value
        if created_by is not None:
            self.created_by = created_by
        if registration_type is not None:
            self.registration_type = registration_type
        if applied_rule_version_id is not None:
            self.applied_rule_version_id = applied_rule_version_id
        if applied_rule_id is not None:
            self.applied_rule_id = applied_rule_id
        if applied_rule_name is not None:
            self.applied_rule_name = applied_rule_name
        if metadata is not None:
            self.metadata = metadata
        if repository_name is not None:
            self.repository_name = repository_name
        if tag is not None:
            self.tag = tag
        if classified is not None:
            self.classified = classified
        if promoted is not None:
            self.promoted = promoted

    @property
    def artifact_id(self):
        """Gets the artifact_id of this CiArtifactResponse.  # noqa: E501


        :return: The artifact_id of this CiArtifactResponse.  # noqa: E501
        :rtype: str
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """Sets the artifact_id of this CiArtifactResponse.


        :param artifact_id: The artifact_id of this CiArtifactResponse.  # noqa: E501
        :type: str
        """

        self._artifact_id = artifact_id

    @property
    def external_id(self):
        """Gets the external_id of this CiArtifactResponse.  # noqa: E501


        :return: The external_id of this CiArtifactResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this CiArtifactResponse.


        :param external_id: The external_id of this CiArtifactResponse.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def artifact_name(self):
        """Gets the artifact_name of this CiArtifactResponse.  # noqa: E501


        :return: The artifact_name of this CiArtifactResponse.  # noqa: E501
        :rtype: str
        """
        return self._artifact_name

    @artifact_name.setter
    def artifact_name(self, artifact_name):
        """Sets the artifact_name of this CiArtifactResponse.


        :param artifact_name: The artifact_name of this CiArtifactResponse.  # noqa: E501
        :type: str
        """

        self._artifact_name = artifact_name

    @property
    def artifact_uri(self):
        """Gets the artifact_uri of this CiArtifactResponse.  # noqa: E501


        :return: The artifact_uri of this CiArtifactResponse.  # noqa: E501
        :rtype: str
        """
        return self._artifact_uri

    @artifact_uri.setter
    def artifact_uri(self, artifact_uri):
        """Sets the artifact_uri of this CiArtifactResponse.


        :param artifact_uri: The artifact_uri of this CiArtifactResponse.  # noqa: E501
        :type: str
        """

        self._artifact_uri = artifact_uri

    @property
    def artifactory(self):
        """Gets the artifactory of this CiArtifactResponse.  # noqa: E501


        :return: The artifactory of this CiArtifactResponse.  # noqa: E501
        :rtype: str
        """
        return self._artifactory

    @artifactory.setter
    def artifactory(self, artifactory):
        """Sets the artifactory of this CiArtifactResponse.


        :param artifactory: The artifactory of this CiArtifactResponse.  # noqa: E501
        :type: str
        """

        self._artifactory = artifactory

    @property
    def build_description(self):
        """Gets the build_description of this CiArtifactResponse.  # noqa: E501


        :return: The build_description of this CiArtifactResponse.  # noqa: E501
        :rtype: str
        """
        return self._build_description

    @build_description.setter
    def build_description(self, build_description):
        """Sets the build_description of this CiArtifactResponse.


        :param build_description: The build_description of this CiArtifactResponse.  # noqa: E501
        :type: str
        """

        self._build_description = build_description

    @property
    def created_on(self):
        """Gets the created_on of this CiArtifactResponse.  # noqa: E501


        :return: The created_on of this CiArtifactResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this CiArtifactResponse.


        :param created_on: The created_on of this CiArtifactResponse.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def versioning_key(self):
        """Gets the versioning_key of this CiArtifactResponse.  # noqa: E501


        :return: The versioning_key of this CiArtifactResponse.  # noqa: E501
        :rtype: str
        """
        return self._versioning_key

    @versioning_key.setter
    def versioning_key(self, versioning_key):
        """Sets the versioning_key of this CiArtifactResponse.


        :param versioning_key: The versioning_key of this CiArtifactResponse.  # noqa: E501
        :type: str
        """

        self._versioning_key = versioning_key

    @property
    def registration_value(self):
        """Gets the registration_value of this CiArtifactResponse.  # noqa: E501


        :return: The registration_value of this CiArtifactResponse.  # noqa: E501
        :rtype: str
        """
        return self._registration_value

    @registration_value.setter
    def registration_value(self, registration_value):
        """Sets the registration_value of this CiArtifactResponse.


        :param registration_value: The registration_value of this CiArtifactResponse.  # noqa: E501
        :type: str
        """

        self._registration_value = registration_value

    @property
    def created_by(self):
        """Gets the created_by of this CiArtifactResponse.  # noqa: E501


        :return: The created_by of this CiArtifactResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CiArtifactResponse.


        :param created_by: The created_by of this CiArtifactResponse.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def registration_type(self):
        """Gets the registration_type of this CiArtifactResponse.  # noqa: E501


        :return: The registration_type of this CiArtifactResponse.  # noqa: E501
        :rtype: str
        """
        return self._registration_type

    @registration_type.setter
    def registration_type(self, registration_type):
        """Sets the registration_type of this CiArtifactResponse.


        :param registration_type: The registration_type of this CiArtifactResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENVIRONMENT", "RELEASE_STREAM", "HYBRID"]  # noqa: E501
        if registration_type not in allowed_values:
            raise ValueError(
                "Invalid value for `registration_type` ({0}), must be one of {1}"  # noqa: E501
                .format(registration_type, allowed_values)
            )

        self._registration_type = registration_type

    @property
    def applied_rule_version_id(self):
        """Gets the applied_rule_version_id of this CiArtifactResponse.  # noqa: E501


        :return: The applied_rule_version_id of this CiArtifactResponse.  # noqa: E501
        :rtype: str
        """
        return self._applied_rule_version_id

    @applied_rule_version_id.setter
    def applied_rule_version_id(self, applied_rule_version_id):
        """Sets the applied_rule_version_id of this CiArtifactResponse.


        :param applied_rule_version_id: The applied_rule_version_id of this CiArtifactResponse.  # noqa: E501
        :type: str
        """

        self._applied_rule_version_id = applied_rule_version_id

    @property
    def applied_rule_id(self):
        """Gets the applied_rule_id of this CiArtifactResponse.  # noqa: E501


        :return: The applied_rule_id of this CiArtifactResponse.  # noqa: E501
        :rtype: str
        """
        return self._applied_rule_id

    @applied_rule_id.setter
    def applied_rule_id(self, applied_rule_id):
        """Sets the applied_rule_id of this CiArtifactResponse.


        :param applied_rule_id: The applied_rule_id of this CiArtifactResponse.  # noqa: E501
        :type: str
        """

        self._applied_rule_id = applied_rule_id

    @property
    def applied_rule_name(self):
        """Gets the applied_rule_name of this CiArtifactResponse.  # noqa: E501


        :return: The applied_rule_name of this CiArtifactResponse.  # noqa: E501
        :rtype: str
        """
        return self._applied_rule_name

    @applied_rule_name.setter
    def applied_rule_name(self, applied_rule_name):
        """Sets the applied_rule_name of this CiArtifactResponse.


        :param applied_rule_name: The applied_rule_name of this CiArtifactResponse.  # noqa: E501
        :type: str
        """

        self._applied_rule_name = applied_rule_name

    @property
    def metadata(self):
        """Gets the metadata of this CiArtifactResponse.  # noqa: E501


        :return: The metadata of this CiArtifactResponse.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CiArtifactResponse.


        :param metadata: The metadata of this CiArtifactResponse.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def repository_name(self):
        """Gets the repository_name of this CiArtifactResponse.  # noqa: E501


        :return: The repository_name of this CiArtifactResponse.  # noqa: E501
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this CiArtifactResponse.


        :param repository_name: The repository_name of this CiArtifactResponse.  # noqa: E501
        :type: str
        """

        self._repository_name = repository_name

    @property
    def tag(self):
        """Gets the tag of this CiArtifactResponse.  # noqa: E501


        :return: The tag of this CiArtifactResponse.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this CiArtifactResponse.


        :param tag: The tag of this CiArtifactResponse.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def classified(self):
        """Gets the classified of this CiArtifactResponse.  # noqa: E501


        :return: The classified of this CiArtifactResponse.  # noqa: E501
        :rtype: bool
        """
        return self._classified

    @classified.setter
    def classified(self, classified):
        """Sets the classified of this CiArtifactResponse.


        :param classified: The classified of this CiArtifactResponse.  # noqa: E501
        :type: bool
        """

        self._classified = classified

    @property
    def promoted(self):
        """Gets the promoted of this CiArtifactResponse.  # noqa: E501


        :return: The promoted of this CiArtifactResponse.  # noqa: E501
        :rtype: bool
        """
        return self._promoted

    @promoted.setter
    def promoted(self, promoted):
        """Sets the promoted of this CiArtifactResponse.


        :param promoted: The promoted of this CiArtifactResponse.  # noqa: E501
        :type: bool
        """

        self._promoted = promoted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CiArtifactResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CiArtifactResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
