# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestNotificationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel_address': 'str',
        'channel_type': 'str',
        'notification_type': 'str',
        'payload': 'str',
        'integration_key': 'str',
        'email_addresses': 'list[str]',
        'authorization_header': 'str'
    }

    attribute_map = {
        'channel_address': 'channelAddress',
        'channel_type': 'channelType',
        'notification_type': 'notificationType',
        'payload': 'payload',
        'integration_key': 'integrationKey',
        'email_addresses': 'emailAddresses',
        'authorization_header': 'authorizationHeader'
    }

    def __init__(self, channel_address=None, channel_type=None, notification_type=None, payload=None, integration_key=None, email_addresses=None, authorization_header=None):  # noqa: E501
        """TestNotificationRequest - a model defined in Swagger"""  # noqa: E501
        self._channel_address = None
        self._channel_type = None
        self._notification_type = None
        self._payload = None
        self._integration_key = None
        self._email_addresses = None
        self._authorization_header = None
        self.discriminator = None
        if channel_address is not None:
            self.channel_address = channel_address
        if channel_type is not None:
            self.channel_type = channel_type
        if notification_type is not None:
            self.notification_type = notification_type
        if payload is not None:
            self.payload = payload
        if integration_key is not None:
            self.integration_key = integration_key
        if email_addresses is not None:
            self.email_addresses = email_addresses
        if authorization_header is not None:
            self.authorization_header = authorization_header

    @property
    def channel_address(self):
        """Gets the channel_address of this TestNotificationRequest.  # noqa: E501


        :return: The channel_address of this TestNotificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._channel_address

    @channel_address.setter
    def channel_address(self, channel_address):
        """Sets the channel_address of this TestNotificationRequest.


        :param channel_address: The channel_address of this TestNotificationRequest.  # noqa: E501
        :type: str
        """

        self._channel_address = channel_address

    @property
    def channel_type(self):
        """Gets the channel_type of this TestNotificationRequest.  # noqa: E501


        :return: The channel_type of this TestNotificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this TestNotificationRequest.


        :param channel_type: The channel_type of this TestNotificationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["SLACK", "CAPILLARY_VALIDATOR", "WEBHOOK", "PAGER_DUTY", "ZEN_DUTY", "EMAIL", "MS_TEAMS", "MS_TEAMS_WORKFLOW"]  # noqa: E501
        if channel_type not in allowed_values:
            raise ValueError(
                "Invalid value for `channel_type` ({0}), must be one of {1}"  # noqa: E501
                .format(channel_type, allowed_values)
            )

        self._channel_type = channel_type

    @property
    def notification_type(self):
        """Gets the notification_type of this TestNotificationRequest.  # noqa: E501


        :return: The notification_type of this TestNotificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this TestNotificationRequest.


        :param notification_type: The notification_type of this TestNotificationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEPLOYMENT_STATUS_UPDATE", "APP_DEPLOYMENT", "QASUITE_SANITY", "DR_RESULT", "STACK_SIGNOFF", "ALERT", "TEST", "APPLICATION_DEPLOYMENT_COMPLETE", "ENVIRONMENT_CREATE", "ENVIRONMENT_DELETE", "ENVIRONMENT_LAUNCH", "ENVIRONMENT_DESTROY", "ENVIRONMENT_CONFIGURE"]  # noqa: E501
        if notification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_type` ({0}), must be one of {1}"  # noqa: E501
                .format(notification_type, allowed_values)
            )

        self._notification_type = notification_type

    @property
    def payload(self):
        """Gets the payload of this TestNotificationRequest.  # noqa: E501


        :return: The payload of this TestNotificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this TestNotificationRequest.


        :param payload: The payload of this TestNotificationRequest.  # noqa: E501
        :type: str
        """

        self._payload = payload

    @property
    def integration_key(self):
        """Gets the integration_key of this TestNotificationRequest.  # noqa: E501


        :return: The integration_key of this TestNotificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._integration_key

    @integration_key.setter
    def integration_key(self, integration_key):
        """Sets the integration_key of this TestNotificationRequest.


        :param integration_key: The integration_key of this TestNotificationRequest.  # noqa: E501
        :type: str
        """

        self._integration_key = integration_key

    @property
    def email_addresses(self):
        """Gets the email_addresses of this TestNotificationRequest.  # noqa: E501


        :return: The email_addresses of this TestNotificationRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this TestNotificationRequest.


        :param email_addresses: The email_addresses of this TestNotificationRequest.  # noqa: E501
        :type: list[str]
        """

        self._email_addresses = email_addresses

    @property
    def authorization_header(self):
        """Gets the authorization_header of this TestNotificationRequest.  # noqa: E501


        :return: The authorization_header of this TestNotificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._authorization_header

    @authorization_header.setter
    def authorization_header(self, authorization_header):
        """Sets the authorization_header of this TestNotificationRequest.


        :param authorization_header: The authorization_header of this TestNotificationRequest.  # noqa: E501
        :type: str
        """

        self._authorization_header = authorization_header

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestNotificationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestNotificationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
