# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Info(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disabled': 'bool',
        'provided': 'bool',
        'version': 'str',
        'flavour': 'str',
        'tf_module_id': 'str',
        'strategy': 'str',
        'ci_name': 'str',
        'artifact_type': 'str',
        'static_image': 'str',
        'github_repository_url': 'str',
        'repository_path': 'str',
        'namespace': 'str',
        'overridden_name': 'str',
        'inherit_from_base': 'bool',
        'artifactory': 'str',
        'repository': 'str',
        'tag': 'str',
        'ui': 'dict(str, object)',
        'critical_resource': 'bool',
        'enable_kubernetes_explorer': 'bool'
    }

    attribute_map = {
        'disabled': 'disabled',
        'provided': 'provided',
        'version': 'version',
        'flavour': 'flavour',
        'tf_module_id': 'tfModuleId',
        'strategy': 'strategy',
        'ci_name': 'ciName',
        'artifact_type': 'artifactType',
        'static_image': 'staticImage',
        'github_repository_url': 'githubRepositoryUrl',
        'repository_path': 'repositoryPath',
        'namespace': 'namespace',
        'overridden_name': 'overriddenName',
        'inherit_from_base': 'inheritFromBase',
        'artifactory': 'artifactory',
        'repository': 'repository',
        'tag': 'tag',
        'ui': 'ui',
        'critical_resource': 'criticalResource',
        'enable_kubernetes_explorer': 'enableKubernetesExplorer'
    }

    def __init__(self, disabled=None, provided=None, version=None, flavour=None, tf_module_id=None, strategy=None, ci_name=None, artifact_type=None, static_image=None, github_repository_url=None, repository_path=None, namespace=None, overridden_name=None, inherit_from_base=None, artifactory=None, repository=None, tag=None, ui=None, critical_resource=None, enable_kubernetes_explorer=None):  # noqa: E501
        """Info - a model defined in Swagger"""  # noqa: E501
        self._disabled = None
        self._provided = None
        self._version = None
        self._flavour = None
        self._tf_module_id = None
        self._strategy = None
        self._ci_name = None
        self._artifact_type = None
        self._static_image = None
        self._github_repository_url = None
        self._repository_path = None
        self._namespace = None
        self._overridden_name = None
        self._inherit_from_base = None
        self._artifactory = None
        self._repository = None
        self._tag = None
        self._ui = None
        self._critical_resource = None
        self._enable_kubernetes_explorer = None
        self.discriminator = None
        if disabled is not None:
            self.disabled = disabled
        if provided is not None:
            self.provided = provided
        if version is not None:
            self.version = version
        if flavour is not None:
            self.flavour = flavour
        if tf_module_id is not None:
            self.tf_module_id = tf_module_id
        if strategy is not None:
            self.strategy = strategy
        if ci_name is not None:
            self.ci_name = ci_name
        if artifact_type is not None:
            self.artifact_type = artifact_type
        if static_image is not None:
            self.static_image = static_image
        if github_repository_url is not None:
            self.github_repository_url = github_repository_url
        if repository_path is not None:
            self.repository_path = repository_path
        if namespace is not None:
            self.namespace = namespace
        if overridden_name is not None:
            self.overridden_name = overridden_name
        if inherit_from_base is not None:
            self.inherit_from_base = inherit_from_base
        if artifactory is not None:
            self.artifactory = artifactory
        if repository is not None:
            self.repository = repository
        if tag is not None:
            self.tag = tag
        if ui is not None:
            self.ui = ui
        if critical_resource is not None:
            self.critical_resource = critical_resource
        if enable_kubernetes_explorer is not None:
            self.enable_kubernetes_explorer = enable_kubernetes_explorer

    @property
    def disabled(self):
        """Gets the disabled of this Info.  # noqa: E501


        :return: The disabled of this Info.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Info.


        :param disabled: The disabled of this Info.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def provided(self):
        """Gets the provided of this Info.  # noqa: E501


        :return: The provided of this Info.  # noqa: E501
        :rtype: bool
        """
        return self._provided

    @provided.setter
    def provided(self, provided):
        """Sets the provided of this Info.


        :param provided: The provided of this Info.  # noqa: E501
        :type: bool
        """

        self._provided = provided

    @property
    def version(self):
        """Gets the version of this Info.  # noqa: E501


        :return: The version of this Info.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Info.


        :param version: The version of this Info.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def flavour(self):
        """Gets the flavour of this Info.  # noqa: E501


        :return: The flavour of this Info.  # noqa: E501
        :rtype: str
        """
        return self._flavour

    @flavour.setter
    def flavour(self, flavour):
        """Sets the flavour of this Info.


        :param flavour: The flavour of this Info.  # noqa: E501
        :type: str
        """

        self._flavour = flavour

    @property
    def tf_module_id(self):
        """Gets the tf_module_id of this Info.  # noqa: E501


        :return: The tf_module_id of this Info.  # noqa: E501
        :rtype: str
        """
        return self._tf_module_id

    @tf_module_id.setter
    def tf_module_id(self, tf_module_id):
        """Sets the tf_module_id of this Info.


        :param tf_module_id: The tf_module_id of this Info.  # noqa: E501
        :type: str
        """

        self._tf_module_id = tf_module_id

    @property
    def strategy(self):
        """Gets the strategy of this Info.  # noqa: E501


        :return: The strategy of this Info.  # noqa: E501
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this Info.


        :param strategy: The strategy of this Info.  # noqa: E501
        :type: str
        """
        allowed_values = ["RollingUpdate", "BlueGreen", "Canary"]  # noqa: E501
        if strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(strategy, allowed_values)
            )

        self._strategy = strategy

    @property
    def ci_name(self):
        """Gets the ci_name of this Info.  # noqa: E501


        :return: The ci_name of this Info.  # noqa: E501
        :rtype: str
        """
        return self._ci_name

    @ci_name.setter
    def ci_name(self, ci_name):
        """Sets the ci_name of this Info.


        :param ci_name: The ci_name of this Info.  # noqa: E501
        :type: str
        """

        self._ci_name = ci_name

    @property
    def artifact_type(self):
        """Gets the artifact_type of this Info.  # noqa: E501


        :return: The artifact_type of this Info.  # noqa: E501
        :rtype: str
        """
        return self._artifact_type

    @artifact_type.setter
    def artifact_type(self, artifact_type):
        """Sets the artifact_type of this Info.


        :param artifact_type: The artifact_type of this Info.  # noqa: E501
        :type: str
        """
        allowed_values = ["docker_image", "freestyle"]  # noqa: E501
        if artifact_type not in allowed_values:
            raise ValueError(
                "Invalid value for `artifact_type` ({0}), must be one of {1}"  # noqa: E501
                .format(artifact_type, allowed_values)
            )

        self._artifact_type = artifact_type

    @property
    def static_image(self):
        """Gets the static_image of this Info.  # noqa: E501


        :return: The static_image of this Info.  # noqa: E501
        :rtype: str
        """
        return self._static_image

    @static_image.setter
    def static_image(self, static_image):
        """Sets the static_image of this Info.


        :param static_image: The static_image of this Info.  # noqa: E501
        :type: str
        """

        self._static_image = static_image

    @property
    def github_repository_url(self):
        """Gets the github_repository_url of this Info.  # noqa: E501


        :return: The github_repository_url of this Info.  # noqa: E501
        :rtype: str
        """
        return self._github_repository_url

    @github_repository_url.setter
    def github_repository_url(self, github_repository_url):
        """Sets the github_repository_url of this Info.


        :param github_repository_url: The github_repository_url of this Info.  # noqa: E501
        :type: str
        """

        self._github_repository_url = github_repository_url

    @property
    def repository_path(self):
        """Gets the repository_path of this Info.  # noqa: E501


        :return: The repository_path of this Info.  # noqa: E501
        :rtype: str
        """
        return self._repository_path

    @repository_path.setter
    def repository_path(self, repository_path):
        """Sets the repository_path of this Info.


        :param repository_path: The repository_path of this Info.  # noqa: E501
        :type: str
        """

        self._repository_path = repository_path

    @property
    def namespace(self):
        """Gets the namespace of this Info.  # noqa: E501


        :return: The namespace of this Info.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Info.


        :param namespace: The namespace of this Info.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def overridden_name(self):
        """Gets the overridden_name of this Info.  # noqa: E501


        :return: The overridden_name of this Info.  # noqa: E501
        :rtype: str
        """
        return self._overridden_name

    @overridden_name.setter
    def overridden_name(self, overridden_name):
        """Sets the overridden_name of this Info.


        :param overridden_name: The overridden_name of this Info.  # noqa: E501
        :type: str
        """

        self._overridden_name = overridden_name

    @property
    def inherit_from_base(self):
        """Gets the inherit_from_base of this Info.  # noqa: E501


        :return: The inherit_from_base of this Info.  # noqa: E501
        :rtype: bool
        """
        return self._inherit_from_base

    @inherit_from_base.setter
    def inherit_from_base(self, inherit_from_base):
        """Sets the inherit_from_base of this Info.


        :param inherit_from_base: The inherit_from_base of this Info.  # noqa: E501
        :type: bool
        """

        self._inherit_from_base = inherit_from_base

    @property
    def artifactory(self):
        """Gets the artifactory of this Info.  # noqa: E501


        :return: The artifactory of this Info.  # noqa: E501
        :rtype: str
        """
        return self._artifactory

    @artifactory.setter
    def artifactory(self, artifactory):
        """Sets the artifactory of this Info.


        :param artifactory: The artifactory of this Info.  # noqa: E501
        :type: str
        """

        self._artifactory = artifactory

    @property
    def repository(self):
        """Gets the repository of this Info.  # noqa: E501


        :return: The repository of this Info.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this Info.


        :param repository: The repository of this Info.  # noqa: E501
        :type: str
        """

        self._repository = repository

    @property
    def tag(self):
        """Gets the tag of this Info.  # noqa: E501


        :return: The tag of this Info.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Info.


        :param tag: The tag of this Info.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def ui(self):
        """Gets the ui of this Info.  # noqa: E501


        :return: The ui of this Info.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._ui

    @ui.setter
    def ui(self, ui):
        """Sets the ui of this Info.


        :param ui: The ui of this Info.  # noqa: E501
        :type: dict(str, object)
        """

        self._ui = ui

    @property
    def critical_resource(self):
        """Gets the critical_resource of this Info.  # noqa: E501


        :return: The critical_resource of this Info.  # noqa: E501
        :rtype: bool
        """
        return self._critical_resource

    @critical_resource.setter
    def critical_resource(self, critical_resource):
        """Sets the critical_resource of this Info.


        :param critical_resource: The critical_resource of this Info.  # noqa: E501
        :type: bool
        """

        self._critical_resource = critical_resource

    @property
    def enable_kubernetes_explorer(self):
        """Gets the enable_kubernetes_explorer of this Info.  # noqa: E501


        :return: The enable_kubernetes_explorer of this Info.  # noqa: E501
        :rtype: bool
        """
        return self._enable_kubernetes_explorer

    @enable_kubernetes_explorer.setter
    def enable_kubernetes_explorer(self, enable_kubernetes_explorer):
        """Sets the enable_kubernetes_explorer of this Info.


        :param enable_kubernetes_explorer: The enable_kubernetes_explorer of this Info.  # noqa: E501
        :type: bool
        """

        self._enable_kubernetes_explorer = enable_kubernetes_explorer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Info, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Info):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
