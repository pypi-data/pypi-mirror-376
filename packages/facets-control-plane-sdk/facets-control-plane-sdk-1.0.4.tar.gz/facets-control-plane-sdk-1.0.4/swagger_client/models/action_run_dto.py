# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActionRunDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'action_name': 'str',
        'action_display_name': 'str',
        'status': 'str',
        'reason': 'str',
        'message': 'str',
        'start_time': 'datetime',
        'completion_time': 'datetime',
        'steps': 'list[ActionStepDto]',
        'params': 'dict(str, ActionParameterValueDto)',
        'cluster_id': 'str',
        'resource_type': 'str',
        'resource_name': 'str',
        'triggered_by': 'str',
        'has_upload': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'action_name': 'actionName',
        'action_display_name': 'actionDisplayName',
        'status': 'status',
        'reason': 'reason',
        'message': 'message',
        'start_time': 'startTime',
        'completion_time': 'completionTime',
        'steps': 'steps',
        'params': 'params',
        'cluster_id': 'clusterId',
        'resource_type': 'resourceType',
        'resource_name': 'resourceName',
        'triggered_by': 'triggeredBy',
        'has_upload': 'hasUpload'
    }

    def __init__(self, name=None, action_name=None, action_display_name=None, status=None, reason=None, message=None, start_time=None, completion_time=None, steps=None, params=None, cluster_id=None, resource_type=None, resource_name=None, triggered_by=None, has_upload=None):  # noqa: E501
        """ActionRunDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._action_name = None
        self._action_display_name = None
        self._status = None
        self._reason = None
        self._message = None
        self._start_time = None
        self._completion_time = None
        self._steps = None
        self._params = None
        self._cluster_id = None
        self._resource_type = None
        self._resource_name = None
        self._triggered_by = None
        self._has_upload = None
        self.discriminator = None
        self.name = name
        self.action_name = action_name
        if action_display_name is not None:
            self.action_display_name = action_display_name
        self.status = status
        if reason is not None:
            self.reason = reason
        if message is not None:
            self.message = message
        if start_time is not None:
            self.start_time = start_time
        if completion_time is not None:
            self.completion_time = completion_time
        if steps is not None:
            self.steps = steps
        if params is not None:
            self.params = params
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if resource_type is not None:
            self.resource_type = resource_type
        if resource_name is not None:
            self.resource_name = resource_name
        if triggered_by is not None:
            self.triggered_by = triggered_by
        if has_upload is not None:
            self.has_upload = has_upload

    @property
    def name(self):
        """Gets the name of this ActionRunDto.  # noqa: E501

        Name of the action run  # noqa: E501

        :return: The name of this ActionRunDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActionRunDto.

        Name of the action run  # noqa: E501

        :param name: The name of this ActionRunDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def action_name(self):
        """Gets the action_name of this ActionRunDto.  # noqa: E501

        Name of the action being executed  # noqa: E501

        :return: The action_name of this ActionRunDto.  # noqa: E501
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this ActionRunDto.

        Name of the action being executed  # noqa: E501

        :param action_name: The action_name of this ActionRunDto.  # noqa: E501
        :type: str
        """
        if action_name is None:
            raise ValueError("Invalid value for `action_name`, must not be `None`")  # noqa: E501

        self._action_name = action_name

    @property
    def action_display_name(self):
        """Gets the action_display_name of this ActionRunDto.  # noqa: E501

        Display name of the action being executed  # noqa: E501

        :return: The action_display_name of this ActionRunDto.  # noqa: E501
        :rtype: str
        """
        return self._action_display_name

    @action_display_name.setter
    def action_display_name(self, action_display_name):
        """Sets the action_display_name of this ActionRunDto.

        Display name of the action being executed  # noqa: E501

        :param action_display_name: The action_display_name of this ActionRunDto.  # noqa: E501
        :type: str
        """

        self._action_display_name = action_display_name

    @property
    def status(self):
        """Gets the status of this ActionRunDto.  # noqa: E501

        Represents the possible statuses of an action run  # noqa: E501

        :return: The status of this ActionRunDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ActionRunDto.

        Represents the possible statuses of an action run  # noqa: E501

        :param status: The status of this ActionRunDto.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["STARTED", "PENDING", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED", "CANCELLING", "NON_PERMANENT_ERROR"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def reason(self):
        """Gets the reason of this ActionRunDto.  # noqa: E501

        Reason for the current status  # noqa: E501

        :return: The reason of this ActionRunDto.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ActionRunDto.

        Reason for the current status  # noqa: E501

        :param reason: The reason of this ActionRunDto.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def message(self):
        """Gets the message of this ActionRunDto.  # noqa: E501

        Detailed message about the current status  # noqa: E501

        :return: The message of this ActionRunDto.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ActionRunDto.

        Detailed message about the current status  # noqa: E501

        :param message: The message of this ActionRunDto.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def start_time(self):
        """Gets the start_time of this ActionRunDto.  # noqa: E501

        Timestamp when the action run started  # noqa: E501

        :return: The start_time of this ActionRunDto.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ActionRunDto.

        Timestamp when the action run started  # noqa: E501

        :param start_time: The start_time of this ActionRunDto.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def completion_time(self):
        """Gets the completion_time of this ActionRunDto.  # noqa: E501

        Timestamp when the action run completed  # noqa: E501

        :return: The completion_time of this ActionRunDto.  # noqa: E501
        :rtype: datetime
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this ActionRunDto.

        Timestamp when the action run completed  # noqa: E501

        :param completion_time: The completion_time of this ActionRunDto.  # noqa: E501
        :type: datetime
        """

        self._completion_time = completion_time

    @property
    def steps(self):
        """Gets the steps of this ActionRunDto.  # noqa: E501

        List of steps executed in this action run  # noqa: E501

        :return: The steps of this ActionRunDto.  # noqa: E501
        :rtype: list[ActionStepDto]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this ActionRunDto.

        List of steps executed in this action run  # noqa: E501

        :param steps: The steps of this ActionRunDto.  # noqa: E501
        :type: list[ActionStepDto]
        """

        self._steps = steps

    @property
    def params(self):
        """Gets the params of this ActionRunDto.  # noqa: E501

        Parameters passed to this action run, keyed by parameter name  # noqa: E501

        :return: The params of this ActionRunDto.  # noqa: E501
        :rtype: dict(str, ActionParameterValueDto)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ActionRunDto.

        Parameters passed to this action run, keyed by parameter name  # noqa: E501

        :param params: The params of this ActionRunDto.  # noqa: E501
        :type: dict(str, ActionParameterValueDto)
        """

        self._params = params

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ActionRunDto.  # noqa: E501

        Cluster ID associated with this action  # noqa: E501

        :return: The cluster_id of this ActionRunDto.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ActionRunDto.

        Cluster ID associated with this action  # noqa: E501

        :param cluster_id: The cluster_id of this ActionRunDto.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def resource_type(self):
        """Gets the resource_type of this ActionRunDto.  # noqa: E501

        Resource type associated with this action  # noqa: E501

        :return: The resource_type of this ActionRunDto.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ActionRunDto.

        Resource type associated with this action  # noqa: E501

        :param resource_type: The resource_type of this ActionRunDto.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def resource_name(self):
        """Gets the resource_name of this ActionRunDto.  # noqa: E501

        Resource name associated with this action  # noqa: E501

        :return: The resource_name of this ActionRunDto.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this ActionRunDto.

        Resource name associated with this action  # noqa: E501

        :param resource_name: The resource_name of this ActionRunDto.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def triggered_by(self):
        """Gets the triggered_by of this ActionRunDto.  # noqa: E501

        User who triggered this action run  # noqa: E501

        :return: The triggered_by of this ActionRunDto.  # noqa: E501
        :rtype: str
        """
        return self._triggered_by

    @triggered_by.setter
    def triggered_by(self, triggered_by):
        """Sets the triggered_by of this ActionRunDto.

        User who triggered this action run  # noqa: E501

        :param triggered_by: The triggered_by of this ActionRunDto.  # noqa: E501
        :type: str
        """

        self._triggered_by = triggered_by

    @property
    def has_upload(self):
        """Gets the has_upload of this ActionRunDto.  # noqa: E501

        Indicates if this action run has an associated upload  # noqa: E501

        :return: The has_upload of this ActionRunDto.  # noqa: E501
        :rtype: bool
        """
        return self._has_upload

    @has_upload.setter
    def has_upload(self, has_upload):
        """Sets the has_upload of this ActionRunDto.

        Indicates if this action run has an associated upload  # noqa: E501

        :param has_upload: The has_upload of this ActionRunDto.  # noqa: E501
        :type: bool
        """

        self._has_upload = has_upload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionRunDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionRunDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
