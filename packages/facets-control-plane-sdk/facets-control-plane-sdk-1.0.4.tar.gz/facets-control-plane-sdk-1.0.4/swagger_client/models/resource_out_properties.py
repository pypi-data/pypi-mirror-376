# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceOutProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'resource_name': 'str',
        'resource_type': 'str',
        'cluster_id': 'str',
        'interfaces': 'dict(str, object)',
        'attributes': 'dict(str, object)',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'resource_name': 'resourceName',
        'resource_type': 'resourceType',
        'cluster_id': 'clusterId',
        'interfaces': 'interfaces',
        'attributes': 'attributes',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, resource_name=None, resource_type=None, cluster_id=None, interfaces=None, attributes=None, updated_at=None):  # noqa: E501
        """ResourceOutProperties - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._resource_name = None
        self._resource_type = None
        self._cluster_id = None
        self._interfaces = None
        self._attributes = None
        self._updated_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if resource_name is not None:
            self.resource_name = resource_name
        if resource_type is not None:
            self.resource_type = resource_type
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if interfaces is not None:
            self.interfaces = interfaces
        if attributes is not None:
            self.attributes = attributes
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this ResourceOutProperties.  # noqa: E501


        :return: The id of this ResourceOutProperties.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourceOutProperties.


        :param id: The id of this ResourceOutProperties.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource_name(self):
        """Gets the resource_name of this ResourceOutProperties.  # noqa: E501


        :return: The resource_name of this ResourceOutProperties.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this ResourceOutProperties.


        :param resource_name: The resource_name of this ResourceOutProperties.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceOutProperties.  # noqa: E501


        :return: The resource_type of this ResourceOutProperties.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceOutProperties.


        :param resource_type: The resource_type of this ResourceOutProperties.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ResourceOutProperties.  # noqa: E501


        :return: The cluster_id of this ResourceOutProperties.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ResourceOutProperties.


        :param cluster_id: The cluster_id of this ResourceOutProperties.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def interfaces(self):
        """Gets the interfaces of this ResourceOutProperties.  # noqa: E501


        :return: The interfaces of this ResourceOutProperties.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """Sets the interfaces of this ResourceOutProperties.


        :param interfaces: The interfaces of this ResourceOutProperties.  # noqa: E501
        :type: dict(str, object)
        """

        self._interfaces = interfaces

    @property
    def attributes(self):
        """Gets the attributes of this ResourceOutProperties.  # noqa: E501


        :return: The attributes of this ResourceOutProperties.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ResourceOutProperties.


        :param attributes: The attributes of this ResourceOutProperties.  # noqa: E501
        :type: dict(str, object)
        """

        self._attributes = attributes

    @property
    def updated_at(self):
        """Gets the updated_at of this ResourceOutProperties.  # noqa: E501


        :return: The updated_at of this ResourceOutProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ResourceOutProperties.


        :param updated_at: The updated_at of this ResourceOutProperties.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceOutProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceOutProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
