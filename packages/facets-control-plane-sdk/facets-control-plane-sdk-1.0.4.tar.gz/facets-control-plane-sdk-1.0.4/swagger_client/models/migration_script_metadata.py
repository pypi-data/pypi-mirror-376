# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MigrationScriptMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sequence_number': 'int',
        'description': 'str',
        'downtime': 'bool',
        'clouds': 'list[str]'
    }

    attribute_map = {
        'sequence_number': 'sequenceNumber',
        'description': 'description',
        'downtime': 'downtime',
        'clouds': 'clouds'
    }

    def __init__(self, sequence_number=None, description=None, downtime=None, clouds=None):  # noqa: E501
        """MigrationScriptMetadata - a model defined in Swagger"""  # noqa: E501
        self._sequence_number = None
        self._description = None
        self._downtime = None
        self._clouds = None
        self.discriminator = None
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if description is not None:
            self.description = description
        if downtime is not None:
            self.downtime = downtime
        if clouds is not None:
            self.clouds = clouds

    @property
    def sequence_number(self):
        """Gets the sequence_number of this MigrationScriptMetadata.  # noqa: E501


        :return: The sequence_number of this MigrationScriptMetadata.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this MigrationScriptMetadata.


        :param sequence_number: The sequence_number of this MigrationScriptMetadata.  # noqa: E501
        :type: int
        """

        self._sequence_number = sequence_number

    @property
    def description(self):
        """Gets the description of this MigrationScriptMetadata.  # noqa: E501


        :return: The description of this MigrationScriptMetadata.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MigrationScriptMetadata.


        :param description: The description of this MigrationScriptMetadata.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def downtime(self):
        """Gets the downtime of this MigrationScriptMetadata.  # noqa: E501


        :return: The downtime of this MigrationScriptMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._downtime

    @downtime.setter
    def downtime(self, downtime):
        """Sets the downtime of this MigrationScriptMetadata.


        :param downtime: The downtime of this MigrationScriptMetadata.  # noqa: E501
        :type: bool
        """

        self._downtime = downtime

    @property
    def clouds(self):
        """Gets the clouds of this MigrationScriptMetadata.  # noqa: E501


        :return: The clouds of this MigrationScriptMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._clouds

    @clouds.setter
    def clouds(self, clouds):
        """Sets the clouds of this MigrationScriptMetadata.


        :param clouds: The clouds of this MigrationScriptMetadata.  # noqa: E501
        :type: list[str]
        """

        self._clouds = clouds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrationScriptMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationScriptMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
