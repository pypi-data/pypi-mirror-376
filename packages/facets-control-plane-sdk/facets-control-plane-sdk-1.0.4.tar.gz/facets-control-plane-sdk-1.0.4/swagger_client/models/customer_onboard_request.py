# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomerOnboardRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_name': 'str',
        'external_id': 'str',
        'role_arn': 'str',
        'region': 'str',
        'azs': 'list[str]',
        'release_stream': 'str',
        'timezone': 'str'
    }

    attribute_map = {
        'customer_name': 'customerName',
        'external_id': 'externalId',
        'role_arn': 'roleARN',
        'region': 'region',
        'azs': 'azs',
        'release_stream': 'releaseStream',
        'timezone': 'timezone'
    }

    def __init__(self, customer_name=None, external_id=None, role_arn=None, region=None, azs=None, release_stream=None, timezone=None):  # noqa: E501
        """CustomerOnboardRequest - a model defined in Swagger"""  # noqa: E501
        self._customer_name = None
        self._external_id = None
        self._role_arn = None
        self._region = None
        self._azs = None
        self._release_stream = None
        self._timezone = None
        self.discriminator = None
        self.customer_name = customer_name
        self.external_id = external_id
        self.role_arn = role_arn
        self.region = region
        if azs is not None:
            self.azs = azs
        self.release_stream = release_stream
        if timezone is not None:
            self.timezone = timezone

    @property
    def customer_name(self):
        """Gets the customer_name of this CustomerOnboardRequest.  # noqa: E501


        :return: The customer_name of this CustomerOnboardRequest.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this CustomerOnboardRequest.


        :param customer_name: The customer_name of this CustomerOnboardRequest.  # noqa: E501
        :type: str
        """
        if customer_name is None:
            raise ValueError("Invalid value for `customer_name`, must not be `None`")  # noqa: E501

        self._customer_name = customer_name

    @property
    def external_id(self):
        """Gets the external_id of this CustomerOnboardRequest.  # noqa: E501


        :return: The external_id of this CustomerOnboardRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this CustomerOnboardRequest.


        :param external_id: The external_id of this CustomerOnboardRequest.  # noqa: E501
        :type: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501

        self._external_id = external_id

    @property
    def role_arn(self):
        """Gets the role_arn of this CustomerOnboardRequest.  # noqa: E501


        :return: The role_arn of this CustomerOnboardRequest.  # noqa: E501
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CustomerOnboardRequest.


        :param role_arn: The role_arn of this CustomerOnboardRequest.  # noqa: E501
        :type: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")  # noqa: E501

        self._role_arn = role_arn

    @property
    def region(self):
        """Gets the region of this CustomerOnboardRequest.  # noqa: E501


        :return: The region of this CustomerOnboardRequest.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CustomerOnboardRequest.


        :param region: The region of this CustomerOnboardRequest.  # noqa: E501
        :type: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def azs(self):
        """Gets the azs of this CustomerOnboardRequest.  # noqa: E501


        :return: The azs of this CustomerOnboardRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._azs

    @azs.setter
    def azs(self, azs):
        """Sets the azs of this CustomerOnboardRequest.


        :param azs: The azs of this CustomerOnboardRequest.  # noqa: E501
        :type: list[str]
        """

        self._azs = azs

    @property
    def release_stream(self):
        """Gets the release_stream of this CustomerOnboardRequest.  # noqa: E501


        :return: The release_stream of this CustomerOnboardRequest.  # noqa: E501
        :rtype: str
        """
        return self._release_stream

    @release_stream.setter
    def release_stream(self, release_stream):
        """Sets the release_stream of this CustomerOnboardRequest.


        :param release_stream: The release_stream of this CustomerOnboardRequest.  # noqa: E501
        :type: str
        """
        if release_stream is None:
            raise ValueError("Invalid value for `release_stream`, must not be `None`")  # noqa: E501

        self._release_stream = release_stream

    @property
    def timezone(self):
        """Gets the timezone of this CustomerOnboardRequest.  # noqa: E501


        :return: The timezone of this CustomerOnboardRequest.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this CustomerOnboardRequest.


        :param timezone: The timezone of this CustomerOnboardRequest.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerOnboardRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerOnboardRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
