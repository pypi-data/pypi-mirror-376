# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccessRoleDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role_name': 'str',
        'role_label': 'str',
        'role_type': 'str',
        'environment': 'str',
        'cluster_id': 'str',
        'group_id': 'str',
        'group_name': 'str'
    }

    attribute_map = {
        'role_name': 'roleName',
        'role_label': 'roleLabel',
        'role_type': 'roleType',
        'environment': 'environment',
        'cluster_id': 'clusterId',
        'group_id': 'groupId',
        'group_name': 'groupName'
    }

    def __init__(self, role_name=None, role_label=None, role_type=None, environment=None, cluster_id=None, group_id=None, group_name=None):  # noqa: E501
        """AccessRoleDetails - a model defined in Swagger"""  # noqa: E501
        self._role_name = None
        self._role_label = None
        self._role_type = None
        self._environment = None
        self._cluster_id = None
        self._group_id = None
        self._group_name = None
        self.discriminator = None
        if role_name is not None:
            self.role_name = role_name
        if role_label is not None:
            self.role_label = role_label
        if role_type is not None:
            self.role_type = role_type
        if environment is not None:
            self.environment = environment
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if group_id is not None:
            self.group_id = group_id
        if group_name is not None:
            self.group_name = group_name

    @property
    def role_name(self):
        """Gets the role_name of this AccessRoleDetails.  # noqa: E501


        :return: The role_name of this AccessRoleDetails.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this AccessRoleDetails.


        :param role_name: The role_name of this AccessRoleDetails.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def role_label(self):
        """Gets the role_label of this AccessRoleDetails.  # noqa: E501


        :return: The role_label of this AccessRoleDetails.  # noqa: E501
        :rtype: str
        """
        return self._role_label

    @role_label.setter
    def role_label(self, role_label):
        """Sets the role_label of this AccessRoleDetails.


        :param role_label: The role_label of this AccessRoleDetails.  # noqa: E501
        :type: str
        """

        self._role_label = role_label

    @property
    def role_type(self):
        """Gets the role_type of this AccessRoleDetails.  # noqa: E501


        :return: The role_type of this AccessRoleDetails.  # noqa: E501
        :rtype: str
        """
        return self._role_type

    @role_type.setter
    def role_type(self, role_type):
        """Sets the role_type of this AccessRoleDetails.


        :param role_type: The role_type of this AccessRoleDetails.  # noqa: E501
        :type: str
        """

        self._role_type = role_type

    @property
    def environment(self):
        """Gets the environment of this AccessRoleDetails.  # noqa: E501


        :return: The environment of this AccessRoleDetails.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this AccessRoleDetails.


        :param environment: The environment of this AccessRoleDetails.  # noqa: E501
        :type: str
        """

        self._environment = environment

    @property
    def cluster_id(self):
        """Gets the cluster_id of this AccessRoleDetails.  # noqa: E501


        :return: The cluster_id of this AccessRoleDetails.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this AccessRoleDetails.


        :param cluster_id: The cluster_id of this AccessRoleDetails.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def group_id(self):
        """Gets the group_id of this AccessRoleDetails.  # noqa: E501


        :return: The group_id of this AccessRoleDetails.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this AccessRoleDetails.


        :param group_id: The group_id of this AccessRoleDetails.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this AccessRoleDetails.  # noqa: E501


        :return: The group_name of this AccessRoleDetails.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this AccessRoleDetails.


        :param group_name: The group_name of this AccessRoleDetails.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessRoleDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessRoleDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
