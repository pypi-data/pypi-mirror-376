# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubstackRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'vcs_url': 'str',
        'vcs': 'str',
        'relative_path': 'str',
        'branch': 'str',
        'version_control_account_id': 'str',
        'tf_module': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'vcs_url': 'vcsUrl',
        'vcs': 'vcs',
        'relative_path': 'relativePath',
        'branch': 'branch',
        'version_control_account_id': 'versionControlAccountId',
        'tf_module': 'tfModule'
    }

    def __init__(self, name=None, vcs_url=None, vcs=None, relative_path=None, branch=None, version_control_account_id=None, tf_module=None):  # noqa: E501
        """SubstackRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._vcs_url = None
        self._vcs = None
        self._relative_path = None
        self._branch = None
        self._version_control_account_id = None
        self._tf_module = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if vcs_url is not None:
            self.vcs_url = vcs_url
        if vcs is not None:
            self.vcs = vcs
        if relative_path is not None:
            self.relative_path = relative_path
        if branch is not None:
            self.branch = branch
        if version_control_account_id is not None:
            self.version_control_account_id = version_control_account_id
        if tf_module is not None:
            self.tf_module = tf_module

    @property
    def name(self):
        """Gets the name of this SubstackRequest.  # noqa: E501


        :return: The name of this SubstackRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubstackRequest.


        :param name: The name of this SubstackRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def vcs_url(self):
        """Gets the vcs_url of this SubstackRequest.  # noqa: E501


        :return: The vcs_url of this SubstackRequest.  # noqa: E501
        :rtype: str
        """
        return self._vcs_url

    @vcs_url.setter
    def vcs_url(self, vcs_url):
        """Sets the vcs_url of this SubstackRequest.


        :param vcs_url: The vcs_url of this SubstackRequest.  # noqa: E501
        :type: str
        """

        self._vcs_url = vcs_url

    @property
    def vcs(self):
        """Gets the vcs of this SubstackRequest.  # noqa: E501


        :return: The vcs of this SubstackRequest.  # noqa: E501
        :rtype: str
        """
        return self._vcs

    @vcs.setter
    def vcs(self, vcs):
        """Sets the vcs of this SubstackRequest.


        :param vcs: The vcs of this SubstackRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["GITHUB", "BITBUCKET", "GITLAB"]  # noqa: E501
        if vcs not in allowed_values:
            raise ValueError(
                "Invalid value for `vcs` ({0}), must be one of {1}"  # noqa: E501
                .format(vcs, allowed_values)
            )

        self._vcs = vcs

    @property
    def relative_path(self):
        """Gets the relative_path of this SubstackRequest.  # noqa: E501


        :return: The relative_path of this SubstackRequest.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this SubstackRequest.


        :param relative_path: The relative_path of this SubstackRequest.  # noqa: E501
        :type: str
        """

        self._relative_path = relative_path

    @property
    def branch(self):
        """Gets the branch of this SubstackRequest.  # noqa: E501


        :return: The branch of this SubstackRequest.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this SubstackRequest.


        :param branch: The branch of this SubstackRequest.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def version_control_account_id(self):
        """Gets the version_control_account_id of this SubstackRequest.  # noqa: E501


        :return: The version_control_account_id of this SubstackRequest.  # noqa: E501
        :rtype: str
        """
        return self._version_control_account_id

    @version_control_account_id.setter
    def version_control_account_id(self, version_control_account_id):
        """Sets the version_control_account_id of this SubstackRequest.


        :param version_control_account_id: The version_control_account_id of this SubstackRequest.  # noqa: E501
        :type: str
        """

        self._version_control_account_id = version_control_account_id

    @property
    def tf_module(self):
        """Gets the tf_module of this SubstackRequest.  # noqa: E501


        :return: The tf_module of this SubstackRequest.  # noqa: E501
        :rtype: bool
        """
        return self._tf_module

    @tf_module.setter
    def tf_module(self, tf_module):
        """Sets the tf_module of this SubstackRequest.


        :param tf_module: The tf_module of this SubstackRequest.  # noqa: E501
        :type: bool
        """

        self._tf_module = tf_module

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubstackRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubstackRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
