# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SaveAsTemplateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'git_url': 'str',
        'git_ref': 'str',
        'relative_path': 'str',
        'account_id': 'str',
        'group': 'str',
        'clouds': 'list[str]',
        'type': 'str',
        'organisation_name': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'git_url': 'gitUrl',
        'git_ref': 'gitRef',
        'relative_path': 'relativePath',
        'account_id': 'accountId',
        'group': 'group',
        'clouds': 'clouds',
        'type': 'type',
        'organisation_name': 'organisationName'
    }

    def __init__(self, name=None, description=None, git_url=None, git_ref=None, relative_path=None, account_id=None, group=None, clouds=None, type=None, organisation_name=None):  # noqa: E501
        """SaveAsTemplateRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._git_url = None
        self._git_ref = None
        self._relative_path = None
        self._account_id = None
        self._group = None
        self._clouds = None
        self._type = None
        self._organisation_name = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        if git_url is not None:
            self.git_url = git_url
        if git_ref is not None:
            self.git_ref = git_ref
        if relative_path is not None:
            self.relative_path = relative_path
        self.account_id = account_id
        if group is not None:
            self.group = group
        if clouds is not None:
            self.clouds = clouds
        if type is not None:
            self.type = type
        if organisation_name is not None:
            self.organisation_name = organisation_name

    @property
    def name(self):
        """Gets the name of this SaveAsTemplateRequest.  # noqa: E501


        :return: The name of this SaveAsTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SaveAsTemplateRequest.


        :param name: The name of this SaveAsTemplateRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this SaveAsTemplateRequest.  # noqa: E501


        :return: The description of this SaveAsTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SaveAsTemplateRequest.


        :param description: The description of this SaveAsTemplateRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def git_url(self):
        """Gets the git_url of this SaveAsTemplateRequest.  # noqa: E501


        :return: The git_url of this SaveAsTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._git_url

    @git_url.setter
    def git_url(self, git_url):
        """Sets the git_url of this SaveAsTemplateRequest.


        :param git_url: The git_url of this SaveAsTemplateRequest.  # noqa: E501
        :type: str
        """

        self._git_url = git_url

    @property
    def git_ref(self):
        """Gets the git_ref of this SaveAsTemplateRequest.  # noqa: E501


        :return: The git_ref of this SaveAsTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._git_ref

    @git_ref.setter
    def git_ref(self, git_ref):
        """Sets the git_ref of this SaveAsTemplateRequest.


        :param git_ref: The git_ref of this SaveAsTemplateRequest.  # noqa: E501
        :type: str
        """

        self._git_ref = git_ref

    @property
    def relative_path(self):
        """Gets the relative_path of this SaveAsTemplateRequest.  # noqa: E501


        :return: The relative_path of this SaveAsTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this SaveAsTemplateRequest.


        :param relative_path: The relative_path of this SaveAsTemplateRequest.  # noqa: E501
        :type: str
        """

        self._relative_path = relative_path

    @property
    def account_id(self):
        """Gets the account_id of this SaveAsTemplateRequest.  # noqa: E501


        :return: The account_id of this SaveAsTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SaveAsTemplateRequest.


        :param account_id: The account_id of this SaveAsTemplateRequest.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def group(self):
        """Gets the group of this SaveAsTemplateRequest.  # noqa: E501


        :return: The group of this SaveAsTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this SaveAsTemplateRequest.


        :param group: The group of this SaveAsTemplateRequest.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def clouds(self):
        """Gets the clouds of this SaveAsTemplateRequest.  # noqa: E501


        :return: The clouds of this SaveAsTemplateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._clouds

    @clouds.setter
    def clouds(self, clouds):
        """Sets the clouds of this SaveAsTemplateRequest.


        :param clouds: The clouds of this SaveAsTemplateRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["AWS", "AZURE", "LOCAL", "GCP", "KUBERNETES", "NO_CLOUD"]  # noqa: E501
        if not set(clouds).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `clouds` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(clouds) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._clouds = clouds

    @property
    def type(self):
        """Gets the type of this SaveAsTemplateRequest.  # noqa: E501


        :return: The type of this SaveAsTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SaveAsTemplateRequest.


        :param type: The type of this SaveAsTemplateRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["MULTI_INSTANCE", "SINGLE_INSTANCE", "AUTO_INJECT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def organisation_name(self):
        """Gets the organisation_name of this SaveAsTemplateRequest.  # noqa: E501


        :return: The organisation_name of this SaveAsTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._organisation_name

    @organisation_name.setter
    def organisation_name(self, organisation_name):
        """Sets the organisation_name of this SaveAsTemplateRequest.


        :param organisation_name: The organisation_name of this SaveAsTemplateRequest.  # noqa: E501
        :type: str
        """

        self._organisation_name = organisation_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaveAsTemplateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaveAsTemplateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
