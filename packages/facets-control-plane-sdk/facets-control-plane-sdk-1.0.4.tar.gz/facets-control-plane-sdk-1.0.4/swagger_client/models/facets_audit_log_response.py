# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FacetsAuditLogResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'performed_by': 'str',
        'performed_at': 'datetime',
        'entity': 'str',
        'entity_label': 'str',
        'entity_action': 'str',
        'entity_action_label': 'str',
        'target': 'str',
        'metadata': 'dict(str, object)',
        'cluster_id': 'str',
        'cluster_name': 'str',
        'stack_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'performed_by': 'performedBy',
        'performed_at': 'performedAt',
        'entity': 'entity',
        'entity_label': 'entityLabel',
        'entity_action': 'entityAction',
        'entity_action_label': 'entityActionLabel',
        'target': 'target',
        'metadata': 'metadata',
        'cluster_id': 'clusterId',
        'cluster_name': 'clusterName',
        'stack_name': 'stackName'
    }

    def __init__(self, id=None, performed_by=None, performed_at=None, entity=None, entity_label=None, entity_action=None, entity_action_label=None, target=None, metadata=None, cluster_id=None, cluster_name=None, stack_name=None):  # noqa: E501
        """FacetsAuditLogResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._performed_by = None
        self._performed_at = None
        self._entity = None
        self._entity_label = None
        self._entity_action = None
        self._entity_action_label = None
        self._target = None
        self._metadata = None
        self._cluster_id = None
        self._cluster_name = None
        self._stack_name = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if performed_by is not None:
            self.performed_by = performed_by
        if performed_at is not None:
            self.performed_at = performed_at
        if entity is not None:
            self.entity = entity
        if entity_label is not None:
            self.entity_label = entity_label
        if entity_action is not None:
            self.entity_action = entity_action
        if entity_action_label is not None:
            self.entity_action_label = entity_action_label
        if target is not None:
            self.target = target
        if metadata is not None:
            self.metadata = metadata
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if stack_name is not None:
            self.stack_name = stack_name

    @property
    def id(self):
        """Gets the id of this FacetsAuditLogResponse.  # noqa: E501


        :return: The id of this FacetsAuditLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FacetsAuditLogResponse.


        :param id: The id of this FacetsAuditLogResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def performed_by(self):
        """Gets the performed_by of this FacetsAuditLogResponse.  # noqa: E501


        :return: The performed_by of this FacetsAuditLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._performed_by

    @performed_by.setter
    def performed_by(self, performed_by):
        """Sets the performed_by of this FacetsAuditLogResponse.


        :param performed_by: The performed_by of this FacetsAuditLogResponse.  # noqa: E501
        :type: str
        """

        self._performed_by = performed_by

    @property
    def performed_at(self):
        """Gets the performed_at of this FacetsAuditLogResponse.  # noqa: E501


        :return: The performed_at of this FacetsAuditLogResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._performed_at

    @performed_at.setter
    def performed_at(self, performed_at):
        """Sets the performed_at of this FacetsAuditLogResponse.


        :param performed_at: The performed_at of this FacetsAuditLogResponse.  # noqa: E501
        :type: datetime
        """

        self._performed_at = performed_at

    @property
    def entity(self):
        """Gets the entity of this FacetsAuditLogResponse.  # noqa: E501


        :return: The entity of this FacetsAuditLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this FacetsAuditLogResponse.


        :param entity: The entity of this FacetsAuditLogResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["BLUEPRINT", "ENVIRONMENT", "RESOURCE", "CI_INTEGRATION", "CI_RULE", "CI_CD", "PROMOTION_WORKFLOW", "RELEASE_STREAM", "DELIVERY_PIPELINE", "TRASH", "RELEASE_SCHEDULE", "AVAILABILITY_RULES", "TEMPLATE_INPUT", "SETTINGS", "ACCOUNT", "CONTAINER_REGISTRY", "NOTIFICATION_CHANNEL", "NOTIFICATION_SUBSCRIPTION", "OAUTH_INTEGRATION", "GUARDRAIL_POLICY", "USER", "USER_GROUP", "CUSTOM_ROLE", "RESOURCE_GROUP", "PROJECT_TYPE", "MODULE", "WEB_COMPONENT", "UNKNOWN"]  # noqa: E501
        if entity not in allowed_values:
            raise ValueError(
                "Invalid value for `entity` ({0}), must be one of {1}"  # noqa: E501
                .format(entity, allowed_values)
            )

        self._entity = entity

    @property
    def entity_label(self):
        """Gets the entity_label of this FacetsAuditLogResponse.  # noqa: E501


        :return: The entity_label of this FacetsAuditLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._entity_label

    @entity_label.setter
    def entity_label(self, entity_label):
        """Sets the entity_label of this FacetsAuditLogResponse.


        :param entity_label: The entity_label of this FacetsAuditLogResponse.  # noqa: E501
        :type: str
        """

        self._entity_label = entity_label

    @property
    def entity_action(self):
        """Gets the entity_action of this FacetsAuditLogResponse.  # noqa: E501


        :return: The entity_action of this FacetsAuditLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._entity_action

    @entity_action.setter
    def entity_action(self, entity_action):
        """Sets the entity_action of this FacetsAuditLogResponse.


        :param entity_action: The entity_action of this FacetsAuditLogResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["BLUEPRINT_CREATE", "BLUEPRINT_DELETE", "BLUEPRINT_UPDATE", "BLUEPRINT_RESOURCE_CREATE", "BLUEPRINT_RESOURCE_UPDATE", "BLUEPRINT_RESOURCE_RENAME", "BLUEPRINT_RESOURCE_DELETE", "BLUEPRINT_RESOURCE_ENABLE", "BLUEPRINT_RESOURCE_DISABLE", "BLUEPRINT_ADD_TEMPLATE", "BLUEPRINT_SECRETS_VARIABLES_CREATE", "BLUEPRINT_SECRETS_VARIABLES_UPDATE", "BLUEPRINT_SECRETS_VARIABLES_DELETE", "PROJECT_TYPE_CREATE", "PROJECT_TYPE_UPDATE", "PROJECT_TYPE_DELETE", "MODULE_UPLOAD", "MODULE_MARKED_AS_PUBLISHED", "MODULE_DELETE", "ENVIRONMENT_CREATE", "ENVIRONMENT_DELETE", "ENVIRONMENT_UPDATE", "CI_INTEGRATION_CREATE", "CI_INTEGRATION_UPDATE", "CI_INTEGRATION_DELETE", "CI_CD_CONFIGURE", "CI_RULE_CREATE", "CI_RULE_UPDATE", "CI_RULE_DELETE", "PROMOTION_WORKFLOW_CREATE", "PROMOTION_WORKFLOW_UPDATE", "PROMOTION_WORKFLOW_DELETE", "RELEASE_STREAM_CREATE", "RELEASE_STREAM_DELETE", "DELIVERY_PIPELINE_UPDATE", "OVERRIDE_UPDATE", "OVERRIDE_VERSION_ROLLBACK", "SECRETS_VARIABLES_UPDATE", "TEMPLATE_INPUT_CREATE", "TEMPLATE_INPUT_DELETE", "IAC_VERSION_UPDATE", "RELEASES_PAUSE", "RELEASES_RESUME", "RELEASE_SCHEDULE_CREATE", "RELEASE_SCHEDULE_UPDATE", "RELEASE_SCHEDULE_DELETE", "AVAILABILITY_RULES_CREATE", "AVAILABILITY_RULES_UPDATE", "AVAILABILITY_RULES_DELETE", "MAINTENANCE_WINDOW_UPDATE", "ENVIRONMENT_SETTINGS_UPDATE", "GENERAL_SETTINGS_UPDATE", "ACCOUNT_CREATE", "ACCOUNT_UPDATE", "ACCOUNT_DELETE", "CONTAINER_REGISTRY_CREATE", "CONTAINER_REGISTRY_UPDATE", "CONTAINER_REGISTRY_DELETE", "NOTIFICATION_SUBSCRIPTION_CREATE", "NOTIFICATION_SUBSCRIPTION_UPDATE", "NOTIFICATION_SUBSCRIPTION_DELETE", "NOTIFICATION_CHANNEL_CREATE", "NOTIFICATION_CHANNEL_UPDATE", "NOTIFICATION_CHANNEL_DELETE", "OAUTH_INTEGRATION_CREATE", "OAUTH_INTEGRATION_UPDATE", "OAUTH_INTEGRATION_DELETE", "ENVIRONMENT_RESOURCE_DISABLE", "ENVIRONMENT_RESOURCE_ENABLE", "APPLICATION_ROLLOUT_RESTART", "GUARDRAIL_POLICY_CREATE", "GUARDRAIL_POLICY_UPDATE", "GUARDRAIL_POLICY_DELETE", "USER_CREATE", "USER_UPDATE", "USER_DELETE", "USER_GROUP_CREATE", "USER_GROUP_UPDATE", "USER_GROUP_DELETE", "RESOURCE_GROUP_CREATE", "RESOURCE_GROUP_UPDATE", "RESOURCE_GROUP_DELETE", "CUSTOM_ROLE_CREATE", "CUSTOM_ROLE_UPDATE", "CUSTOM_ROLE_DELETE", "TRASH_RESTORE", "TRASH_DELETE", "TRASH_EMPTY", "WEB_COMPONENT_CREATE", "WEB_COMPONENT_UPDATE", "WEB_COMPONENT_DELETE", "ACTION_RUN", "UNKNOWN"]  # noqa: E501
        if entity_action not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_action` ({0}), must be one of {1}"  # noqa: E501
                .format(entity_action, allowed_values)
            )

        self._entity_action = entity_action

    @property
    def entity_action_label(self):
        """Gets the entity_action_label of this FacetsAuditLogResponse.  # noqa: E501


        :return: The entity_action_label of this FacetsAuditLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._entity_action_label

    @entity_action_label.setter
    def entity_action_label(self, entity_action_label):
        """Sets the entity_action_label of this FacetsAuditLogResponse.


        :param entity_action_label: The entity_action_label of this FacetsAuditLogResponse.  # noqa: E501
        :type: str
        """

        self._entity_action_label = entity_action_label

    @property
    def target(self):
        """Gets the target of this FacetsAuditLogResponse.  # noqa: E501


        :return: The target of this FacetsAuditLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this FacetsAuditLogResponse.


        :param target: The target of this FacetsAuditLogResponse.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def metadata(self):
        """Gets the metadata of this FacetsAuditLogResponse.  # noqa: E501


        :return: The metadata of this FacetsAuditLogResponse.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this FacetsAuditLogResponse.


        :param metadata: The metadata of this FacetsAuditLogResponse.  # noqa: E501
        :type: dict(str, object)
        """

        self._metadata = metadata

    @property
    def cluster_id(self):
        """Gets the cluster_id of this FacetsAuditLogResponse.  # noqa: E501


        :return: The cluster_id of this FacetsAuditLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this FacetsAuditLogResponse.


        :param cluster_id: The cluster_id of this FacetsAuditLogResponse.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def cluster_name(self):
        """Gets the cluster_name of this FacetsAuditLogResponse.  # noqa: E501


        :return: The cluster_name of this FacetsAuditLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this FacetsAuditLogResponse.


        :param cluster_name: The cluster_name of this FacetsAuditLogResponse.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def stack_name(self):
        """Gets the stack_name of this FacetsAuditLogResponse.  # noqa: E501


        :return: The stack_name of this FacetsAuditLogResponse.  # noqa: E501
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this FacetsAuditLogResponse.


        :param stack_name: The stack_name of this FacetsAuditLogResponse.  # noqa: E501
        :type: str
        """

        self._stack_name = stack_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FacetsAuditLogResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FacetsAuditLogResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
