# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_name': 'str',
        'password': 'str',
        'picture': 'str',
        'roles': 'list[str]',
        'group_id': 'str',
        'group_ids': 'list[str]',
        'cluster_ids': 'list[str]',
        'teams': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'user_name': 'userName',
        'password': 'password',
        'picture': 'picture',
        'roles': 'roles',
        'group_id': 'groupId',
        'group_ids': 'groupIds',
        'cluster_ids': 'clusterIds',
        'teams': 'teams'
    }

    def __init__(self, id=None, user_name=None, password=None, picture=None, roles=None, group_id=None, group_ids=None, cluster_ids=None, teams=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_name = None
        self._password = None
        self._picture = None
        self._roles = None
        self._group_id = None
        self._group_ids = None
        self._cluster_ids = None
        self._teams = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if user_name is not None:
            self.user_name = user_name
        if password is not None:
            self.password = password
        if picture is not None:
            self.picture = picture
        if roles is not None:
            self.roles = roles
        if group_id is not None:
            self.group_id = group_id
        if group_ids is not None:
            self.group_ids = group_ids
        if cluster_ids is not None:
            self.cluster_ids = cluster_ids
        if teams is not None:
            self.teams = teams

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_name(self):
        """Gets the user_name of this User.  # noqa: E501


        :return: The user_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this User.


        :param user_name: The user_name of this User.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def password(self):
        """Gets the password of this User.  # noqa: E501


        :return: The password of this User.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The password of this User.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def picture(self):
        """Gets the picture of this User.  # noqa: E501


        :return: The picture of this User.  # noqa: E501
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this User.


        :param picture: The picture of this User.  # noqa: E501
        :type: str
        """

        self._picture = picture

    @property
    def roles(self):
        """Gets the roles of this User.  # noqa: E501


        :return: The roles of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this User.


        :param roles: The roles of this User.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def group_id(self):
        """Gets the group_id of this User.  # noqa: E501


        :return: The group_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this User.


        :param group_id: The group_id of this User.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def group_ids(self):
        """Gets the group_ids of this User.  # noqa: E501


        :return: The group_ids of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this User.


        :param group_ids: The group_ids of this User.  # noqa: E501
        :type: list[str]
        """

        self._group_ids = group_ids

    @property
    def cluster_ids(self):
        """Gets the cluster_ids of this User.  # noqa: E501


        :return: The cluster_ids of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._cluster_ids

    @cluster_ids.setter
    def cluster_ids(self, cluster_ids):
        """Sets the cluster_ids of this User.


        :param cluster_ids: The cluster_ids of this User.  # noqa: E501
        :type: list[str]
        """

        self._cluster_ids = cluster_ids

    @property
    def teams(self):
        """Gets the teams of this User.  # noqa: E501


        :return: The teams of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this User.


        :param teams: The teams of this User.  # noqa: E501
        :type: list[str]
        """

        self._teams = teams

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
