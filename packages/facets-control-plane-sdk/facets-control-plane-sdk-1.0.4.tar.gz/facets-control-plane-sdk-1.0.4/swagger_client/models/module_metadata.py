# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModuleMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'git_url': 'str',
        'git_ref': 'str',
        'auto_create': 'bool',
        'skip_output_write': 'bool',
        'feature_branch': 'bool'
    }

    attribute_map = {
        'git_url': 'gitUrl',
        'git_ref': 'gitRef',
        'auto_create': 'autoCreate',
        'skip_output_write': 'skipOutputWrite',
        'feature_branch': 'featureBranch'
    }

    def __init__(self, git_url=None, git_ref=None, auto_create=None, skip_output_write=None, feature_branch=None):  # noqa: E501
        """ModuleMetadata - a model defined in Swagger"""  # noqa: E501
        self._git_url = None
        self._git_ref = None
        self._auto_create = None
        self._skip_output_write = None
        self._feature_branch = None
        self.discriminator = None
        if git_url is not None:
            self.git_url = git_url
        if git_ref is not None:
            self.git_ref = git_ref
        if auto_create is not None:
            self.auto_create = auto_create
        if skip_output_write is not None:
            self.skip_output_write = skip_output_write
        if feature_branch is not None:
            self.feature_branch = feature_branch

    @property
    def git_url(self):
        """Gets the git_url of this ModuleMetadata.  # noqa: E501


        :return: The git_url of this ModuleMetadata.  # noqa: E501
        :rtype: str
        """
        return self._git_url

    @git_url.setter
    def git_url(self, git_url):
        """Sets the git_url of this ModuleMetadata.


        :param git_url: The git_url of this ModuleMetadata.  # noqa: E501
        :type: str
        """

        self._git_url = git_url

    @property
    def git_ref(self):
        """Gets the git_ref of this ModuleMetadata.  # noqa: E501


        :return: The git_ref of this ModuleMetadata.  # noqa: E501
        :rtype: str
        """
        return self._git_ref

    @git_ref.setter
    def git_ref(self, git_ref):
        """Sets the git_ref of this ModuleMetadata.


        :param git_ref: The git_ref of this ModuleMetadata.  # noqa: E501
        :type: str
        """

        self._git_ref = git_ref

    @property
    def auto_create(self):
        """Gets the auto_create of this ModuleMetadata.  # noqa: E501


        :return: The auto_create of this ModuleMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._auto_create

    @auto_create.setter
    def auto_create(self, auto_create):
        """Sets the auto_create of this ModuleMetadata.


        :param auto_create: The auto_create of this ModuleMetadata.  # noqa: E501
        :type: bool
        """

        self._auto_create = auto_create

    @property
    def skip_output_write(self):
        """Gets the skip_output_write of this ModuleMetadata.  # noqa: E501


        :return: The skip_output_write of this ModuleMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._skip_output_write

    @skip_output_write.setter
    def skip_output_write(self, skip_output_write):
        """Sets the skip_output_write of this ModuleMetadata.


        :param skip_output_write: The skip_output_write of this ModuleMetadata.  # noqa: E501
        :type: bool
        """

        self._skip_output_write = skip_output_write

    @property
    def feature_branch(self):
        """Gets the feature_branch of this ModuleMetadata.  # noqa: E501


        :return: The feature_branch of this ModuleMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._feature_branch

    @feature_branch.setter
    def feature_branch(self, feature_branch):
        """Sets the feature_branch of this ModuleMetadata.


        :param feature_branch: The feature_branch of this ModuleMetadata.  # noqa: E501
        :type: bool
        """

        self._feature_branch = feature_branch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModuleMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModuleMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
