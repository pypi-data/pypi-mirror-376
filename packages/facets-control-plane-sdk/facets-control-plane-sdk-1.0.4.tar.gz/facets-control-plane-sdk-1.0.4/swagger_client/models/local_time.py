# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LocalTime(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hour': 'int',
        'minute': 'int',
        'second': 'int',
        'nano': 'int'
    }

    attribute_map = {
        'hour': 'hour',
        'minute': 'minute',
        'second': 'second',
        'nano': 'nano'
    }

    def __init__(self, hour=None, minute=None, second=None, nano=None):  # noqa: E501
        """LocalTime - a model defined in Swagger"""  # noqa: E501
        self._hour = None
        self._minute = None
        self._second = None
        self._nano = None
        self.discriminator = None
        if hour is not None:
            self.hour = hour
        if minute is not None:
            self.minute = minute
        if second is not None:
            self.second = second
        if nano is not None:
            self.nano = nano

    @property
    def hour(self):
        """Gets the hour of this LocalTime.  # noqa: E501


        :return: The hour of this LocalTime.  # noqa: E501
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this LocalTime.


        :param hour: The hour of this LocalTime.  # noqa: E501
        :type: int
        """

        self._hour = hour

    @property
    def minute(self):
        """Gets the minute of this LocalTime.  # noqa: E501


        :return: The minute of this LocalTime.  # noqa: E501
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this LocalTime.


        :param minute: The minute of this LocalTime.  # noqa: E501
        :type: int
        """

        self._minute = minute

    @property
    def second(self):
        """Gets the second of this LocalTime.  # noqa: E501


        :return: The second of this LocalTime.  # noqa: E501
        :rtype: int
        """
        return self._second

    @second.setter
    def second(self, second):
        """Sets the second of this LocalTime.


        :param second: The second of this LocalTime.  # noqa: E501
        :type: int
        """

        self._second = second

    @property
    def nano(self):
        """Gets the nano of this LocalTime.  # noqa: E501


        :return: The nano of this LocalTime.  # noqa: E501
        :rtype: int
        """
        return self._nano

    @nano.setter
    def nano(self, nano):
        """Sets the nano of this LocalTime.


        :param nano: The nano of this LocalTime.  # noqa: E501
        :type: int
        """

        self._nano = nano

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocalTime, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocalTime):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
