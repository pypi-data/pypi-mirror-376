# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectTypeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'allowed_clouds': 'list[str]',
        'description': 'str',
        'created_by': 'str',
        'creation_date': 'datetime',
        'last_modified_date': 'datetime',
        'last_modified_by': 'str',
        'template_git_details': 'TemplateGitDetails',
        'mapped_resources': 'list[ProjectTypeMappedResource]',
        'associated_blueprints': 'list[str]',
        'iac_tool': 'str',
        'iac_tool_version': 'str',
        'dynamic_launch': 'bool',
        'enable_no_cloud_environment': 'bool',
        'base_project_name': 'str',
        'legacy': 'bool',
        'include_tooling_provider': 'bool',
        'include_cp_k8s_provider': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'allowed_clouds': 'allowedClouds',
        'description': 'description',
        'created_by': 'createdBy',
        'creation_date': 'creationDate',
        'last_modified_date': 'lastModifiedDate',
        'last_modified_by': 'lastModifiedBy',
        'template_git_details': 'templateGitDetails',
        'mapped_resources': 'mappedResources',
        'associated_blueprints': 'associatedBlueprints',
        'iac_tool': 'iacTool',
        'iac_tool_version': 'iacToolVersion',
        'dynamic_launch': 'dynamicLaunch',
        'enable_no_cloud_environment': 'enableNoCloudEnvironment',
        'base_project_name': 'baseProjectName',
        'legacy': 'legacy',
        'include_tooling_provider': 'includeToolingProvider',
        'include_cp_k8s_provider': 'includeCpK8sProvider'
    }

    def __init__(self, id=None, name=None, allowed_clouds=None, description=None, created_by=None, creation_date=None, last_modified_date=None, last_modified_by=None, template_git_details=None, mapped_resources=None, associated_blueprints=None, iac_tool=None, iac_tool_version=None, dynamic_launch=None, enable_no_cloud_environment=None, base_project_name=None, legacy=None, include_tooling_provider=None, include_cp_k8s_provider=None):  # noqa: E501
        """ProjectTypeResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._allowed_clouds = None
        self._description = None
        self._created_by = None
        self._creation_date = None
        self._last_modified_date = None
        self._last_modified_by = None
        self._template_git_details = None
        self._mapped_resources = None
        self._associated_blueprints = None
        self._iac_tool = None
        self._iac_tool_version = None
        self._dynamic_launch = None
        self._enable_no_cloud_environment = None
        self._base_project_name = None
        self._legacy = None
        self._include_tooling_provider = None
        self._include_cp_k8s_provider = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if allowed_clouds is not None:
            self.allowed_clouds = allowed_clouds
        if description is not None:
            self.description = description
        if created_by is not None:
            self.created_by = created_by
        if creation_date is not None:
            self.creation_date = creation_date
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if template_git_details is not None:
            self.template_git_details = template_git_details
        if mapped_resources is not None:
            self.mapped_resources = mapped_resources
        if associated_blueprints is not None:
            self.associated_blueprints = associated_blueprints
        if iac_tool is not None:
            self.iac_tool = iac_tool
        if iac_tool_version is not None:
            self.iac_tool_version = iac_tool_version
        if dynamic_launch is not None:
            self.dynamic_launch = dynamic_launch
        if enable_no_cloud_environment is not None:
            self.enable_no_cloud_environment = enable_no_cloud_environment
        if base_project_name is not None:
            self.base_project_name = base_project_name
        if legacy is not None:
            self.legacy = legacy
        if include_tooling_provider is not None:
            self.include_tooling_provider = include_tooling_provider
        if include_cp_k8s_provider is not None:
            self.include_cp_k8s_provider = include_cp_k8s_provider

    @property
    def id(self):
        """Gets the id of this ProjectTypeResponse.  # noqa: E501


        :return: The id of this ProjectTypeResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectTypeResponse.


        :param id: The id of this ProjectTypeResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProjectTypeResponse.  # noqa: E501


        :return: The name of this ProjectTypeResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectTypeResponse.


        :param name: The name of this ProjectTypeResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def allowed_clouds(self):
        """Gets the allowed_clouds of this ProjectTypeResponse.  # noqa: E501


        :return: The allowed_clouds of this ProjectTypeResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_clouds

    @allowed_clouds.setter
    def allowed_clouds(self, allowed_clouds):
        """Sets the allowed_clouds of this ProjectTypeResponse.


        :param allowed_clouds: The allowed_clouds of this ProjectTypeResponse.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["AWS", "AZURE", "LOCAL", "GCP", "KUBERNETES", "NO_CLOUD"]  # noqa: E501
        if not set(allowed_clouds).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `allowed_clouds` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(allowed_clouds) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._allowed_clouds = allowed_clouds

    @property
    def description(self):
        """Gets the description of this ProjectTypeResponse.  # noqa: E501


        :return: The description of this ProjectTypeResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectTypeResponse.


        :param description: The description of this ProjectTypeResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_by(self):
        """Gets the created_by of this ProjectTypeResponse.  # noqa: E501


        :return: The created_by of this ProjectTypeResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ProjectTypeResponse.


        :param created_by: The created_by of this ProjectTypeResponse.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def creation_date(self):
        """Gets the creation_date of this ProjectTypeResponse.  # noqa: E501


        :return: The creation_date of this ProjectTypeResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ProjectTypeResponse.


        :param creation_date: The creation_date of this ProjectTypeResponse.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this ProjectTypeResponse.  # noqa: E501


        :return: The last_modified_date of this ProjectTypeResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this ProjectTypeResponse.


        :param last_modified_date: The last_modified_date of this ProjectTypeResponse.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this ProjectTypeResponse.  # noqa: E501


        :return: The last_modified_by of this ProjectTypeResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this ProjectTypeResponse.


        :param last_modified_by: The last_modified_by of this ProjectTypeResponse.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def template_git_details(self):
        """Gets the template_git_details of this ProjectTypeResponse.  # noqa: E501


        :return: The template_git_details of this ProjectTypeResponse.  # noqa: E501
        :rtype: TemplateGitDetails
        """
        return self._template_git_details

    @template_git_details.setter
    def template_git_details(self, template_git_details):
        """Sets the template_git_details of this ProjectTypeResponse.


        :param template_git_details: The template_git_details of this ProjectTypeResponse.  # noqa: E501
        :type: TemplateGitDetails
        """

        self._template_git_details = template_git_details

    @property
    def mapped_resources(self):
        """Gets the mapped_resources of this ProjectTypeResponse.  # noqa: E501


        :return: The mapped_resources of this ProjectTypeResponse.  # noqa: E501
        :rtype: list[ProjectTypeMappedResource]
        """
        return self._mapped_resources

    @mapped_resources.setter
    def mapped_resources(self, mapped_resources):
        """Sets the mapped_resources of this ProjectTypeResponse.


        :param mapped_resources: The mapped_resources of this ProjectTypeResponse.  # noqa: E501
        :type: list[ProjectTypeMappedResource]
        """

        self._mapped_resources = mapped_resources

    @property
    def associated_blueprints(self):
        """Gets the associated_blueprints of this ProjectTypeResponse.  # noqa: E501


        :return: The associated_blueprints of this ProjectTypeResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._associated_blueprints

    @associated_blueprints.setter
    def associated_blueprints(self, associated_blueprints):
        """Sets the associated_blueprints of this ProjectTypeResponse.


        :param associated_blueprints: The associated_blueprints of this ProjectTypeResponse.  # noqa: E501
        :type: list[str]
        """

        self._associated_blueprints = associated_blueprints

    @property
    def iac_tool(self):
        """Gets the iac_tool of this ProjectTypeResponse.  # noqa: E501


        :return: The iac_tool of this ProjectTypeResponse.  # noqa: E501
        :rtype: str
        """
        return self._iac_tool

    @iac_tool.setter
    def iac_tool(self, iac_tool):
        """Sets the iac_tool of this ProjectTypeResponse.


        :param iac_tool: The iac_tool of this ProjectTypeResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["TERRAFORM", "OPENTOFU"]  # noqa: E501
        if iac_tool not in allowed_values:
            raise ValueError(
                "Invalid value for `iac_tool` ({0}), must be one of {1}"  # noqa: E501
                .format(iac_tool, allowed_values)
            )

        self._iac_tool = iac_tool

    @property
    def iac_tool_version(self):
        """Gets the iac_tool_version of this ProjectTypeResponse.  # noqa: E501


        :return: The iac_tool_version of this ProjectTypeResponse.  # noqa: E501
        :rtype: str
        """
        return self._iac_tool_version

    @iac_tool_version.setter
    def iac_tool_version(self, iac_tool_version):
        """Sets the iac_tool_version of this ProjectTypeResponse.


        :param iac_tool_version: The iac_tool_version of this ProjectTypeResponse.  # noqa: E501
        :type: str
        """

        self._iac_tool_version = iac_tool_version

    @property
    def dynamic_launch(self):
        """Gets the dynamic_launch of this ProjectTypeResponse.  # noqa: E501


        :return: The dynamic_launch of this ProjectTypeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._dynamic_launch

    @dynamic_launch.setter
    def dynamic_launch(self, dynamic_launch):
        """Sets the dynamic_launch of this ProjectTypeResponse.


        :param dynamic_launch: The dynamic_launch of this ProjectTypeResponse.  # noqa: E501
        :type: bool
        """

        self._dynamic_launch = dynamic_launch

    @property
    def enable_no_cloud_environment(self):
        """Gets the enable_no_cloud_environment of this ProjectTypeResponse.  # noqa: E501


        :return: The enable_no_cloud_environment of this ProjectTypeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._enable_no_cloud_environment

    @enable_no_cloud_environment.setter
    def enable_no_cloud_environment(self, enable_no_cloud_environment):
        """Sets the enable_no_cloud_environment of this ProjectTypeResponse.


        :param enable_no_cloud_environment: The enable_no_cloud_environment of this ProjectTypeResponse.  # noqa: E501
        :type: bool
        """

        self._enable_no_cloud_environment = enable_no_cloud_environment

    @property
    def base_project_name(self):
        """Gets the base_project_name of this ProjectTypeResponse.  # noqa: E501


        :return: The base_project_name of this ProjectTypeResponse.  # noqa: E501
        :rtype: str
        """
        return self._base_project_name

    @base_project_name.setter
    def base_project_name(self, base_project_name):
        """Sets the base_project_name of this ProjectTypeResponse.


        :param base_project_name: The base_project_name of this ProjectTypeResponse.  # noqa: E501
        :type: str
        """

        self._base_project_name = base_project_name

    @property
    def legacy(self):
        """Gets the legacy of this ProjectTypeResponse.  # noqa: E501


        :return: The legacy of this ProjectTypeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._legacy

    @legacy.setter
    def legacy(self, legacy):
        """Sets the legacy of this ProjectTypeResponse.


        :param legacy: The legacy of this ProjectTypeResponse.  # noqa: E501
        :type: bool
        """

        self._legacy = legacy

    @property
    def include_tooling_provider(self):
        """Gets the include_tooling_provider of this ProjectTypeResponse.  # noqa: E501


        :return: The include_tooling_provider of this ProjectTypeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._include_tooling_provider

    @include_tooling_provider.setter
    def include_tooling_provider(self, include_tooling_provider):
        """Sets the include_tooling_provider of this ProjectTypeResponse.


        :param include_tooling_provider: The include_tooling_provider of this ProjectTypeResponse.  # noqa: E501
        :type: bool
        """

        self._include_tooling_provider = include_tooling_provider

    @property
    def include_cp_k8s_provider(self):
        """Gets the include_cp_k8s_provider of this ProjectTypeResponse.  # noqa: E501


        :return: The include_cp_k8s_provider of this ProjectTypeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._include_cp_k8s_provider

    @include_cp_k8s_provider.setter
    def include_cp_k8s_provider(self, include_cp_k8s_provider):
        """Sets the include_cp_k8s_provider of this ProjectTypeResponse.


        :param include_cp_k8s_provider: The include_cp_k8s_provider of this ProjectTypeResponse.  # noqa: E501
        :type: bool
        """

        self._include_cp_k8s_provider = include_cp_k8s_provider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectTypeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectTypeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
