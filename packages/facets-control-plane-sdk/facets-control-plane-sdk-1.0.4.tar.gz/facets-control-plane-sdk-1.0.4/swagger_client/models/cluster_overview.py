# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClusterOverview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster': 'AbstractCluster',
        'time_to_next_release': 'str',
        'cluster_state': 'str',
        'last_release': 'DeploymentLog',
        'id': 'str',
        'base_cluster': 'ClusterLite'
    }

    attribute_map = {
        'cluster': 'cluster',
        'time_to_next_release': 'timeToNextRelease',
        'cluster_state': 'clusterState',
        'last_release': 'lastRelease',
        'id': 'id',
        'base_cluster': 'baseCluster'
    }

    def __init__(self, cluster=None, time_to_next_release=None, cluster_state=None, last_release=None, id=None, base_cluster=None):  # noqa: E501
        """ClusterOverview - a model defined in Swagger"""  # noqa: E501
        self._cluster = None
        self._time_to_next_release = None
        self._cluster_state = None
        self._last_release = None
        self._id = None
        self._base_cluster = None
        self.discriminator = None
        if cluster is not None:
            self.cluster = cluster
        if time_to_next_release is not None:
            self.time_to_next_release = time_to_next_release
        if cluster_state is not None:
            self.cluster_state = cluster_state
        if last_release is not None:
            self.last_release = last_release
        if id is not None:
            self.id = id
        if base_cluster is not None:
            self.base_cluster = base_cluster

    @property
    def cluster(self):
        """Gets the cluster of this ClusterOverview.  # noqa: E501


        :return: The cluster of this ClusterOverview.  # noqa: E501
        :rtype: AbstractCluster
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this ClusterOverview.


        :param cluster: The cluster of this ClusterOverview.  # noqa: E501
        :type: AbstractCluster
        """

        self._cluster = cluster

    @property
    def time_to_next_release(self):
        """Gets the time_to_next_release of this ClusterOverview.  # noqa: E501


        :return: The time_to_next_release of this ClusterOverview.  # noqa: E501
        :rtype: str
        """
        return self._time_to_next_release

    @time_to_next_release.setter
    def time_to_next_release(self, time_to_next_release):
        """Sets the time_to_next_release of this ClusterOverview.


        :param time_to_next_release: The time_to_next_release of this ClusterOverview.  # noqa: E501
        :type: str
        """

        self._time_to_next_release = time_to_next_release

    @property
    def cluster_state(self):
        """Gets the cluster_state of this ClusterOverview.  # noqa: E501


        :return: The cluster_state of this ClusterOverview.  # noqa: E501
        :rtype: str
        """
        return self._cluster_state

    @cluster_state.setter
    def cluster_state(self, cluster_state):
        """Sets the cluster_state of this ClusterOverview.


        :param cluster_state: The cluster_state of this ClusterOverview.  # noqa: E501
        :type: str
        """
        allowed_values = ["STOPPED", "RUNNING", "LAUNCHING", "DESTROYING", "LAUNCH_FAILED", "DESTROY_FAILED", "UNKNOWN", "SCALE_DOWN", "SCALING_DOWN", "SCALE_DOWN_FAILED", "SCALING_UP", "SCALE_UP_FAILED"]  # noqa: E501
        if cluster_state not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_state` ({0}), must be one of {1}"  # noqa: E501
                .format(cluster_state, allowed_values)
            )

        self._cluster_state = cluster_state

    @property
    def last_release(self):
        """Gets the last_release of this ClusterOverview.  # noqa: E501


        :return: The last_release of this ClusterOverview.  # noqa: E501
        :rtype: DeploymentLog
        """
        return self._last_release

    @last_release.setter
    def last_release(self, last_release):
        """Sets the last_release of this ClusterOverview.


        :param last_release: The last_release of this ClusterOverview.  # noqa: E501
        :type: DeploymentLog
        """

        self._last_release = last_release

    @property
    def id(self):
        """Gets the id of this ClusterOverview.  # noqa: E501


        :return: The id of this ClusterOverview.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClusterOverview.


        :param id: The id of this ClusterOverview.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def base_cluster(self):
        """Gets the base_cluster of this ClusterOverview.  # noqa: E501


        :return: The base_cluster of this ClusterOverview.  # noqa: E501
        :rtype: ClusterLite
        """
        return self._base_cluster

    @base_cluster.setter
    def base_cluster(self, base_cluster):
        """Sets the base_cluster of this ClusterOverview.


        :param base_cluster: The base_cluster of this ClusterOverview.  # noqa: E501
        :type: ClusterLite
        """

        self._base_cluster = base_cluster

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterOverview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
