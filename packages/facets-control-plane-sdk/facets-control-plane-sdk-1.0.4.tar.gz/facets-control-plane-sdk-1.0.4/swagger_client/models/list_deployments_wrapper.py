# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ListDeploymentsWrapper(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'deployments': 'list[DeploymentLog]',
        'deployments_full': 'list[DeploymentLog]',
        'down_stream_cluster_names': 'list[str]',
        'current_signed_off_deployment': 'DeploymentLog',
        'stack': 'Stack',
        'deployments_stats': 'DeploymentsStats',
        'next_execution_time': 'str',
        'time_to_next_execution': 'str'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'deployments': 'deployments',
        'deployments_full': 'deploymentsFull',
        'down_stream_cluster_names': 'downStreamClusterNames',
        'current_signed_off_deployment': 'currentSignedOffDeployment',
        'stack': 'stack',
        'deployments_stats': 'deploymentsStats',
        'next_execution_time': 'nextExecutionTime',
        'time_to_next_execution': 'timeToNextExecution'
    }

    def __init__(self, cluster_id=None, deployments=None, deployments_full=None, down_stream_cluster_names=None, current_signed_off_deployment=None, stack=None, deployments_stats=None, next_execution_time=None, time_to_next_execution=None):  # noqa: E501
        """ListDeploymentsWrapper - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._deployments = None
        self._deployments_full = None
        self._down_stream_cluster_names = None
        self._current_signed_off_deployment = None
        self._stack = None
        self._deployments_stats = None
        self._next_execution_time = None
        self._time_to_next_execution = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if deployments is not None:
            self.deployments = deployments
        if deployments_full is not None:
            self.deployments_full = deployments_full
        if down_stream_cluster_names is not None:
            self.down_stream_cluster_names = down_stream_cluster_names
        if current_signed_off_deployment is not None:
            self.current_signed_off_deployment = current_signed_off_deployment
        if stack is not None:
            self.stack = stack
        if deployments_stats is not None:
            self.deployments_stats = deployments_stats
        if next_execution_time is not None:
            self.next_execution_time = next_execution_time
        if time_to_next_execution is not None:
            self.time_to_next_execution = time_to_next_execution

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ListDeploymentsWrapper.  # noqa: E501


        :return: The cluster_id of this ListDeploymentsWrapper.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ListDeploymentsWrapper.


        :param cluster_id: The cluster_id of this ListDeploymentsWrapper.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def deployments(self):
        """Gets the deployments of this ListDeploymentsWrapper.  # noqa: E501


        :return: The deployments of this ListDeploymentsWrapper.  # noqa: E501
        :rtype: list[DeploymentLog]
        """
        return self._deployments

    @deployments.setter
    def deployments(self, deployments):
        """Sets the deployments of this ListDeploymentsWrapper.


        :param deployments: The deployments of this ListDeploymentsWrapper.  # noqa: E501
        :type: list[DeploymentLog]
        """

        self._deployments = deployments

    @property
    def deployments_full(self):
        """Gets the deployments_full of this ListDeploymentsWrapper.  # noqa: E501


        :return: The deployments_full of this ListDeploymentsWrapper.  # noqa: E501
        :rtype: list[DeploymentLog]
        """
        return self._deployments_full

    @deployments_full.setter
    def deployments_full(self, deployments_full):
        """Sets the deployments_full of this ListDeploymentsWrapper.


        :param deployments_full: The deployments_full of this ListDeploymentsWrapper.  # noqa: E501
        :type: list[DeploymentLog]
        """

        self._deployments_full = deployments_full

    @property
    def down_stream_cluster_names(self):
        """Gets the down_stream_cluster_names of this ListDeploymentsWrapper.  # noqa: E501


        :return: The down_stream_cluster_names of this ListDeploymentsWrapper.  # noqa: E501
        :rtype: list[str]
        """
        return self._down_stream_cluster_names

    @down_stream_cluster_names.setter
    def down_stream_cluster_names(self, down_stream_cluster_names):
        """Sets the down_stream_cluster_names of this ListDeploymentsWrapper.


        :param down_stream_cluster_names: The down_stream_cluster_names of this ListDeploymentsWrapper.  # noqa: E501
        :type: list[str]
        """

        self._down_stream_cluster_names = down_stream_cluster_names

    @property
    def current_signed_off_deployment(self):
        """Gets the current_signed_off_deployment of this ListDeploymentsWrapper.  # noqa: E501


        :return: The current_signed_off_deployment of this ListDeploymentsWrapper.  # noqa: E501
        :rtype: DeploymentLog
        """
        return self._current_signed_off_deployment

    @current_signed_off_deployment.setter
    def current_signed_off_deployment(self, current_signed_off_deployment):
        """Sets the current_signed_off_deployment of this ListDeploymentsWrapper.


        :param current_signed_off_deployment: The current_signed_off_deployment of this ListDeploymentsWrapper.  # noqa: E501
        :type: DeploymentLog
        """

        self._current_signed_off_deployment = current_signed_off_deployment

    @property
    def stack(self):
        """Gets the stack of this ListDeploymentsWrapper.  # noqa: E501


        :return: The stack of this ListDeploymentsWrapper.  # noqa: E501
        :rtype: Stack
        """
        return self._stack

    @stack.setter
    def stack(self, stack):
        """Sets the stack of this ListDeploymentsWrapper.


        :param stack: The stack of this ListDeploymentsWrapper.  # noqa: E501
        :type: Stack
        """

        self._stack = stack

    @property
    def deployments_stats(self):
        """Gets the deployments_stats of this ListDeploymentsWrapper.  # noqa: E501


        :return: The deployments_stats of this ListDeploymentsWrapper.  # noqa: E501
        :rtype: DeploymentsStats
        """
        return self._deployments_stats

    @deployments_stats.setter
    def deployments_stats(self, deployments_stats):
        """Sets the deployments_stats of this ListDeploymentsWrapper.


        :param deployments_stats: The deployments_stats of this ListDeploymentsWrapper.  # noqa: E501
        :type: DeploymentsStats
        """

        self._deployments_stats = deployments_stats

    @property
    def next_execution_time(self):
        """Gets the next_execution_time of this ListDeploymentsWrapper.  # noqa: E501


        :return: The next_execution_time of this ListDeploymentsWrapper.  # noqa: E501
        :rtype: str
        """
        return self._next_execution_time

    @next_execution_time.setter
    def next_execution_time(self, next_execution_time):
        """Sets the next_execution_time of this ListDeploymentsWrapper.


        :param next_execution_time: The next_execution_time of this ListDeploymentsWrapper.  # noqa: E501
        :type: str
        """

        self._next_execution_time = next_execution_time

    @property
    def time_to_next_execution(self):
        """Gets the time_to_next_execution of this ListDeploymentsWrapper.  # noqa: E501


        :return: The time_to_next_execution of this ListDeploymentsWrapper.  # noqa: E501
        :rtype: str
        """
        return self._time_to_next_execution

    @time_to_next_execution.setter
    def time_to_next_execution(self, time_to_next_execution):
        """Sets the time_to_next_execution of this ListDeploymentsWrapper.


        :param time_to_next_execution: The time_to_next_execution of this ListDeploymentsWrapper.  # noqa: E501
        :type: str
        """

        self._time_to_next_execution = time_to_next_execution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListDeploymentsWrapper, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListDeploymentsWrapper):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
