# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OverrideRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'resource_name': 'str',
        'overrides': 'dict(str, object)',
        'change_log': 'str',
        'affected_resources': 'list[ResourceEnableDisableRequest]'
    }

    attribute_map = {
        'resource_type': 'resourceType',
        'resource_name': 'resourceName',
        'overrides': 'overrides',
        'change_log': 'changeLog',
        'affected_resources': 'affectedResources'
    }

    def __init__(self, resource_type=None, resource_name=None, overrides=None, change_log=None, affected_resources=None):  # noqa: E501
        """OverrideRequest - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._resource_name = None
        self._overrides = None
        self._change_log = None
        self._affected_resources = None
        self.discriminator = None
        self.resource_type = resource_type
        self.resource_name = resource_name
        if overrides is not None:
            self.overrides = overrides
        if change_log is not None:
            self.change_log = change_log
        if affected_resources is not None:
            self.affected_resources = affected_resources

    @property
    def resource_type(self):
        """Gets the resource_type of this OverrideRequest.  # noqa: E501


        :return: The resource_type of this OverrideRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this OverrideRequest.


        :param resource_type: The resource_type of this OverrideRequest.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def resource_name(self):
        """Gets the resource_name of this OverrideRequest.  # noqa: E501


        :return: The resource_name of this OverrideRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this OverrideRequest.


        :param resource_name: The resource_name of this OverrideRequest.  # noqa: E501
        :type: str
        """
        if resource_name is None:
            raise ValueError("Invalid value for `resource_name`, must not be `None`")  # noqa: E501

        self._resource_name = resource_name

    @property
    def overrides(self):
        """Gets the overrides of this OverrideRequest.  # noqa: E501


        :return: The overrides of this OverrideRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this OverrideRequest.


        :param overrides: The overrides of this OverrideRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._overrides = overrides

    @property
    def change_log(self):
        """Gets the change_log of this OverrideRequest.  # noqa: E501


        :return: The change_log of this OverrideRequest.  # noqa: E501
        :rtype: str
        """
        return self._change_log

    @change_log.setter
    def change_log(self, change_log):
        """Sets the change_log of this OverrideRequest.


        :param change_log: The change_log of this OverrideRequest.  # noqa: E501
        :type: str
        """

        self._change_log = change_log

    @property
    def affected_resources(self):
        """Gets the affected_resources of this OverrideRequest.  # noqa: E501


        :return: The affected_resources of this OverrideRequest.  # noqa: E501
        :rtype: list[ResourceEnableDisableRequest]
        """
        return self._affected_resources

    @affected_resources.setter
    def affected_resources(self, affected_resources):
        """Sets the affected_resources of this OverrideRequest.


        :param affected_resources: The affected_resources of this OverrideRequest.  # noqa: E501
        :type: list[ResourceEnableDisableRequest]
        """

        self._affected_resources = affected_resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OverrideRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OverrideRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
