# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProvidedResources(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'cluster_id': 'str',
        'provided_unauthenticated_resources': 'list[ProvidedUnauthenticatedResource]',
        'provided_authenticated_resources': 'list[ProvidedAuthenticatedResource]',
        'provided_sharded_resources': 'list[ProvidedShardedService]',
        'provided_cloud_resources': 'list[ProvidedCloudResource]'
    }

    attribute_map = {
        'id': 'id',
        'cluster_id': 'clusterId',
        'provided_unauthenticated_resources': 'providedUnauthenticatedResources',
        'provided_authenticated_resources': 'providedAuthenticatedResources',
        'provided_sharded_resources': 'providedShardedResources',
        'provided_cloud_resources': 'providedCloudResources'
    }

    def __init__(self, id=None, cluster_id=None, provided_unauthenticated_resources=None, provided_authenticated_resources=None, provided_sharded_resources=None, provided_cloud_resources=None):  # noqa: E501
        """ProvidedResources - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._cluster_id = None
        self._provided_unauthenticated_resources = None
        self._provided_authenticated_resources = None
        self._provided_sharded_resources = None
        self._provided_cloud_resources = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if provided_unauthenticated_resources is not None:
            self.provided_unauthenticated_resources = provided_unauthenticated_resources
        if provided_authenticated_resources is not None:
            self.provided_authenticated_resources = provided_authenticated_resources
        if provided_sharded_resources is not None:
            self.provided_sharded_resources = provided_sharded_resources
        if provided_cloud_resources is not None:
            self.provided_cloud_resources = provided_cloud_resources

    @property
    def id(self):
        """Gets the id of this ProvidedResources.  # noqa: E501


        :return: The id of this ProvidedResources.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProvidedResources.


        :param id: The id of this ProvidedResources.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ProvidedResources.  # noqa: E501


        :return: The cluster_id of this ProvidedResources.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ProvidedResources.


        :param cluster_id: The cluster_id of this ProvidedResources.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def provided_unauthenticated_resources(self):
        """Gets the provided_unauthenticated_resources of this ProvidedResources.  # noqa: E501


        :return: The provided_unauthenticated_resources of this ProvidedResources.  # noqa: E501
        :rtype: list[ProvidedUnauthenticatedResource]
        """
        return self._provided_unauthenticated_resources

    @provided_unauthenticated_resources.setter
    def provided_unauthenticated_resources(self, provided_unauthenticated_resources):
        """Sets the provided_unauthenticated_resources of this ProvidedResources.


        :param provided_unauthenticated_resources: The provided_unauthenticated_resources of this ProvidedResources.  # noqa: E501
        :type: list[ProvidedUnauthenticatedResource]
        """

        self._provided_unauthenticated_resources = provided_unauthenticated_resources

    @property
    def provided_authenticated_resources(self):
        """Gets the provided_authenticated_resources of this ProvidedResources.  # noqa: E501


        :return: The provided_authenticated_resources of this ProvidedResources.  # noqa: E501
        :rtype: list[ProvidedAuthenticatedResource]
        """
        return self._provided_authenticated_resources

    @provided_authenticated_resources.setter
    def provided_authenticated_resources(self, provided_authenticated_resources):
        """Sets the provided_authenticated_resources of this ProvidedResources.


        :param provided_authenticated_resources: The provided_authenticated_resources of this ProvidedResources.  # noqa: E501
        :type: list[ProvidedAuthenticatedResource]
        """

        self._provided_authenticated_resources = provided_authenticated_resources

    @property
    def provided_sharded_resources(self):
        """Gets the provided_sharded_resources of this ProvidedResources.  # noqa: E501


        :return: The provided_sharded_resources of this ProvidedResources.  # noqa: E501
        :rtype: list[ProvidedShardedService]
        """
        return self._provided_sharded_resources

    @provided_sharded_resources.setter
    def provided_sharded_resources(self, provided_sharded_resources):
        """Sets the provided_sharded_resources of this ProvidedResources.


        :param provided_sharded_resources: The provided_sharded_resources of this ProvidedResources.  # noqa: E501
        :type: list[ProvidedShardedService]
        """

        self._provided_sharded_resources = provided_sharded_resources

    @property
    def provided_cloud_resources(self):
        """Gets the provided_cloud_resources of this ProvidedResources.  # noqa: E501


        :return: The provided_cloud_resources of this ProvidedResources.  # noqa: E501
        :rtype: list[ProvidedCloudResource]
        """
        return self._provided_cloud_resources

    @provided_cloud_resources.setter
    def provided_cloud_resources(self, provided_cloud_resources):
        """Sets the provided_cloud_resources of this ProvidedResources.


        :param provided_cloud_resources: The provided_cloud_resources of this ProvidedResources.  # noqa: E501
        :type: list[ProvidedCloudResource]
        """

        self._provided_cloud_resources = provided_cloud_resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProvidedResources, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvidedResources):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
