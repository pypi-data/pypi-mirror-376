# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TFModuleLiteDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'intent': 'str',
        'intent_type': 'str',
        'flavor': 'str',
        'version': 'str',
        'clouds': 'list[str]',
        'inputs': 'dict(str, Input)',
        'source': 'str',
        'tags': 'list[str]',
        'allowed_test_projects': 'list[str]',
        'id': 'str',
        'stage': 'str',
        'iac_tool': 'list[str]',
        'name_length_limit': 'int'
    }

    attribute_map = {
        'intent': 'intent',
        'intent_type': 'intentType',
        'flavor': 'flavor',
        'version': 'version',
        'clouds': 'clouds',
        'inputs': 'inputs',
        'source': 'source',
        'tags': 'tags',
        'allowed_test_projects': 'allowedTestProjects',
        'id': 'id',
        'stage': 'stage',
        'iac_tool': 'iacTool',
        'name_length_limit': 'nameLengthLimit'
    }

    def __init__(self, intent=None, intent_type=None, flavor=None, version=None, clouds=None, inputs=None, source=None, tags=None, allowed_test_projects=None, id=None, stage=None, iac_tool=None, name_length_limit=None):  # noqa: E501
        """TFModuleLiteDTO - a model defined in Swagger"""  # noqa: E501
        self._intent = None
        self._intent_type = None
        self._flavor = None
        self._version = None
        self._clouds = None
        self._inputs = None
        self._source = None
        self._tags = None
        self._allowed_test_projects = None
        self._id = None
        self._stage = None
        self._iac_tool = None
        self._name_length_limit = None
        self.discriminator = None
        if intent is not None:
            self.intent = intent
        if intent_type is not None:
            self.intent_type = intent_type
        if flavor is not None:
            self.flavor = flavor
        if version is not None:
            self.version = version
        if clouds is not None:
            self.clouds = clouds
        if inputs is not None:
            self.inputs = inputs
        if source is not None:
            self.source = source
        if tags is not None:
            self.tags = tags
        if allowed_test_projects is not None:
            self.allowed_test_projects = allowed_test_projects
        if id is not None:
            self.id = id
        if stage is not None:
            self.stage = stage
        if iac_tool is not None:
            self.iac_tool = iac_tool
        if name_length_limit is not None:
            self.name_length_limit = name_length_limit

    @property
    def intent(self):
        """Gets the intent of this TFModuleLiteDTO.  # noqa: E501

        Intent of the TF Module  # noqa: E501

        :return: The intent of this TFModuleLiteDTO.  # noqa: E501
        :rtype: str
        """
        return self._intent

    @intent.setter
    def intent(self, intent):
        """Sets the intent of this TFModuleLiteDTO.

        Intent of the TF Module  # noqa: E501

        :param intent: The intent of this TFModuleLiteDTO.  # noqa: E501
        :type: str
        """

        self._intent = intent

    @property
    def intent_type(self):
        """Gets the intent_type of this TFModuleLiteDTO.  # noqa: E501


        :return: The intent_type of this TFModuleLiteDTO.  # noqa: E501
        :rtype: str
        """
        return self._intent_type

    @intent_type.setter
    def intent_type(self, intent_type):
        """Sets the intent_type of this TFModuleLiteDTO.


        :param intent_type: The intent_type of this TFModuleLiteDTO.  # noqa: E501
        :type: str
        """

        self._intent_type = intent_type

    @property
    def flavor(self):
        """Gets the flavor of this TFModuleLiteDTO.  # noqa: E501

        Flavor of the TF Module  # noqa: E501

        :return: The flavor of this TFModuleLiteDTO.  # noqa: E501
        :rtype: str
        """
        return self._flavor

    @flavor.setter
    def flavor(self, flavor):
        """Sets the flavor of this TFModuleLiteDTO.

        Flavor of the TF Module  # noqa: E501

        :param flavor: The flavor of this TFModuleLiteDTO.  # noqa: E501
        :type: str
        """

        self._flavor = flavor

    @property
    def version(self):
        """Gets the version of this TFModuleLiteDTO.  # noqa: E501

        Version of the TF Module  # noqa: E501

        :return: The version of this TFModuleLiteDTO.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TFModuleLiteDTO.

        Version of the TF Module  # noqa: E501

        :param version: The version of this TFModuleLiteDTO.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def clouds(self):
        """Gets the clouds of this TFModuleLiteDTO.  # noqa: E501

        Supported cloud providers  # noqa: E501

        :return: The clouds of this TFModuleLiteDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._clouds

    @clouds.setter
    def clouds(self, clouds):
        """Sets the clouds of this TFModuleLiteDTO.

        Supported cloud providers  # noqa: E501

        :param clouds: The clouds of this TFModuleLiteDTO.  # noqa: E501
        :type: list[str]
        """

        self._clouds = clouds

    @property
    def inputs(self):
        """Gets the inputs of this TFModuleLiteDTO.  # noqa: E501

        Input parameters for the module  # noqa: E501

        :return: The inputs of this TFModuleLiteDTO.  # noqa: E501
        :rtype: dict(str, Input)
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this TFModuleLiteDTO.

        Input parameters for the module  # noqa: E501

        :param inputs: The inputs of this TFModuleLiteDTO.  # noqa: E501
        :type: dict(str, Input)
        """

        self._inputs = inputs

    @property
    def source(self):
        """Gets the source of this TFModuleLiteDTO.  # noqa: E501

        Source of the TF Module  # noqa: E501

        :return: The source of this TFModuleLiteDTO.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TFModuleLiteDTO.

        Source of the TF Module  # noqa: E501

        :param source: The source of this TFModuleLiteDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["BUILT_IN", "CUSTOM"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def tags(self):
        """Gets the tags of this TFModuleLiteDTO.  # noqa: E501

        Tags associated with the module  # noqa: E501

        :return: The tags of this TFModuleLiteDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TFModuleLiteDTO.

        Tags associated with the module  # noqa: E501

        :param tags: The tags of this TFModuleLiteDTO.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def allowed_test_projects(self):
        """Gets the allowed_test_projects of this TFModuleLiteDTO.  # noqa: E501

        List of test projects where this module will be available  # noqa: E501

        :return: The allowed_test_projects of this TFModuleLiteDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_test_projects

    @allowed_test_projects.setter
    def allowed_test_projects(self, allowed_test_projects):
        """Sets the allowed_test_projects of this TFModuleLiteDTO.

        List of test projects where this module will be available  # noqa: E501

        :param allowed_test_projects: The allowed_test_projects of this TFModuleLiteDTO.  # noqa: E501
        :type: list[str]
        """

        self._allowed_test_projects = allowed_test_projects

    @property
    def id(self):
        """Gets the id of this TFModuleLiteDTO.  # noqa: E501


        :return: The id of this TFModuleLiteDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TFModuleLiteDTO.


        :param id: The id of this TFModuleLiteDTO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def stage(self):
        """Gets the stage of this TFModuleLiteDTO.  # noqa: E501


        :return: The stage of this TFModuleLiteDTO.  # noqa: E501
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this TFModuleLiteDTO.


        :param stage: The stage of this TFModuleLiteDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["PREVIEW", "PUBLISHED"]  # noqa: E501
        if stage not in allowed_values:
            raise ValueError(
                "Invalid value for `stage` ({0}), must be one of {1}"  # noqa: E501
                .format(stage, allowed_values)
            )

        self._stage = stage

    @property
    def iac_tool(self):
        """Gets the iac_tool of this TFModuleLiteDTO.  # noqa: E501


        :return: The iac_tool of this TFModuleLiteDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._iac_tool

    @iac_tool.setter
    def iac_tool(self, iac_tool):
        """Sets the iac_tool of this TFModuleLiteDTO.


        :param iac_tool: The iac_tool of this TFModuleLiteDTO.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["TERRAFORM", "OPENTOFU"]  # noqa: E501
        if not set(iac_tool).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `iac_tool` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(iac_tool) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._iac_tool = iac_tool

    @property
    def name_length_limit(self):
        """Gets the name_length_limit of this TFModuleLiteDTO.  # noqa: E501

        Maximum allowed length for resource names using this module  # noqa: E501

        :return: The name_length_limit of this TFModuleLiteDTO.  # noqa: E501
        :rtype: int
        """
        return self._name_length_limit

    @name_length_limit.setter
    def name_length_limit(self, name_length_limit):
        """Sets the name_length_limit of this TFModuleLiteDTO.

        Maximum allowed length for resource names using this module  # noqa: E501

        :param name_length_limit: The name_length_limit of this TFModuleLiteDTO.  # noqa: E501
        :type: int
        """

        self._name_length_limit = name_length_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TFModuleLiteDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TFModuleLiteDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
