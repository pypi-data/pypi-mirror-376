# coding: utf-8

"""
    Control-plane

    API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationTypeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'supported_tags': 'list[str]',
        'key': 'str',
        'notification_name': 'str',
        'notification_type': 'str'
    }

    attribute_map = {
        'supported_tags': 'supportedTags',
        'key': 'key',
        'notification_name': 'notificationName',
        'notification_type': 'notificationType'
    }

    def __init__(self, supported_tags=None, key=None, notification_name=None, notification_type=None):  # noqa: E501
        """NotificationTypeResponse - a model defined in Swagger"""  # noqa: E501
        self._supported_tags = None
        self._key = None
        self._notification_name = None
        self._notification_type = None
        self.discriminator = None
        if supported_tags is not None:
            self.supported_tags = supported_tags
        if key is not None:
            self.key = key
        if notification_name is not None:
            self.notification_name = notification_name
        if notification_type is not None:
            self.notification_type = notification_type

    @property
    def supported_tags(self):
        """Gets the supported_tags of this NotificationTypeResponse.  # noqa: E501


        :return: The supported_tags of this NotificationTypeResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_tags

    @supported_tags.setter
    def supported_tags(self, supported_tags):
        """Sets the supported_tags of this NotificationTypeResponse.


        :param supported_tags: The supported_tags of this NotificationTypeResponse.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["CLUSTER_NAME", "CLUSTER_TYPE", "QASUITE_RESULT", "DR_ACTION", "DR_STATUS", "STACK_NAME", "SEVERITY", "ALERT_NAME", "DEPLOYMENT_STATUS", "APPLICATION_NAME", "SEND_RESOLVED", "RELEASE_TYPE"]  # noqa: E501
        if not set(supported_tags).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `supported_tags` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(supported_tags) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._supported_tags = supported_tags

    @property
    def key(self):
        """Gets the key of this NotificationTypeResponse.  # noqa: E501


        :return: The key of this NotificationTypeResponse.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this NotificationTypeResponse.


        :param key: The key of this NotificationTypeResponse.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def notification_name(self):
        """Gets the notification_name of this NotificationTypeResponse.  # noqa: E501


        :return: The notification_name of this NotificationTypeResponse.  # noqa: E501
        :rtype: str
        """
        return self._notification_name

    @notification_name.setter
    def notification_name(self, notification_name):
        """Sets the notification_name of this NotificationTypeResponse.


        :param notification_name: The notification_name of this NotificationTypeResponse.  # noqa: E501
        :type: str
        """

        self._notification_name = notification_name

    @property
    def notification_type(self):
        """Gets the notification_type of this NotificationTypeResponse.  # noqa: E501


        :return: The notification_type of this NotificationTypeResponse.  # noqa: E501
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this NotificationTypeResponse.


        :param notification_type: The notification_type of this NotificationTypeResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEPLOYMENT_STATUS_UPDATE", "APP_DEPLOYMENT", "QASUITE_SANITY", "DR_RESULT", "STACK_SIGNOFF", "ALERT", "TEST", "APPLICATION_DEPLOYMENT_COMPLETE", "ENVIRONMENT_CREATE", "ENVIRONMENT_DELETE", "ENVIRONMENT_LAUNCH", "ENVIRONMENT_DESTROY", "ENVIRONMENT_CONFIGURE"]  # noqa: E501
        if notification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_type` ({0}), must be one of {1}"  # noqa: E501
                .format(notification_type, allowed_values)
            )

        self._notification_type = notification_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationTypeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationTypeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
