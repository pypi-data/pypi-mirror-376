# This file is part of duplicity.
#
# Copyright 2022 Nils Tekampe
# Copyright 2022 Kenneth Loafman
# Copyright 2022 Aaron Whitehouse
# Copyright 2022 Edgar Soldin
#
# Duplicity is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# Duplicity is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with duplicity; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

workflow:
    rules:
        # don't trigger on tag push only
        - if: $CI_COMMIT_TAG
          when: never
        # merge requests trigger push as well so only run on push
        - if: $CI_PIPELINE_SOURCE == "push"
          when: always
        - when: never

variables:
    # Cache local items
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    # Set to non-interactive so no tzdata prompt
    DEBIAN_FRONTEND: "noninteractive"
    # Signal we are running on GitLab CI
    NON_NATIVE: "true"

default:
    interruptible: true

.test-template: &test-template
    stage: test
    rules:
        - if: $CI_COMMIT_MESSAGE =~ /\[skip[ _-]tests?\]/i || $SKIP_TESTS
          allow_failure: true
          when: manual
        - changes:
            - .gitlab-ci.yml
            - duplicity/**/*
            - pyproject.toml
            - requirements.dev
            - requirements.txt
            - setup.*
            - testing/**/*
          when: always
        - when: never
    before_script:
        # Set locale to prevent UTF-8 errors
        - export LANG=C.UTF-8
        - export LC_ALL=C.UTF-8
        - apt-get update
        - apt-get install -y build-essential git intltool lftp librsync-dev
                             libffi-dev libssl-dev openssl par2 rclone rdiff
                             tzdata
        - python3 -m pip install -r requirements.txt
        - python3 -m pip install -r requirements.dev
        - python3 ./setup.py build_ext
code:
    <<: *test-template
    image: python:3.12
    script:
        - pytest testing/test_code.py
    allow_failure: true

py39:
    <<: *test-template
    image: python:3.9
    script:
        - pytest testing/unit testing/functional

py310:
    <<: *test-template
    image: python:3.10
    script:
        - pytest testing/unit testing/functional

py311:
    <<: *test-template
    image: python:3.11
    script:
        - pytest testing/unit testing/functional

py312:
    <<: *test-template
    image: python:3.12
    script:
        - pytest testing/unit testing/functional

py313:
    <<: *test-template
    image: python:3.13
    script:
        - pytest testing/unit testing/functional

py314:
    <<: *test-template
    image: python:3.14-rc
    script:
        - pytest testing/unit testing/functional
    allow_failure: true

pages:
    stage: deploy
    when: manual
    image: ubuntu:20.04
    before_script:
        # Set locale to prevent UTF-8 errors
        - export LANG=C.UTF-8
        - export LC_ALL=C.UTF-8
    script:
        - apt-get update
        - apt-get install -y git python3-pip git intltool
        - python3 -m pip install --upgrade pip
        - python3 -m pip install -r requirements.txt
        - python3 -m pip install -r requirements.dev
        - VERSION=`./setup.py --version`
        - echo "make docs of ${VERSION}"
        - make docs
        - mv docs/_build/html public
    artifacts:
        paths:
            - public

# run a pipeline trigger for the website to build
# - on new tag (always)
# - on new pushes (when online published files were changed)
# - when run manually
# needs WEBSITE_TRIGGER_TOKEN variable in CI settings (mask/protected as needed)
website:
    stage: deploy
    image: curlimages/curl:latest
    rules:
        - if: $CI_COMMIT_BRANCH != "main"
          when: manual
        - if: $CI_COMMIT_TAG
          when: always
        - changes:
            - "CHANGELOG.md"
            - "README.md"
            - "man/*.1"
          if: $CI_PIPELINE_SOURCE == "push"
          when: always
        - when: manual
    allow_failure: true
    variables:
        GIT_STRATEGY: none
        GIT_CHECKOUT: "false"
    script: |
        if [[ $WEBSITE_TRIGGER_TOKEN != "" ]]; then
            curl --fail-with-body \
                -X POST \
                -F token=${WEBSITE_TRIGGER_TOKEN} \
                -F ref=master https://gitlab.com/api/v4/projects/29130748/trigger/pipeline
        fi

# run cibuildwheel for all pythons and arches we support
# see config in pyproject.toml
wheels:
    stage: deploy
    when: manual
    image: python:3.13
    # make a docker daemon available for cibuildwheel to use
    services:
        - name: docker:dind
          entrypoint: ["env", "-u", "DOCKER_HOST"]
          command: ["dockerd-entrypoint.sh"]
    variables:
        DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
        # See https://github.com/docker-library/docker/pull/166
        DOCKER_TLS_CERTDIR: ""
    script:
        - curl -sSL https://get.docker.com/ | sh
        - python -m pip install cibuildwheel==3.1.1
        - cibuildwheel --output-dir wheelhouse
    artifacts:
        paths:
            - wheelhouse/
