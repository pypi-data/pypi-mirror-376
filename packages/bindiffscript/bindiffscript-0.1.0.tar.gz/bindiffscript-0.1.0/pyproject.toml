[project]
name = "bindiffscript"
version = "0.1.0"
description = "bindiffscript"
authors = [{name = "Frans Fürst", email = "frans.fuerst+gitlab@protonmail.com"}]
readme = "README.md"
requires-python = ">=3.12,<3.14"
dependencies = [
    "pyyaml>=6.0.2",
    "rich>=14.1.0",
]

[project.scripts]
bindiffscript = "bindiffscript.cli:main"

[project.urls]
#"Home Page" = "https://example.com"
Repository = "https://github.com/frans-fuerst/bindiffscript.git"

# [tool.uv.sources]
# trickkiste = { path = "../trickkiste", editable = true }

# see https://docs.astral.sh/uv/concepts/projects/dependencies/
[dependency-groups]
dev = [
    "ruff>=0.12.10",
    "mypy>=1.17.1",
    "pre-commit>=4.3.0",
    "pytest>=8.4.1,<9",
    "types-pyyaml>=6.0.12.20250822",
    "yamllint>=1.37.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["bindiffscript"]

[tool.pytest.ini_options]
markers = [
    "unit: Unit tests (deselect with '-m \"not unit\"')",
    "system: Tests involving an attached device (deselect with '-m \"not system\"')",
]

[tool.mypy]
python_version = "3.12"
strict=true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true
exclude = '^(\\.venv)'
mypy_path="typeshed"

[tool.ruff]
line-length = 79

[tool.ruff.lint]
# see https://docs.astral.sh/ruff/linter/
# https://github.com/astral-sh/ruff-pre-commit
select = [
    "E",    # pycodestyle
    "F",    # Pyflakes
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "I",    # isort
    "ALL",
]
ignore = [
    # These should be fixed eventually
    "ERA001",   # commented out code
    "RUF006",   # Store a reference to the return value of `asyncio.create_task`
    "E501",     # line too long
    "FIX001",   # Line contains FIXME, consider resolving the issue
    "C901",     # .. is too complex
    "PLR0911",  # Too many return statements
    "PLR2004",  # Magic value used in comparison, consider replacing `127` with a constant variable
    "PTH123",   # `open()` should be replaced by `Path.open()`
    "RUF001",   # String contains ambiguous `’`
    "RUF022",   # `__all__` is not sorted
    "TC001",   # Move application import `.commons.MidiEvent` into a type-checking block
    "ANN201", # Missing return type annotation for public function `program_timeout`
    "ANN001", # Missing type annotation for function argument `loop`
    "BLE001", # Do not catch blind exception: `Exception`
    "RUF100",# [*] Unused `noqa` directive

    # These are ignored on purpose
    "COM812", # missing-trailing-comma
    "ISC001", #
    "D203",     # incorrect-blank-line-before-class
    # "D211",    # no-blank-line-before-class
    "D200",     # One-line docstring should fit on one line
    "D202",     # No blank lines allowed after function docstring (found 1)
    "D205",     # 1 blank line required between summary line and description
    "D209",     # Multi-line docstring closing quotes should be on a separate line
    "D212",     # Multi-line docstring summary should start at the first line
    "D213",     # Multi-line docstring
    "D400",     # First line should end with a period
    "D401",     # First line of docstring should be in imperative mood: "Adds generator created from @player_definition_fn to new track definition"
    "D401",     # First line of docstring should be in imperative mood: "Implementation agnostic wrapper for synthesizer context manager"
    "D403",     # First word of the docstring should be capitalized: `def` -> `Def`
    "D415",     # First line should end with a period, question mark, or exclamation point
    "EM101",    # Exception must not use a string literal, assign to variable first
    "EM102",    # Exception must not use an f-string literal, assign to variable first
    "EXE001",   # Shebang is present but file is not executable
    "FURB105",  # Unnecessary empty string passed to `print`
    "RUF012",   # Mutable class attributes should be annotated with `typing.ClassVar`
    "S101",     # Use of `assert` detected
    "S311",     # Standard pseudo-random generators are not suitable for cryptographic purposes
    "SIM117",   # Use single `with`
    "T201",     # `print` found
    "TD001",    # Invalid TODO tag: `Fixme`
    "TD002",    # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    "TD003",    # Missing issue link for this TODO
    "TD004",    # Missing colon in TODO
    "TRY003",   # Avoid specifying long messages outside the exception class
    "TRY301",   # Abstract `raise` to an inner function
]
exclude = [
    "tests/*",
    "typeshed/*",
    "build/*",
    ".venv/",
]

