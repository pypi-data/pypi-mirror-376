[project]
name = "naylence-advanced-security"
version = "0.3.1"
description = "Naylence Advanced Security"
authors = [
    {name = "naylencedev@gmail.com"}
]
license = {text = "BSL"}
readme = "README.md"
requires-python = ">=3.12"

[tool.poetry]
packages = [
  { include = "naylence", from = "src"},
]

[tool.poetry.dependencies]
cryptography = { version = "^45.0.2", optional = false }
pyjwt = { version = "^2.10.1", optional = false }
naylence-runtime = "^0.3.8"


[tool.poetry.group.dev.dependencies]
black = "^25.1.0"
pyright = "^1.1.401"
ruff = "^0.11.10"
pytest = "^8.3.5"
pytest-asyncio = "^0.26.0"
hypothesis = "^6.131.30"
coverage = "^7.9.2"
pytest-cov = "^6.2.1"

[tool.poetry.group.mcp.dependencies]
mcp = "^1.9.1"

# Package sources: allow fallback to TestPyPI for packages that
# don't exist on PyPI yet (e.g., naylence-factory while in early testing).
[[tool.poetry.source]]
name = "testpypi"
url = "https://test.pypi.org/simple"
priority = "supplemental"


[tool.pyright]
include = ["src/naylence"]
venvPath = "."
venv = ".venv"
standard = ["src/naylence/**/*.py"]

[tool.ruff.lint]
select = ["C4", "E", "F", "I", "PERF", "UP"]
ignore = ["PERF203", "UP006", "UP007", "UP035"]

[tool.ruff.lint.per-file-ignores]
"src/naylence/fame/service/__init__.py" = ["F401"]

[tool.ruff]
line-length = 108
target-version = "py310"

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ".:tests"
pythonpath = "."
filterwarnings = [
    "ignore::DeprecationWarning:websockets.exceptions",
    "ignore::pytest.PytestConfigWarning"
]
addopts = [
    "--cov=src/naylence",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-report=term-missing",
    "--cov-branch",
    "--cov-fail-under=65"
]

[tool.coverage.run]
source = ["src/naylence"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/.*",
    "*/venv/*",
    "*/.venv/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "\\.\\.\\.",
    "pass",
    "TYPE_CHECKING",
]
show_missing = true
precision = 2
skip_covered = false
skip_empty = true

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[project.entry-points."naylence.EncryptionManagerFactory"]
CompositeEncryptionManager = "naylence.fame.security.encryption.composite_encryption_manager_factory:CompositeEncryptionManagerFactory"
X25519EncryptionManager = "naylence.fame.security.encryption.sealed.x25519_encryption_manager_factory:X25519EncryptionManagerFactory"
ChannelEncryptionManager = "naylence.fame.security.encryption.channel.channel_encryption_manager_factory:ChannelEncryptionManagerFactory"

[project.entry-points."naylence.SecureChannelManagerFactory"]
DefaultSecureChannelManager = "naylence.fame.security.encryption.default_secure_channel_manager_factory:DefaultSecureChannelManagerFactory"

[project.entry-points."naylence.CertificateManagerFactory"]
DefaultCertificateManager = "naylence.fame.security.cert.default_certificate_manager_factory:DefaultCertificateManagerFactory"

[project.entry-points."naylence.AttachmentKeyValidatorFactory"]
AttachmentCertValidator = "naylence.fame.security.cert.attachment_cert_validator_factory:AttachmentCertValidatorFactory"

[project.entry-points."naylence.ReplicaStickinessManagerFactory"]
AFTReplicaStickinessManager = "naylence.fame.stickiness.aft_replica_stickiness_manager_factory:AFTReplicaStickinessManagerFactory"

[project.entry-points."naylence.LoadBalancerStickinessManagerFactory"]
AFTLoadBalancerStickinessManager = "naylence.fame.stickiness.aft_load_balancer_stickiness_manager_factory:AFTLoadBalancerStickinessManagerFactory"

[project.entry-points."naylence.KeyManagerFactory"]
X5CKeyManager = "naylence.fame.security.keys.x5c_key_manager_factory:X5CKeyManagerFactory"

[project.entry-points."naylence.CAServiceFactory"]
DefaultCAService = "naylence.fame.security.cert.default_ca_service_factory:DefaultCAServiceFactory"

[project.entry-points."naylence.WelcomeServiceFactory"]
AdvancedWelcomeService = "naylence.fame.welcome.advanced_welcome_service_factory:AdvancedWelcomeServiceFactory"
