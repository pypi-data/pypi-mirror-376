[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "azolla"
dynamic = ["version"]
description = "Python client library for Azolla distributed task processing"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Azolla Team", email = "team@azolla.io"},
]
maintainers = [
    {name = "Azolla Team", email = "team@azolla.io"},
]
keywords = ["distributed", "tasks", "async", "worker", "queue"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10", 
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Typing :: Typed",
]
requires-python = ">=3.9"
dependencies = [
    "pydantic>=2.0.0,<3.0.0",
    "grpcio>=1.50.0",
    "grpcio-status>=1.50.0",
    "typing-extensions>=4.5.0;python_version<'3.11'",
]

[project.optional-dependencies]
# Performance optimizations
performance = [
    "uvloop>=0.17.0;sys_platform!='win32'",
    "orjson>=3.8.0",
]
# Development tools
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.9.0",
    "ruff>=0.8.0",
    "black>=24.0.0",
    "pre-commit>=4.0.0",
]
# Documentation
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
]
# Monitoring and observability
monitoring = [
    "prometheus-client>=0.17.0",
    "opentelemetry-api>=1.20.0",
    "structlog>=23.0.0",
]
# Testing utilities
testing = [
    "pytest-mock>=3.11.0",
    "factory-boy>=3.3.0",
    "freezegun>=1.2.0",
]
# Integration testing utilities
integration = [
    "psutil>=5.9.0",
    "httpx>=0.24.0",
]
# Complete development environment
all = [
    "azolla[performance,dev,docs,monitoring,testing,integration]"
]

[project.urls]
Homepage = "https://github.com/azolla-io/azolla"
Documentation = "https://docs.azolla.io/python-client"
Repository = "https://github.com/azolla-io/azolla.git"
"Bug Tracker" = "https://github.com/azolla-io/azolla/issues"
Changelog = "https://github.com/azolla-io/azolla/blob/main/clients/python/CHANGELOG.md"

[project.scripts]
azolla-worker = "azolla.cli:worker_main_sync"

[tool.hatch.version]
path = "src/azolla/_version.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]

[tool.hatch.build.targets.wheel]
packages = ["src/azolla"]

# Ruff configuration (linting & formatting)
[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings  
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "B018", # Found useless expression
]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312', 'py313']

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]