[build-system]
requires = ["hatchling", "hatch-requirements-txt"]
build-backend = "hatchling.build"

#Project
[project]
name = "esxport"
dynamic = ["version","dependencies","optional-dependencies"]
description = "An adept Python CLI utility designed for querying Elasticsearch and exporting result as a CSV file."
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.9"
License-File = "LICENSE"
authors = [
    { name = "Nikhil Badyal", email = "nikhill773384@gmail.com" },
]
keywords = [
    "bulk",
    "csv",
    "elasticsearch",
    "es",
    "export",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
    "Topic :: Database",
    "Topic :: Internet",
    "Topic :: System :: Systems Administration",
    "Topic :: Text Processing",
    "Topic :: Utilities",
]
[project.urls]
Homepage = "https://github.com/nikhilbadyal/esxport"
"Bug Tracker"="https://github.com/nikhilbadyal/esxport/issues"
Repository = "https://github.com/nikhilbadyal/esxport.git"
[project.scripts]
esxport = "esxport.cli:cli"

#Hatch
[tool.hatch.metadata]
allow-direct-references = true
core-metadata-version = "2.4"
[tool.hatch.metadata.hooks.requirements_txt]
files = ["requirements.txt"]
[tool.hatch.metadata.hooks.requirements_txt.optional-dependencies]
dev = ["requirements.dev.txt"]
[tool.hatch.version]
path = "esxport/__init__.py"
[tool.hatch.build.targets.sdist]
include = [
  "/esxport",
  "/README.md",
  "/LICENSE",
]
exclude = [
  "/.github",
  "/docs",
  "/test",
  "/scripts",
  "*.pyc",
  "/__pycache__",
]

[tool.hatch.build.targets.wheel]
packages = ["esxport"]
exclude = [
  "/esxport/**/*test*",
  "/esxport/**/__pycache__",
]

#Hatch Environments
[tool.hatch.envs.default]
# No hardcoded dependencies - using requirements files via plugin

[tool.hatch.envs.default.scripts]
test = "pytest {args:test}"
test-cov = "coverage run -m pytest {args:test}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[tool.hatch.envs.lint]
detached = true
features = ["dev"]
# No hardcoded dependencies - using pre-commit

[tool.hatch.envs.lint.scripts]
style = "pre-commit run --all-files"

[tool.hatch.envs.docs]
features = ["dev"]
# No hardcoded dependencies - add to requirements.dev.txt if needed

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8000"

# Testing matrix for different Python versions
[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11", "3.12", "3.13"]

[tool.hatch.envs.release]
detached = true
features = ["dev"]
# No hardcoded dependencies - using tbump from requirements.dev.txt

[tool.hatch.envs.release.scripts]
bump = "tbump {args}"
check = "twine check dist/*"
upload-test = "twine upload --repository testpypi dist/*"
upload = "twine upload dist/*"

[tool.hatch.envs.integration]
description = "Integration tests for built packages"
features = ["dev"]
# No hardcoded dependencies - using pytest from requirements.dev.txt

[tool.hatch.envs.integration.scripts]
test = [
  "pip install -e .",
  "cd test/integration && python -m pytest . -v --tb=short -p no:cov",
]
test-wheel = [
  "python -c 'import shutil; shutil.rmtree(\"dist\", ignore_errors=True)'",
  "hatch build --target wheel",
  "pip install --force-reinstall --no-deps dist/*.whl",
  "cd test/integration && python -m pytest . -v --tb=short -p no:cov",
]
test-sdist = [
  "python -c 'import shutil; shutil.rmtree(\"dist\", ignore_errors=True)'",
  "hatch build --target sdist",
  "pip install --force-reinstall --no-deps dist/*.tar.gz",
  "cd test/integration && python -m pytest . -v --tb=short -p no:cov",
]
test-both = [
  "hatch run integration:test-wheel",
  "hatch run integration:test-sdist",
]
test-install-from-pypi = [
  "pip uninstall -y esxport",
  "pip install esxport",
  "cd test/integration && python -m pytest test_pypi_install.py -v -p no:cov",
]

[tool.ruff]
line-length = 120
select = ["ALL"]
ignore = [
    "ANN401", #Disallow Any
    "D401", #Imperative mood
    "RUF012", #ignore till https://github.com/astral-sh/ruff/issues/5243
    "UP004" #useless-object-inheritance
]
target-version = "py39"
fix = true
show-fixes = true
[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"**test.py" = ["S101","SLF001","PT019","S311"]

[tool.ruff.lint.extend-per-file-ignores]
"test/**/*.py" = [
    # at least this three should be fine in tests:
    "S101", # asserts allowed in tests...
    "S603", # asserts allowed in tests...
    "PLR2004",
    "BLE001",
    "PERF401",
    "PERF203",
    "ANN201",
]

[tool.docformatter]
recursive = true
wrap-summaries = 120
wrap-descriptions = 120

[tool.black]
line-length = 120

[pycodestyle]
max-line-length = 120
exclude = ["venv"]


[tool.mypy]
ignore_missing_imports = true
check_untyped_defs = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true

[tools.pytest]
pythonpath = ["esxport"]

[tool.pytest.ini_options]
testpaths = ["test"]
addopts = "--cov=. --cov-report=xml --cov-report=term-missing --junitxml=junit.xml --ff -x --no-cov-on-fail --emoji --dist loadgroup --tx=4*popen --ignore=test/integration"
[tool.coverage.run]
#branch = true #https://github.com/nedbat/coveragepy/issues/605
parallel = true

[tool.coverage.report]
skip_covered = true
skip_empty = true
show_missing=true
sort="-Stmts"
omit = ["test/**"]
exclude_lines = [
    'if TYPE_CHECKING:',
    'if __name__ == "__main__":',
    'cli()'
    ]



[tool.pyright]
include = ["."]
typeCheckingMode = "strict"
exclude = ["**/test",]
reportMissingTypeStubs = false
[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
# github_url = "https://github.com/<user or organization>/<project>/"

[tool.tbump.version]
current = "9.1.1"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[tool.tbump.git]
message_template = "⬆️ Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[tool.tbump.file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[tool.tbump.file]]
src = "pyproject.toml"

[[tool.tbump.file]]
src = "esxport/__init__.py"

[[tool.tbump.file]]
src = "test/.env"
search = 'STACK_VERSION={current_version}'
[[tool.tbump.file]]
src = "requirements.txt"
search = 'elasticsearch=={current_version}'
# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

[[tool.tbump.before_commit]]
name = "Run Pre-commit"
cmd = "pre-commit run -a"

# Or run some commands after the git tag and the branch
# have been pushed:
#  [[tool.tbump.after_push]]
#  name = "publish"
#  cmd = "./publish.sh"
