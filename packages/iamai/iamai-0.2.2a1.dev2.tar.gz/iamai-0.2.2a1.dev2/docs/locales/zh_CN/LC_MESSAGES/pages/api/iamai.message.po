# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023-PRESENT, Retrofor Wut?
# This file is distributed under the same license as the iamai package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: iamai \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-18 11:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/pages/api/iamai.message.rst:2 3086c95694354ba0b99594fda9c1e2cc
msgid "iamai.message module"
msgstr ""

#~ msgid "iamai 消息。"
#~ msgstr ""

#~ msgid ""
#~ "实现了常用的基本消息 `Message` 和消息字段 `MessageSegment` "
#~ "模型供适配器使用。 "
#~ "适配器开发者可以根据需要实现此模块中消息类的子类或定义与此不同的消息类型，但建议若可行的话应尽量使用此模块中消息类的子类。"
#~ msgstr ""

#~ msgid ""
#~ "Bases: :py:class:`~abc.ABC`, :py:class:`~typing.List`\\"
#~ " [:py:obj:`~iamai.message.MessageSegmentT`]"
#~ msgstr ""

#~ msgid "消息。"
#~ msgstr ""

#~ msgid ""
#~ "本类是 `List` 的子类，并重写了 `__init__()` 方法， "
#~ "可以直接处理 `str`, `Mapping`, `MessageSegment`, "
#~ "`List[MessageSegment]`。 本类重载了 `+` 和 `+=` "
#~ "运算符，可以直接和 `Message`, `MessageSegment` 等类型的对象执行取和运算。"
#~ " 适配器开发者需要继承本类并重写 `get_segment_class()` 方法。"
#~ msgstr ""

#~ msgid "返回自身的浅复制。"
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr ""

#~ msgid "自身的浅复制。"
#~ msgstr ""

#~ msgid "实现类似字符串的 `endswith()` 方法。"
#~ msgstr ""

#~ msgid ""
#~ "当 `suffix` 类型是 `str` 时，会将自身转换为 `str` "
#~ "类型，再调用 `str` 类型的 `endswith()` 方法。 当 "
#~ "`suffix` 类型是 MessageSegment 时，`start` 和 "
#~ "`end` 参数将不其作用，"
#~ msgstr ""

#~ msgid "会判断列表的最后一个消息字段是否和 `suffix` 相等。"
#~ msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid "后缀。"
#~ msgstr ""

#~ msgid "开始检查位置。"
#~ msgstr ""

#~ msgid "停止检查位置。"
#~ msgstr ""

#~ msgid "检查结果。"
#~ msgstr ""

#~ msgid "获取消息中的纯文本部分。"
#~ msgstr ""

#~ msgid "消息中的纯文本部分。"
#~ msgstr ""

#~ msgid "获取消息字段类。"
#~ msgstr ""

#~ msgid "消息字段类。"
#~ msgstr ""

#~ msgid "是否是纯文本消息。"
#~ msgstr ""

#~ msgid "实现类似字符串的 `replace()` 方法。"
#~ msgstr ""

#~ msgid ""
#~ "当 `old` 为 `str` 类型时，`new` 也必须是 "
#~ "`str`，本方法将仅对 `is_text()` 为 `True` 的消息字段进行处理。"
#~ " 当 `old` 为 MessageSegment 类型时，`new` "
#~ "可以是 `MessageSegment` 或 `None`，本方法将对所有消息字段进行处理，"
#~ msgstr ""

#~ msgid "并替换符合条件的消息字段。`None` 表示删除匹配到的消息字段。"
#~ msgstr ""

#~ msgid "被匹配的字符串或消息字段。"
#~ msgstr ""

#~ msgid "被替换为的字符串或消息字段。"
#~ msgstr ""

#~ msgid "替换的次数。"
#~ msgstr ""

#~ msgid "替换后的消息对象。"
#~ msgstr ""

#~ msgid "实现类似字符串的 `startswith()` 方法。"
#~ msgstr ""

#~ msgid ""
#~ "当 `prefix` 类型是 `str` 时，会将自身转换为 `str` "
#~ "类型，再调用 `str` 类型的 `startswith()` 方法。 当"
#~ " `prefix` 类型是 `MessageSegment` 时，`start` 和"
#~ " `end` 参数将不其作用，"
#~ msgstr ""

#~ msgid "会判断列表的第一个消息字段是否和 `prefix` 相等。"
#~ msgstr ""

#~ msgid "前缀。"
#~ msgstr ""

#~ msgid ""
#~ "Bases: :py:class:`~abc.ABC`, "
#~ ":py:class:`~pydantic.main.BaseModel`, "
#~ ":py:class:`~typing.Mapping`\\ [:py:class:`str`, "
#~ ":py:obj:`~typing.Any`], :py:class:`~typing.Generic`\\ "
#~ "[:py:obj:`~iamai.message.MessageT`]"
#~ msgstr ""

#~ msgid "消息字段。"
#~ msgstr ""

#~ msgid ""
#~ "本类实现了所有 `Mapping` 类型的方法，这些方法全部是对 `data` 属性的操作。"
#~ " 本类重写了 `+` 和 `+=` 运算符，可以直接和 "
#~ "`Message`, `MessageSegment` 等类型的对象执行取和运算，返回 "
#~ "`Message` 对象。 适配器开发者需要继承本类并重写 `get_message_class()`"
#~ " 方法。"
#~ msgstr ""

#~ msgid "消息字段类型。"
#~ msgstr ""

#~ msgid "type"
#~ msgstr ""

#~ msgid "str"
#~ msgstr ""

#~ msgid "消息字段内容。"
#~ msgstr ""

#~ msgid "Dict[str, Any]"
#~ msgstr ""

#~ msgid "用于将 `Mapping` 转换为消息字段。"
#~ msgstr ""

#~ msgid "如有需要，子类可重写此方法以更改对 `Mapping` 的默认行为。"
#~ msgstr ""

#~ msgid "要解析为消息字段的数据。"
#~ msgstr ""

#~ msgid "由 Mapping 转换的消息字段。"
#~ msgstr ""

#~ msgid "用于将 `str` 转换为消息字段，子类应重写此方法。"
#~ msgstr ""

#~ msgid "由 `str` 转换的消息字段。"
#~ msgstr ""

#~ msgid "如果 `key` 存在于 `data` 字典中则返回 `key` 的值，否则返回 `default`。"
#~ msgstr ""

#~ msgid "获取消息类。"
#~ msgstr ""

#~ msgid "消息类。"
#~ msgstr ""

#~ msgid "是否是纯文本消息字段。"
#~ msgstr ""

#~ msgid "返回由 `data` 字典项 (`(键, 值)` 对) 组成的一个新视图。"
#~ msgstr ""

#~ msgid "返回由 `data` 字典键组成的一个新视图。"
#~ msgstr ""

#~ msgid ""
#~ "Configuration for the model, should be"
#~ " a dictionary conforming to "
#~ "[`ConfigDict`][pydantic.config.ConfigDict]."
#~ msgstr ""

#~ msgid ""
#~ "Metadata about the fields defined on "
#~ "the model, mapping of field names "
#~ "to [`FieldInfo`][pydantic.fields.FieldInfo]."
#~ msgstr ""

#~ msgid "This replaces `Model.__fields__` from Pydantic V1."
#~ msgstr ""

#~ msgid "返回由 `data` 字典值组成的一个新视图。"
#~ msgstr ""

