# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023-PRESENT, Retrofor Wut?
# This file is distributed under the same license as the iamai package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: iamai \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-18 11:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../source/pages/api/iamai.rst:2 81daf70c19ba4d1490892fcca848bc28
msgid "iamai package"
msgstr ""

#: ../../source/pages/api/iamai.rst:5 52b8dd1db481437ebb4ff78069fe0f49
msgid "Subpackages"
msgstr ""

#: ../../source/pages/api/iamai.rst:14 7ce1c3c67b2e4ddd857be38211808f40
msgid "Submodules"
msgstr ""

#: ../../source/pages/api/iamai.rst:34 68c0003953d34eadb4b5471b05b02fee
msgid "Module contents"
msgstr ""

#~ msgid "API Documentation"
#~ msgstr ""

#~ msgid ""
#~ "Comprehensive AI Toolkit for Multimodal "
#~ "Learning and Cross-Platform Robotics."
#~ msgstr ""

#~ msgid "This Module imports the following contents from the sub-module."
#~ msgstr ""

#~ msgid ""
#~ "Bases: :py:class:`~typing.Generic`\\ "
#~ "[:py:obj:`~iamai.typing.EventT`, "
#~ ":py:obj:`~iamai.typing.ConfigT`], :py:class:`~abc.ABC`"
#~ msgstr ""

#~ msgid "协议适配器基类。"
#~ msgstr ""

#~ msgid "适配器的名称。"
#~ msgstr ""

#~ msgid "type"
#~ msgstr ""

#~ msgid "str"
#~ msgstr ""

#~ msgid "当前的机器人对象。"
#~ msgstr ""

#~ msgid "Bot"
#~ msgstr ""

#~ msgid "适配器配置。"
#~ msgstr ""

#~ msgid "获取满足指定条件的的事件，协程会等待直到适配器接收到满足条件的事件、超过最大事件数或超时。"
#~ msgstr ""

#~ msgid ""
#~ "类似 `Bot` 类的 `get()` 方法，但是隐含了判断产生事件的适配器是本适配器。"
#~ " 等效于 `Bot` 类的 `get()` 方法传入 "
#~ "adapter_type 为本适配器类型。"
#~ msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid ""
#~ "协程或者函数，函数会被自动包装为协程执行。 要求接受一个事件作为参数，返回布尔值。 当协程返回 "
#~ "`True` 时返回当前事件。 当为 `None` "
#~ "时相当于输入对于任何事件均返回真的协程，即返回适配器接收到的下一个事件。"
#~ msgstr ""

#~ msgid "当指定时，只接受指定类型的事件，先于 func 条件生效。默认为 `None`。"
#~ msgstr ""

#~ msgid "最大事件数。"
#~ msgstr ""

#~ msgid "超时时间。"
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr ""

#~ msgid "返回满足 func 条件的事件。"
#~ msgstr ""

#~ msgid "Raises"
#~ msgstr ""

#~ msgid "超过最大事件数或超时。"
#~ msgstr ""

#~ msgid "适配器运行方法，适配器开发者必须实现该方法。"
#~ msgstr ""

#~ msgid "适配器运行过程中保持保持运行，当此方法结束后， AliceBot 不会自动重新启动适配器。"
#~ msgstr ""

#~ msgid "附带有异常处理地安全运行适配器。"
#~ msgstr ""

#~ msgid "在适配器结束运行时运行的方法，用于安全地关闭适配器。"
#~ msgstr ""

#~ msgid "AliceBot 在接收到系统的结束信号后依次运行并等待所有适配器的 `shutdown()` 方法。 当强制退出时此方法可能未被执行。"
#~ msgstr ""

#~ msgid "在适配器开始运行前运行的方法，用于初始化适配器。"
#~ msgstr ""

#~ msgid "AliceBot 依次运行并等待所有适配器的 `startup()` 方法，待运行完毕后再创建 `run()` 任务。"
#~ msgstr ""

#~ msgid "Bases: :py:class:`object`"
#~ msgstr ""

#~ msgid "iamai 机器人对象，定义了机器人的基本方法。"
#~ msgstr ""

#~ msgid "读取并储存配置 `Config`，加载适配器 `Adapter` 和插件 `Plugin`，并进行事件分发。"
#~ msgstr ""

#~ msgid "机器人配置。"
#~ msgstr ""

#~ msgid "iamai.config.MainConfig"
#~ msgstr ""

#~ msgid "机器人是否应该进入准备退出状态。"
#~ msgstr ""

#~ msgid "asyncio.locks.Event"
#~ msgstr ""

#~ msgid "当前已经加载的适配器的列表。"
#~ msgstr ""

#~ msgid "List[iamai.adapter.Adapter[Any, Any]]"
#~ msgstr ""

#~ msgid "插件优先级字典。"
#~ msgstr ""

#~ msgid "Dict[int, List[Type[iamai.plugin.Plugin[Any, Any, Any]]]]"
#~ msgstr ""

#~ msgid "插件状态。"
#~ msgstr ""

#~ msgid "Dict[str, Any]"
#~ msgstr ""

#~ msgid "全局状态。"
#~ msgstr ""

#~ msgid "Dict[Any, Any]"
#~ msgstr ""

#~ msgid "注册一个适配器运行时的函数。"
#~ msgstr ""

#~ msgid "被注册的函数。"
#~ msgstr ""

#~ msgid "注册一个适配器关闭时的函数。"
#~ msgstr ""

#~ msgid "注册一个适配器初始化时的函数。"
#~ msgstr ""

#~ msgid "注册一个 Bot 退出时的函数。"
#~ msgstr ""

#~ msgid "注册一个 Bot 启动时的函数。"
#~ msgstr ""

#~ msgid "根据当前 Bot 的配置输出 error 或者 exception 日志。"
#~ msgstr ""

#~ msgid "消息。"
#~ msgstr ""

#~ msgid "异常。"
#~ msgstr ""

#~ msgid "注册一个事件后处理函数。"
#~ msgstr ""

#~ msgid "注册一个事件预处理函数。"
#~ msgstr ""

#~ msgid ""
#~ "协程或者函数，函数会被自动包装为协程执行。 要求接受一个事件作为参数，返回布尔值。当协程返回 `True` "
#~ "时返回当前事件。 当为 `None` "
#~ "时相当于输入对于任何事件均返回真的协程，即返回适配器接收到的下一个事件。"
#~ msgstr ""

#~ msgid "当指定时，只接受指定适配器产生的事件，先于 func 条件生效。默认为 `None`。"
#~ msgstr ""

#~ msgid "返回满足 `func` 条件的事件。"
#~ msgstr ""

#~ msgid "按照名称或适配器类获取已经加载的适配器。"
#~ msgstr ""

#~ msgid "适配器名称或适配器类。"
#~ msgstr ""

#~ msgid "获取到的适配器对象。"
#~ msgstr ""

#~ msgid "找不到此名称的适配器对象。"
#~ msgstr ""

#~ msgid "按照名称获取已经加载的插件类。"
#~ msgstr ""

#~ msgid "插件名称"
#~ msgstr ""

#~ msgid "获取到的插件类。"
#~ msgstr ""

#~ msgid "找不到此名称的插件类。"
#~ msgstr ""

#~ msgid "被适配器对象调用，根据优先级分发事件给所有插件，并处理插件的 `stop` 、 `skip` 等信号。"
#~ msgstr ""

#~ msgid "此方法不应该被用户手动调用。"
#~ msgstr ""

#~ msgid "当前待处理的 `Event`。"
#~ msgstr ""

#~ msgid "当前事件是否可以被 get 方法捕获，默认为 `True`。"
#~ msgstr ""

#~ msgid "是否在日志中显示，默认为 `True`。"
#~ msgstr ""

#~ msgid "加载适配器。"
#~ msgstr ""

#~ msgid ""
#~ "适配器类或适配器名称，类型可以是 `Type[Adapter]` 或 `str`。 如果为"
#~ " `Type[Adapter]` 类型时，将作为适配器类进行加载。 如果为 `str` "
#~ "类型时，将作为适配器模块名称进行加载，格式和 Python `import` 语句相同。     "
#~ "例如：`path.of.adapter`。"
#~ msgstr ""

#~ msgid ""
#~ "适配器类或适配器名称，类型可以是 `Type[Adapter]` 或 `str`。 如果为"
#~ " `Type[Adapter]` 类型时，将作为适配器类进行加载。 如果为 `str` "
#~ "类型时，将作为适配器模块名称进行加载，格式和 Python `import` 语句相同。"
#~ msgstr ""

#~ msgid "例如：`path.of.adapter`。"
#~ msgstr ""

#~ msgid "加载插件。"
#~ msgstr ""

#~ msgid ""
#~ "插件类、插件模块名称或者插件模块文件路径。 类型可以是 `Type[Plugin]`, `str`"
#~ " 或 `pathlib.Path`。 如果为 `Type[Plugin]` "
#~ "类型时，将作为插件类进行加载。 如果为 `str` 类型时，将作为插件模块名称进行加载，格式和 "
#~ "Python `import` 语句相同。     例如：`path.of.plugin`。 "
#~ "如果为 `pathlib.Path` 类型时，将作为插件模块文件路径进行加载。     "
#~ "例如：`pathlib.Path(\"path/of/plugin\")`。"
#~ msgstr ""

#~ msgid ""
#~ "插件类、插件模块名称或者插件模块文件路径。 类型可以是 `Type[Plugin]`, `str`"
#~ " 或 `pathlib.Path`。 如果为 `Type[Plugin]` "
#~ "类型时，将作为插件类进行加载。 如果为 `str` 类型时，将作为插件模块名称进行加载，格式和 "
#~ "Python `import` 语句相同。"
#~ msgstr ""

#~ msgid "例如：`path.of.plugin`。"
#~ msgstr ""

#~ msgid "如果为 `pathlib.Path` 类型时，将作为插件模块文件路径进行加载。"
#~ msgstr ""

#~ msgid "例如：`pathlib.Path(\"path/of/plugin\")`。"
#~ msgstr ""

#~ msgid "从目录中加载插件，以 `_` 开头的模块中的插件不会被导入。路径可以是相对路径或绝对路径。"
#~ msgstr ""

#~ msgid "储存包含插件的模块的模块路径。 例如：`pathlib.Path(\"path/of/plugins/\")` 。"
#~ msgstr ""

#~ msgid "当前已经加载的插件的列表。"
#~ msgstr ""

#~ msgid "手动重新加载所有插件。"
#~ msgstr ""

#~ msgid "退出并重新运行 iamai。"
#~ msgstr ""

#~ msgid "运行 iamai，监听并拦截系统退出信号，更新机器人配置。"
#~ msgstr ""

#~ msgid "Bases: :py:class:`~pydantic.main.BaseModel`"
#~ msgstr ""

#~ msgid "iamai 配置模型。"
#~ msgstr ""

#~ msgid "配置名称。"
#~ msgstr ""

#~ msgid ""
#~ "Configuration for the model, should be"
#~ " a dictionary conforming to "
#~ "[`ConfigDict`][pydantic.config.ConfigDict]."
#~ msgstr ""

#~ msgid ""
#~ "Metadata about the fields defined on "
#~ "the model, mapping of field names "
#~ "to [`FieldInfo`][pydantic.fields.FieldInfo]."
#~ msgstr ""

#~ msgid "This replaces `Model.__fields__` from Pydantic V1."
#~ msgstr ""

#~ msgid "子依赖装饰器。"
#~ msgstr ""

#~ msgid "依赖类。如果不指定则根据字段的类型注释自动判断。"
#~ msgstr ""

#~ msgid "是否使用缓存。默认为 `True`。"
#~ msgstr ""

#~ msgid "返回内部子依赖对象。"
#~ msgstr ""

#~ msgid ""
#~ "Bases: :py:class:`~abc.ABC`, "
#~ ":py:class:`~pydantic.main.BaseModel`, "
#~ ":py:class:`~typing.Generic`\\ [:py:obj:`~iamai.typing.AdapterT`]"
#~ msgstr ""

#~ msgid "事件类的基类。"
#~ msgstr ""

#~ msgid "产生当前事件的适配器对象。"
#~ msgstr ""

#~ msgid "Any"
#~ msgstr ""

#~ msgid "事件类型。"
#~ msgstr ""

#~ msgid "str | None"
#~ msgstr ""

#~ msgid "表示事件是否被处理过了，用于适配器处理。警告：请勿手动更改此属性的值。"
#~ msgstr ""

#~ msgid "bool"
#~ msgstr ""

#~ msgid ""
#~ "Bases: :py:class:`~iamai.event.Event`, "
#~ ":py:class:`~typing.Generic`\\ [:py:obj:`~iamai.typing.AdapterT`]"
#~ msgstr ""

#~ msgid "通用的消息事件类的基类。"
#~ msgstr ""

#~ msgid "询问消息。"
#~ msgstr ""

#~ msgid "表示回复一个消息后获取用户的回复。 相当于 `reply()` 后执行 `get()`。"
#~ msgstr ""

#~ msgid "回复消息的内容。"
#~ msgstr ""

#~ msgid "用户回复的消息事件。"
#~ msgstr ""

#~ msgid "获取用户回复消息。"
#~ msgstr ""

#~ msgid "相当于 `Bot` 的 `get()`，条件为适配器、事件类型、发送人相同。"
#~ msgstr ""

#~ msgid "获取消息的纯文本内容。"
#~ msgstr ""

#~ msgid "消息的纯文本内容。"
#~ msgstr ""

#~ msgid "判断自身和另一个事件是否是同一个发送者。"
#~ msgstr ""

#~ msgid "另一个事件。"
#~ msgstr ""

#~ msgid "是否是同一个发送者。"
#~ msgstr ""

#~ msgid "回复消息。"
#~ msgstr ""

#~ msgid "回复消息动作的响应。"
#~ msgstr ""

#~ msgid ""
#~ "Bases: :py:class:`~abc.ABC`, :py:class:`~typing.Generic`\\"
#~ " [:py:obj:`~iamai.typing.EventT`, "
#~ ":py:obj:`~iamai.typing.StateT`, :py:obj:`~iamai.typing.ConfigT`]"
#~ msgstr ""

#~ msgid "所有 iamai 插件的基类。"
#~ msgstr ""

#~ msgid "当前正在被此插件处理的事件。"
#~ msgstr ""

#~ msgid "插件的优先级，数字越小表示优先级越高，默认为 0。"
#~ msgstr ""

#~ msgid "ClassVar[int]"
#~ msgstr ""

#~ msgid "插件执行结束后是否阻止事件的传播。`True` 表示阻止。"
#~ msgstr ""

#~ msgid "ClassVar[bool]"
#~ msgstr ""

#~ msgid "插件加载类型，由 iamai 自动设置，反映了此插件是如何被加载的。"
#~ msgstr ""

#~ msgid "ClassVar[iamai.plugin.PluginLoadType]"
#~ msgstr ""

#~ msgid "当插件加载类型为 `PluginLoadType.CLASS` 时为 `None`， 否则为定义插件在的 Python 模块的位置。"
#~ msgstr ""

#~ msgid "ClassVar[str | None]"
#~ msgstr ""

#~ msgid "机器人对象。"
#~ msgstr ""

#~ msgid "插件配置。"
#~ msgstr ""

#~ msgid "处理事件的方法。当 `rule()` 方法返回 `True` 时 iamai 会调用此方法。每个插件必须实现此方法。"
#~ msgstr ""

#~ msgid "插件类名称。"
#~ msgstr ""

#~ msgid "匹配事件的方法。事件处理时，会按照插件的优先级依次调用此方法，当此方法返回 `True` 时将事件交由此插件处理。每个插件必须实现此方法。"
#~ msgstr ""

#~ msgid "注意：不建议直接在此方法内实现对事件的处理，事件的具体处理请交由 `handle()` 方法。"
#~ msgstr ""

#~ msgid "跳过自身继续当前事件传播。"
#~ msgstr ""

#~ msgid "停止当前事件传播。"
#~ msgstr ""

