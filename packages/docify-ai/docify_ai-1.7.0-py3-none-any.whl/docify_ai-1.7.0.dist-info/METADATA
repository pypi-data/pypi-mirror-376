Metadata-Version: 2.4
Name: docify-ai
Version: 1.7.0
Summary: An AI-powered documentation generator that uses OpenAI and Gemini models to create high-quality README.md files, model cards, notebooks, tests, and boilerplate, tailored to your project‚Äôs code and structure.
Author: Shiwang Upadhyay
Author-email: shiwangupadhyay8@gmail.com
Project-URL: Homepage, https://github.com/shiwangupadhyay/docify-project
Project-URL: Repository, https://github.com/shiwangupadhyay/docify-project
Project-URL: Issues, https://github.com/shiwangupadhyay/docify-project/issues
Keywords: ai,documentation,readme-generator,tests-generator,project-structure,docker-template,cicd-workflows-template,mermaid-diagrams,openai,gemini,automation,developer-tools,cli,docstrings,notebook-generation,automatic-data-cleaning,auto-EDA,notebook-generator,model-card,model-card-generator
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Classifier: Topic :: Software Development :: Documentation
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: google-generativeai>=0.8.5
Requires-Dist: openai>=1.100.2
Dynamic: license-file

# Docify-AI

[
![PyPI - Version](https://img.shields.io/pypi/v/docify-ai.svg?style=flat-square)
](https://pypi.org/project/docify-ai/)
[
![PyPI - Python Version](https://img.shields.io/pypi/pyversions/docify-ai.svg?style=flat-square)
](https://pypi.org/project/docify-ai/)
[
![Downloads](https://static.pepy.tech/badge/docify-ai)
](https://pepy.tech/project/docify-ai)

An intelligent command-line interface (CLI) that leverages AI to automate documentation, testing, and project scaffolding for local software projects.

## Key Features

*   **AI-Powered Documentation Generation**: Automatically create detailed and domain-specific `README.md` files for any project.
*   **Automated Test Suite Generation**: Generate runnable `pytest` test files covering various scenarios.
*   **Dockerfile Generation**: Create optimized `Dockerfile`s for containerizing your applications.
*   **GitHub Actions Workflow Generation**: Develop `YAML` configurations for CI/CD pipelines.
*   **Project Scaffolding**: Bootstrap new Python projects with a predefined structure.
*   **Docstring Generation**: Automatically add PEP 257‚Äìcompliant docstrings to Python functions, classes, and modules.
*   **Jupyter Notebook Generation**: Kickstart data analysis with a starter notebook including data loading, EDA, and model training pipelines.
*   **Model Card Generation**: Create `MODEL_CARD.md` for ML/AI projects, detailing model information, intended use, and ethical considerations.
*   **Flexible AI Clients**: Support for both Google Gemini and OpenAI GPT models.

## Installation

Docify-AI is available on PyPI and can be installed using `pip`:

```bash
pip install docify-ai
```

## Usage

The `docify` command is the entry point to all functionalities.

### 1. API Key Setup

Before using the tool, you must set your `GEMINI_API_KEY` or `OPENAI_API_KEY` as an environment variable. Alternatively, you can provide it directly via the `--key` argument.

```bash
# Example for Linux/macOS
export GEMINI_API_KEY='YOUR_GEMINI_API_KEY'

# Example for OpenAI
export OPENAI_API_KEY='YOUR_OPENAI_API_KEY'
```

### 2. CLI Commands & Options

#### Global Options

These options can be used with any action:

*   `--path`, `-p`: Root directory of the project (default: current directory).
*   `--output`, `-o`: Custom output file/folder name.
*   `--client`, `-c`: AI client to use (`openai` or `gemini`, default: `gemini`).
*   `--key`, `-k`: Provide the API key directly, overriding environment variables.
*   `--ignore-dirs`: Space-separated list of directories to ignore.
*   `--ignore-exts`: Space-separated list of file extensions to ignore.

#### Command Examples

**Generate `README.md` (Default Action)**
Analyzes your project and creates a professional README file.

```bash
docify --path /path/to/your/project
```

**Generate Pytest Tests**
Creates a `tests/` directory with `pytest`-compatible test modules.

```bash
docify --test --path /path/to/your/project
```

**Generate a Dockerfile**
Creates a `Dockerfile` tailored to your project's needs.

```bash
docify --docker --path /path/to/your/project
```

**Generate a GitHub Actions Workflow**
Creates a `.github/workflows/ci.yml` file for continuous integration.

```bash
docify --gha --path /path/to/your/project
```

**Bootstrap a New Python Project**
Generates a basic Python project structure from a description.

```bash
docify --init "A simple Flask API for managing tasks"
```

**Add Docstrings to a Python File**
Inserts Google-style docstrings into a specified Python file in-place.

```bash
docify --docstring /path/to/your/project/my_module.py
```

**Generate a Jupyter Notebook**
Creates a starter Jupyter Notebook for data analysis or ML projects.

```bash
docify --notebook --path /path/to/your/data_project
```

**Generate a Model Card**
Creates a `MODEL_CARD.md` for your AI/ML projects.

```bash
docify --model-card --path /path/to/your/ml_project
```
# CHANGELOG

## 1.7.0 - 2025-09-14
- üèó Updated `--init` to accept a **requirements description** instead of just a project name.
- üìÇ Project scaffold is now generated in the **current working directory** (user creates the folder first).

## 1.6.2 - 2025-09-08
- Optimized ```.ipynb```  and dataset files reading to avoid context length explosion.

## 1.6.0 - 2025-09-07
- üìù Added `--notebook` option to generate a starter Jupyter Notebook with analysis pipelines and tests.
- üìÑ Added `--model-card` option to generate a Model Card (`MODEL_CARD.md`) for ML/AI projects.

## 1.5.0 - 2025-09-05
- üìù Added `--docstring` option to automatically generate PEP 257‚Äìcompliant docstrings for Python functions, classes, and modules.

## 1.4.0 - 2025-08-28
- üê≥ Added `--docker` option to generate a project-aware Dockerfile.
- ‚öôÔ∏è Added `--gha` option to generate GitHub Actions workflow YAML for CI/CD.
- üèó Added `--init` option to bootstrap a new Python project with a predefined structure.

## 1.3.0 - 2025-08-22
- üö´ Added `--ignore-dirs` and `--ignore-exts` options to exclude unwanted directories and files from documentation and test generation.

## 1.2.0 - 2025-08-21
- üß™ Added `-t` or `--test` option to generate pytest-compatible test modules for all project features.

## 1.1.1 - 2025-08-20
- üõ† Fixed issue where project description was not visible in generated docs.

## 1.1.0 - 2025-08-20
- ‚ú® Added support for OpenAI and Gemini clients.
- üîë Added `--key` argument to provide API key without environment variables.
- üîç Case-insensitive `--client` option.

## 1.0.0 - 2025-08-15
- üöÄ Initial release
