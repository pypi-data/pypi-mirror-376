"use strict";(self.webpackChunkpixi_kernel=self.webpackChunkpixi_kernel||[]).push([[935],{935:(e,r,t)=>{t.r(r),t.d(r,{default:()=>u});var n=t(436),o=t(980),a=t(760),i=t(345),s=t.n(i),c=t(397),l=t(566);const u={id:"pixi-kernel:plugin",description:"Jupyter kernels using Pixi for reproducible notebooks.",autoStart:!0,requires:[a.IFormRendererRegistry,o.INotebookTracker],activate:(e,r,t)=>{try{const n={widgetRenderer:r=>(e=>{const[r,t]=(0,i.useState)([""]),[n,o]=(0,i.useState)("");return(0,i.useEffect)(()=>{(async()=>{var r,n;try{const a=(null===(n=null===(r=e.nbTracker)||void 0===r?void 0:r.currentWidget)||void 0===n?void 0:n.context.path)||"",i=e.app.serviceManager.contents.localPath(a),s=c.PageConfig.getOption("serverRoot")||"",u=await async function(e="",r={}){const t=l.ServerConnection.makeSettings(),n=c.URLExt.join(t.baseUrl,"pixi-kernel",e);let o;try{o=await l.ServerConnection.makeRequest(n,r,t)}catch(e){throw new l.ServerConnection.NetworkError(e)}let a=await o.text();if(a.length>0)try{a=JSON.parse(a)}catch(e){console.log("Not a JSON response body.",o)}if(!o.ok)throw new l.ServerConnection.ResponseError(o,a.message||a);return a}("envs",{method:"POST",body:JSON.stringify({localPath:i,serverRoot:s})});t(u.environments),o(u.default),!e.value&&u.default&&e.onChange(u.default)}catch(e){console.error("Failed to fetch environments:",e),t([""])}})()},[e.nbTracker]),s().createElement("select",{id:e.id,className:"form-control",value:e.value||n,onChange:r=>e.onChange(r.target.value),required:e.required},r.map(e=>s().createElement("option",{key:e,value:e},e)))})({...r,app:e,nbTracker:t})};r.addRenderer("pixi-kernel:plugin.pixi-envs",n)}catch(e){(0,n.showErrorMessage)("Pixi Kernel Error",{message:s().createElement("pre",null,e instanceof Error?e.message:String(e))})}}}}}]);