def overlap(lhs, rhs) -> bool:
    """[summary]

    Args:
        lhs ([type]): [description]
        rhs ([type]): [description]

    Returns:
        bool: [description]
    """
    if hasattr(lhs, "overlaps"):
        return lhs.overlaps(rhs)
    elif hasattr(rhs, "overlaps"):
        return rhs.overlaps(lhs)
    else:  # assume scalar
        return lhs == rhs


def contain(lhs, rhs) -> bool:
    """[summary]

    Args:
        lhs ([type]): [description]
        rhs ([type]): [description]

    Returns:
        bool: [description]
    """
    if hasattr(lhs, "contains"):
        return lhs.contains(rhs)
    elif hasattr(rhs, "contains"):
        return False
    else:  # assume scalar
        return lhs == rhs


def intersection(lhs, rhs):
    """[summary]

    Args:
        lhs ([type]): [description]
        rhs ([type]): [description]

    Returns:
        [type]: [description]
    """
    if hasattr(lhs, "intersect_with"):
        return lhs.intersect_with(rhs)
    elif hasattr(rhs, "intersect_with"):
        return rhs.intersect_with(lhs)
    else:  # assume scalar
        assert lhs == rhs
        return lhs


def min_dist(lhs, rhs):
    """[summary]

    Args:
        lhs ([type]): [description]
        rhs ([type]): [description]

    Returns:
        [type]: [description]
    """
    if hasattr(lhs, "min_dist_with"):
        return lhs.min_dist_with(rhs)
    elif hasattr(rhs, "min_dist_with"):
        return rhs.min_dist_with(lhs)
    else:  # assume scalar
        return abs(lhs - rhs)


def min_dist_change(lhs, rhs):
    """[summary]

    Args:
        lhs ([type]): [description]
        rhs ([type]): [description]

    Returns:
        [type]: [description]
    """
    if hasattr(lhs, "min_dist_change_with"):
        return lhs.min_dist_change_with(rhs)
    elif hasattr(rhs, "min_dist_change_with"):
        return rhs.min_dist_change_with(lhs)
    else:  # assume scalar
        return abs(lhs - rhs)
