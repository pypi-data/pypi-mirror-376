# Evolis SDK for Python
#
# THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
# ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
# PARTICULAR PURPOSE.

import ctypes

from evolis.Connection import _instr
from evolis.Connection import _outstr
from evolis.Connection import Connection
from evolis.Evolis import Evolis
from evolis.ReturnCode import ReturnCode
from evolis.ScanImage import ScanImage
from evolis.ScanOption import ScanOption


class ScanSession:
    @staticmethod
    def set_library_path(path: str) -> bool:
        """
        Configure library to load to communicate with scanner. Currently,
        accepts only path to WiseCube DLL (wsdef.dll).

        Parameters
        ----------
        path: str
            Path to the scanner's dynamic library.

        Returns
        -------
        bool
            True on success, false otherwise.
        """
        return Evolis.wrapper.evolis_scan_set_library_path(_instr(path)) == 0

    @staticmethod
    def get_library_path() -> str:
        """
        Get the library path that is used to communicate with the scanner.

        Returns
        -------
        str
            String containing path to the scanner library.
        """
        return _outstr(Evolis.wrapper.evolis_scan_get_library_path())

    def __init__(self, connection: Connection):
        if connection is None:
            raise TypeError("ScanSession.__init__(): 'connection' argument is not valid.")
        self.__context = connection.get_context()
        self.__last_error = ReturnCode.OK
        self.init()

    def init(self) -> bool:
        """
        Initialize a new scan session : Previous images will be cleared.
        Options will be reset to default ones.

        Returns
        -------
        bool
            True on success, false otherwise.
        """
        self.__last_error = ReturnCode.from_int(Evolis.wrapper.evolis_scan_init(self.__context))
        return self.__last_error == ReturnCode.OK

    def get_last_error(self) -> ReturnCode:
        """
        Get error generated by last method call.

        Returns
        -------
        ReturnCode
            The last error occured.
        """
        return self.__last_error

    def get_option(self, option: ScanOption) -> int:
        """
        Get scan option.

        Parameters
        ----------
        option:
            Specifies the scan option to retrieve.

        Returns
        -------
        int
            Option value.
        """
        value = ctypes.c_int(0)
        self.__last_error = ReturnCode.from_int(
            Evolis.wrapper.evolis_scan_get_option(self.__context, option.value, ctypes.byref(value))
        )
        return value.value

    def set_option(self, option: ScanOption, value: int) -> bool:
        """
        Set a value for a scanning option.

        Parameters
        ----------
        option:
            Indicates which scanning option to modify.

        value: int
            The new value to set for this option.

        Returns
        -------
        bool
            True on success, false otherwise.
        """
        self.__last_error = ReturnCode.from_int(
            Evolis.wrapper.evolis_scan_set_option(self.__context, option.value, value)
        )
        return self.__last_error == ReturnCode.OK

    def send_command(self, cmd: str, reply_max_size: int = 1024) -> str:
        """
        Send a command to the scanner.

        Parameters
        ----------
        cmd: str
            The command to send.

        reply_max_size: int
            Maximum size of the reply.

        Returns
        -------
        str
            If succeeded, returns true. Otherwise, returns false and lastError is set.
        """
        reply = ctypes.create_string_buffer(reply_max_size)
        self.__last_error = rc = ReturnCode.from_int(
            Evolis.wrapper.evolis_scan_command(self.__context, _instr(cmd), len(cmd), reply, reply_max_size)
        )
        return _outstr(reply.value) if rc == ReturnCode.OK else None

    def acquire(self) -> bool:
        """
        Sends a card to the scanner and scan it according to previously defined options
        If no card inside the printer then a card will be inserted before scan starts.

        Returns
        -------
        bool
            True on success, false otherwise.
        """
        self.__last_error = rc = ReturnCode.from_int(Evolis.wrapper.evolis_scan_acquire(self.__context))
        return rc == ReturnCode.OK

    def get_image(self, type: ScanImage) -> bytearray:
        """
        This function must be used to retrieve an image previously acquired by a call to 'acquire()'.
        No mechanical actions are made here. The scanned image is already in memory.

        Parameters
        ----------
        type: ScanImage
            Indicates which image to retrieve.

        Returns
        -------
        bytearray
            On success, returns a valid byte array buffer. Otherwise, null is
            returned and last error is set.
        """
        data = ctypes.c_char_p()
        size = ctypes.c_int(0)
        n = Evolis.wrapper.evolis_scan_get_image(self.__context, type.value, data, ctypes.byref(size))

        self.__last_error = ReturnCode.EUNDEFINED
        if n == 0 and size.value > 0:
            data = ctypes.create_string_buffer(size.value)
            self.__last_error = ReturnCode.from_int(
                Evolis.wrapper.evolis_scan_get_image(self.__context, type.value, data, ctypes.byref(size))
            )
            return data.value
        return None

    def save_image(self, type: ScanImage, path: str) -> bool:
        """
        Save the specified image, at the given path.

        Parameters
        ----------
        type: ScanImage
            Indicates which image to save.

        path: str
            Contains the path to save the image to.

        Returns
        -------
        bool
            True on success, false otherwise.
        """
        self.__last_error = rc = ReturnCode.from_int(
            Evolis.wrapper.evolis_scan_save_image(self.__context, type.value, _instr(path))
        )
        return rc == ReturnCode.OK

    def firmware_update(self, path: str) -> bool:
        """
        Updates the scanner's firmware using the file path provided.

        Parameters
        ----------
        path: str
            Path to the scanner's firmware update file.

        Returns
        -------
        bool
            True on success, false otherwise.
        """
        self.__last_error = rc = ReturnCode.from_int(
            Evolis.wrapper.evolis_scan_firmware_update(self.__context, _instr(path))
        )
        return rc == ReturnCode.OK
