selector_to_html = {"a[href=\"#volto-blocks-function\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">volto_blocks</span></code> function<a class=\"headerlink\" href=\"#volto-blocks-function\" title=\"Link to this heading\">#</a></h3><p>To add a test for <code class=\"docutils literal notranslate\"><span class=\"pre\">volto_blocks</span></code>, edit <code class=\"file docutils literal notranslate\"><span class=\"pre\">tests/_data/test_volto_blocks.yml</span></code> and add a new entry:</p>", "a[href=\"../glossary.html#term-pytest\"]": "<dt id=\"term-pytest\">pytest</dt><dd><p><a class=\"reference external\" href=\"https://docs.pytest.org/\">pytest</a> is a Python test framework that makes it easy to write small, readable tests, and can scale to support complex functional testing for applications and libraries.</p></dd>", "a[href=\"#image\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">image<a class=\"headerlink\" href=\"#image\" title=\"Link to this heading\">#</a></h3><p>To add a test for the image block converter, edit <code class=\"file docutils literal notranslate\"><span class=\"pre\">tests/_data/test_image_block.yml</span></code> and add a new entry:</p>", "a[href=\"#volto-endpoint\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">/volto</span></code> endpoint<a class=\"headerlink\" href=\"#volto-endpoint\" title=\"Link to this heading\">#</a></h3><p>To add a test for the <code class=\"docutils literal notranslate\"><span class=\"pre\">/volto</span></code> endpoint, edit <code class=\"file docutils literal notranslate\"><span class=\"pre\">tests/_data/test_services_volto.yml</span></code> and add a new entry:</p>", "a[href=\"#testing-the-converter\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Testing the converter<a class=\"headerlink\" href=\"#testing-the-converter\" title=\"Link to this heading\">#</a></h2><p>This section covers how to test the main converter functions, such as <code class=\"docutils literal notranslate\"><span class=\"pre\">collective.html2blocks.converter.html_to_blocks</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">collective.html2blocks.converter.volto_blocks</span></code>. These functions are responsible for transforming HTML input into Volto blocks or internal representations. Tests should verify that the conversion logic produces the expected block structures for a variety of input scenarios.</p>", "a[href=\"#table\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">table<a class=\"headerlink\" href=\"#table\" title=\"Link to this heading\">#</a></h3><p>To add a test for the table block converter, edit <code class=\"file docutils literal notranslate\"><span class=\"pre\">tests/_data/test_table_block.yml</span></code> and add a new entry:</p>", "a[href=\"#introduction-test-parametrization-and-the-traverse-fixture\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Introduction: Test parametrization and the <code class=\"docutils literal notranslate\"><span class=\"pre\">traverse</span></code> fixture<a class=\"headerlink\" href=\"#introduction-test-parametrization-and-the-traverse-fixture\" title=\"Link to this heading\">#</a></h2><p>Tests in <code class=\"docutils literal notranslate\"><span class=\"pre\">collective.html2blocks</span></code> are parametrized using YAML files, which define input data and expected results. The <code class=\"docutils literal notranslate\"><span class=\"pre\">traverse</span></code> fixture is a utility that allows you to extract and assert values from deeply nested dictionaries and lists using a path-like syntax. You can also apply simple functions (like <code class=\"docutils literal notranslate\"><span class=\"pre\">len</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">type</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">keys</span></code>) to the traversed value by appending a colon and function name, for example <code class=\"docutils literal notranslate\"><span class=\"pre\">foo/bar:baz:len</span></code>. This makes it easy to write concise, readable assertions in your test cases.</p>", "a[href=\"#slate\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">slate<a class=\"headerlink\" href=\"#slate\" title=\"Link to this heading\">#</a></h3><p>To add a test for the slate block converter, edit <code class=\"file docutils literal notranslate\"><span class=\"pre\">tests/_data/test_slate_block.yml</span></code> and add a new entry:</p>", "a[href=\"#add-tests\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Add tests<a class=\"headerlink\" href=\"#add-tests\" title=\"Link to this heading\">#</a></h1><p>This guide explains how to add new tests to the <code class=\"docutils literal notranslate\"><span class=\"pre\">collective.html2blocks</span></code> codebase, covering test parametrization, the use of the <code class=\"docutils literal notranslate\"><span class=\"pre\">traverse</span></code> fixture, and the organization of test cases for converters and API endpoints. The codebase uses <a class=\"reference internal\" href=\"../glossary.html#term-pytest\"><span class=\"xref std std-term\">pytest</span></a> and YAML-based parametrization for flexible, maintainable testing.</p>", "a[href=\"#html-endpoint\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">/html</span></code> endpoint<a class=\"headerlink\" href=\"#html-endpoint\" title=\"Link to this heading\">#</a></h3><p>To add a test for the <code class=\"docutils literal notranslate\"><span class=\"pre\">/html</span></code> endpoint, edit <code class=\"file docutils literal notranslate\"><span class=\"pre\">tests/_data/test_services_html.yml</span></code> and add a new entry:</p>", "a[href=\"#testing-blocks-converters\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Testing blocks converters<a class=\"headerlink\" href=\"#testing-blocks-converters\" title=\"Link to this heading\">#</a></h2><p>This section explains how to test individual block converters, such as those for iframe, image, slate, and table blocks. Each converter should be tested with representative input and expected output, using YAML files for parametrization and the <code class=\"docutils literal notranslate\"><span class=\"pre\">traverse</span></code> fixture for assertions.</p>", "a[href=\"#iframe\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">iframe<a class=\"headerlink\" href=\"#iframe\" title=\"Link to this heading\">#</a></h3><p>To add a test for the iframe block converter, edit <code class=\"file docutils literal notranslate\"><span class=\"pre\">tests/_data/test_iframe_block.yml</span></code> and add a new entry:</p>", "a[href=\"#html-to-blocks-function\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">html_to_blocks</span></code> function<a class=\"headerlink\" href=\"#html-to-blocks-function\" title=\"Link to this heading\">#</a></h3><p>To add a test for <code class=\"docutils literal notranslate\"><span class=\"pre\">html_to_blocks</span></code>, edit <code class=\"file docutils literal notranslate\"><span class=\"pre\">tests/_data/test_html_to_blocks.yml</span></code> and add a new entry under <code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code>:</p>", "a[href=\"#testing-the-http-based-api\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Testing the HTTP-based API<a class=\"headerlink\" href=\"#testing-the-http-based-api\" title=\"Link to this heading\">#</a></h2><p>This section describes how to test the FastAPI endpoints provided by <code class=\"docutils literal notranslate\"><span class=\"pre\">collective.html2blocks</span></code>. These endpoints expose conversion logic over HTTP, allowing integration with external tools and migration workflows.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(`article.bd-article ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-end', maxWidth: 500, interactive: true,

            });
        };
    };
    console.log("tippy tips loaded!");
};
