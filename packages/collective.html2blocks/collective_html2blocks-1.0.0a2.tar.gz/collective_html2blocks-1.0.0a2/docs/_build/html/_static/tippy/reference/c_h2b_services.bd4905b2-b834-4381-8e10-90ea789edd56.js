selector_to_html = {"a[href=\"#module-collective.html2blocks.services.html\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">collective.html2blocks.services.html</span></code><a class=\"headerlink\" href=\"#module-collective.html2blocks.services.html\" title=\"Link to this heading\">#</a></h2><p>HTML conversion service for <code class=\"docutils literal notranslate\"><span class=\"pre\">collective.html2blocks</span></code>.</p><p>Provides API endpoints for converting HTML content to Volto blocks and block layout\ninformation. Includes endpoints for both simple block conversion and full Volto layout.</p>", "a[href=\"#collective.html2blocks.services.html.VoltoBody\"]": "<dt class=\"sig sig-object py\" id=\"collective.html2blocks.services.html.VoltoBody\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">collective.html2blocks.services.html.</span></span><span class=\"sig-name descname\"><span class=\"pre\">VoltoBody</span></span><a class=\"reference internal\" href=\"../_modules/collective/html2blocks/services/html.html#VoltoBody\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Request body model for HTML to Volto blocks conversion with layout.</p></dd>", "a[href=\"#collective.html2blocks.services.html.convert_html\"]": "<dt class=\"sig sig-object py\" id=\"collective.html2blocks.services.html.convert_html\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">async</span></span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">collective.html2blocks.services.html.</span></span><span class=\"sig-name descname\"><span class=\"pre\">convert_html</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">body</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><a class=\"reference internal\" href=\"#collective.html2blocks.services.html.HtmlBody\" title=\"collective.html2blocks.services.html.HtmlBody\"><span class=\"pre\">HtmlBody</span></a></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#list\" title=\"(in Python v3.13)\"><span class=\"pre\">list</span></a><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">VoltoBlock</span><span class=\"p\"><span class=\"pre\">]</span></span></span></span><a class=\"reference internal\" href=\"../_modules/collective/html2blocks/services/html.html#convert_html\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Convert HTML to blocks.</p><p>Converts the provided HTML content to a list of Volto blocks using the specified\nconverter.</p><p class=\"rubric\">Example</p></dd>", "a[href=\"#collective.html2blocks.services.html.VoltoBody.model_config\"]": "<dt class=\"sig sig-object py\" id=\"collective.html2blocks.services.html.VoltoBody.model_config\">\n<span class=\"sig-name descname\"><span class=\"pre\">model_config</span></span><em class=\"property\"><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"pre\">ClassVar</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">ConfigDict</span><span class=\"p\"><span class=\"pre\">]</span></span></em><em class=\"property\"><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"pre\">{}</span></em></dt><dd><p>Configuration for the model, should be a dictionary conforming to [<cite>ConfigDict</cite>][pydantic.config.ConfigDict].</p></dd>", "a[href=\"#collective.html2blocks.services.html.convert_to_volto\"]": "<dt class=\"sig sig-object py\" id=\"collective.html2blocks.services.html.convert_to_volto\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">collective.html2blocks.services.html.</span></span><span class=\"sig-name descname\"><span class=\"pre\">convert_to_volto</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">body</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><a class=\"reference internal\" href=\"#collective.html2blocks.services.html.VoltoBody\" title=\"collective.html2blocks.services.html.VoltoBody\"><span class=\"pre\">VoltoBody</span></a></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><span class=\"pre\">VoltoBlocksInfo</span></span></span><a class=\"reference internal\" href=\"../_modules/collective/html2blocks/services/html.html#convert_to_volto\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Convert HTML to Volto blocks and return blocks information.</p><p>Converts the provided HTML content to a Volto blocks structure, including\nblock layout.</p><p class=\"rubric\">Example</p></dd>", "a[href=\"#collective.html2blocks.services.info.root\"]": "<dt class=\"sig sig-object py\" id=\"collective.html2blocks.services.info.root\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">async</span></span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">collective.html2blocks.services.info.</span></span><span class=\"sig-name descname\"><span class=\"pre\">root</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.13)\"><span class=\"pre\">dict</span></a></span></span><a class=\"reference internal\" href=\"../_modules/collective/html2blocks/services/info.html#root\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Root endpoint for the HTML to Blocks service.</p><p>Returns a JSON object with service metadata including title, description,\nand version.</p><p class=\"rubric\">Example</p></dd>", "a[href=\"#collective.html2blocks.services.html.HtmlBody.converter\"]": "<dt class=\"sig sig-object py\" id=\"collective.html2blocks.services.html.HtmlBody.converter\">\n<span class=\"sig-name descname\"><span class=\"pre\">converter</span></span></dt><dd><p>The type of conversion to perform (default is <code class=\"docutils literal notranslate\"><span class=\"pre\">slate</span></code>).</p></dd>", "a[href=\"#collective.html2blocks.services.html.VoltoBody.html\"]": "<dt class=\"sig sig-object py\" id=\"collective.html2blocks.services.html.VoltoBody.html\">\n<span class=\"sig-name descname\"><span class=\"pre\">html</span></span></dt><dd><p>The HTML content to convert.</p></dd>", "a[href=\"#collective.html2blocks.services.healthcheck.healthcheck\"]": "<dt class=\"sig sig-object py\" id=\"collective.html2blocks.services.healthcheck.healthcheck\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">async</span></span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">collective.html2blocks.services.healthcheck.</span></span><span class=\"sig-name descname\"><span class=\"pre\">healthcheck</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">\u2192</span> <span class=\"sig-return-typehint\"><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.13)\"><span class=\"pre\">dict</span></a></span></span><a class=\"reference internal\" href=\"../_modules/collective/html2blocks/services/healthcheck.html#healthcheck\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Healthcheck endpoint for service status.</p><p>Returns a JSON object indicating the service is up.</p><p class=\"rubric\">Example</p></dd>", "a[href=\"#collective.html2blocks.services.html.HtmlBody\"]": "<dt class=\"sig sig-object py\" id=\"collective.html2blocks.services.html.HtmlBody\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">collective.html2blocks.services.html.</span></span><span class=\"sig-name descname\"><span class=\"pre\">HtmlBody</span></span><a class=\"reference internal\" href=\"../_modules/collective/html2blocks/services/html.html#HtmlBody\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Request body model for HTML to blocks conversion.</p></dd>", "a[href=\"#collective.html2blocks.services.html.HtmlBody.html\"]": "<dt class=\"sig sig-object py\" id=\"collective.html2blocks.services.html.HtmlBody.html\">\n<span class=\"sig-name descname\"><span class=\"pre\">html</span></span></dt><dd><p>The HTML content to convert.</p></dd>", "a[href=\"#collective.html2blocks.services.html.VoltoBody.additional_blocks\"]": "<dt class=\"sig sig-object py\" id=\"collective.html2blocks.services.html.VoltoBody.additional_blocks\">\n<span class=\"sig-name descname\"><span class=\"pre\">additional_blocks</span></span></dt><dd><p>Additional blocks to include.</p></dd>", "a[href=\"#collective.html2blocks.services.html.VoltoBody.default_blocks\"]": "<dt class=\"sig sig-object py\" id=\"collective.html2blocks.services.html.VoltoBody.default_blocks\">\n<span class=\"sig-name descname\"><span class=\"pre\">default_blocks</span></span></dt><dd><p>Default blocks to include.</p></dd>", "a[href=\"#collective.html2blocks.services.html.HtmlBody.model_config\"]": "<dt class=\"sig sig-object py\" id=\"collective.html2blocks.services.html.HtmlBody.model_config\">\n<span class=\"sig-name descname\"><span class=\"pre\">model_config</span></span><em class=\"property\"><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"pre\">ClassVar</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">ConfigDict</span><span class=\"p\"><span class=\"pre\">]</span></span></em><em class=\"property\"><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"pre\">{}</span></em></dt><dd><p>Configuration for the model, should be a dictionary conforming to [<cite>ConfigDict</cite>][pydantic.config.ConfigDict].</p></dd>", "a[href=\"#module-collective.html2blocks.services.info\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">collective.html2blocks.services.info</span></code><a class=\"headerlink\" href=\"#module-collective.html2blocks.services.info\" title=\"Link to this heading\">#</a></h2><p>Info service for <code class=\"docutils literal notranslate\"><span class=\"pre\">collective.html2blocks</span></code>.</p><p>Provides the root endpoint with basic information about the API service, including\nits title, description, and version.</p>", "a[href=\"#collective.html2blocks.services.add_process_time_header\"]": "<dt class=\"sig sig-object py\" id=\"collective.html2blocks.services.add_process_time_header\">\n<em class=\"property\"><span class=\"k\"><span class=\"pre\">async</span></span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">collective.html2blocks.services.</span></span><span class=\"sig-name descname\"><span class=\"pre\">add_process_time_header</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">request</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Request</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">call_next</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../_modules/collective/html2blocks/services.html#add_process_time_header\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a></dt><dd><p>Middleware to attach <code class=\"docutils literal notranslate\"><span class=\"pre\">X-Process-Time</span></code> header to each response.</p><p>This middleware measures the time taken to process each HTTP request and\nadds the result as an <code class=\"docutils literal notranslate\"><span class=\"pre\">X-Process-Time</span></code> header in the response.</p><p class=\"rubric\">Example</p></dd>", "a[href=\"#module-collective.html2blocks.services\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">collective.html2blocks.services</span></code><a class=\"headerlink\" href=\"#module-collective.html2blocks.services\" title=\"Link to this heading\">#</a></h1><p>FastAPI application setup for <code class=\"docutils literal notranslate\"><span class=\"pre\">collective.html2blocks</span></code> services.</p><p>This module initializes the FastAPI app, includes routers for healthcheck,\nHTML conversion, and info endpoints, and adds middleware for request timing.</p>", "a[href=\"#module-collective.html2blocks.services.healthcheck\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">collective.html2blocks.services.healthcheck</span></code><a class=\"headerlink\" href=\"#module-collective.html2blocks.services.healthcheck\" title=\"Link to this heading\">#</a></h2><p>Healthcheck service for <code class=\"docutils literal notranslate\"><span class=\"pre\">collective.html2blocks</span></code>.</p><p>Provides a simple endpoint to verify that the API service is running and healthy.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(`article.bd-article ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-end', maxWidth: 500, interactive: true,

            });
        };
    };
    console.log("tippy tips loaded!");
};
