selector_to_html = {"a[href=\"#convert\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">convert</span></code><a class=\"headerlink\" href=\"#convert\" title=\"Link to this heading\">#</a></h2><p>This command reads the HTML file at <code class=\"docutils literal notranslate\"><span class=\"pre\">SRC</span></code>, converts its contents to a JSON representing Volto block information (containing the <code class=\"docutils literal notranslate\"><span class=\"pre\">{term}</span></code>blocks<code class=\"docutils literal notranslate\"><span class=\"pre\">and</span></code><a class=\"reference internal\" href=\"../glossary.html#term-blocks_layout\"><span class=\"xref std std-term\">blocks_layout</span></a> keys) using the package's <a class=\"reference internal\" href=\"../glossary.html#term-Converter\"><span class=\"xref std std-term\">Converter</span></a>, and writes the result as JSON to <code class=\"docutils literal notranslate\"><span class=\"pre\">DST</span></code>.</p><p>Example usage, having a file named <code class=\"file docutils literal notranslate\"><span class=\"pre\">input.html</span></code>:</p>", "a[href=\"../glossary.html#term-CLI\"]": "<dt id=\"term-CLI\">CLI</dt><dd><p>Command-Line Interface. A program that is operated by typing commands into a terminal or shell, rather than using a graphical user interface (GUI).</p></dd>", "a[href=\"#info\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">info</span></code><a class=\"headerlink\" href=\"#info\" title=\"Link to this heading\">#</a></h3><p>This command displays information about the <code class=\"docutils literal notranslate\"><span class=\"pre\">collective.html2blocks</span></code> package and all converter <a class=\"reference internal\" href=\"../glossary.html#term-Registration\"><span class=\"xref std std-term\">Registration</span></a>.</p>", "a[href=\"../glossary.html#term-OpenAPI\"]": "<dt id=\"term-OpenAPI\">OpenAPI</dt><dd><p><a class=\"reference external\" href=\"https://www.openapis.org/\">OpenAPI</a> is a specification for describing RESTful APIs, enabling automatic documentation, client generation, and validation.</p></dd>", "a[href=\"../glossary.html#term-Registration\"]": "<dt id=\"term-Registration\">Registration</dt><dd><p>The process of making a converter, block, or other component available to the system, typically by adding it to a registry or configuration.</p></dd>", "a[href=\"#html2blocks-command-line-application\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">html2blocks</span></code> command line application<a class=\"headerlink\" href=\"#html2blocks-command-line-application\" title=\"Link to this heading\">#</a></h1><p>Installing <code class=\"docutils literal notranslate\"><span class=\"pre\">collective.html2blocks</span></code> in your project will provide you with a new <a class=\"reference internal\" href=\"../glossary.html#term-CLI\"><span class=\"xref std std-term\">CLI</span></a> application named <code class=\"docutils literal notranslate\"><span class=\"pre\">html2blocks</span></code>.</p><p>You can either:</p>", "a[href=\"../glossary.html#term-Typer\"]": "<dt id=\"term-Typer\">Typer</dt><dd><p><a class=\"reference external\" href=\"https://typer.tiangolo.com/\">Typer</a> is a Python library for building command-line interfaces (CLIs) using type hints, automatic help generation, and minimal code.</p></dd>", "a[href=\"#commands\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Commands<a class=\"headerlink\" href=\"#commands\" title=\"Link to this heading\">#</a></h2><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">html2blocks</span></code> application provides three commands: <code class=\"docutils literal notranslate\"><span class=\"pre\">info</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">convert</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">server</span></code>.</p>", "a[href=\"../glossary.html#term-blocks_layout\"]": "<dt id=\"term-blocks_layout\">blocks_layout</dt><dd><p>The structure that defines the order and arrangement of blocks within a Volto page or content item. It is usually represented as a JSON object.</p></dd>", "a[href=\"../glossary.html#term-Converter\"]": "<dt id=\"term-Converter\">Converter</dt><dd><p>In <code class=\"docutils literal notranslate\"><span class=\"pre\">collective.html2blocks</span></code>, a converter is a component or function that transforms HTML content into Volto blocks or other structured formats.</p></dd>", "a[href=\"#application-help\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Application help<a class=\"headerlink\" href=\"#application-help\" title=\"Link to this heading\">#</a></h2><p>After running <code class=\"docutils literal notranslate\"><span class=\"pre\">uv</span> <span class=\"pre\">run</span> <span class=\"pre\">html2blocks</span></code>, you'll be presented with a list of options and commands available in the tool, powered by <a class=\"reference internal\" href=\"../glossary.html#term-Typer\"><span class=\"xref std std-term\">Typer</span></a>:</p>", "a[href=\"#server\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">server</span></code><a class=\"headerlink\" href=\"#server\" title=\"Link to this heading\">#</a></h2><p>This command starts a <a class=\"reference internal\" href=\"../glossary.html#term-Uvicorn\"><span class=\"xref std std-term\">Uvicorn</span></a> server hosting the FastAPI app for converting HTML to Volto blocks. You can customize the host, port, and enable reload for development.</p>", "a[href=\"../glossary.html#term-Uvicorn\"]": "<dt id=\"term-Uvicorn\">Uvicorn</dt><dd><p><a class=\"reference external\" href=\"https://www.uvicorn.org/\">Uvicorn</a> is a lightning-fast ASGI server implementation for Python, commonly used to run FastAPI applications.</p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(`article.bd-article ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-end', maxWidth: 500, interactive: true,

            });
        };
    };
    console.log("tippy tips loaded!");
};
