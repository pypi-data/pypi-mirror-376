# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 challenge_id: pulumi.Input[_builtins.str],
                 source_id: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[_builtins.str] challenge_id: The challenge to provision an instance of.
        :param pulumi.Input[_builtins.str] source_id: The source of whom to provision an instance for.
        """
        pulumi.set(__self__, "challenge_id", challenge_id)
        pulumi.set(__self__, "source_id", source_id)

    @_builtins.property
    @pulumi.getter(name="challengeId")
    def challenge_id(self) -> pulumi.Input[_builtins.str]:
        """
        The challenge to provision an instance of.
        """
        return pulumi.get(self, "challenge_id")

    @challenge_id.setter
    def challenge_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "challenge_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> pulumi.Input[_builtins.str]:
        """
        The source of whom to provision an instance for.
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source_id", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 challenge_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[_builtins.str] challenge_id: The challenge to provision an instance of.
        :param pulumi.Input[_builtins.str] source_id: The source of whom to provision an instance for.
        """
        if challenge_id is not None:
            pulumi.set(__self__, "challenge_id", challenge_id)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)

    @_builtins.property
    @pulumi.getter(name="challengeId")
    def challenge_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The challenge to provision an instance of.
        """
        return pulumi.get(self, "challenge_id")

    @challenge_id.setter
    def challenge_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "challenge_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The source of whom to provision an instance for.
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_id", value)


@pulumi.type_token("ctfdcm:index/instance:Instance")
class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 challenge_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        CTFd is built around the Challenge resource, which contains all the attributes to define a part of the Capture The Flag event.

        This implementation has support of On Demand infrastructures through [Chall-Manager](https://github.com/ctfer-io/chall-manager).

        ## Example Usage

        ```python
        import pulumi
        import ctfer-io_pulumi-ctfdcm as ctfdcm
        import pulumi_ctfd as ctfd

        chall = ctfdcm.ChallengeDynamicIaC("chall",
            category="cat",
            description="...",
            value=500,
            decay=20,
            minimum=50,
            state="visible",
            shared=True,
            scenario="localhost:5000/some/scenario:v0.1.0")
        pandatix = ctfd.index.Ctfd_user("pandatix",
            name=PandatiX,
            email=lucastesson@protonmail.com,
            password=password)
        ctfer = ctfd.index.Ctfd_team("ctfer",
            name=CTFer.io,
            email=ctfer-io@protonmail.com,
            password=ctfer,
            members=[pandatix.id],
            captain=pandatix.id)
        ist = ctfdcm.Instance("ist",
            challenge_id=chall.id,
            source_id=ctfer["id"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] challenge_id: The challenge to provision an instance of.
        :param pulumi.Input[_builtins.str] source_id: The source of whom to provision an instance for.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        CTFd is built around the Challenge resource, which contains all the attributes to define a part of the Capture The Flag event.

        This implementation has support of On Demand infrastructures through [Chall-Manager](https://github.com/ctfer-io/chall-manager).

        ## Example Usage

        ```python
        import pulumi
        import ctfer-io_pulumi-ctfdcm as ctfdcm
        import pulumi_ctfd as ctfd

        chall = ctfdcm.ChallengeDynamicIaC("chall",
            category="cat",
            description="...",
            value=500,
            decay=20,
            minimum=50,
            state="visible",
            shared=True,
            scenario="localhost:5000/some/scenario:v0.1.0")
        pandatix = ctfd.index.Ctfd_user("pandatix",
            name=PandatiX,
            email=lucastesson@protonmail.com,
            password=password)
        ctfer = ctfd.index.Ctfd_team("ctfer",
            name=CTFer.io,
            email=ctfer-io@protonmail.com,
            password=ctfer,
            members=[pandatix.id],
            captain=pandatix.id)
        ist = ctfdcm.Instance("ist",
            challenge_id=chall.id,
            source_id=ctfer["id"])
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 challenge_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            if challenge_id is None and not opts.urn:
                raise TypeError("Missing required property 'challenge_id'")
            __props__.__dict__["challenge_id"] = challenge_id
            if source_id is None and not opts.urn:
                raise TypeError("Missing required property 'source_id'")
            __props__.__dict__["source_id"] = source_id
        super(Instance, __self__).__init__(
            'ctfdcm:index/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            challenge_id: Optional[pulumi.Input[_builtins.str]] = None,
            source_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] challenge_id: The challenge to provision an instance of.
        :param pulumi.Input[_builtins.str] source_id: The source of whom to provision an instance for.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["challenge_id"] = challenge_id
        __props__.__dict__["source_id"] = source_id
        return Instance(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="challengeId")
    def challenge_id(self) -> pulumi.Output[_builtins.str]:
        """
        The challenge to provision an instance of.
        """
        return pulumi.get(self, "challenge_id")

    @_builtins.property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> pulumi.Output[_builtins.str]:
        """
        The source of whom to provision an instance for.
        """
        return pulumi.get(self, "source_id")

