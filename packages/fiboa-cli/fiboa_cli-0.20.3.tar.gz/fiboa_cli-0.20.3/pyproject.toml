[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fiboa-cli"
version = "0.20.3"
description = "CLI tools such as validation and file format conversion for fiboa."
readme = "README.md"
license = "Apache-2.0"
authors = [
    {name = "Matthias Mohr"},
    {name = "Ivor Bosloper"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.10"
dependencies = [
    "vecorel-cli==0.2.8"
]

[project.scripts]
fiboa = "fiboa_cli.cli.setup:run"

[project.urls]
"Homepage" = "https://github.com/fiboa/cli"
"Bug Reports" = "https://github.com/fiboa/cli/issues"
"Source" = "https://github.com/fiboa/cli"

[tool.setuptools.packages.find]
include = ["fiboa_cli*"]

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]

[tool.pixi.dependencies]
python = ">=3.10"
pyproj = ">=3.6,<4.0"
# rar is a bit difficult. vecorel-cli needs it for extracting some rar files in converters
# but needs a rar cmd tool, which we need to install from conda explictly.
unrar = ">=0.4"

[tool.pixi.pypi-dependencies]
# Editable install of the project itself
fiboa-cli = {path = ".", editable = true}

[tool.pixi.feature.dev.dependencies]
pytest = ">=8.4.1,<9.0.0"
pytest-cov = ">=6.0.0,<7.0.0"
pre-commit = ">=4.2.0,<5.0.0"
ruff = "==0.12.8"

[tool.pixi.feature.dev.pypi-dependencies]
build = ">=1.0.0,<2.0.0"

[tool.pixi.feature.cloud.dependencies]
s3fs = "==2025.7.0"
gcsfs = "==2025.7.0"

[tool.pixi.environments]
default = {solve-group = "default"}
dev = {features = ["dev"], solve-group = "default"}
cloud = {features = ["cloud"], solve-group = "default"}
all = {features = ["dev", "cloud"], solve-group = "default"}

[tool.pixi.tasks]
# Development tasks
install-dev = "pip install -e ."
test = "pytest --cov=fiboa_cli --cov-report=term-missing --cov-report=html --cov-report=xml"
lint = "ruff check --fix"
format = "ruff format"
check = {depends-on = ["lint", "format", "test"]}
build = "python -m build"

# Pre-commit tasks
pre-commit-install = "pre-commit install"
pre-commit-run = "pre-commit run --all-files"

# CLI entry point
fiboa = "fiboa"

[tool.ruff]
exclude = [
    ".eggs",
    ".git",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "__pypackages__",
    "build",
    "dist",
    "site-packages",
    "tests/datasets/invalid_*.py",
]

line-length = 100
indent-width = 4

target-version = "py310"

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "W", "I", "NPY201"]  # "C901"
ignore = []

fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

docstring-code-format = false
docstring-code-line-length = "dynamic"

[tool.coverage.run]
source = ["fiboa_cli"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/.*",
]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = false
precision = 2
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
