from ..cfg import Modifier as Modifier, ModifierKey as ModifierKey
from ..domain import Config as Config, Emitter as Emitter, NodeInfo as NodeInfo, NodeKind as NodeKind
from _typeshed import Incomplete as Incomplete
from collections.abc import Callable as Callable, Iterable, Mapping

Keywords: Incomplete

class CSharpEmitter(Emitter):
    usings: Incomplete
    assert_: Incomplete
    modifiers: dict[ModifierKey, Modifier]
    node_kinds: Incomplete
    def __init__(self, cfg: Config) -> None: ...
    def intro(self) -> None: ...
    def enter_node(self, lvl: int, parent: NodeInfo | None, node: NodeInfo, implements: Mapping[str, NodeKind], props: Mapping[str, str]): ...
    def exit_node(self, lvl: int): ...
    def conclusion(self) -> None: ...
    def argument(self, name_transformer: Callable[[str], str]): ...
    def put_assignment(self, lvl: int, name: str, type: str): ...
    def put_prop(self, lvl: int, owner: str, name: str, type: str, access: str = '', put_init: bool = False): ...
    def real_type(self, type: str) -> str: ...
    def validation_expr(self, name: str, type: str): ...
    def requires_validation(self, type: str): ...

def base_type_list(bases: Iterable[str]): ...
def camel_ident(name: str): ...
