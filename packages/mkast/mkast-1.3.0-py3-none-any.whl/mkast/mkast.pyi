from .domain import AstNode as AstNode, AstUnionNode as AstUnionNode, Config as Config, Emitter as Emitter, NodeInfo as NodeInfo
from collections.abc import Iterable, Mapping, Set as Set
from typing import TypeGuard

def get_emitter(cfg: Config) -> Emitter | None: ...
def register_emitter(key: str, cls: type[Emitter]) -> type[Emitter]: ...
def unregister_emitter(key: str) -> type[Emitter] | None: ...
def generate_ast(cfg: Config, ast: AstUnionNode, emitter: Emitter | None = None): ...
def walk(emitter: Emitter, lvl: int, parent: NodeInfo | None, reachable_nodes: AstUnionNode, name: str, node: AstNode): ...
def check_type(known_types: Set[str], reachable_nodes: AstUnionNode, ptype: str) -> bool: ...
def subnodes(node: AstNode) -> AstUnionNode: ...
def in_unions(reachable_nodes: Mapping[str, AstNode], name: str) -> Iterable[str]: ...
def node_is_union(node: AstNode) -> TypeGuard[AstUnionNode]: ...
