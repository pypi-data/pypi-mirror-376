[tool.poetry]
license = "MIT"
include = ["LICENSE"]
name = "soccer-cv"
version = "0.1.5"
description = "Soccer CV library"
authors = ["Grant Hohol <ghohol@wisc.edu>"]
readme = "README.md"
packages = [{ include = "soccer_cv", from = "src" }]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Operating System :: POSIX :: Linux",
  "Topic :: Scientific/Engineering :: Image Processing",
]

[tool.poetry.urls]
"Homepage" = "https://github.com/granthohol/soccer-cv"
"Source"   = "https://github.com/granthohol/soccer-cv"
"Issues"   = "https://github.com/granthohol/soccer-cv/issues"


[tool.poetry.dependencies]
python = ">=3.10,<3.13"

# Core runtime deps (no torch here)
numpy = ">=2,<2.3.0"
opencv-python-headless = ">=4.10.0.84,<5.0.0"
tqdm = ">=4.67.1,<5.0.0"
ultralytics = ">=8.3.176,<9.0.0"
supervision = ">=0.26.1,<0.27.0"
huggingface_hub = ">=0.34.4,<0.35.0"
roboflow = "^1.2.3"

# Optional bits
PyYAML = { version = ">=6.0", optional = true }
pandas = { version = "^2.3.2", optional = true }
pyarrow = { version = "^21.0.0", optional = true }
pytest = { version = "^8.4.1", optional = true }

# Torch/TV optional so users can choose backend
torch = { version = ">=2.4.1,<3", optional = true }
torchvision = { version = ">=0.19.1,<1", optional = true }
tabulate = "^0.9.0"

[tool.poetry.extras]
# Works with pip on Linux/Windows/mac for CPU-only
cpu = ["torch", "torchvision"]

# Works with pip on macOS â€“ the standard PyPI torch wheel includes MPS
mps = ["torch", "torchvision", "PyYAML"]  # YAML optional, toss it here if you like

# CUDA extra is just a label (pip cannot switch indexes automatically).
# Keep it for UX/README clarity; users still install CUDA wheels in a second step.
cuda = ["PyYAML"]  # (no torch here on purpose)

# Data convenience
data = ["pandas", "pyarrow"]

# Dev convenience
dev = ["pytest"]

# Everything except CUDA wheels (which must be installed manually by the user)
all = ["PyYAML", "pandas", "pyarrow", "pytest"]

# ---------- Poetry-only convenience (ignored by pip) ----------
# If users install via Poetry (from source), these sources let *you* offer CUDA extras.
[[tool.poetry.source]]
name = "pytorch-cu121"
url = "https://download.pytorch.org/whl/cu121"
priority = "supplemental"

[tool.poetry.group.cuda121.dependencies]
# poetry users can do: `poetry install --with cuda121`
torch = { version = "2.4.1", source = "pytorch-cu121" }
torchvision = { version = "0.19.1", source = "pytorch-cu121" }

[build-system]
requires = ["poetry-core>=1.8.0"]
build-backend = "poetry.core.masonry.api"
