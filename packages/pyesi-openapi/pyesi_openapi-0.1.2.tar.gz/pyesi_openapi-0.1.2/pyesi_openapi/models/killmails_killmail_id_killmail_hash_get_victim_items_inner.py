# coding: utf-8

"""
    PyESI (OpenAPI) - EVE Stable Infrastructure (ESI)

    This python SDK was generated with openapi-generator (https://openapi-generator.tech/) using OpenAPI specification for EVE Stable Infrastructure / EVE Swagger Interface (ESI) (https://developers.eveonline.com/api-explorer)and is lightly normalized to improve client generation via our custom templates. It preserves endpoint coverage from CCP's published specification while adjusting metadata and select parameter shapes for a more ergonomic, type-safe Python SDK.

    The version of the OpenAPI document: 2020-01-01
    Contact: arxbombus@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from pyesi_openapi.models.killmails_killmail_id_killmail_hash_get_victim_items_inner_items_inner import KillmailsKillmailIdKillmailHashGetVictimItemsInnerItemsInner
from typing import Optional, Set
from typing_extensions import Self

class KillmailsKillmailIdKillmailHashGetVictimItemsInner(BaseModel):
    """
    item object
    """ # noqa: E501
    flag: StrictInt = Field(description="Flag for the location of the item ")
    item_type_id: StrictInt
    items: Optional[List[KillmailsKillmailIdKillmailHashGetVictimItemsInnerItemsInner]] = None
    quantity_destroyed: Optional[StrictInt] = Field(default=None, description="How many of the item were destroyed if any ")
    quantity_dropped: Optional[StrictInt] = Field(default=None, description="How many of the item were dropped if any ")
    singleton: StrictInt
    __properties: ClassVar[List[str]] = ["flag", "item_type_id", "items", "quantity_destroyed", "quantity_dropped", "singleton"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KillmailsKillmailIdKillmailHashGetVictimItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KillmailsKillmailIdKillmailHashGetVictimItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "flag": obj.get("flag"),
            "item_type_id": obj.get("item_type_id"),
            "items": [KillmailsKillmailIdKillmailHashGetVictimItemsInnerItemsInner.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "quantity_destroyed": obj.get("quantity_destroyed"),
            "quantity_dropped": obj.get("quantity_dropped"),
            "singleton": obj.get("singleton")
        })
        return _obj


