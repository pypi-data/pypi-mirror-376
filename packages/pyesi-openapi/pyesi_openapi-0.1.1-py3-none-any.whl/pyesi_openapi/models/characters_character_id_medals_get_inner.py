# coding: utf-8

"""
    PyESI (OpenAPI) - EVE Stable Infrastructure (ESI)

    This python SDK was generated with openapi-generator (https://openapi-generator.tech/) using OpenAPI specification for EVE Stable Infrastructure / EVE Swagger Interface (ESI) (https://developers.eveonline.com/api-explorer)and is lightly normalized to improve client generation via our custom templates. It preserves endpoint coverage from CCP's published specification while adjusting metadata and select parameter shapes for a more ergonomic, type-safe Python SDK.

    The version of the OpenAPI document: 2020-01-01
    Contact: arxbombus@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from pyesi_openapi.models.characters_character_id_medals_get_inner_graphics_inner import CharactersCharacterIdMedalsGetInnerGraphicsInner
from typing import Optional, Set
from typing_extensions import Self

class CharactersCharacterIdMedalsGetInner(BaseModel):
    """
    CharactersCharacterIdMedalsGetInner
    """ # noqa: E501
    corporation_id: StrictInt
    var_date: datetime = Field(alias="date")
    description: StrictStr
    graphics: List[CharactersCharacterIdMedalsGetInnerGraphicsInner]
    issuer_id: StrictInt
    medal_id: StrictInt
    reason: StrictStr
    status: StrictStr
    title: StrictStr
    __properties: ClassVar[List[str]] = ["corporation_id", "date", "description", "graphics", "issuer_id", "medal_id", "reason", "status", "title"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['public', 'private']):
            raise ValueError("must be one of enum values ('public', 'private')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CharactersCharacterIdMedalsGetInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in graphics (list)
        _items = []
        if self.graphics:
            for _item_graphics in self.graphics:
                if _item_graphics:
                    _items.append(_item_graphics.to_dict())
            _dict['graphics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CharactersCharacterIdMedalsGetInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "corporation_id": obj.get("corporation_id"),
            "date": obj.get("date"),
            "description": obj.get("description"),
            "graphics": [CharactersCharacterIdMedalsGetInnerGraphicsInner.from_dict(_item) for _item in obj["graphics"]] if obj.get("graphics") is not None else None,
            "issuer_id": obj.get("issuer_id"),
            "medal_id": obj.get("medal_id"),
            "reason": obj.get("reason"),
            "status": obj.get("status"),
            "title": obj.get("title")
        })
        return _obj


