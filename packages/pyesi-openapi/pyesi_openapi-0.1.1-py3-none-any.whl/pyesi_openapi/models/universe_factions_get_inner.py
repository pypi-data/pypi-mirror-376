# coding: utf-8

"""
    PyESI (OpenAPI) - EVE Stable Infrastructure (ESI)

    This python SDK was generated with openapi-generator (https://openapi-generator.tech/) using OpenAPI specification for EVE Stable Infrastructure / EVE Swagger Interface (ESI) (https://developers.eveonline.com/api-explorer)and is lightly normalized to improve client generation via our custom templates. It preserves endpoint coverage from CCP's published specification while adjusting metadata and select parameter shapes for a more ergonomic, type-safe Python SDK.

    The version of the OpenAPI document: 2020-01-01
    Contact: arxbombus@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class UniverseFactionsGetInner(BaseModel):
    """
    UniverseFactionsGetInner
    """ # noqa: E501
    corporation_id: Optional[StrictInt] = None
    description: StrictStr
    faction_id: StrictInt
    is_unique: StrictBool
    militia_corporation_id: Optional[StrictInt] = None
    name: StrictStr
    size_factor: Union[StrictFloat, StrictInt]
    solar_system_id: Optional[StrictInt] = None
    station_count: StrictInt
    station_system_count: StrictInt
    __properties: ClassVar[List[str]] = ["corporation_id", "description", "faction_id", "is_unique", "militia_corporation_id", "name", "size_factor", "solar_system_id", "station_count", "station_system_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UniverseFactionsGetInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UniverseFactionsGetInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "corporation_id": obj.get("corporation_id"),
            "description": obj.get("description"),
            "faction_id": obj.get("faction_id"),
            "is_unique": obj.get("is_unique"),
            "militia_corporation_id": obj.get("militia_corporation_id"),
            "name": obj.get("name"),
            "size_factor": obj.get("size_factor"),
            "solar_system_id": obj.get("solar_system_id"),
            "station_count": obj.get("station_count"),
            "station_system_count": obj.get("station_system_count")
        })
        return _obj


