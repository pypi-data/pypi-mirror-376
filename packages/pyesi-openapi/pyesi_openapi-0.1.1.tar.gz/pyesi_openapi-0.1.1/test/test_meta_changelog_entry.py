# coding: utf-8

"""
    PyESI (OpenAPI) - EVE Stable Infrastructure (ESI)

    This OpenAPI document mirrors the EVE Swagger Interface (ESI) and is lightly normalized to improve client generation via our custom templates. It preserves endpoint coverage from CCP's published specification while adjusting metadata and select parameter shapes for a more ergonomic, type-safe Python SDK.

    The version of the OpenAPI document: 2020-01-01
    Contact: arxbombus@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pyesi_openapi.models.meta_changelog_entry import MetaChangelogEntry

class TestMetaChangelogEntry(unittest.TestCase):
    """MetaChangelogEntry unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MetaChangelogEntry:
        """Test MetaChangelogEntry
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MetaChangelogEntry`
        """
        model = MetaChangelogEntry()
        if include_optional:
            return MetaChangelogEntry(
                compatibility_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                description = '',
                is_breaking = True,
                method = 'GET',
                path = ''
            )
        else:
            return MetaChangelogEntry(
                compatibility_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                description = '',
                is_breaking = True,
                method = 'GET',
                path = '',
        )
        """

    def testMetaChangelogEntry(self):
        """Test MetaChangelogEntry"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
