# coding: utf-8

"""
    PyESI (OpenAPI) - EVE Stable Infrastructure (ESI)

    This python SDK was generated with openapi-generator (https://openapi-generator.tech/) using OpenAPI specification for EVE Stable Infrastructure / EVE Swagger Interface (ESI) (https://developers.eveonline.com/api-explorer)and is lightly normalized to improve client generation via our custom templates. It preserves endpoint coverage from CCP's published specification while adjusting metadata and select parameter shapes for a more ergonomic, type-safe Python SDK.

    The version of the OpenAPI document: 2020-01-01
    Contact: arxbombus@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UniverseGraphicsGraphicIdGet(BaseModel):
    """
    UniverseGraphicsGraphicIdGet
    """ # noqa: E501
    collision_file: Optional[StrictStr] = None
    graphic_file: Optional[StrictStr] = None
    graphic_id: StrictInt
    icon_folder: Optional[StrictStr] = None
    sof_dna: Optional[StrictStr] = None
    sof_fation_name: Optional[StrictStr] = None
    sof_hull_name: Optional[StrictStr] = None
    sof_race_name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["collision_file", "graphic_file", "graphic_id", "icon_folder", "sof_dna", "sof_fation_name", "sof_hull_name", "sof_race_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UniverseGraphicsGraphicIdGet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UniverseGraphicsGraphicIdGet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "collision_file": obj.get("collision_file"),
            "graphic_file": obj.get("graphic_file"),
            "graphic_id": obj.get("graphic_id"),
            "icon_folder": obj.get("icon_folder"),
            "sof_dna": obj.get("sof_dna"),
            "sof_fation_name": obj.get("sof_fation_name"),
            "sof_hull_name": obj.get("sof_hull_name"),
            "sof_race_name": obj.get("sof_race_name")
        })
        return _obj


