
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_result_or_op_results as _get_op_result_or_op_results,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir
_ods_cext.globals.register_traceback_file_exclusion(__file__)

import builtins
from typing import Sequence as _Sequence, Union as _Union


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "verif"

@_ods_cext.register_operation(_Dialect)
class AssertOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.assert"

  _ODS_REGIONS = (0, True)

  def __init__(self, property, *, enable=None, label=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(property)
    if enable is not None: operands.append(enable)
    _ods_context = _ods_get_default_loc_context(loc)
    if label is not None: attributes["label"] = (label if (
        isinstance(label, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(label, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def property(self):
    return self.operation.operands[0]

  @builtins.property
  def enable(self):
    return None if len(self.operation.operands) < 2 else self.operation.operands[1]

  @builtins.property
  def label(self):
    if "label" not in self.operation.attributes:
      return None
    return self.operation.attributes["label"]

  @label.setter
  def label(self, value):
    if value is not None:
      self.operation.attributes["label"] = value
    elif "label" in self.operation.attributes:
      del self.operation.attributes["label"]

  @label.deleter
  def label(self):
    del self.operation.attributes["label"]

def assert_(property, *, enable=None, label=None, loc=None, ip=None) -> _ods_ir.Operation:
  return AssertOp(property=property, enable=enable, label=label, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class AssumeOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.assume"

  _ODS_REGIONS = (0, True)

  def __init__(self, property, *, enable=None, label=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(property)
    if enable is not None: operands.append(enable)
    _ods_context = _ods_get_default_loc_context(loc)
    if label is not None: attributes["label"] = (label if (
        isinstance(label, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(label, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def property(self):
    return self.operation.operands[0]

  @builtins.property
  def enable(self):
    return None if len(self.operation.operands) < 2 else self.operation.operands[1]

  @builtins.property
  def label(self):
    if "label" not in self.operation.attributes:
      return None
    return self.operation.attributes["label"]

  @label.setter
  def label(self, value):
    if value is not None:
      self.operation.attributes["label"] = value
    elif "label" in self.operation.attributes:
      del self.operation.attributes["label"]

  @label.deleter
  def label(self):
    del self.operation.attributes["label"]

def assume(property, *, enable=None, label=None, loc=None, ip=None) -> _ods_ir.Operation:
  return AssumeOp(property=property, enable=enable, label=label, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class BoundedModelCheckingOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.bmc"

  _ODS_REGIONS = (3, True)

  def __init__(self, result, bound, num_regs, initial_values, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["bound"] = (bound if (
    isinstance(bound, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(bound, context=_ods_context))
    attributes["num_regs"] = (num_regs if (
    isinstance(num_regs, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(num_regs, context=_ods_context))
    attributes["initial_values"] = (initial_values if (
    isinstance(initial_values, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(initial_values, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def bound(self):
    return self.operation.attributes["bound"]

  @bound.setter
  def bound(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["bound"] = value

  @builtins.property
  def num_regs(self):
    return self.operation.attributes["num_regs"]

  @num_regs.setter
  def num_regs(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["num_regs"] = value

  @builtins.property
  def initial_values(self):
    return self.operation.attributes["initial_values"]

  @initial_values.setter
  def initial_values(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["initial_values"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

  @builtins.property
  def init(self):
    return self.regions[0]

  @builtins.property
  def loop(self):
    return self.regions[1]

  @builtins.property
  def circuit(self):
    return self.regions[2]

def bmc(result, bound, num_regs, initial_values, *, loc=None, ip=None) -> _ods_ir.Value:
  return BoundedModelCheckingOp(result=result, bound=bound, num_regs=num_regs, initial_values=initial_values, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class ClockedAssertOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.clocked_assert"

  _ODS_REGIONS = (0, True)

  def __init__(self, property, edge, clock, *, enable=None, label=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(property)
    operands.append(clock)
    if enable is not None: operands.append(enable)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["edge"] = (edge if (
    isinstance(edge, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ClockEdgeAttr')) else
      _ods_ir.AttrBuilder.get('ClockEdgeAttr')(edge, context=_ods_context))
    if label is not None: attributes["label"] = (label if (
        isinstance(label, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(label, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def property(self):
    return self.operation.operands[0]

  @builtins.property
  def clock(self):
    return self.operation.operands[1]

  @builtins.property
  def enable(self):
    return None if len(self.operation.operands) < 3 else self.operation.operands[2]

  @builtins.property
  def edge(self):
    return self.operation.attributes["edge"]

  @edge.setter
  def edge(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["edge"] = value

  @builtins.property
  def label(self):
    if "label" not in self.operation.attributes:
      return None
    return self.operation.attributes["label"]

  @label.setter
  def label(self, value):
    if value is not None:
      self.operation.attributes["label"] = value
    elif "label" in self.operation.attributes:
      del self.operation.attributes["label"]

  @label.deleter
  def label(self):
    del self.operation.attributes["label"]

def clocked_assert(property, edge, clock, *, enable=None, label=None, loc=None, ip=None) -> _ods_ir.Operation:
  return ClockedAssertOp(property=property, edge=edge, clock=clock, enable=enable, label=label, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ClockedAssumeOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.clocked_assume"

  _ODS_REGIONS = (0, True)

  def __init__(self, property, edge, clock, *, enable=None, label=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(property)
    operands.append(clock)
    if enable is not None: operands.append(enable)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["edge"] = (edge if (
    isinstance(edge, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ClockEdgeAttr')) else
      _ods_ir.AttrBuilder.get('ClockEdgeAttr')(edge, context=_ods_context))
    if label is not None: attributes["label"] = (label if (
        isinstance(label, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(label, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def property(self):
    return self.operation.operands[0]

  @builtins.property
  def clock(self):
    return self.operation.operands[1]

  @builtins.property
  def enable(self):
    return None if len(self.operation.operands) < 3 else self.operation.operands[2]

  @builtins.property
  def edge(self):
    return self.operation.attributes["edge"]

  @edge.setter
  def edge(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["edge"] = value

  @builtins.property
  def label(self):
    if "label" not in self.operation.attributes:
      return None
    return self.operation.attributes["label"]

  @label.setter
  def label(self, value):
    if value is not None:
      self.operation.attributes["label"] = value
    elif "label" in self.operation.attributes:
      del self.operation.attributes["label"]

  @label.deleter
  def label(self):
    del self.operation.attributes["label"]

def clocked_assume(property, edge, clock, *, enable=None, label=None, loc=None, ip=None) -> _ods_ir.Operation:
  return ClockedAssumeOp(property=property, edge=edge, clock=clock, enable=enable, label=label, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ClockedCoverOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.clocked_cover"

  _ODS_REGIONS = (0, True)

  def __init__(self, property, edge, clock, *, enable=None, label=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(property)
    operands.append(clock)
    if enable is not None: operands.append(enable)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["edge"] = (edge if (
    isinstance(edge, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ClockEdgeAttr')) else
      _ods_ir.AttrBuilder.get('ClockEdgeAttr')(edge, context=_ods_context))
    if label is not None: attributes["label"] = (label if (
        isinstance(label, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(label, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def property(self):
    return self.operation.operands[0]

  @builtins.property
  def clock(self):
    return self.operation.operands[1]

  @builtins.property
  def enable(self):
    return None if len(self.operation.operands) < 3 else self.operation.operands[2]

  @builtins.property
  def edge(self):
    return self.operation.attributes["edge"]

  @edge.setter
  def edge(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["edge"] = value

  @builtins.property
  def label(self):
    if "label" not in self.operation.attributes:
      return None
    return self.operation.attributes["label"]

  @label.setter
  def label(self, value):
    if value is not None:
      self.operation.attributes["label"] = value
    elif "label" in self.operation.attributes:
      del self.operation.attributes["label"]

  @label.deleter
  def label(self):
    del self.operation.attributes["label"]

def clocked_cover(property, edge, clock, *, enable=None, label=None, loc=None, ip=None) -> _ods_ir.Operation:
  return ClockedCoverOp(property=property, edge=edge, clock=clock, enable=enable, label=label, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ContractOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.contract"

  _ODS_REGIONS = (1, True)

  def __init__(self, outputs, inputs, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(outputs)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def outputs(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

  @builtins.property
  def body(self):
    return self.regions[0]

def contract(outputs, inputs, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(ContractOp(outputs=outputs, inputs=inputs, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class CoverOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.cover"

  _ODS_REGIONS = (0, True)

  def __init__(self, property, *, enable=None, label=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(property)
    if enable is not None: operands.append(enable)
    _ods_context = _ods_get_default_loc_context(loc)
    if label is not None: attributes["label"] = (label if (
        isinstance(label, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(label, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def property(self):
    return self.operation.operands[0]

  @builtins.property
  def enable(self):
    return None if len(self.operation.operands) < 2 else self.operation.operands[1]

  @builtins.property
  def label(self):
    if "label" not in self.operation.attributes:
      return None
    return self.operation.attributes["label"]

  @label.setter
  def label(self, value):
    if value is not None:
      self.operation.attributes["label"] = value
    elif "label" in self.operation.attributes:
      del self.operation.attributes["label"]

  @label.deleter
  def label(self):
    del self.operation.attributes["label"]

def cover(property, *, enable=None, label=None, loc=None, ip=None) -> _ods_ir.Operation:
  return CoverOp(property=property, enable=enable, label=label, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class EnsureOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.ensure"

  _ODS_REGIONS = (0, True)

  def __init__(self, property, *, enable=None, label=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(property)
    if enable is not None: operands.append(enable)
    _ods_context = _ods_get_default_loc_context(loc)
    if label is not None: attributes["label"] = (label if (
        isinstance(label, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(label, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def property(self):
    return self.operation.operands[0]

  @builtins.property
  def enable(self):
    return None if len(self.operation.operands) < 2 else self.operation.operands[1]

  @builtins.property
  def label(self):
    if "label" not in self.operation.attributes:
      return None
    return self.operation.attributes["label"]

  @label.setter
  def label(self, value):
    if value is not None:
      self.operation.attributes["label"] = value
    elif "label" in self.operation.attributes:
      del self.operation.attributes["label"]

  @label.deleter
  def label(self):
    del self.operation.attributes["label"]

def ensure(property, *, enable=None, label=None, loc=None, ip=None) -> _ods_ir.Operation:
  return EnsureOp(property=property, enable=enable, label=label, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class FormalOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.formal"

  _ODS_REGIONS = (1, True)

  def __init__(self, sym_name, parameters, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["sym_name"] = (sym_name if (
    isinstance(sym_name, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolNameAttr')) else
      _ods_ir.AttrBuilder.get('SymbolNameAttr')(sym_name, context=_ods_context))
    attributes["parameters"] = (parameters if (
    isinstance(parameters, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('DictionaryAttr')) else
      _ods_ir.AttrBuilder.get('DictionaryAttr')(parameters, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def sym_name(self):
    return self.operation.attributes["sym_name"]

  @sym_name.setter
  def sym_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sym_name"] = value

  @builtins.property
  def parameters(self):
    return self.operation.attributes["parameters"]

  @parameters.setter
  def parameters(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["parameters"] = value

  @builtins.property
  def body(self):
    return self.regions[0]

def formal(sym_name, parameters, *, loc=None, ip=None) -> _ods_ir.Operation:
  return FormalOp(sym_name=sym_name, parameters=parameters, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class FormatVerilogStringOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.format_verilog_string"

  _ODS_REGIONS = (0, True)

  def __init__(self, formatString, substitutions, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(substitutions))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["formatString"] = (formatString if (
    isinstance(formatString, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(formatString, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def substitutions(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def formatString(self):
    return self.operation.attributes["formatString"]

  @formatString.setter
  def formatString(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["formatString"] = value

  @builtins.property
  def str(self):
    return self.operation.results[0]

def format_verilog_string(format_string, substitutions, *, loc=None, ip=None) -> _ods_ir.Value:
  return FormatVerilogStringOp(formatString=format_string, substitutions=substitutions, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class HasBeenResetOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.has_been_reset"

  _ODS_REGIONS = (0, True)

  def __init__(self, clock, reset, async_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(clock)
    operands.append(reset)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["async"] = (async_ if (
    isinstance(async_, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('BoolAttr')) else
      _ods_ir.AttrBuilder.get('BoolAttr')(async_, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def clock(self):
    return self.operation.operands[0]

  @builtins.property
  def reset(self):
    return self.operation.operands[1]

  @builtins.property
  def async_(self):
    return self.operation.attributes["async"]

  @async_.setter
  def async_(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["async"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

def has_been_reset(clock, reset, async_, *, loc=None, ip=None) -> _ods_ir.Value:
  return HasBeenResetOp(clock=clock, reset=reset, async_=async_, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class LogicEquivalenceCheckingOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.lec"

  _ODS_REGIONS = (2, True)

  def __init__(self, isProven, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if isProven is not None: results.append(isProven)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def isProven(self):
    return None if len(self.operation.results) < 1 else self.operation.results[0]

  @builtins.property
  def firstCircuit(self):
    return self.regions[0]

  @builtins.property
  def secondCircuit(self):
    return self.regions[1]

def lec(is_proven, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(LogicEquivalenceCheckingOp(isProven=is_proven, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class PrintOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.print"

  _ODS_REGIONS = (0, True)

  def __init__(self, string, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(string)
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def string(self):
    return self.operation.operands[0]

def print_(string, *, loc=None, ip=None) -> _ods_ir.Operation:
  return PrintOp(string=string, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class RefinementCheckingOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.refines"

  _ODS_REGIONS = (2, True)

  def __init__(self, isProven, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if isProven is not None: results.append(isProven)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def isProven(self):
    return None if len(self.operation.results) < 1 else self.operation.results[0]

  @builtins.property
  def firstCircuit(self):
    return self.regions[0]

  @builtins.property
  def secondCircuit(self):
    return self.regions[1]

def refines(is_proven, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(RefinementCheckingOp(isProven=is_proven, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class RequireOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.require"

  _ODS_REGIONS = (0, True)

  def __init__(self, property, *, enable=None, label=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(property)
    if enable is not None: operands.append(enable)
    _ods_context = _ods_get_default_loc_context(loc)
    if label is not None: attributes["label"] = (label if (
        isinstance(label, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(label, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def property(self):
    return self.operation.operands[0]

  @builtins.property
  def enable(self):
    return None if len(self.operation.operands) < 2 else self.operation.operands[1]

  @builtins.property
  def label(self):
    if "label" not in self.operation.attributes:
      return None
    return self.operation.attributes["label"]

  @label.setter
  def label(self, value):
    if value is not None:
      self.operation.attributes["label"] = value
    elif "label" in self.operation.attributes:
      del self.operation.attributes["label"]

  @label.deleter
  def label(self):
    del self.operation.attributes["label"]

def require(property, *, enable=None, label=None, loc=None, ip=None) -> _ods_ir.Operation:
  return RequireOp(property=property, enable=enable, label=label, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SimulationOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.simulation"

  _ODS_REGIONS = (1, True)

  def __init__(self, sym_name, parameters, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["sym_name"] = (sym_name if (
    isinstance(sym_name, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolNameAttr')) else
      _ods_ir.AttrBuilder.get('SymbolNameAttr')(sym_name, context=_ods_context))
    attributes["parameters"] = (parameters if (
    isinstance(parameters, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('DictionaryAttr')) else
      _ods_ir.AttrBuilder.get('DictionaryAttr')(parameters, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def sym_name(self):
    return self.operation.attributes["sym_name"]

  @sym_name.setter
  def sym_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sym_name"] = value

  @builtins.property
  def parameters(self):
    return self.operation.attributes["parameters"]

  @parameters.setter
  def parameters(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["parameters"] = value

  @builtins.property
  def region(self):
    return self.regions[0]

def simulation(sym_name, parameters, *, loc=None, ip=None) -> _ods_ir.Operation:
  return SimulationOp(sym_name=sym_name, parameters=parameters, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SymbolicValueOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.symbolic_value"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def result(self):
    return self.operation.results[0]

def symbolic_value(result, *, loc=None, ip=None) -> _ods_ir.Value:
  return SymbolicValueOp(result=result, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class YieldOp(_ods_ir.OpView):
  OPERATION_NAME = "verif.yield"

  _ODS_REGIONS = (0, True)

  def __init__(self, inputs, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

def yield_(inputs, *, loc=None, ip=None) -> _ods_ir.Operation:
  return YieldOp(inputs=inputs, loc=loc, ip=ip)
