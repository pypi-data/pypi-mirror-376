
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_result_or_op_results as _get_op_result_or_op_results,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir
_ods_cext.globals.register_traceback_file_exclusion(__file__)

import builtins
from typing import Sequence as _Sequence, Union as _Union


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "dbg"

@_ods_cext.register_operation(_Dialect)
class ArrayOp(_ods_ir.OpView):
  OPERATION_NAME = "dbg.array"

  _ODS_REGIONS = (0, True)

  def __init__(self, elements, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(elements))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def elements(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def result(self):
    return self.operation.results[0]

def array(elements, *, loc=None, ip=None) -> _ods_ir.Value:
  return ArrayOp(elements=elements, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class ScopeOp(_ods_ir.OpView):
  OPERATION_NAME = "dbg.scope"

  _ODS_REGIONS = (0, True)

  def __init__(self, instanceName, moduleName, *, scope=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    if scope is not None: operands.append(scope)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["instanceName"] = (instanceName if (
    isinstance(instanceName, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(instanceName, context=_ods_context))
    attributes["moduleName"] = (moduleName if (
    isinstance(moduleName, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(moduleName, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def scope(self):
    return None if len(self.operation.operands) < 1 else self.operation.operands[0]

  @builtins.property
  def instanceName(self):
    return self.operation.attributes["instanceName"]

  @instanceName.setter
  def instanceName(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["instanceName"] = value

  @builtins.property
  def moduleName(self):
    return self.operation.attributes["moduleName"]

  @moduleName.setter
  def moduleName(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["moduleName"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

def scope(instance_name, module_name, *, scope=None, loc=None, ip=None) -> _ods_ir.Value:
  return ScopeOp(instanceName=instance_name, moduleName=module_name, scope=scope, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class StructOp(_ods_ir.OpView):
  OPERATION_NAME = "dbg.struct"

  _ODS_REGIONS = (0, True)

  def __init__(self, fields, names, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(fields))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["names"] = (names if (
    isinstance(names, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrArrayAttr')) else
      _ods_ir.AttrBuilder.get('StrArrayAttr')(names, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def fields(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def names(self):
    return self.operation.attributes["names"]

  @names.setter
  def names(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["names"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

def struct(fields, names, *, loc=None, ip=None) -> _ods_ir.Value:
  return StructOp(fields=fields, names=names, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class VariableOp(_ods_ir.OpView):
  OPERATION_NAME = "dbg.variable"

  _ODS_REGIONS = (0, True)

  def __init__(self, name, value, *, scope=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(value)
    if scope is not None: operands.append(scope)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["name"] = (name if (
    isinstance(name, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(name, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def value(self):
    return self.operation.operands[0]

  @builtins.property
  def scope(self):
    return None if len(self.operation.operands) < 2 else self.operation.operands[1]

  @builtins.property
  def name(self):
    return self.operation.attributes["name"]

  @name.setter
  def name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["name"] = value

def variable(name, value, *, scope=None, loc=None, ip=None) -> _ods_ir.Operation:
  return VariableOp(name=name, value=value, scope=scope, loc=loc, ip=ip)
