
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_result_or_op_results as _get_op_result_or_op_results,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir
_ods_cext.globals.register_traceback_file_exclusion(__file__)

import builtins
from typing import Sequence as _Sequence, Union as _Union


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "synth"

@_ods_cext.register_operation(_Dialect)
class AndInverterOp(_ods_ir.OpView):
  OPERATION_NAME = "synth.aig.and_inv"

  _ODS_REGIONS = (0, True)

  def __init__(self, inputs, inverted, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["inverted"] = (inverted if (
    isinstance(inverted, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
      _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(inverted, context=_ods_context))
    results.extend([operands[0].type] * 1)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def inverted(self):
    return self.operation.attributes["inverted"]

  @inverted.setter
  def inverted(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["inverted"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

def aig_and_inv(inputs, inverted, *, loc=None, ip=None) -> _ods_ir.Value:
  return AndInverterOp(inputs=inputs, inverted=inverted, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class MajorityInverterOp(_ods_ir.OpView):
  OPERATION_NAME = "synth.mig.maj_inv"

  _ODS_REGIONS = (0, True)

  def __init__(self, inputs, inverted, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["inverted"] = (inverted if (
    isinstance(inverted, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
      _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(inverted, context=_ods_context))
    results.extend([operands[0].type] * 1)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def inverted(self):
    return self.operation.attributes["inverted"]

  @inverted.setter
  def inverted(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["inverted"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

def mig_maj_inv(inputs, inverted, *, loc=None, ip=None) -> _ods_ir.Value:
  return MajorityInverterOp(inputs=inputs, inverted=inverted, loc=loc, ip=ip).result
