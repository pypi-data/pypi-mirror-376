Subject: [PATCH] Meson: use cross-platform file concatenation
---
Index: python/meson.build
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python/meson.build b/python/meson.build
--- a/python/meson.build	(revision 4c6b2c3096b1da0d0780fe0b4f147e837140468d)
+++ b/python/meson.build	(date 1750343247774)
@@ -16,25 +16,22 @@
             'libxml2-py.h',
             'libxml2-export.c',
             'libxml2-py.c',
-            'libxml2class.py',
-            'libxml2class.txt',
+            'libxml2.py',
+        ],
+        install_dir: [
+            get_option('includedir'),
+            false,
+            false,
+            py.get_install_dir(),
         ],
         command: [py, '@INPUT@', meson.current_build_dir()],
+        install: true,
+        install_dir: [ get_option('includedir'), false, false, py.get_install_dir() ],
     )
     pygenerated_dep = declare_dependency(
         sources : [pygenerated[0]],
     )
 
-    libxml2_py = custom_target(
-        'libxml2.py',
-        input: [files('libxml.py'), pygenerated[3]],
-        output: 'libxml2.py',
-        command: [find_program('cat'), '@INPUT@'],
-        capture: true,
-        install: true,
-        install_dir: py.get_install_dir(),
-    )
-
     libxml2mod_src = [
         files('libxml.c', 'types.c'),
         pygenerated[2],
Index: CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	(revision 4c6b2c3096b1da0d0780fe0b4f147e837140468d)
+++ b/CMakeLists.txt	(date 1750343302090)
@@ -525,11 +525,6 @@
         ${CMAKE_CURRENT_SOURCE_DIR}/python/generator.py
         ${CMAKE_CURRENT_BINARY_DIR}
     )
-    file(READ python/libxml.py LIBXML_PY)
-    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/libxml2.py.in "${LIBXML_PY}")
-    file(READ ${CMAKE_CURRENT_BINARY_DIR}/libxml2class.py LIBXML2CLASS_PY)
-    file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/libxml2.py.in "${LIBXML2CLASS_PY}")
-    configure_file(${CMAKE_CURRENT_BINARY_DIR}/libxml2.py.in libxml2.py COPYONLY)
     add_library(
         LibXml2Mod SHARED
         libxml2-py.c
Index: python/Makefile.am
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python/Makefile.am b/python/Makefile.am
--- a/python/Makefile.am	(revision 4c6b2c3096b1da0d0780fe0b4f147e837140468d)
+++ b/python/Makefile.am	(date 1750343302102)
@@ -32,8 +32,8 @@
 nodist_python_PYTHON = libxml2.py
 
 API_DESC = $(top_srcdir)/doc/libxml2-api.xml $(srcdir)/libxml2-python-api.xml
-GENERATED = libxml2class.py libxml2class.txt $(BUILT_SOURCES)
-CLEANFILES = libxml2.py $(GENERATED)
+GENERATED = libxml2.py $(BUILT_SOURCES)
+CLEANFILES = $(GENERATED)
 
 all-local: libxml2.py
 
@@ -43,9 +43,6 @@
 # libxml.c #includes libxml2-export.c
 libxml.$(OBJEXT): libxml2-export.c
 
-libxml2.py: $(srcdir)/libxml.py libxml2class.py
-	cat $(srcdir)/libxml.py `test -f libxml2class.py || echo $(srcdir)/`libxml2class.py > $@
-
 clean-local:
 	rm -rf __pycache__ *.pyc
 
Index: python/generator.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python/generator.py b/python/generator.py
--- a/python/generator.py	(revision 4c6b2c3096b1da0d0780fe0b4f147e837140468d)
+++ b/python/generator.py	(date 1750343302124)
@@ -678,7 +678,7 @@
             parser.feed(data)
             parser.close()
         except IOError as msg:
-            print(file, ":", msg)
+            print("Failed to open libxml2-api.xml:", msg)
             sys.exit(1)
 
     n = len(list(functions.keys()))
@@ -692,7 +692,7 @@
         parser.feed(data)
         parser.close()
     except IOError as msg:
-        print(file, ":", msg)
+        print("Failed to open libxml2-python-api.xml:", msg)
 
 
     print("Found %d functions in libxml2-python-api.xml" % (
@@ -1086,12 +1086,19 @@
         func = nameFixup(name, "None", file, file)
         info = (0, func, name, ret, args, file)
         function_classes['None'].append(info)
-   
-    classes = open(os.path.join(dstPref, "libxml2class.py"), "w")
-    txt = open(os.path.join(dstPref, "libxml2class.txt"), "w")
-    txt.write("          Generated Classes for libxml2-python\n\n")
+
+    libxml_content = ""
+    try:
+        with open(os.path.join(srcPref, "libxml.py"), "r") as libxml_file:
+            libxml_content = libxml_file.read()
+    except IOError as msg:
+        print("Error reading libxml.py:", msg)
+        sys.exit(1)
 
-    txt.write("#\n# Global functions of the module\n#\n\n")
+    classes = open(os.path.join(dstPref, "libxml2.py"), "w")
+
+    classes.write(libxml_content)
+
     if "None" in function_classes:
         flist = function_classes["None"]
         flist = sorted(flist, key=cmp_to_key(functionCompare))
@@ -1100,10 +1107,8 @@
             (index, func, name, ret, args, file) = info
             if file != oldfile:
                 classes.write("#\n# Functions from module %s\n#\n\n" % file)
-                txt.write("\n# functions from module %s\n" % file)
                 oldfile = file
             classes.write("def %s(" % func)
-            txt.write("%s()\n" % func)
             n = 0
             for arg in args:
                 if n != 0:
@@ -1179,14 +1184,11 @@
                     classes.write("    return ret\n")
             classes.write("\n")
 
-    txt.write("\n\n#\n# Set of classes of the module\n#\n\n")
     for classname in classes_list:
         if classname == "None":
             pass
         else:
             if classname in classes_ancestor:
-                txt.write("\n\nClass %s(%s)\n" % (classname,
-                          classes_ancestor[classname]))
                 classes.write("class %s(%s):\n" % (classname,
                               classes_ancestor[classname]))
                 classes.write("    def __init__(self, _obj=None):\n")
@@ -1210,7 +1212,6 @@
                     classes.write("        return \"%s\" %% (self.name, int(pos_id (self)))\n\n" % (
                                   format))
             else:
-                txt.write("Class %s()\n" % (classname))
                 classes.write("class %s:\n" % (classname))
                 classes.write("    def __init__(self, _obj=None):\n")
                 if classname in reference_keepers:
@@ -1241,16 +1242,13 @@
                 if file != oldfile:
                     if file == "python_accessor":
                         classes.write("    # accessors for %s\n" % (classname))
-                        txt.write("    # accessors\n")
                     else:
                         classes.write("    #\n")
                         classes.write("    # %s functions from module %s\n" % (
                                       classname, file))
-                        txt.write("\n    # functions from module %s\n" % file)
                         classes.write("    #\n\n")
                 oldfile = file
                 classes.write("    def %s(self" % func)
-                txt.write("    %s()\n" % func)
                 n = 0
                 for arg in args:
                     if n != index:
@@ -1375,7 +1373,6 @@
             classes.write("%s = %s\n" % (name,value))
         classes.write("\n")
 
-    txt.close()
     classes.close()
 
 buildStubs()
