[tool.poetry]
name = "opentelemetry-instrumentation-django-outbox-pattern"
version = "0.2.0"
description = "Opentelemetry instrumentor for django-outbox-pattern package"
authors = ["Juntos Somos Mais <labs@juntossomosmais.com.br>"]
readme = "README.md"
license = "MIT"
include = [
    "LICENSE",
]
homepage = "https://github.com/juntossomosmais/opentelemetry-instrumentation-django-outbox-pattern"
repository = "https://github.com/juntossomosmais/opentelemetry-instrumentation-django-outbox-pattern"
keywords=["django-outbox-pattern", "outbox-pattern", "django", "opentelemetry", "instrumentation"]

[tool.poetry.dependencies]
python = "^3.10"
Django = "*"
django-outbox-pattern = "^3.0.7"
opentelemetry-sdk = "*"
opentelemetry-api = "*"
opentelemetry-instrumentation = "*"

[tool.poetry.group.dev.dependencies]
### Format, lint, static type checker, among others
pre-commit = "*"
#### Helpers and so on
requests-mock = "*"
coverage = "*"
tblib = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target_version = ["py310"]
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
force_single_line = true
line_length = 120
py_version = 310
use_parentheses = true
multi_line_output = 3
include_trailing_comma = true
lines_between_types = 1
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.10"

# flake8-mypy expects the two following for sensible formatting
show_column_numbers = true
show_error_context = false

# do not follow imports (except for ones found in typeshed)
follow_imports = "skip"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# allow untyped calls as a consequence of the options above
disallow_untyped_calls = false

# allow returning Any as a consequence of the options above
warn_return_any = false

# treat Optional per PEP 484
strict_optional = true

# ensure all execution paths are returning
warn_no_return = true

# lint-style cleanliness for typing needs to be disabled; returns more errors
# than the full run.
warn_redundant_casts = false
warn_unused_ignores = false

# The following are off by default since they're too noisy.
# Flip them on if you feel adventurous.
disallow_untyped_defs = false
check_untyped_defs = false

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true