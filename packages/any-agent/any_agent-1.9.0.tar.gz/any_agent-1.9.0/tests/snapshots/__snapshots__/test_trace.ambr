# serializer version: 1
# name: test_agent_trace_snapshot[AGNO_trace].95544105696794577450773972010078374733
  dict({
    'final_output': dict({
      'steps': list([
        dict({
          'description': 'Find what year it is in the America/New_York timezone',
          'number': 1,
        }),
        dict({
          'description': 'Write the value (single number) to a file',
          'number': 2,
        }),
        dict({
          'description': 'Return a list of the steps you have taken',
          'number': 3,
        }),
      ]),
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "<instructions>\\nUse the available tools to answer.\\n</instructions>\\n\\nProvide your output as a JSON containing the following fields:\\n<json_fields>\\n[\\"steps\\"]\\n</json_fields>\\n\\nHere are the properties for each field:\\n<json_field_properties>\\n{\\n  \\"steps\\": {\\n    \\"items\\": {\\n      \\"$ref\\": \\"#/$defs/Step\\"\\n    },\\n    \\"type\\": \\"array\\"\\n  },\\n  \\"$defs\\": {\\n    \\"Step\\": {\\n      \\"number\\": {\\n        \\"type\\": \\"integer\\"\\n      },\\n      \\"description\\": {\\n        \\"type\\": \\"string\\"\\n      }\\n    }\\n  }\\n}\\n</json_field_properties>\\nStart your response with `{` and end it with `}`.\\nYour output will be passed to json.loads() to convert it to a Python object.\\nMake sure it only contains valid JSON."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.95e-05,
          'gen_ai.usage.input_tokens': 395,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6454084660402922358,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 95544105696794577450773972010078374733,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042094389317492,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 303045384231505382,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 95544105696794577450773972010078374733,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042093365382438,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-08-01T05:54:54-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'dyud3i89k',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14611729959467895252,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 95544105696794577450773972010078374733,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042094396883865,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 303045384231505382,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 95544105696794577450773972010078374733,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042094389902900,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 4.81e-05,
          'gen_ai.usage.input_tokens': 481,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14385352767817738361,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 95544105696794577450773972010078374733,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042094874042259,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 303045384231505382,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 95544105696794577450773972010078374733,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042094397312367,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'MxNsCHgBh',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14432302980854530208,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 95544105696794577450773972010078374733,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042094878868545,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 303045384231505382,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 95544105696794577450773972010078374733,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042094874688576,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '{"steps": [{"number": 1, "description": "Find what year it is in the America/New_York timezone"}, {"number": 2, "description": "Write the value (single number) to a file"}, {"number": 3, "description": "Return a list of the steps you have taken"}]}',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 5.1399999999999996e-05,
          'gen_ai.usage.input_tokens': 514,
          'gen_ai.usage.output_cost': 2.1e-05,
          'gen_ai.usage.output_tokens': 70,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5666546098829446803,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 95544105696794577450773972010078374733,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042103654702622,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 303045384231505382,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 95544105696794577450773972010078374733,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042094879391782,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 303045384231505382,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 95544105696794577450773972010078374733,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042104169690830,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042093360142798,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[GOOGLE_trace].33362580503506345100368337102358721762
  dict({
    'final_output': dict({
      'steps': list([
        dict({
          'description': 'Get current time in the America/New_York timezone.',
          'number': 1,
        }),
        dict({
          'description': 'Write the year to a file.',
          'number': 2,
        }),
      ]),
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must call the final_output tool when finished.The \'answer\' argument passed to the final_output tool must be a JSON string that matches the following schema:\\n{\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'additionalProperties\': False, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}\\n\\nYou are an agent. Your internal name is \\"any_agent\\"."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": {"timezone": "America/New_York"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 6.78e-05,
          'gen_ai.usage.input_tokens': 678,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 16279905869241783410,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 33362580503506345100368337102358721762,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041901334036067,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 2712805629862806879,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 33362580503506345100368337102358721762,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041900404886224,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '"meta=None content=[TextContent(type=\'text\', text=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-08-01T05:51:41-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\', annotations=None, meta=None)] structuredContent=None isError=False"',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'jsSCuqFF4',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6889227159904830916,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 33362580503506345100368337102358721762,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041901343002221,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 11014913846512304287,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 33362580503506345100368337102358721762,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041901334609241,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": {"text": "2025"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 7.989999999999999e-05,
          'gen_ai.usage.input_tokens': 799,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8737080548129166115,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 33362580503506345100368337102358721762,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041901738877989,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 2712805629862806879,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 33362580503506345100368337102358721762,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041901344321896,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': '8p0AZBpW9',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1026121205495977129,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 33362580503506345100368337102358721762,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041901740507347,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 12442915751565387291,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 33362580503506345100368337102358721762,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041901739226273,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_output", "tool.args": {"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 8.379999999999999e-05,
          'gen_ai.usage.input_tokens': 838,
          'gen_ai.usage.output_cost': 1.68e-05,
          'gen_ai.usage.output_tokens': 56,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7044854708908688899,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 33362580503506345100368337102358721762,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041957731278401,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 2712805629862806879,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 33362580503506345100368337102358721762,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041901741466089,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"success": true, "result": {"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year to a file."}]}}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}',
          'gen_ai.tool.call.id': 'LF2QJdgFW',
          'gen_ai.tool.description': '''
            This tool is used to validate the final output. It must be called when the final answer is ready in order to ensure that the output is valid.
            
            Args:
                answer: The final output that can be loaded as a Pydantic model. This must be a JSON compatible string that matches the following schema:
                    {'$defs': {'Step': {'properties': {'number': {'title': 'Number', 'type': 'integer'}, 'description': {'title': 'Description', 'type': 'string'}}, 'required': ['number', 'description'], 'title': 'Step', 'type': 'object'}}, 'additionalProperties': False, 'properties': {'steps': {'items': {'$ref': '#/$defs/Step'}, 'title': 'Steps', 'type': 'array'}}, 'required': ['steps'], 'title': 'Steps', 'type': 'object'}
            
            Returns:
                A dictionary with the following keys:
                    - success: True if the output is valid, False otherwise.
                    - result: The final output if success is True, otherwise an error message.
          ''',
          'gen_ai.tool.name': 'final_output',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10760751170651242666,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 33362580503506345100368337102358721762,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041957734599477,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_output',
        'parent': dict({
          'is_remote': False,
          'span_id': 9296425131812262451,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 33362580503506345100368337102358721762,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041957731899270,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9898570198081698602,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 33362580503506345100368337102358721762,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041957734853456,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041900403272069,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LANGCHAIN_trace].190326915882252930752151066829320989027
  dict({
    'final_output': dict({
      'steps': list([
        dict({
          'description': 'Found the current time in the America/New_York timezone.',
          'number': 1,
        }),
        dict({
          'description': 'Wrote the year to a file.',
          'number': 2,
        }),
      ]),
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": {"timezone": "America/New_York"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.41e-05,
          'gen_ai.usage.input_tokens': 241,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 289527053134946261,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 190326915882252930752151066829320989027,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041962002052490,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3878859057581409824,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 190326915882252930752151066829320989027,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041958237326120,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-08-01T05:52:42-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14581387401617946166,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 190326915882252930752151066829320989027,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041962011004751,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 3878859057581409824,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 190326915882252930752151066829320989027,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041962006466883,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": {"text": "2025"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.29e-05,
          'gen_ai.usage.input_tokens': 329,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12825293778498665963,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 190326915882252930752151066829320989027,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041962375355360,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3878859057581409824,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 190326915882252930752151066829320989027,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041962013170974,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'null',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 456307986160624204,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 190326915882252930752151066829320989027,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041962379706532,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 3878859057581409824,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 190326915882252930752151066829320989027,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041962378398536,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            Here are the steps I have taken:
            
            1. Found the current time in the America/New_York timezone.
            2. Wrote the year to a file.
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.64e-05,
          'gen_ai.usage.input_tokens': 364,
          'gen_ai.usage.output_cost': 9.9e-06,
          'gen_ai.usage.output_tokens': 33,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1802677288849805961,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 190326915882252930752151066829320989027,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041967232514909,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3878859057581409824,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 190326915882252930752151066829320989027,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041962382338030,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            {
              "steps": [
                {
                  "number": 1,
                  "description": "Found the current time in the America/New_York timezone."
                },
                {
                  "number": 2,
                  "description": "Wrote the year to a file."
                }
              ]
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.28e-05,
          'gen_ai.usage.input_tokens': 328,
          'gen_ai.usage.output_cost': 1.8599999999999998e-05,
          'gen_ai.usage.output_tokens': 62,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15974399814840764171,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 190326915882252930752151066829320989027,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041970445833554,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3878859057581409824,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 190326915882252930752151066829320989027,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041967237316245,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3878859057581409824,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 190326915882252930752151066829320989027,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041970446051277,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041958228731312,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LLAMA_INDEX_trace].229014657432212207702615506520765449730
  dict({
    'final_output': dict({
      'steps': list([
        dict({
          'description': 'Get current time in the America/New_York timezone.',
          'number': 1,
        }),
        dict({
          'description': 'Write the year (2025) to a file.',
          'number': 2,
        }),
      ]),
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must call the final_output tool when finished.The \'answer\' argument passed to the final_output tool must be a JSON string that matches the following schema:\\n{\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'additionalProperties\': False, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}"}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.03e-05,
          'gen_ai.usage.input_tokens': 203,
          'gen_ai.usage.output_cost': 1.05e-05,
          'gen_ai.usage.output_tokens': 35,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1162322960898089063,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 229014657432212207702615506520765449730,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041971844966245,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 6236357966915113777,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 229014657432212207702615506520765449730,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041971368528493,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-08-01T05:52:52-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14900170875762896105,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 229014657432212207702615506520765449730,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041972236698901,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 6236357966915113777,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 229014657432212207702615506520765449730,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041971846047229,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.95e-05,
          'gen_ai.usage.input_tokens': 295,
          'gen_ai.usage.output_cost': 1.0199999999999999e-05,
          'gen_ai.usage.output_tokens': 34,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2847063733672611827,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 229014657432212207702615506520765449730,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041972657144080,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 6236357966915113777,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 229014657432212207702615506520765449730,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041972237965029,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '"None"',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': '''
            write_file(text: str) -> None
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
  
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3128541987358295614,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 229014657432212207702615506520765449730,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041972660760374,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 6236357966915113777,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 229014657432212207702615506520765449730,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041972658263666,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_output", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.1899999999999996e-05,
          'gen_ai.usage.input_tokens': 319,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 96,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 193721726002487187,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 229014657432212207702615506520765449730,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041973546674192,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 6236357966915113777,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 229014657432212207702615506520765449730,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041972661734519,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"success": true, "result": {"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year (2025) to a file."}]}}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year (2025) to a file.\\"}]}"}',
          'gen_ai.tool.description': '''
            final_output(answer: str) -> dict[str, str | bool | dict[str, typing.Any] | list[typing.Any]]
            This tool is used to validate the final output. It must be called when the final answer is ready in order to ensure that the output is valid.
            
                Args:
                    answer: The final output that can be loaded as a Pydantic model. This must be a JSON compatible string that matches the following schema:
                        {'$defs': {'Step': {'properties': {'number': {'title': 'Number', 'type': 'integer'}, 'description': {'title': 'Description', 'type': 'string'}}, 'required': ['number', 'description'], 'title': 'Step', 'type': 'object'}}, 'additionalProperties': False, 'properties': {'steps': {'items': {'$ref': '#/$defs/Step'}, 'title': 'Steps', 'type': 'array'}}, 'required': ['steps'], 'title': 'Steps', 'type': 'object'}
            
                Returns:
                    A dictionary with the following keys:
                        - success: True if the output is valid, False otherwise.
                        - result: The final output if success is True, otherwise an error message.
            
                
          ''',
          'gen_ai.tool.name': 'final_output',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1249858002909553576,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 229014657432212207702615506520765449730,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041973550720669,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_output',
        'parent': dict({
          'is_remote': False,
          'span_id': 6236357966915113777,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 229014657432212207702615506520765449730,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041973547764181,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            Here are the steps I have taken:
            
            1. Get current time in the America/New_York timezone.
            2. Write the year (2025) to a file.
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 4.43e-05,
          'gen_ai.usage.input_tokens': 443,
          'gen_ai.usage.output_cost': 1.0199999999999999e-05,
          'gen_ai.usage.output_tokens': 34,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8782958070785853179,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 229014657432212207702615506520765449730,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041974193113943,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 6236357966915113777,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 229014657432212207702615506520765449730,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041973551871749,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            {
              "steps": [
                {
                  "number": 1,
                  "description": "Get current time in the America/New_York timezone."
                },
                {
                  "number": 2,
                  "description": "Write the year (2025) to a file."
                }
              ]
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 1.71e-05,
          'gen_ai.usage.input_tokens': 171,
          'gen_ai.usage.output_cost': 1.98e-05,
          'gen_ai.usage.output_tokens': 66,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10815226053290719261,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 229014657432212207702615506520765449730,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041983456205561,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 6236357966915113777,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 229014657432212207702615506520765449730,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041974199520838,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6236357966915113777,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 229014657432212207702615506520765449730,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754041983456503734,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041971362064887,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[OPENAI_trace].167072354449669612179569273318124318336
  dict({
    'final_output': dict({
      'steps': list([
        dict({
          'description': 'Get current time in the America/New_York timezone',
          'number': 1,
        }),
        dict({
          'description': 'Write the year to a file',
          'number': 2,
        }),
      ]),
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken.", "role": "user"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 4.4699999999999996e-05,
          'gen_ai.usage.input_tokens': 447,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14151044612272926131,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 167072354449669612179569273318124318336,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042001509071793,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 18272850298833688173,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 167072354449669612179569273318124318336,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041983839169924,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"type":"text","text":"{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-08-01T05:53:21-04:00\\",\\n  \\"is_dst\\": true\\n}","annotations":null,"meta":null}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4389457807946308237,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 167072354449669612179569273318124318336,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042001517594596,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 18272850298833688173,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 167072354449669612179569273318124318336,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042001509970892,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 5.54e-05,
          'gen_ai.usage.input_tokens': 554,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5289756295809639845,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 167072354449669612179569273318124318336,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042004090939550,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 18272850298833688173,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 167072354449669612179569273318124318336,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042001520328340,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7155786602528740707,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 167072354449669612179569273318124318336,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042004092823232,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 18272850298833688173,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 167072354449669612179569273318124318336,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042004091777743,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7155786602528740707,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 167072354449669612179569273318124318336,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042004092823232,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 18272850298833688173,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 167072354449669612179569273318124318336,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042004091777743,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '{"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone"}, {"number": 2, "description": "Write the year to a file"}]}',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 5.8899999999999995e-05,
          'gen_ai.usage.input_tokens': 589,
          'gen_ai.usage.output_cost': 1.3199999999999999e-05,
          'gen_ai.usage.output_tokens': 44,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5960161599686783280,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 167072354449669612179569273318124318336,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042092791709460,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 18272850298833688173,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 167072354449669612179569273318124318336,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042004096622305,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 18272850298833688173,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 167072354449669612179569273318124318336,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042092792612314,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754041983835677045,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[SMOLAGENTS_trace].111184580844907911044195549614456321268
  dict({
    'final_output': dict({
      'steps': list([
        dict({
          'description': 'Get current time in the America/New_York timezone.',
          'number': 1,
        }),
        dict({
          'description': 'Write the year to a file.',
          'number': 2,
        }),
      ]),
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must call the final_output tool when finished.The \'answer\' argument passed to the final_output tool must be a JSON string that matches the following schema:\\n{\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'additionalProperties\': False, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}"}, {"role": "user", "content": "New task:\\nFind what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 6.89e-05,
          'gen_ai.usage.input_tokens': 689,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 381021499183520677,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111184580844907911044195549614456321268,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042138292432966,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 5206514433809648240,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111184580844907911044195549614456321268,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042104555927562,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-08-01T05:55:38-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15721330364403057546,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111184580844907911044195549614456321268,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042138299458816,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 5206514433809648240,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111184580844907911044195549614456321268,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042138293967767,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 8.209999999999999e-05,
          'gen_ai.usage.input_tokens': 821,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11852227009788716198,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111184580844907911044195549614456321268,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042170149199163,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 5206514433809648240,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111184580844907911044195549614456321268,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042138300140888,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 16558072673449483608,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111184580844907911044195549614456321268,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042170150602062,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 5206514433809648240,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111184580844907911044195549614456321268,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042170149568314,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_answer", "tool.args": "{\\"answer\\": \\"{\\\\\\"steps\\\\\\": [{\\\\\\"number\\\\\\": 1, \\\\\\"description\\\\\\": \\\\\\"Get current time in the America/New_York timezone.\\\\\\"}, {\\\\\\"number\\\\\\": 2, \\\\\\"description\\\\\\": \\\\\\"Write the year to a file.\\\\\\"}]}\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 9.02e-05,
          'gen_ai.usage.input_tokens': 902,
          'gen_ai.usage.output_cost': 1.68e-05,
          'gen_ai.usage.output_tokens': 56,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5170289786442278025,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111184580844907911044195549614456321268,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042267376247719,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 5206514433809648240,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111184580844907911044195549614456321268,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042170151189260,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year to a file."}]}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}',
          'gen_ai.tool.description': 'Provides a final answer to the given problem.',
          'gen_ai.tool.name': 'final_answer',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9768476570201977417,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111184580844907911044195549614456321268,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042267377965995,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_answer',
        'parent': dict({
          'is_remote': False,
          'span_id': 5206514433809648240,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111184580844907911044195549614456321268,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042267376586371,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5206514433809648240,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 111184580844907911044195549614456321268,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042267378259779,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042104555354245,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[TINYAGENT_trace].131669361373961773340168485551870481325
  dict({
    'final_output': dict({
      'steps': list([
        dict({
          'description': 'Found the current time in the America/New_York timezone.',
          'number': 1,
        }),
        dict({
          'description': 'Wrote the year to a file.',
          'number': 2,
        }),
        dict({
          'description': 'Returned a list of the steps taken.',
          'number': 3,
        }),
      ]),
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.15e-05,
          'gen_ai.usage.input_tokens': 315,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17940903810497739093,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131669361373961773340168485551870481325,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042271608568789,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 16904063532107017587,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131669361373961773340168485551870481325,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042267748534730,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-08-01T05:57:51-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17323707942427741641,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131669361373961773340168485551870481325,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042271612961053,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 16904063532107017587,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131669361373961773340168485551870481325,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042271608748713,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 4.01e-05,
          'gen_ai.usage.input_tokens': 401,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9659725628114952891,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131669361373961773340168485551870481325,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042272969523451,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 16904063532107017587,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131669361373961773340168485551870481325,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042271613066253,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'None',
          'gen_ai.output.type': 'text',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2091825378634755405,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131669361373961773340168485551870481325,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042272970970621,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 16904063532107017587,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131669361373961773340168485551870481325,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042272969693820,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_answer", "tool.args": "{\\"answer\\": \\"1. Found the current time in the America/New_York timezone. 2. Wrote the year to a file. 3. Returned a list of the steps taken.\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 4.32e-05,
          'gen_ai.usage.input_tokens': 432,
          'gen_ai.usage.output_cost': 1.4099999999999999e-05,
          'gen_ai.usage.output_tokens': 47,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 89897182056549668,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131669361373961773340168485551870481325,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042275176165614,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 16904063532107017587,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131669361373961773340168485551870481325,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042272971069354,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '1. Found the current time in the America/New_York timezone. 2. Wrote the year to a file. 3. Returned a list of the steps taken.',
          'gen_ai.output.type': 'text',
          'gen_ai.tool.args': '{"answer": "1. Found the current time in the America/New_York timezone. 2. Wrote the year to a file. 3. Returned a list of the steps taken."}',
          'gen_ai.tool.name': 'final_answer',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11636694419491394406,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131669361373961773340168485551870481325,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042275178189365,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_answer',
        'parent': dict({
          'is_remote': False,
          'span_id': 16904063532107017587,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131669361373961773340168485551870481325,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042275176429980,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            {
              "steps": [
                {
                  "number": 1,
                  "description": "Found the current time in the America/New_York timezone."
                },
                {
                  "number": 2,
                  "description": "Wrote the year to a file."
                },
                {
                  "number": 3,
                  "description": "Returned a list of the steps taken."
                }
              ]
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 1.88e-05,
          'gen_ai.usage.input_tokens': 188,
          'gen_ai.usage.output_cost': 2.6099999999999997e-05,
          'gen_ai.usage.output_tokens': 87,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 18329388715909142061,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131669361373961773340168485551870481325,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042287291585035,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 16904063532107017587,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131669361373961773340168485551870481325,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042275178865590,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 16904063532107017587,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131669361373961773340168485551870481325,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1754042287291807146,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.36.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1754042267748419990,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
