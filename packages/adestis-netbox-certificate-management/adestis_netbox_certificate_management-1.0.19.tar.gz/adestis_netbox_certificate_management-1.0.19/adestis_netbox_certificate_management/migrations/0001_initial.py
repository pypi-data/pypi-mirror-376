# Generated by Django 5.1.8 on 2025-07-10 09:34

import django.db.models.deletion
import taggit.managers
import utilities.json
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('adestis_netbox_applications', '0006_alter_installedapplication_options_and_more'),
        ('dcim', '0200_populate_mac_addresses'),
        ('extras', '0123_journalentry_kind_default'),
        ('tenancy', '0017_natural_ordering'),
        ('virtualization', '0048_populate_mac_addresses'),
    ]

    operations = [
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('status', models.CharField(max_length=50)),
                ('comments', models.TextField(blank=True)),
                ('name', models.CharField(max_length=150)),
                ('description', models.CharField(blank=True, max_length=500)),
                ('subject', models.CharField(blank=True, max_length=2000)),
                ('supplier_product', models.CharField(blank=True, max_length=2000)),
                ('issuer', models.CharField(blank=True, max_length=2000)),
                ('subject_key_identifier', models.CharField(max_length=40, unique=True)),
                ('key_technology', models.CharField(blank=True, max_length=2000)),
                ('subject_alternative_name', models.CharField(blank=True, max_length=2000, null=True)),
                ('valid_from', models.DateField(blank=True, null=True)),
                ('valid_to', models.DateField(blank=True, null=True)),
                ('certificate', models.CharField(max_length=10000, unique=True)),
                ('authority_key_identifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='authority_certificates', to='adestis_netbox_certificate_management.certificate')),
                ('cluster', models.ManyToManyField(blank=True, related_name='certificate', to='virtualization.cluster')),
                ('cluster_group', models.ManyToManyField(blank=True, related_name='certificate', to='virtualization.clustergroup')),
                ('contact', models.ManyToManyField(blank=True, related_name='certificate', to='tenancy.contact')),
                ('contact_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='certificate', to='tenancy.contactgroup')),
                ('device', models.ManyToManyField(blank=True, related_name='certificate', to='dcim.device')),
                ('installedapplication', models.ManyToManyField(blank=True, related_name='certificate', to='adestis_netbox_applications.installedapplication')),
                ('issuer_parent_certificate', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='issued_certificates', to='adestis_netbox_certificate_management.certificate')),
                ('predecessor_certificate', models.ManyToManyField(blank=True, related_name='certificate', to='adestis_netbox_certificate_management.certificate')),
                ('successor_certificates', models.ManyToManyField(blank=True, related_name='certificate', to='adestis_netbox_certificate_management.certificate')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='certificate', to='tenancy.tenant')),
                ('tenant_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='certificate_tenant_group', to='tenancy.tenantgroup')),
                ('virtual_machine', models.ManyToManyField(blank=True, related_name='certificate', to='virtualization.virtualmachine')),
            ],
            options={
                'verbose_name': 'Certificate',
                'verbose_name_plural': 'Certificates',
            },
        ),
    ]
