# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Publish General Purpose MCP Server for Constrained Optimization

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Build source and wheel distributions
        run: |
          python -m build

      - name: Check distributions
        run: |
          twine check dist/*

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists-${{ matrix.python-version }}
          path: dist/

  test-distributions:
    runs-on: ubuntu-latest
    needs: release-build
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists-${{ matrix.python-version }}
          path: dist/

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package from wheel
        run: |
          python -m pip install dist/*.whl

      - name: Test package installation
        run: |
          python -c "import constrained_opt_mcp; print('Package imported successfully')"
          python -c "from constrained_opt_mcp.models import ortools_models; print('Models imported successfully')"
          python -c "from constrained_opt_mcp.solvers import ortools_solver; print('Solvers imported successfully')"

  pypi-publish:
    runs-on: ubuntu-latest
    needs: [release-build, test-distributions]
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # PyPI project URL for deployment status
      url: https://pypi.org/project/constrained-opt-mcp/

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists-3.12  # Use Python 3.12 distributions for publishing
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  notify-success:
    runs-on: ubuntu-latest
    needs: [pypi-publish]
    if: success()
    steps:
      - name: Notify successful publication
        run: |
          echo "âœ… Successfully published constrained-opt-mcp to PyPI!"
          echo "ðŸ“¦ Package: https://pypi.org/project/constrained-opt-mcp/"
          echo "ðŸš€ General Purpose MCP Server for Constrained Optimization is now available for AI agents"
          echo "ðŸŽ¯ Supports portfolio optimization, scheduling, and combinatorial optimization tasks"
