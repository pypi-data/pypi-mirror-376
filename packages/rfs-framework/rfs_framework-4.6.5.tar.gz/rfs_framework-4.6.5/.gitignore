# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
.idea/

# VS Code
.vscode/

# macOS
.DS_Store

# Windows
Thumbs.db
ehthumbs.db

# PyPI configuration (never commit credentials)
.pypirc

# Temporary files
*.tmp
*.bak
*.swp
*~

# Local configuration
config.local.toml
*.local.*

# Test output
test-results/
test-reports/

# Documentation build
docs/build/
docs/site/

# Development and testing environments
test_env/
*_env/
.test_env/
test_venv/

# Analysis and planning documents (temporary)
*_ANALYSIS_REPORT.md
*_IMPLEMENTATION_PLAN.md
*_FRAMEWORK_ANALYSIS_*.md

# MCP server test files
mcp_server*.py

# CLI test files
test_cli.py

# Build artifacts and distribution (already covered above but being explicit)
dist/
build/
*.egg-info/

# RFS Framework specific temporary files
rfs_cli_test.py
cli_test_*.py
rfs_cli.py

.cursor/

# AI/Claude/MCP related files (not needed for PyPI distribution)
CLAUDE.md
README-MCP.md
context7.json
mcp-config.json
mcp_server*.py
install_mcp.py
docs/CONTEXT7_REGISTRATION.md

# Quality check scripts and fix files (development tools)
comprehensive_fix.py
final_quality_fix.py
fix_all_style_issues.py
fix_all_syntax_comprehensive.py
fix_all_syntax_errors.py
fix_indentation.py
fix_match_case.py
fix_remaining_syntax.py
fix_syntax_batch.py
fix_syntax_errors_targeted.py
fix_syntax_final.py
fix_syntax_manually.py
systematic_syntax_fix.py
scripts/quality/auto_fix.py

# Quality reports and artifacts
baseline_quality.json
quality_final_report.json
style_fix_quality_report.json
quality_improvement_report.md
quality_progress_report.json
functional_final_report.md
functional_improvement_report.md
rfs_quality_achievement_report.md
rfs_quality_report.txt
rfs_functional_rules.json
scripts/quality/rfs_functional_rules.json

# Quality check artifacts and backup directories
.rfs-quality/
scripts/quality/.rfs-quality/
scripts/quality/unified/

# Development reports and cleanup files
CLEANUP_REPORT.md

# Test files in root directory (should be in tests/)
test_*.py

# Lock files
uv.lock
poetry.lock
Pipfile.lock

# PR and issue tracking files
pr/
issues/