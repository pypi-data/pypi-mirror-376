[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "rfs-framework"
version = "4.6.6"
description = "Enterprise-Grade Reactive Functional Serverless Framework for Python"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
authors = [
    {name = "RFS Framework Team", email = "team@rfs-framework.dev"},
]
keywords = [
    "framework",
    "reactive",
    "functional", 
    "serverless",
    "cloud-native",
    "async",
    "microservices",
    "enterprise",
    "result-pattern",
    "monad",
    "validation",
    "optimization",
    "security",
    "production-ready"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: System :: Distributed Computing",
    "Typing :: Typed",
]

dependencies = [
    # Core Dependencies
    "pydantic>=2.5.0,<3.0.0",
    "typing-extensions>=4.8.0",
    # Async and Concurrency
    "asyncio-throttle>=1.0.2",
    "aiofiles>=23.2.1",
    # Configuration Management
    "python-dotenv>=1.0.0",
    "toml>=0.10.2",
    # CLI and Rich UI
    "rich>=13.7.0",
    "typer>=0.9.0",
    "click>=8.1.7",
    # Cloud Integration
    "google-cloud-run>=0.10.0",
    "google-cloud-tasks>=2.15.0",
    "google-cloud-monitoring>=2.16.0",
    # Monitoring and Observability
    "prometheus-client>=0.19.0",
    # Development Tools
    "watchdog>=3.0.0",
    # Security
    "cryptography>=41.0.0",
    "pyjwt>=2.8.0",
    # System monitoring
    "psutil>=5.9.0",
    "superclaude>=4.0.9",
]

[project.optional-dependencies]
# FastAPI Web Framework Support
web = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "gunicorn>=21.2.0",
]

# Database Support
database = [
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",  # PostgreSQL
    "aiosqlite>=0.19.0",  # SQLite
    "redis>=5.0.1",
]

# Testing Framework
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",  # For testing FastAPI
    "faker>=20.1.0",
]

# Development Tools
dev = [
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
    "bandit>=1.7.5",  # Security linting
]

# Documentation
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-mermaid2-plugin>=1.1.1",
]

# AI/ML Integration (Optional)
ai = [
    "openai>=1.3.0",
    "anthropic>=0.7.0",
    "transformers>=4.35.0",
]

# All optional dependencies
all = [
    "rfs-framework[web,database,test,dev,docs,ai]"
]

[project.urls]
Homepage = "https://github.com/interactord/rfs-framework"
Documentation = "https://github.com/interactord/rfs-framework#documentation"
Repository = "https://github.com/interactord/rfs-framework"
"Bug Tracker" = "https://github.com/interactord/rfs-framework/issues"
Changelog = "https://github.com/interactord/rfs-framework/blob/main/CHANGELOG.md"

[project.scripts]
rfs-cli = "rfs.cli.main:main"
rfs = "rfs.cli.main:main"

[tool.hatch.version]
path = "src/rfs/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/rfs"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/examples",
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
]

# Black 포맷터 설정
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # 제외할 디렉토리들
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort 설정 (import 정렬)
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy 타입 체크 설정
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# 외부 라이브러리 타입 체크 무시
[[tool.mypy.overrides]]
module = [
    "google.cloud.*",
    "prometheus_client",
    "rich.*",
    "typer",
]
ignore_missing_imports = true

# Pytest 설정
[tool.pytest.ini_options]
minversion = "7.0"
asyncio_mode = "auto"  # strict 대신 auto 사용하여 async fixture 문제 완화
asyncio_default_fixture_loop_scope = "function"  # 함수 레벨 이벤트 루프
addopts = [
    "-ra",  # 모든 테스트 결과 요약 표시
    "-q",   # 간단한 출력
    "--strict-markers",
    "--strict-config",
    "--cov=rfs",  # 커버리지 측정
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = [
    "tests",
]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
    "asyncio: marks tests as async tests",
]

# 커버리지 설정
[tool.coverage.run]
source = ["src/rfs"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/__pycache__/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    # 추상 메서드 제외
    "@(abc\\.)?abstractmethod",
    "@(abc\\.)?abstractproperty",
    # pass 문 제외
    "^\\s*pass$",
    "^\\s*\\.\\.\\.$",
]

# Bandit 보안 검사 설정
[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]  # assert 문과 shell injection 제외

# Ruff 린터 설정 (flake8 대체)
[tool.ruff]
line-length = 88
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (black이 처리)
    "B008",  # function call in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # unused import in __init__.py
"tests/*" = ["B011"]  # pytest assert rewriting
