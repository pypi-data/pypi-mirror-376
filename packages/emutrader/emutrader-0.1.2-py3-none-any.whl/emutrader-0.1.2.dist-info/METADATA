Metadata-Version: 2.4
Name: emutrader
Version: 0.1.2
Summary: A Python library for quantitative trading simulation and backtesting
Home-page: https://github.com/yourusername/EmuTrader
Author: Your Name
Author-email: xledoo <xledoo@gmail.com>
Maintainer-email: xledoo <xledoo@gmail.com>
License: MIT License
        
        Copyright (c) 2024 EmuTrader
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://gitee.com/xledoo/emutrader
Project-URL: Documentation, https://emutrader.readthedocs.io/
Project-URL: Repository, https://gitee.com/xledoo/emutrader.git
Project-URL: Bug Tracker, https://gitee.com/xledoo/emutrader/issues
Keywords: quantitative trading,backtesting,simulation,finance,algorithmic trading
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Office/Business :: Financial :: Investment
Classifier: Topic :: Scientific/Engineering :: Mathematics
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.21.0
Requires-Dist: pandas>=1.3.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: loguru>=0.6.0
Requires-Dist: typing-extensions>=4.0.0
Provides-Extra: talib
Requires-Dist: talib>=0.4.0; extra == "talib"
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: pre-commit; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx; extra == "docs"
Requires-Dist: sphinx-rtd-theme; extra == "docs"
Requires-Dist: myst-parser; extra == "docs"
Provides-Extra: analysis
Requires-Dist: matplotlib>=3.5.0; extra == "analysis"
Requires-Dist: scipy>=1.7.0; extra == "analysis"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

<<<<<<< HEAD
# EmuTrader

[![Python Version](https://img.shields.io/badge/python-3.8+-blue.svg)](https://python.org)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![PyPI version](https://badge.fury.io/py/emutrader.svg)](https://badge.fury.io/py/emutrader)

**EmuTrader** ÊòØ‰∏Ä‰∏™‰∏ì‰∏∫ÈáèÂåñ‰∫§ÊòìËÆæËÆ°ÁöÑPythonÁã¨Á´ãË¥¶Êà∑ÁÆ°ÁêÜÂ∫ìÔºåÊèê‰æõÂº∫Â§ßÁöÑÊ®°Êãü‰∫§ÊòìÂíåÂõûÊµãÂäüËÉΩ„ÄÇÊèê‰æõ100%ÂÖºÂÆπJoinQuant APIÁöÑÁªü‰∏ÄÊé•Âè£ÔºåÈÄöËøáÊ®°ÊãüÁúüÂÆûÁöÑ‰∫§ÊòìÁéØÂ¢ÉÔºåÂ∏ÆÂä©‰∫§ÊòìËÄÖÂíåÂºÄÂèëËÄÖÊµãËØï‰∫§ÊòìÁ≠ñÁï•ÔºåËÄåÊó†ÈúÄÊâøÊãÖÂÆûÈôÖËµÑÈáëÈ£éÈô©„ÄÇÊîØÊåÅÂ§öÂπ≥Âè∞ÈÉ®ÁΩ≤ÂíåÈ´òÊÄßËÉΩÊï∞ÊçÆÊåÅ‰πÖÂåñ„ÄÇ


## ‚ú® Ê†∏ÂøÉÁâπÊÄß

- üîÑ **JoinQuantÂÆåÂÖ®ÂÖºÂÆπ** - Áé∞ÊúâÁ≠ñÁï•Èõ∂‰øÆÊîπËøÅÁßªÔºåAPI 100%ÂÖºÂÆπ
- üèóÔ∏è **ÈÄÇÈÖçÂô®Êû∂ÊûÑ** - Áªü‰∏ÄÊé•Âè£ÊîØÊåÅQMT„ÄÅËÅöÂÆΩÁ≠âÂ§öÂπ≥Âè∞Êó†ÁºùÈõÜÊàê  
- üíæ **Êï∞ÊçÆÊåÅ‰πÖÂåñ** - SQLiteÂèØÈù†Â≠òÂÇ® + Êô∫ËÉΩÁºìÂ≠ò‰ºòÂåñ
- ‚ö° **È´òÊÄßËÉΩ‰ºòÂåñ** - LRUÁºìÂ≠ò + ÊâπÈáèÊìç‰ΩúÔºåÊü•ËØ¢ÂìçÂ∫î < 10ms
- üîß **Â§öË¥¶Êà∑Á±ªÂûã** - STOCK/FUTURE/CREDIT/OPTIONÁ≠âÂÆåÊï¥ÊîØÊåÅ
- üõ°Ô∏è **Á∫øÁ®ãÂÆâÂÖ®** - ÊîØÊåÅÂ§öÁ≠ñÁï•Âπ∂ÂèëËøêË°å
- üìä **È£éÈô©ÁÆ°ÁêÜ** - ÂÜÖÁΩÆÈ£éÈô©ÊéßÂà∂ÂíåÊÄßËÉΩËøΩË∏™

## ‰∏ªË¶ÅÁâπÊÄß

- üéØ **Ê®°Êãü‰∫§ÊòìÁéØÂ¢É** - ÂÆåÂÖ®Ê®°ÊãüÁúüÂÆû‰∫§ÊòìÂú∫ÊôØ
- üìä **Á≠ñÁï•ÂõûÊµã** - ÊîØÊåÅÂéÜÂè≤Êï∞ÊçÆÂõûÊµãÂàÜÊûê
- üí∞ **ËµÑÈáëÁÆ°ÁêÜ** - ÁÅµÊ¥ªÁöÑË¥¶Êà∑ËµÑÈáëÁÆ°ÁêÜ
- üìà **ÂÆûÊó∂ÁõëÊéß** - ÂÆûÊó∂Ë∑üË∏™‰∫§ÊòìË°®Áé∞
- üîß **Êòì‰∫éÊâ©Â±ï** - Ê®°ÂùóÂåñËÆæËÆ°Ôºå‰æø‰∫éËá™ÂÆö‰πâÊâ©Â±ï
- üìù **ËØ¶ÁªÜÊó•Âøó** - ÂÆåÊï¥ÁöÑ‰∫§ÊòìËÆ∞ÂΩïÂíåÊó•Âøó

## Âø´ÈÄüÂºÄÂßã

### ÂÆâË£Ö

# EmuTrader - ‰∏ì‰∏öÁöÑÈáèÂåñ‰∫§ÊòìË¥¶Êà∑ÁÆ°ÁêÜÂ∫ì

[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://opensource.org/licenses/MIT)
[![Tests](https://img.shields.io/badge/tests-passing-brightgreen.svg)](tests/)

**EmuTrader** ÊòØ‰∏Ä‰∏™‰∏ì‰∏∫ÈáèÂåñ‰∫§ÊòìËÆæËÆ°ÁöÑPythonË¥¶Êà∑ÁÆ°ÁêÜÂ∫ìÔºå‰∏ìÊ≥®‰∫éÊèê‰æõÈ´òÊÄßËÉΩÁöÑË¥¶Êà∑Áä∂ÊÄÅÁÆ°ÁêÜÂíåÂÆûÊó∂Áõà‰∫èËÆ°ÁÆóÂäüËÉΩ„ÄÇÈ°πÁõÆÊ†∏ÂøÉÁâπËâ≤ÊòØ**100%ÂÖºÂÆπJoinQuant API**Ôºå‰∏∫QSMÁ≠âÁ≠ñÁï•Á≥ªÁªüÊèê‰æõÂº∫Â§ßÁöÑË¥¶Êà∑ÁÆ°ÁêÜËÉΩÂäõ„ÄÇ

## üéØ ÈáçÊñ∞ÂÆö‰ΩçÔºö‰∏ì‰∏öË¥¶Êà∑ÁÆ°ÁêÜÂ∫ì

### ‚úÖ ‰∏∫Á≠ñÁï•Á≥ªÁªüÊúçÂä°
- **‰∏ìÊ≥®Ë¥¶Êà∑ÁÆ°ÁêÜ**ÔºöPortfolio„ÄÅSubPortfolio„ÄÅPositionÁä∂ÊÄÅÁÆ°ÁêÜ
- **ÂÆûÊó∂Áõà‰∫èËÆ°ÁÆó**ÔºöÂü∫‰∫étickÊï∞ÊçÆÁöÑÂÜÖÂ≠òÂÆûÊó∂ËÆ°ÁÆó
- **QSMÈõÜÊàêÊé•Âè£**Ôºö‰ª∑Ê†ºÊõ¥Êñ∞„ÄÅ‰∫§ÊòìÊâßË°å„ÄÅÊï∞ÊçÆÊåÅ‰πÖÂåñ
- **JQ APIÂÖºÂÆπ**Ôºö`context.portfolio` = EmuTraderÁöÑPortfolioÂØπË±°

### üöÄ È´òÊÄßËÉΩÊû∂ÊûÑ
- **ÂÜÖÂ≠òËÆ°ÁÆó**Ôºö‰ª∑Ê†ºÊõ¥Êñ∞ÂíåÁõà‰∫èËÆ°ÁÆóÂú®ÂÜÖÂ≠ò‰∏≠ÂÆåÊàêÔºåÁõÆÊ†áÂìçÂ∫îÊó∂Èó¥ < 10ms
- **ÊâπÈáèÊìç‰Ωú**ÔºöÊîØÊåÅÊâπÈáè‰ª∑Ê†ºÊõ¥Êñ∞ÔºåÂáèÂ∞ëÂáΩÊï∞Ë∞ÉÁî®ÂºÄÈîÄ
- **Êï∞ÊçÆÈó≠ÁéØ**ÔºöDBÂä†ËΩΩ ‚Üí ÂÜÖÂ≠òÂÆûÊó∂Êõ¥Êñ∞ ‚Üí ÂÆöÊúü‰øùÂ≠ò
- **ËΩªÈáèÁ∫ßËÆæËÆ°**ÔºöÂÜÖÂ≠òÂç†Áî® < 50MB

### üìä ÂÆåÊï¥ÁöÑË¥¶Êà∑‰ΩìÁ≥ª
- **ËÇ°Á•®Ë¥¶Êà∑** (STOCK)ÔºöAËÇ°Ê†áÂáÜ‰∫§Êòì
- **ÊúüË¥ßË¥¶Êà∑** (FUTURE)ÔºöÊúüË¥ßÂêàÁ∫¶‰∫§Êòì  
- **‰ø°Áî®Ë¥¶Êà∑** (CREDIT)ÔºöËûçËµÑËûçÂà∏
- **ÈáëËûçÊúüË¥ß** (INDEX_FUTURE)ÔºöËÇ°ÊåáÊúüË¥ß

## üèóÔ∏è Êñ∞Êû∂ÊûÑËÆæËÆ°

### Ê†∏ÂøÉÂÆö‰Ωç
```
QSMÁ≠ñÁï•Á≥ªÁªü                    EmuTraderË¥¶Êà∑ÁÆ°ÁêÜÂ∫ì
‚îú‚îÄ‚îÄ StrategyContext           ‚îú‚îÄ‚îÄ AccountContext
‚îÇ   ‚îú‚îÄ‚îÄ current_dt           ‚îÇ   ‚îú‚îÄ‚îÄ portfolio (ÊäïËµÑÁªÑÂêà)
‚îÇ   ‚îú‚îÄ‚îÄ run_params           ‚îÇ   ‚îî‚îÄ‚îÄ subportfolios (Â≠êË¥¶Êà∑)  
‚îÇ   ‚îî‚îÄ‚îÄ emutrader ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ EmuTrader‰∏ªÁ±ª
‚îú‚îÄ‚îÄ Ë°åÊÉÖÊï∞ÊçÆÁÆ°ÁêÜ               ‚îÇ   ‚îú‚îÄ‚îÄ ‰ª∑Ê†ºÊõ¥Êñ∞Êé•Âè£
‚îú‚îÄ‚îÄ Á≠ñÁï•ÈÄªËæë                  ‚îÇ   ‚îú‚îÄ‚îÄ ‰∫§ÊòìÊâßË°åÊé•Âè£
‚îî‚îÄ‚îÄ ‰∫§ÊòìÂÜ≥Á≠ñ                  ‚îÇ   ‚îî‚îÄ‚îÄ Êï∞ÊçÆÊåÅ‰πÖÂåñÊé•Âè£
                             ‚îî‚îÄ‚îÄ Portfolio/PositionÊ†∏ÂøÉÂØπË±°
```

### Êï∞ÊçÆÊµÅËÆæËÆ°
```
1. ÂàùÂßãÂåñ: DB ‚Üí EmuTrader.load_from_db() ‚Üí ÂÜÖÂ≠òË¥¶Êà∑Áä∂ÊÄÅ
2. ËøêË°åÊó∂: QSMÊé®ÈÄÅtick ‚Üí update_market_price() ‚Üí ÂÆûÊó∂Áõà‰∫èËÆ°ÁÆó  
3. ‰∫§ÊòìÊó∂: QSMÁ≠ñÁï•ÂÜ≥Á≠ñ ‚Üí execute_trade() ‚Üí Ë¥¶Êà∑Áä∂ÊÄÅÊõ¥Êñ∞
4. ÊåÅ‰πÖÂåñ: ÂÜÖÂ≠òÁä∂ÊÄÅ ‚Üí save_to_db() ‚Üí DBÊñá‰ª∂Êõ¥Êñ∞
```

## üöÄ Âø´ÈÄüÂºÄÂßã

### ÂÆâË£Ö
```bash
pip install emutrader
```
### QSMÁ≠ñÁï•Á≥ªÁªüÈõÜÊàê
```python
from emutrader import get_jq_account

# 1. QSMÂàõÂª∫EmuTraderÂÆû‰æã
emutrader = get_jq_account("my_strategy", 100000)
emutrader.load_from_db("account.db")  # ‰ªéDBÂä†ËΩΩÂàùÂßãÁä∂ÊÄÅ

# 2. QSMÂàõÂª∫Ëá™Â∑±ÁöÑÁ≠ñÁï•‰∏ä‰∏ãÊñá
class QSMStrategyContext:
    def __init__(self, emutrader):
        self.current_dt = datetime.now()  # QSMÁÆ°ÁêÜÊó∂Èó¥
        self.run_params = {}              # QSMÁÆ°ÁêÜÁ≠ñÁï•ÂèÇÊï∞
        self._emutrader = emutrader       # ÂºïÁî®Ë¥¶Êà∑ÁÆ°ÁêÜÂô®
    
    @property
    def portfolio(self):
        """QSMÁöÑcontext.portfolio = EmuTraderÁöÑPortfolioÂØπË±°"""
        return self._emutrader.get_portfolio()
    
    @property
    def subportfolios(self):
        """QSMÁöÑcontext.subportfolios = EmuTraderÁöÑSubPortfolioÂàóË°®"""
        return self._emutrader.get_subportfolios()

# 3. QSMËøêË°åÊó∂ÈõÜÊàê
context = QSMStrategyContext(emutrader)

# ËÆ¢ÈòÖË°åÊÉÖ
securities = emutrader.get_all_securities()  # ['000001.SZ', '000002.SZ']
market_data.subscribe(securities)

# Â§ÑÁêÜtickÊï∞ÊçÆ
def on_tick(security, price):
    emutrader.update_market_price(security, price)  # ÂÆûÊó∂Êõ¥Êñ∞‰ª∑Ê†º

# Á≠ñÁï•‰∫§Êòì
def qsm_order_shares(security, amount):
    price = get_current_price(security)  # QSMËé∑Âèñ‰ª∑Ê†º
    return emutrader.execute_trade(security, amount, price)

# ÂÆöÊúü‰øùÂ≠ò
emutrader.save_to_db()  # QSMÊéßÂà∂‰øùÂ≠òÊó∂Êú∫
```

### 100% JoinQuantÂÖºÂÆπ‰ΩøÁî®
```python
from emutrader import get_jq_account, order_shares, order_target_percent

# Áé∞ÊúâJQÁ≠ñÁï•‰ª£Á†ÅÊó†ÈúÄ‰øÆÊîπ
context = get_jq_account("my_strategy", 100000, "STOCK")

# contextÂÆûÈôÖÊòØEmuTraderÂÆû‰æãÔºå‰ΩÜÊèê‰æõJQÂÖºÂÆπÊé•Âè£
print(f"ÊÄªËµÑ‰∫ß: {context.portfolio.total_value}")
print(f"ÂèØÁî®ËµÑÈáë: {context.portfolio.available_cash}")
print(f"ÊåÅ‰ªìÂ∏ÇÂÄº: {context.portfolio.market_value}")

# ‰∫§ÊòìAPI‰øùÊåÅ‰∏çÂèò
order_shares('000001.SZ', 1000)
order_target_percent('600519.SH', 0.3)

# Êü•ÁúãÊåÅ‰ªì
for security, position in context.portfolio.positions.items():
    if position.total_amount > 0:
        print(f"{security}: {position.total_amount}ËÇ°, Â∏ÇÂÄº: {position.value:.2f}")
```

### Â≠êË¥¶Êà∑ÁÆ°ÁêÜ
```python
from emutrader import set_subportfolios, SubPortfolioConfig, transfer_cash

# ËÆæÁΩÆÂ≠êË¥¶Êà∑
set_subportfolios([
    SubPortfolioConfig(cash=400000, type='stock'),
    SubPortfolioConfig(cash=300000, type='futures'),
])

# ËÆøÈóÆÂ≠êË¥¶Êà∑
for i, sub in enumerate(context.subportfolios):
    print(f"Â≠êË¥¶Êà∑{i}: ËµÑÈáë={sub.available_cash}, Â∏ÇÂÄº={sub.market_value}")

# Â≠êË¥¶Êà∑ËµÑÈáëËΩ¨Áßª
transfer_cash(from_pindex=1, to_pindex=0, cash=50000)
```

## üîå QSMÈõÜÊàêÊé•Âè£ËØ¶Ëß£

### Ë¥¶Êà∑Êï∞ÊçÆËÆøÈóÆ
```python
# PortfolioÂØπË±°ËÆøÈóÆÔºàQSMÁöÑcontext.portfolioÔºâ
portfolio = emutrader.get_portfolio()
print(f"ÊÄªËµÑ‰∫ß: {portfolio.total_value}")
print(f"ÂèØÁî®ËµÑÈáë: {portfolio.available_cash}")
print(f"ÊåÅ‰ªìÂ∏ÇÂÄº: {portfolio.market_value}")
print(f"Êî∂ÁõäÁéá: {portfolio.returns}")

# SubPortfolioÂàóË°®ËÆøÈóÆÔºàQSMÁöÑcontext.subportfoliosÔºâ
subportfolios = emutrader.get_subportfolios()
for sub in subportfolios:
    print(f"Â≠êË¥¶Êà∑Á±ªÂûã: {sub.type}, ËµÑÈáë: {sub.available_cash}")
```

### ‰ª∑Ê†ºÊï∞ÊçÆÊé®ÈÄÅ
```python
# Âçï‰∏™‰ª∑Ê†ºÊõ¥Êñ∞
emutrader.update_market_price('000001.SZ', 12.5)

# ÊâπÈáè‰ª∑Ê†ºÊõ¥Êñ∞ÔºàÈ´òÊÄßËÉΩÔºâ
price_data = {
    '000001.SZ': 12.5,
    '000002.SZ': 8.3,
    '600519.SH': 1580.0
}
emutrader.batch_update_prices(price_data)

# Ëé∑ÂèñÈúÄË¶ÅËÆ¢ÈòÖÁöÑËØÅÂà∏ÂàóË°®
securities = emutrader.get_all_securities()
print(f"ÈúÄË¶ÅËÆ¢ÈòÖË°åÊÉÖ: {securities}")
```

### ‰∫§ÊòìÊâßË°å
```python
# ‰∏ªË¥¶Êà∑‰∫§Êòì
success = emutrader.execute_trade('000001.SZ', 1000, 12.5)  # ‰π∞ÂÖ•1000ËÇ°

# ÊåáÂÆöÂ≠êË¥¶Êà∑‰∫§Êòì
success = emutrader.execute_trade('000001.SZ', 1000, 12.5, subportfolio_index=0)

# Â≠êË¥¶Êà∑ËµÑÈáëËΩ¨Áßª
success = emutrader.transfer_cash(from_index=1, to_index=0, amount=50000)
```

### Êï∞ÊçÆÊåÅ‰πÖÂåñ
```python
# ‰ªéÊï∞ÊçÆÂ∫ìÂä†ËΩΩË¥¶Êà∑Áä∂ÊÄÅÔºàQSMÂàùÂßãÂåñÊó∂Ôºâ
success = emutrader.load_from_db("accounts.db")

# ‰øùÂ≠òË¥¶Êà∑Áä∂ÊÄÅÂà∞Êï∞ÊçÆÂ∫ìÔºàQSMÂÆöÊúüË∞ÉÁî®Ôºâ
success = emutrader.save_to_db("accounts.db")

# Ëé∑ÂèñË¥¶Êà∑ÂÆåÊï¥‰ø°ÊÅØÔºàÁî®‰∫éÁõëÊéßÂíåË∞ÉËØïÔºâ
info = emutrader.get_account_info()
print(info)
```

## üìã API ÂèÇËÄÉ

### EmuTrader‰∏ªÁ±ªÊé•Âè£

#### Ë¥¶Êà∑Êï∞ÊçÆËÆøÈóÆ
- `get_portfolio()` ‚Üí PortfolioÂØπË±°
- `get_subportfolios()` ‚Üí List[SubPortfolio]
- `get_subportfolio(index)` ‚Üí SubPortfolio
- `get_account_info()` ‚Üí Dict[Ë¥¶Êà∑‰ø°ÊÅØ]

#### QSMÈõÜÊàêÊé•Âè£
- `update_market_price(security, price, timestamp)` - Êõ¥Êñ∞Âçï‰∏™‰ª∑Ê†º
- `batch_update_prices(price_data, timestamp)` - ÊâπÈáèÊõ¥Êñ∞‰ª∑Ê†º
- `get_all_securities()` ‚Üí List[str] - Ëé∑ÂèñÊåÅ‰ªìËØÅÂà∏ÂàóË°®
- `execute_trade(security, amount, price, subportfolio_index)` ‚Üí bool - ÊâßË°å‰∫§Êòì
- `transfer_cash(from_index, to_index, amount)` ‚Üí bool - ËµÑÈáëËΩ¨Áßª

#### Êï∞ÊçÆÊåÅ‰πÖÂåñ
- `load_from_db(db_path)` ‚Üí bool - ‰ªéÊï∞ÊçÆÂ∫ìÂä†ËΩΩ
- `save_to_db(db_path)` ‚Üí bool - ‰øùÂ≠òÂà∞Êï∞ÊçÆÂ∫ì

### JoinQuantÂÖºÂÆπAPI

#### Ê†∏ÂøÉÂáΩÊï∞
- `get_jq_account(strategy_name, initial_cash, account_type)` ‚Üí EmuTrader
- `set_subportfolios(configs)` - ËÆæÁΩÆÂ≠êË¥¶Êà∑
- `transfer_cash(from_pindex, to_pindex, cash)` ‚Üí bool

#### ‰∫§ÊòìÂáΩÊï∞
- `order_shares(security, amount, price=None)` ‚Üí Order
- `order_value(security, value, price=None)` ‚Üí Order
- `order_target_percent(security, percent)` ‚Üí Order

## üìä ÊÄßËÉΩÊåáÊ†á

| ÊåáÊ†á | ÁõÆÊ†áÂÄº | ÂÆûÁé∞Áä∂ÊÄÅ |
|------|--------|----------|
| ‰ª∑Ê†ºÊõ¥Êñ∞ÂìçÂ∫îÊó∂Èó¥ | < 5ms | ‚úÖ ÂÜÖÂ≠òÊìç‰Ωú |
| Áõà‰∫èËÆ°ÁÆóÊó∂Èó¥ | < 10ms | ‚úÖ ÂÆûÊó∂ËÆ°ÁÆó |
| ‰∫§ÊòìÊâßË°åÊó∂Èó¥ | < 50ms | ‚úÖ Ë¥¶Êà∑Áä∂ÊÄÅÊõ¥Êñ∞ |
| ÊâπÈáè‰ª∑Ê†ºÊõ¥Êñ∞ | > 1000/s | ‚úÖ ÊâπÈáèÊìç‰Ωú‰ºòÂåñ |
| ÂÜÖÂ≠òÂç†Áî® | < 50MB | ‚úÖ ËΩªÈáèÁ∫ßËÆæËÆ° |
| Êï∞ÊçÆÂ∫ì‰øùÂ≠ò | < 100ms | ‚úÖ SQLite‰ºòÂåñ |

## üß™ ÊµãËØï

```bash
# ÂÆâË£ÖÊµãËØï‰æùËµñ
pip install -e ".[dev]"

# ËøêË°åÊâÄÊúâÊµãËØï
pytest

# ËøêË°åË¶ÜÁõñÁéáÊµãËØï
pytest --cov=emutrader --cov-report=html

# ËøêË°åÁâπÂÆöÊµãËØï
pytest tests/test_jq_compatibility.py
```

## üó∫Ô∏è ÈáçÊûÑÂéÜÁ®ã

### ‚úÖ v1.0.0 - Êû∂ÊûÑÈáçÊûÑÂÆåÊàê
- **ÈáçÊñ∞ÂÆö‰Ωç**Ôºö‰ªéÁ≠ñÁï•Ê°ÜÊû∂ÈáçÊûÑ‰∏∫‰∏ì‰∏öË¥¶Êà∑ÁÆ°ÁêÜÂ∫ì
- **QSMÈõÜÊàê**ÔºöÊèê‰æõÂÆåÊï¥ÁöÑÁ≠ñÁï•Á≥ªÁªüÈõÜÊàêÊé•Âè£
- **ËÅåË¥£ÂàÜÁ¶ª**ÔºöEmuTrader‰∏ìÊ≥®Ë¥¶Êà∑ÔºåQSM‰∏ìÊ≥®Á≠ñÁï•
- **ÊÄßËÉΩ‰ºòÂåñ**ÔºöÂÜÖÂ≠òÂÆûÊó∂ËÆ°ÁÆó + ÂÆöÊúüÊâπÈáè‰øùÂ≠ò

### üîÑ v1.1.0 - ËßÑÂàí‰∏≠
- Êï∞ÊçÆÂ∫ìÊÄßËÉΩ‰ºòÂåñÂíåÈ´òÁ∫ßÊü•ËØ¢ÊîØÊåÅ
- Êõ¥Â§ö‰∫§ÊòìÂìÅÁßçÂíåÂ§çÊùÇËÆ¢ÂçïÁ±ªÂûã
- Ë¥¶Êà∑Áä∂ÊÄÅÁõëÊéßÂíåÂëäË≠¶Êú∫Âà∂
- Â§öÁ≠ñÁï•Ë¥¶Êà∑ÈöîÁ¶ªÂíåËµÑÊ∫êÁÆ°ÁêÜ

### üìã v1.2.0 - Êú™Êù•ÁâàÊú¨
- ÂàÜÂ∏ÉÂºèË¥¶Êà∑ÁÆ°ÁêÜÊîØÊåÅ
- ÂÆûÊó∂È£éÈô©ÁõëÊéßÁ≥ªÁªü
- Ë¥¶Êà∑Êï∞ÊçÆÂàÜÊûêÂíåÊä•Ë°®
- ‰∫ëÁ´ØÈÉ®ÁΩ≤ÂíåÈõÜÁæ§ÁÆ°ÁêÜ

## ü§ù ‰ΩøÁî®Âú∫ÊôØ

### 1. QSMÁ≠ñÁï•Á≥ªÁªü
- **‰∏ì‰∏öÈõÜÊàê**Ôºö‰∏∫QSMÊèê‰æõÈ´òÊÄßËÉΩË¥¶Êà∑ÁÆ°ÁêÜ
- **ÂÆûÊó∂ËÆ°ÁÆó**ÔºötickÁ∫ßÂà´ÁöÑÁõà‰∫èÂÆûÊó∂Êõ¥Êñ∞
- **Êï∞ÊçÆÈó≠ÁéØ**ÔºöÂÆåÊï¥ÁöÑË¥¶Êà∑Áä∂ÊÄÅÁîüÂëΩÂë®ÊúüÁÆ°ÁêÜ

### 2. JoinQuantÁ≠ñÁï•ËøÅÁßª
- **Èõ∂‰øÆÊîπËøÅÁßª**ÔºöÁé∞ÊúâJQÁ≠ñÁï•Áõ¥Êé•ËøêË°å
- **ÂÆåÊï¥ÂÖºÂÆπ**ÔºöÊâÄÊúâJQ APIÂáΩÊï∞ÂíåÂØπË±°ËÆøÈóÆÊñπÂºè
- **Êâ©Â±ïÂ¢ûÂº∫**ÔºöÊèê‰æõJQ‰∏çÂÖ∑Â§áÁöÑÈ´òÁ∫ßÂäüËÉΩ

### 3. Â§öÁ≠ñÁï•ÁÆ°ÁêÜ
- **Ë¥¶Êà∑ÈöîÁ¶ª**Ôºö‰∏çÂêåÁ≠ñÁï•‰ΩøÁî®Áã¨Á´ãÁöÑEmuTraderÂÆû‰æã
- **ËµÑÊ∫êÂÖ±‰∫´**ÔºöÂ§ö‰∏™Á≠ñÁï•ÂèØ‰ª•ÂÖ±‰∫´Ë°åÊÉÖÊï∞ÊçÆÊé®ÈÄÅ
- **Áªü‰∏ÄÁÆ°ÁêÜ**ÔºöÈõÜ‰∏≠ÁöÑË¥¶Êà∑Áä∂ÊÄÅÁõëÊéßÂíåÁÆ°ÁêÜ

## üìÑ ËÆ∏ÂèØËØÅ

Êú¨È°πÁõÆÈááÁî® [MIT ËÆ∏ÂèØËØÅ](LICENSE)„ÄÇ

## üìû ÊîØÊåÅ‰∏éËÅîÁ≥ª

- **Êû∂ÊûÑÊñáÊ°£**: [docs/ARCHITECTURE_REFACTOR.md](docs/ARCHITECTURE_REFACTOR.md)
- **ÈóÆÈ¢òÂèçÈ¶à**: [GitHub Issues](https://github.com/your-username/emutrader/issues)
- **ÂäüËÉΩÂª∫ËÆÆ**: [GitHub Discussions](https://github.com/your-username/emutrader/discussions)

## üôè Ëá¥Ë∞¢

- [JoinQuant](https://www.joinquant.com/) - Êèê‰æõ‰ºòÁßÄÁöÑAPIËÆæËÆ°ÊÄùË∑Ø
- QSMÁ≠ñÁï•Á≥ªÁªü - Êé®Âä®Êû∂ÊûÑÈáçÊûÑÁöÑÈáçË¶ÅÂêà‰Ωú‰ºô‰º¥
- ÊâÄÊúâË¥°ÁåÆËÄÖÂíå‰ΩøÁî®ËÄÖÁöÑÊîØÊåÅ

---

**EmuTrader** - ‰∏ì‰∏öÁöÑÈáèÂåñ‰∫§ÊòìË¥¶Êà∑ÁÆ°ÁêÜÂ∫ì üöÄ
>>>>>>> 273075473cf8811eb5b4e75fcecbe452b658d2f8
