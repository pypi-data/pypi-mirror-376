[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vnstock-mcp-server"
version = "1.0.1"
description = "An MCP server exposing tools to access Vietnam stock market data built on top of vnstock and mcp"
authors = [
    {name = "Mao Bui", email = "maonguyen199873@gmail.com"},
]
dependencies = ["mcp>=1.13.1", "vnstock>=3.2.6"]
requires-python = ">=3.10"
readme = "README.md"
license = {text = "MIT"}
keywords = ["mcp", "vnstock", "vietnam", "stock", "market", "finance"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
Homepage = "https://github.com/MaoBui2907/vnstock-mcp-server"
Repository = "https://github.com/MaoBui2907/vnstock-mcp-server"
Issues = "https://github.com/MaoBui2907/vnstock-mcp-server"

[project.scripts]
vnstock-mcp-server = "vnstock_mcp.server:main"

[tool.pdm]
distribution = true

[dependency-groups]
dev = [
    "ipykernel>=6.30.1",
    "pytest>=8.0.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
    "build>=1.0.0",
    "twine>=4.0.0",
]

[tool.pytest.ini_options]
testpaths = ["test"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src/vnstock_mcp",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--strict-markers",
    "-v"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests that make external API calls"
]

[tool.coverage.run]
source = ["src/vnstock_mcp"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]
