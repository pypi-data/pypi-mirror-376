[project]
name = "dash-dashkit"
version = "1.5.0"
description = "Modern dashboard components for Dash applications"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "dash>=2.17.0",
    "dash-bootstrap-components>=1.5.0",
    "plotly>=5.17.0",
    "dash-iconify>=0.1.2",
    "dash-mantine-components>=2.1.0",
    "pyyaml>=6.0.2",
    "dashkit_table>=1.1.2",
]
keywords = [
    "dash",
    "plotly",
    "dashboard",
    "components",
    "ui",
    "tailwind",
    "handsontable",
    "charts",
]
license = { text = "MIT" }
authors = [{ name = "Dashkit Team" }]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Dash",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: User Interfaces",
]

[project.urls]
Homepage = "https://pypi.org/project/dash-dashkit/"
Source = "https://github.com/iamgp/dash_dashkit"
Issues = "https://github.com/iamgp/dash_dashkit/issues"

[project.optional-dependencies]
# Install kiboui graphs: pip install dash-dashkit[kiboui]
kiboui = ["dashkit_kiboui>=1.0.1"]
# Install charts: pip install dash-dashkit[charts]
charts = ["dashkit_shadcn>=1.0.1"]
# Everything: pip install dash-dashkit[all]
all = ["dashkit_kiboui>=1.0.1", "dashkit_shadcn>=1.0.1"]

dev = ["ruff>=0.1.0", "basedpyright>=1.10.0"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/dashkit"]
include = ["src/dashkit/assets/style.css"]

[tool.hatch.build.targets.sdist]
include = ["src/dashkit/**", "README.md", "LICENSE"]

[tool.ruff]
target-version = "py311"
line-length = 88
exclude = [
    "src/dashkit_table/**",
    "src/dashkit_kiboui/**",
    "src/dashkit_shadcn/**",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "TID", # tidy imports
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.basedpyright]
include = ["src"]
exclude = [
    "**/__pycache__",
    "src/dashkit_table/**",
    "src/dashkit_kiboui/**",
    "src/dashkit_shadcn/**",
]
extraPaths = ["src/dashkit_table", "src/dashkit_kiboui", "src/dashkit_shadcn"]
venvPath = "."
venv = ".venv"
reportMissingTypeStubs = false
reportUnknownParameterType = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownVariableType = false
reportMissingImports = false
reportAny = false
reportExplicitAny = false
reportUnusedParameter = false
reportMissingParameterType = false
reportArgumentType = false
reportReturnType = false
reportIncompatibleMethodOverride = false
reportImplicitOverride = false
reportUnannotatedClassAttribute = false
reportUnnecessaryIsInstance = false

[tool.uv.sources]
dashkit-table = { path = "src/dashkit_table" }
dashkit-kiboui = { path = "src/dashkit_kiboui" }
dashkit-shadcn = { path = "src/dashkit_shadcn" }

[dependency-groups]
dev = [
    "basedpyright>=1.31.0",
    "honcho>=2.0.0",
    "ruff>=0.12.7",
    "taskipy>=1.12.0",
    "build>=1.2.2",
    "twine>=5.0.0",
    "mkdocstrings[python]>=0.30.0",
    "mkdocs-shadcn>=0.9.1",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-git-revision-date-localized-plugin>=1.2.0",
    "mkdocs-minify-plugin>=0.7.0",
    "pymdown-extensions>=10.0",
]

[tool.taskipy.tasks]
setup = "cd src/dashkit_table && npm install && npm run build; uv pip install -e . --force-reinstall"
build-table = "cd src/dashkit_table && npm run build"
install-table = "cd src/dashkit_table && uv pip install -e ."
build-css = "npm run tw"
build-css-watch = "npm run build-css"
# Builds for PyPI
build-subpackages = "bash -lc 'cd src/dashkit_table && uv run python -m build && cd ../dashkit_shadcn && uv run python -m build && cd ../dashkit_kiboui && uv run python -m build'"
build-main = "uv run python -m build"
# Upload to TestPyPI (set TWINE_USERNAME=__token__ and TWINE_PASSWORD to your TestPyPI token)
publish-subpackages-test = "bash -lc 'ROOT=$PWD; cd src/dashkit_table && HOME=\"$ROOT\" uv run twine upload --repository-url https://test.pypi.org/legacy/ dist/*.whl dist/*.tar.gz && cd ../dashkit_shadcn && HOME=\"$ROOT\" uv run twine upload --repository-url https://test.pypi.org/legacy/ dist/*.whl dist/*.tar.gz && cd ../dashkit_kiboui && HOME=\"$ROOT\" uv run twine upload --repository-url https://test.pypi.org/legacy/ dist/*.whl dist/*.tar.gz'"
publish-main-test = "bash -lc 'HOME=\"$PWD\" uv run twine upload --repository-url https://test.pypi.org/legacy/ dist/dash_dashkit-*.whl dist/dash_dashkit-*.tar.gz'"
# Upload to PyPI (set TWINE_USERNAME=__token__ and TWINE_PASSWORD to your PyPI token)
publish-subpackages = "bash -lc 'ROOT=$PWD; cd src/dashkit_table && HOME=\"$ROOT\" uv run twine upload dist/*.whl dist/*.tar.gz && cd ../dashkit_shadcn && HOME=\"$ROOT\" uv run twine upload dist/*.whl dist/*.tar.gz && cd ../dashkit_kiboui && HOME=\"$ROOT\" uv run twine upload dist/*.whl dist/*.tar.gz'"
publish-main = "bash -lc 'HOME=\"$PWD\" uv run twine upload dist/dash_dashkit-*.whl dist/dash_dashkit-*.tar.gz'"
# QA
lint = "ruff check src/ && ruff format src/"
typecheck = "basedpyright src/"
check = "task lint && task typecheck"
# Documentation
docs-install = "uv sync --group docs"
docs-serve = "uv run --group docs mkdocs serve"
docs-build = "uv run --group docs mkdocs build"
docs-deploy = "uv run --group docs mkdocs gh-deploy"
# Bump versions for selected repos
bump = "uv run python scripts/bump_version.py"
# Release helper: bumps, commits, tags, and pushes by default
release = "uv run python scripts/bump_version.py --commit --tag --push"
