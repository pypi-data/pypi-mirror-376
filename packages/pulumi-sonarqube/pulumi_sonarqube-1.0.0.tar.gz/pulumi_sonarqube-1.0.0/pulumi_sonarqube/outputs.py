# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'PortfolioSelectedProject',
    'ProjectSetting',
    'QualitygateCondition',
    'GetQualitygateConditionResult',
]

@pulumi.output_type
class PortfolioSelectedProject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectKey":
            suggest = "project_key"
        elif key == "selectedBranches":
            suggest = "selected_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortfolioSelectedProject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortfolioSelectedProject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortfolioSelectedProject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project_key: builtins.str,
                 selected_branches: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str project_key: The project key of the project to add to the portfolio
        :param Sequence[builtins.str] selected_branches: A set of branches for the project to add to the portfolio
        """
        pulumi.set(__self__, "project_key", project_key)
        if selected_branches is not None:
            pulumi.set(__self__, "selected_branches", selected_branches)

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> builtins.str:
        """
        The project key of the project to add to the portfolio
        """
        return pulumi.get(self, "project_key")

    @property
    @pulumi.getter(name="selectedBranches")
    def selected_branches(self) -> Optional[Sequence[builtins.str]]:
        """
        A set of branches for the project to add to the portfolio
        """
        return pulumi.get(self, "selected_branches")


@pulumi.output_type
class ProjectSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldValues":
            suggest = "field_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: builtins.str,
                 field_values: Optional[Sequence[Mapping[str, builtins.str]]] = None,
                 value: Optional[builtins.str] = None,
                 values: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str key: Setting key
        :param Sequence[Mapping[str, builtins.str]] field_values: Setting field values for the supplied key
        :param builtins.str value: Setting a value for the supplied key
        :param Sequence[builtins.str] values: Setting multi values for the supplied key
        """
        pulumi.set(__self__, "key", key)
        if field_values is not None:
            pulumi.set(__self__, "field_values", field_values)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        Setting key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="fieldValues")
    def field_values(self) -> Optional[Sequence[Mapping[str, builtins.str]]]:
        """
        Setting field values for the supplied key
        """
        return pulumi.get(self, "field_values")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        Setting a value for the supplied key
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[builtins.str]]:
        """
        Setting multi values for the supplied key
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class QualitygateCondition(dict):
    def __init__(__self__, *,
                 metric: builtins.str,
                 op: builtins.str,
                 threshold: builtins.str,
                 id: Optional[builtins.str] = None):
        """
        :param builtins.str metric: Condition metric.
        :param builtins.str op: Condition operator. Possible values are: LT and GT
        :param builtins.str threshold: Condition error threshold (For ratings: A=1, B=2, C=3, D=4)
        :param builtins.str id: The ID of this resource.
        """
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "threshold", threshold)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def metric(self) -> builtins.str:
        """
        Condition metric.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def op(self) -> builtins.str:
        """
        Condition operator. Possible values are: LT and GT
        """
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def threshold(self) -> builtins.str:
        """
        Condition error threshold (For ratings: A=1, B=2, C=3, D=4)
        """
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetQualitygateConditionResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 metric: builtins.str,
                 op: builtins.str,
                 threshold: builtins.str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metric(self) -> builtins.str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def op(self) -> builtins.str:
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def threshold(self) -> builtins.str:
        return pulumi.get(self, "threshold")


