# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetRuleResult',
    'AwaitableGetRuleResult',
    'get_rule',
    'get_rule_output',
]

@pulumi.output_type
class GetRuleResult:
    """
    A collection of values returned by getRule.
    """
    def __init__(__self__, id=None, key=None, markdown_description=None, name=None, severity=None, status=None, template_key=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if markdown_description and not isinstance(markdown_description, str):
            raise TypeError("Expected argument 'markdown_description' to be a str")
        pulumi.set(__self__, "markdown_description", markdown_description)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if severity and not isinstance(severity, str):
            raise TypeError("Expected argument 'severity' to be a str")
        pulumi.set(__self__, "severity", severity)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if template_key and not isinstance(template_key, str):
            raise TypeError("Expected argument 'template_key' to be a str")
        pulumi.set(__self__, "template_key", template_key)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        The key of the sonarqube rule. Should be \\n\\n:\\n\\n. https://next.sonarqube.com/sonarqube/web_api/api/rules?query=api%2Frules%2Fcreate
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="markdownDescription")
    def markdown_description(self) -> builtins.str:
        """
        Rule description
        """
        return pulumi.get(self, "markdown_description")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def severity(self) -> builtins.str:
        """
        Rule severity
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Rule status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="templateKey")
    def template_key(self) -> builtins.str:
        """
        Key of the template rule
        """
        return pulumi.get(self, "template_key")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Rule type
        """
        return pulumi.get(self, "type")


class AwaitableGetRuleResult(GetRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRuleResult(
            id=self.id,
            key=self.key,
            markdown_description=self.markdown_description,
            name=self.name,
            severity=self.severity,
            status=self.status,
            template_key=self.template_key,
            type=self.type)


def get_rule(key: Optional[builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRuleResult:
    """
    Use this data source to get a Sonarqube rule resource

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarqube as sonarqube

    rule = sonarqube.get_rule(key="squid:forbidSonar")
    ```


    :param builtins.str key: The key of the sonarqube rule. Should be \\n\\n:\\n\\n. https://next.sonarqube.com/sonarqube/web_api/api/rules?query=api%2Frules%2Fcreate
    """
    __args__ = dict()
    __args__['key'] = key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sonarqube:index/getRule:getRule', __args__, opts=opts, typ=GetRuleResult).value

    return AwaitableGetRuleResult(
        id=pulumi.get(__ret__, 'id'),
        key=pulumi.get(__ret__, 'key'),
        markdown_description=pulumi.get(__ret__, 'markdown_description'),
        name=pulumi.get(__ret__, 'name'),
        severity=pulumi.get(__ret__, 'severity'),
        status=pulumi.get(__ret__, 'status'),
        template_key=pulumi.get(__ret__, 'template_key'),
        type=pulumi.get(__ret__, 'type'))
def get_rule_output(key: Optional[pulumi.Input[builtins.str]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRuleResult]:
    """
    Use this data source to get a Sonarqube rule resource

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarqube as sonarqube

    rule = sonarqube.get_rule(key="squid:forbidSonar")
    ```


    :param builtins.str key: The key of the sonarqube rule. Should be \\n\\n:\\n\\n. https://next.sonarqube.com/sonarqube/web_api/api/rules?query=api%2Frules%2Fcreate
    """
    __args__ = dict()
    __args__['key'] = key
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sonarqube:index/getRule:getRule', __args__, opts=opts, typ=GetRuleResult)
    return __ret__.apply(lambda __response__: GetRuleResult(
        id=pulumi.get(__response__, 'id'),
        key=pulumi.get(__response__, 'key'),
        markdown_description=pulumi.get(__response__, 'markdown_description'),
        name=pulumi.get(__response__, 'name'),
        severity=pulumi.get(__response__, 'severity'),
        status=pulumi.get(__response__, 'status'),
        template_key=pulumi.get(__response__, 'template_key'),
        type=pulumi.get(__response__, 'type')))
