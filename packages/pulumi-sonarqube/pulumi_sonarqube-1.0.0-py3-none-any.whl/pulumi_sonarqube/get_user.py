# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetUserResult',
    'AwaitableGetUserResult',
    'get_user',
    'get_user_output',
]

@pulumi.output_type
class GetUserResult:
    """
    A collection of values returned by getUser.
    """
    def __init__(__self__, email=None, id=None, is_local=None, login_name=None, name=None):
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_local and not isinstance(is_local, bool):
            raise TypeError("Expected argument 'is_local' to be a bool")
        pulumi.set(__self__, "is_local", is_local)
        if login_name and not isinstance(login_name, str):
            raise TypeError("Expected argument 'login_name' to be a str")
        pulumi.set(__self__, "login_name", login_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def email(self) -> builtins.str:
        """
        The email of the user
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isLocal")
    def is_local(self) -> builtins.bool:
        """
        Whether the user is local
        """
        return pulumi.get(self, "is_local")

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> builtins.str:
        """
        The login name of the user
        """
        return pulumi.get(self, "login_name")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the user
        """
        return pulumi.get(self, "name")


class AwaitableGetUserResult(GetUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserResult(
            email=self.email,
            id=self.id,
            is_local=self.is_local,
            login_name=self.login_name,
            name=self.name)


def get_user(login_name: Optional[builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserResult:
    """
    Use this data source to get a Sonarqube User resource

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarqube as sonarqube

    user = sonarqube.get_user(login_name="terraform-test")
    ```


    :param builtins.str login_name: The login name of the user
    """
    __args__ = dict()
    __args__['loginName'] = login_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sonarqube:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult).value

    return AwaitableGetUserResult(
        email=pulumi.get(__ret__, 'email'),
        id=pulumi.get(__ret__, 'id'),
        is_local=pulumi.get(__ret__, 'is_local'),
        login_name=pulumi.get(__ret__, 'login_name'),
        name=pulumi.get(__ret__, 'name'))
def get_user_output(login_name: Optional[pulumi.Input[builtins.str]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUserResult]:
    """
    Use this data source to get a Sonarqube User resource

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sonarqube as sonarqube

    user = sonarqube.get_user(login_name="terraform-test")
    ```


    :param builtins.str login_name: The login name of the user
    """
    __args__ = dict()
    __args__['loginName'] = login_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sonarqube:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult)
    return __ret__.apply(lambda __response__: GetUserResult(
        email=pulumi.get(__response__, 'email'),
        id=pulumi.get(__response__, 'id'),
        is_local=pulumi.get(__response__, 'is_local'),
        login_name=pulumi.get(__response__, 'login_name'),
        name=pulumi.get(__response__, 'name')))
