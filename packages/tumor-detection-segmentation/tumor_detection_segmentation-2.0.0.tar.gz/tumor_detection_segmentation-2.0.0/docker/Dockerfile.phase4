# Phase 4 Enhanced Dockerfile with Advanced Medical AI Integrations
# ==================================================================
# Includes nnU-Net, MONAI, and Detectron2 frameworks

FROM nvidia/cuda:11.8-devel-ubuntu20.04

# Prevent interactive installation prompts
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3.9 \
    python3.9-pip \
    python3.9-dev \
    git \
    wget \
    curl \
    build-essential \
    cmake \
    pkg-config \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libfontconfig1 \
    libglu1-mesa \
    libegl1-mesa \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libgtk-3-0 \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libatlas-base-dev \
    gfortran \
    libopenexr-dev \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer1.0-dev \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/*

# Create symbolic link for python
RUN ln -s /usr/bin/python3.9 /usr/bin/python

# Upgrade pip
RUN python -m pip install --upgrade pip setuptools wheel

# Install PyTorch with CUDA support (must be done before other packages)
RUN pip install torch==2.0.1+cu118 torchvision==0.15.2+cu118 \
    --index-url https://download.pytorch.org/whl/cu118

# Copy requirements files
COPY requirements.txt requirements-integrations.txt ./

# Install base requirements first
RUN pip install -r requirements.txt

# Install medical imaging dependencies
RUN pip install \
    SimpleITK>=2.0.0 \
    nibabel>=3.2.0 \
    pydicom>=2.3.0 \
    itk>=5.3.0 \
    medpy>=0.4.0

# Install nnU-Net framework
RUN pip install nnunetv2>=2.2.1 \
    dynamic-network-architectures>=0.2.0 \
    batchgenerators>=0.25.0

# Install MONAI with all features
RUN pip install "monai[all]>=1.3.0"

# Install Detectron2 (CPU version for compatibility)
RUN pip install detectron2 -f \
    https://dl.fbaipublicfiles.com/detectron2/wheels/cu118/torch2.0/index.html

# Install additional integration requirements
RUN pip install \
    fvcore>=0.1.5 \
    iopath>=0.1.7 \
    hydra-core>=1.1.0 \
    omegaconf>=2.1.0 \
    opencv-python>=4.5.0 \
    scikit-image>=0.19.0 \
    wandb>=0.13.0 \
    mlflow>=1.28.0

# Set up nnU-Net environment variables
ENV nnUNet_raw="/app/data/nnUNet_raw"
ENV nnUNet_preprocessed="/app/data/nnUNet_preprocessed"
ENV nnUNet_results="/app/models/nnUNet_results"

# Create necessary directories
RUN mkdir -p /app/data/nnUNet_raw \
    /app/data/nnUNet_preprocessed \
    /app/models/nnUNet_results \
    /app/models/monai_models \
    /app/models/detectron2_models \
    /app/logs \
    /app/outputs

# Copy source code
COPY src/ ./src/
COPY notebooks/ ./notebooks/
COPY config.json ./

# Set Python path
ENV PYTHONPATH="/app/src:$PYTHONPATH"

# Install project in development mode
RUN pip install -e .

# Verify installations
RUN python -c "import torch; print(f'PyTorch: {torch.__version__}, CUDA: {torch.cuda.is_available()}')" && \
    python -c "import nnunetv2; print('nnU-Net: OK')" && \
    python -c "import monai; print(f'MONAI: {monai.__version__}')" && \
    python -c "import detectron2; print('Detectron2: OK')"

# Set up entrypoint
COPY docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD python -c "import torch, nnunetv2, monai, detectron2; print('All frameworks OK')" || exit 1

ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]
CMD ["python", "-m", "src.main"]
