[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "amzn-sagemaker-checkpointing"
version = "1.0.11"
description = "Amazon SageMaker Checkpointing Library"
readme = "README.md"
license = { "text" = "Apache 2.0" }
dependencies = [
    "pytest",
    "mypy",
    "requests",
    "xxhash"
  # Put your dependencies here!
]
requires-python = ">=3.10"

[tool.hatch.envs.default]
# This controls what version of Python you want to be the default
# when running any scripts or tools to do things like debug test failures
# or do general development.  It's lockfile is ./requirements.txt
python = "3.12"
dependencies = [
    "pytest",
    "mypy",
    "torch",
    "s3torchconnector",
    "boto3",
    "botocore",
    "tenacity"
]

[tool.pytest.ini_options]
addopts = [
    "--durations=5",
    "--color=yes",
]
testpaths = [ "tests" ]

[tool.coverage.run]
source_pkgs = ["amzn_sagemaker_checkpointing"]
branch = true
parallel = true

[tool.coverage.paths]
"amzn_sagemaker_checkpointing" = ["src/amzn_sagemaker_checkpointing", "**/site-packages/amzn_sagemaker_checkpointing"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
show_missing = true
# fail_under = 99

[tool.coverage.xml]
output = "private/brazil-documentation/coverage/coverage.xml"

[tool.coverage.html]
directory = "private/brazil-documentation/coverage/"

[tool.ruff.lint]
isort.known-first-party = ["amzn_sagemaker_checkpointing"]
exclude = [ "./build", ".hatch", "private" ]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.hatch.build]
directory = "./build"

[tool.hatch.env]
requires = [ "hatch-pip-compile" ]

[tool.hatch.envs.default.scripts]
# These are scripts you can run using `brazil-build run <script-name>`
typing = [
  "mkdir -p .mypy_cache",
  "mypy --install-types --non-interactive src/amzn_sagemaker_checkpointing tests"
]

# This command is for updating all your lock files across all environments 
update = [ "hatch-pip-compile --upgrade --all" ]

generate-version = [ "hatch version | tail -1 > ./build/latest_version" ]

release = [
    "typing",
    "hatch test --all --cover",
    "mkdir -p ./build",
  	"generate-version",
]

[tool.hatch.envs.hatch-test]
dependencies = [
    "coverage-enable-subprocess==1.0",
    "coverage[toml]~=7.4",
    "pytest~=8.1",
    "pytest-mock~=3.12",
    "pytest-randomly~=3.15",
    "pytest-rerunfailures~=14.0",
    "pytest-xdist[psutil]~=3.5",
    "torch",
    "s3torchconnector",
    "boto3",
    "botocore",
    "tenacity"
]

[[tool.hatch.envs.hatch-test.matrix]]
# This defines multiple variables you can generate combinations
# to test underneath different environments.  A separate environment and 
# lock file will be created for every combination located in `./requirements/`
python = ["3.11", "3.12"]

## This environment is used solely to generate a lock file on hatch,
# and hatch-pip-compile that can be automatically updated
[tool.hatch.envs.build-tools]
# This version states what version your build tools build with.  To change it,
# you will need to:
# * Remove the `requirements/requirements-build-tools.txt` file
# * Run `brazil-build run update` to generate a new lock file for the environment
python = "3.12"
detached = true
skip-install = true
dependencies = [
  "hatch",
  "hatch-pip-compile",
  "torch",
]

# PeruHatch repository and package locking plugin
[tool.hatch.env.collectors.custom]
path = ".hatch/hatch_plugin.py"

# This is necessary to use 'uv' as the resolver if this is the top-level package
# in a monorepo (which is usually the case).  Remove this if copying the
# package into a monorepo
[tool.uv.workspace]
